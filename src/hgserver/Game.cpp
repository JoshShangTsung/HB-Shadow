#include "Game.h"
#include <cstring>
extern void PutLogList(const char * cMsg);
extern char G_cTxt[512];
extern char G_cData50000[50000];
extern void PutLogFileList(const char * cStr);
extern void PutAdminLogFileList(const char * cStr);
extern void PutItemLogFileList(const char * cStr);
extern void PutLogEventFileList(const char * cStr);
extern void PutHackLogFileList(const char * cStr);
extern void PutPvPLogFileList(const char * cStr);
extern FILE * pLogFile;
extern HWND G_hWnd;
int _tmp_iMoveLocX[9][37] = {
	// 0
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0},
	// 1
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
		10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
		20, -1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0},
	//2
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
		10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
		20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 20, 20, 20, 20, 20, -1},
	//3
	{20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 20, 20, 20, 20, 20, -1, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0},
	//4
	{20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 20, 20, 20, 20, 20, 19, 18, 17, 16,
		15, 14, 13, 12, 11, 10, 9, 8, 7, 6,
		5, 4, 3, 2, 1, 0, -1},
	//5
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
		10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
		20, -1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0},
	//6
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
		5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
		15, 16, 17, 18, 19, 20, -1},
	//7
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, -1, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0},
	//8
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
		5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
		15, 16, 17, 18, 19, 20, -1}
};
int _tmp_iMoveLocY[9][37] = {
	// 0
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0},
	//1
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, -1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0},
	//2
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
		10, 11, 12, 13, 14, 15, -1},
	//3
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
		10, 11, 12, 13, 14, 15, -1, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0},
	//4
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
		10, 11, 12, 13, 14, 15, 15, 15, 15, 15,
		15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
		15, 15, 15, 15, 15, 15, -1},
	//5
	{15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
		15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
		15, -1, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0},
	//6
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
		10, 11, 12, 13, 14, 15, 15, 15, 15, 15,
		15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
		15, 15, 15, 15, 15, 15, -1},
	//7
	{0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
		10, 11, 12, 13, 14, 15, -1, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0},
	// 8
	{15, 14, 13, 12, 11, 10, 9, 8, 7, 6,
		5, 4, 3, 2, 1, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, -1}
};
char _tmp_cTmpDirX[9] = {0, 0, 1, 1, 1, 0, -1, -1, -1};
char _tmp_cTmpDirY[9] = {0, -1, -1, 0, 1, 1, 1, 0, -1};
extern bool G_bIsThread;
extern void ThreadProc(void *ch);

CGame::CGame(HWND hWnd) {
	int i;
	int x;
	m_hWnd = hWnd;
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		m_pClientList[i] = 0;
	for (i = 0; i < DEF_MAXMAPS; i++)
		m_pMapList[i] = 0;
	for (i = 0; i < DEF_MAXITEMTYPES; i++)
		m_pItemConfigList[i] = 0;
	for (i = 0; i < DEF_MAXNPCTYPES; i++)
		m_pNpcConfigList[i] = 0;
	for (i = 0; i < DEF_MAXNPCS; i++)
		m_pNpcList[i] = 0;
	for (i = 0; i < DEF_MSGQUENESIZE; i++)
		m_pMsgQuene[i] = 0;
	for (i = 0; i < DEF_MAXMAGICTYPE; i++)
		m_pMagicConfigList[i] = 0;
	for (i = 0; i < DEF_MAXSKILLTYPE; i++)
		m_pSkillConfigList[i] = 0;
	for (i = 0; i < DEF_MAXQUESTTYPE; i++)
		m_pQuestConfigList[i] = 0;
	for (i = 0; i < DEF_MAXDYNAMICOBJECTS; i++)
		m_pDynamicObjectList[i] = 0;
	for (i = 0; i < DEF_MAXDELAYEVENTS; i++)
		m_pDelayEventList[i] = 0;
	for (i = 0; i < DEF_MAXNOTIFYMSGS; i++)
		m_pNoticeMsgList[i] = 0;
	for (i = 0; i < DEF_MAXFISHS; i++)
		m_pFish[i] = 0;
	for (i = 0; i < DEF_MAXMINERALS; i++)
		m_pMineral[i] = 0;
	for (i = 0; i < DEF_MAXPORTIONTYPES; i++) {
		m_pPortionConfigList[i] = 0;
		m_pCraftingConfigList[i] = 0;
	}
	for (i = 0; i < DEF_MAXSUBLOGSOCK; i++) {
		m_pSubLogSock[i] = 0;
		m_bIsSubLogSockAvailable[i] = false;
	}
	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		m_pBuildItemList[i] = 0;
	for (i = 0; i < DEF_MAXDUPITEMID; i++)
		m_pDupItemIDList[i] = 0;
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		m_stPartyInfo[i].iTotalMembers = 0;
		for (x = 0; x < DEF_MAXPARTYMEMBERS; x++)
			m_stPartyInfo[i].iIndex[x] = 0;
	}
	m_iQueneHead = 0;
	m_iQueneTail = 0;
	m_iTotalClients = 0;
	m_iMaxClients = 0;
	m_iTotalMaps = 0;
	m_MaxUserSysTime.wHour = 0;
	m_MaxUserSysTime.wMinute = 0;
	m_bIsServerShutdowned = false;
	m_cShutDownCode = 0;
	m_iMiddlelandMapIndex = -1;
	m_iAresdenOccupyTiles = 0;
	m_iElvineOccupyTiles = 0;
	m_iCurMsgs = 0;
	m_iMaxMsgs = 0;
	m_stCityStatus[1].iCrimes = 0;
	m_stCityStatus[1].iFunds = 0;
	m_stCityStatus[1].iWins = 0;
	m_stCityStatus[2].iCrimes = 0;
	m_stCityStatus[2].iFunds = 0;
	m_stCityStatus[2].iWins = 0;
	m_iAutoRebootingCount = 0;
	m_bEnemyKillMode = false;
	m_iEnemyKillAdjust = 1;
	m_bAdminSecurity = true;
	m_sRaidTimeMonday = 0;
	m_sRaidTimeTuesday = 0;
	m_sRaidTimeWednesday = 0;
	m_sRaidTimeThursday = 0;
	m_sRaidTimeFriday = 0;
	m_sRaidTimeSaturday = 0;
	m_sRaidTimeSunday = 0;
	m_sCharPointLimit = 0;
	m_sSlateSuccessRate = 0;
	m_bReceivedItemList = false;
}

CGame::~CGame() {
}

bool CGame::bAccept(XSocket * pXSock) {
	int i;
	XSocket * pTmpSock;
	if ((m_bIsLogSockAvailable == false) ||
			  (m_bIsItemAvailable == false) || (m_bIsNpcAvailable == false) ||
			  (m_bIsMagicAvailable == false) || (m_bIsSkillAvailable == false) ||
			  (m_bIsPortionAvailable == false) || (m_bOnExitProcess == true) ||
			  (m_bIsQuestAvailable == false) || (m_bIsBuildItemAvailable == false) ||
			  (m_bIsGameStarted == false))
		goto CLOSE_ANYWAY;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if (m_pClientList[i] == 0) {
			m_pClientList[i] = new CClient(m_hWnd);
			bAddClientShortCut(i);
			m_pClientList[i]->m_dwSPTime = m_pClientList[i]->m_dwMPTime =
					  m_pClientList[i]->m_dwHPTime = m_pClientList[i]->m_dwAutoSaveTime =
					  m_pClientList[i]->m_dwTime = m_pClientList[i]->m_dwHungerTime = m_pClientList[i]->m_dwExpStockTime =
					  m_pClientList[i]->m_dwRecentAttackTime = m_pClientList[i]->m_dwAutoExpTime = m_pClientList[i]->m_dwSpeedHackCheckTime = timeGetTime();
			pXSock->bAccept(m_pClientList[i]->m_pXSock, WM_ONCLIENTSOCKETEVENT + i);
			std::memset(m_pClientList[i]->m_cIPaddress, 0, sizeof(m_pClientList[i]->m_cIPaddress));
			m_pClientList[i]->m_pXSock->iGetPeerAddress(m_pClientList[i]->m_cIPaddress);
			wsprintf(G_cTxt, "<%d> Client Connected: (%s)", i, m_pClientList[i]->m_cIPaddress);
			PutLogList(G_cTxt);
			m_iTotalClients++;
			if (m_iTotalClients > m_iMaxClients) {
				m_iMaxClients = m_iTotalClients;
				//GetLocalTime(&m_MaxUserSysTime);
				//wsprintf(cTxt, "Maximum Players: %d", m_iMaxClients);
				//PutLogFileList(cTxt);
			}
			return true;
		}
CLOSE_ANYWAY:
	;
	pTmpSock = new XSocket(m_hWnd, DEF_SERVERSOCKETBLOCKLIMIT);
	pXSock->bAccept(pTmpSock, 0);
	delete pTmpSock;
	return false;
}

void CGame::OnClientSocketEvent(UINT message, WPARAM wParam, LPARAM lParam) {
	UINT iTmp;
	int iClientH;
	int iRet;
	uint32_t dwTime = timeGetTime();
	iTmp = WM_ONCLIENTSOCKETEVENT;
	iClientH = message - iTmp;
	if (m_pClientList[iClientH] == 0) return;
	iRet = m_pClientList[iClientH]->m_pXSock->iOnSocketEvent(wParam, lParam);
	switch (iRet) {
		case DEF_XSOCKEVENT_READCOMPLETE:
			OnClientRead(iClientH);
			m_pClientList[iClientH]->m_dwTime = timeGetTime();
			break;
		case DEF_XSOCKEVENT_BLOCK:
			PutLogList("Socket BLOCKED!");
			break;
		case DEF_XSOCKEVENT_CONFIRMCODENOTMATCH:
			wsprintf(G_cTxt, "<%d> Confirmcode notmatch!", iClientH);
			PutLogList(G_cTxt);
			DeleteClient(iClientH, false, true);
			break;
		case DEF_XSOCKEVENT_MSGSIZETOOLARGE:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			wsprintf(G_cTxt, "<%d> Client Disconnected! (%s)", iClientH, m_pClientList[iClientH]->m_cIPaddress);
			PutLogList(G_cTxt);
			if ((dwTime - m_pClientList[iClientH]->m_dwLogoutHackCheck) < 1000) {
				wsprintf(G_cTxt, "Logout Hack: (%s) Player: (%s) - disconnected within 10 seconds of most recent damage. Hack? Lag?", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
				PutHackLogFileList(G_cTxt);
			}
			DeleteClient(iClientH, true, true);
			break;
	}
}

bool CGame::bInit() {
	char cTxt[120];
	int i;
	SYSTEMTIME SysTime;
	uint32_t dwTime = timeGetTime();
	//m_Misc.Temp();
	PutLogList("(!) INITIALIZING GAME SERVER...");
	for (i = 0; i < DEF_MAXCLIENTS + 1; i++)
		m_iClientShortCut[i] = 0;
	delete m_pMainLogSock;
	for (i = 0; i < DEF_MAXSUBLOGSOCK; i++)
		delete m_pSubLogSock[i];
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		delete m_pClientList[i];
	for (i = 0; i < DEF_MAXNPCS; i++)
		delete m_pNpcList[i];
	for (i = 0; i < DEF_MAXMAPS; i++)
		delete m_pMapList[i];
	for (i = 0; i < DEF_MAXITEMTYPES; i++)
		delete m_pItemConfigList[i];
	for (i = 0; i < DEF_MAXNPCTYPES; i++)
		delete m_pNpcConfigList[i];
	for (i = 0; i < DEF_MAXMAGICTYPE; i++)
		delete m_pMagicConfigList[i];
	for (i = 0; i < DEF_MAXSKILLTYPE; i++)
		delete m_pSkillConfigList[i];
	for (i = 0; i < DEF_MAXQUESTTYPE; i++)
		delete m_pQuestConfigList[i];
	for (i = 0; i < DEF_MAXDYNAMICOBJECTS; i++)
		delete m_pDynamicObjectList[i];
	for (i = 0; i < DEF_MAXDELAYEVENTS; i++)
		delete m_pDelayEventList[i];
	for (i = 0; i < DEF_MAXNOTIFYMSGS; i++)
		delete m_pNoticeMsgList[i];
	for (i = 0; i < DEF_MAXFISHS; i++)
		delete m_pFish[i];
	for (i = 0; i < DEF_MAXMINERALS; i++)
		delete m_pMineral[i];
	for (i = 0; i < DEF_MAXPORTIONTYPES; i++) {
		delete m_pPortionConfigList[i];
		delete m_pCraftingConfigList[i];
	}
	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		delete m_pBuildItemList[i];
	for (i = 0; i < DEF_MAXNPCTYPES; i++)
		m_iNpcConstructionPoint[i] = 0;
	for (i = 0; i < DEF_MAXSCHEDULE; i++) {
		m_stCrusadeWarSchedule[i].iDay = -1;
		m_stCrusadeWarSchedule[i].iHour = -1;
		m_stCrusadeWarSchedule[i].iMinute = -1;
	}
	for (i = 0; i < DEF_MAXHELDENIAN; i++) {
		m_stHeldenianSchedule[i].iDay = -1;
		m_stHeldenianSchedule[i].StartiHour = -1;
		m_stHeldenianSchedule[i].StartiMinute = -1;
		m_stHeldenianSchedule[i].EndiHour = -1;
		m_stHeldenianSchedule[i].EndiMinute = -1;
	}
	m_iNpcConstructionPoint[1] = 100; // MS
	m_iNpcConstructionPoint[2] = 100; // MS
	m_iNpcConstructionPoint[3] = 100; // MS
	m_iNpcConstructionPoint[4] = 100; // MS
	m_iNpcConstructionPoint[5] = 100; // MS
	m_iNpcConstructionPoint[6] = 100; // MS
	m_iNpcConstructionPoint[43] = 1000; // LWB
	m_iNpcConstructionPoint[44] = 2000; // GHK
	m_iNpcConstructionPoint[45] = 3000; // GHKABS
	m_iNpcConstructionPoint[46] = 2000; // TK
	m_iNpcConstructionPoint[47] = 3000; // BG
	m_iNpcConstructionPoint[51] = 1500; // Catapult

	ReadMajesticSettings();
	m_bIsGameStarted = false;
	m_pMainLogSock = 0;
	m_bIsLogSockAvailable = false;
	m_bIsItemAvailable = false;
	m_bIsBuildItemAvailable = false;
	m_bIsNpcAvailable = false;
	m_bIsMagicAvailable = false;
	m_bIsSkillAvailable = false;
	m_bIsQuestAvailable = false;
	m_bIsPortionAvailable = false;
	std::memset(m_cServerName, 0, sizeof(m_cServerName));
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		m_pClientList[i] = 0;
	for (i = 0; i < DEF_MAXMAPS; i++)
		m_pMapList[i] = 0;
	for (i = 0; i < DEF_MAXITEMTYPES; i++)
		m_pItemConfigList[i] = 0;
	for (i = 0; i < DEF_MAXNPCTYPES; i++)
		m_pNpcConfigList[i] = 0;
	for (i = 0; i < DEF_MAXNPCS; i++)
		m_pNpcList[i] = 0;
	for (i = 0; i < DEF_MSGQUENESIZE; i++)
		m_pMsgQuene[i] = 0;
	for (i = 0; i < DEF_MAXMAGICTYPE; i++)
		m_pMagicConfigList[i] = 0;
	for (i = 0; i < DEF_MAXSKILLTYPE; i++)
		m_pSkillConfigList[i] = 0;
	for (i = 0; i < DEF_MAXQUESTTYPE; i++)
		m_pQuestConfigList[i] = 0;
	for (i = 0; i < DEF_MAXDYNAMICOBJECTS; i++)
		m_pDynamicObjectList[i] = 0;
	for (i = 0; i < DEF_MAXDELAYEVENTS; i++)
		m_pDelayEventList[i] = 0;
	for (i = 0; i < DEF_MAXNOTIFYMSGS; i++)
		m_pNoticeMsgList[i] = 0;
	for (i = 0; i < DEF_MAXFISHS; i++)
		m_pFish[i] = 0;
	for (i = 0; i < DEF_MAXMINERALS; i++)
		m_pMineral[i] = 0;
	for (i = 0; i < DEF_MAXPORTIONTYPES; i++) {
		m_pPortionConfigList[i] = 0;
		m_pCraftingConfigList[i] = 0;
	}
	for (i = 0; i < DEF_MAXSUBLOGSOCK; i++) {
		m_pSubLogSock[i] = 0;
		m_bIsSubLogSockAvailable[i] = false;
	}
	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		m_pBuildItemList[i] = 0;
	for (i = 0; i < DEF_MAXCRUSADESTRUCTURES; i++) {
		std::memset(m_stCrusadeStructures[i].cMapName, 0, sizeof(m_stCrusadeStructures[i].cMapName));
		m_stCrusadeStructures[i].cType = 0;
		m_stCrusadeStructures[i].dX = 0;
		m_stCrusadeStructures[i].dY = 0;
	}
	for (i = 0; i < DEF_MAXADMINS; i++) {
		std::memset(m_stAdminList[i].m_cGMName, 0, sizeof(m_stAdminList[i].m_cGMName));
	}
	for (i = 0; i < DEF_MAXBANNED; i++) {
		std::memset(m_stBannedList[i].m_cBannedIPaddress, 0, sizeof(m_stBannedList[i].m_cBannedIPaddress));
	}
	for (i = 0; i < DEF_MAXGUILDS; i++)
		m_pGuildTeleportLoc[i].m_iV1 = 0;
	for (i = 0; i < DEF_MAXCRUSADESTRUCTURES; i++) {
		m_stMiddleCrusadeStructureInfo[i].cType = NpcType::none;
		m_stMiddleCrusadeStructureInfo[i].cSide = 0;
		m_stMiddleCrusadeStructureInfo[i].sX = 0;
		m_stMiddleCrusadeStructureInfo[i].sY = 0;
	}
	m_iTotalMiddleCrusadeStructures = 0;
	m_pNoticementData = 0;
	m_iQueneHead = 0;
	m_iQueneTail = 0;
	m_iTotalClients = 0;
	m_iMaxClients = 0;
	m_iTotalMaps = 0;
	m_MaxUserSysTime.wHour = 0;
	m_MaxUserSysTime.wMinute = 0;
	m_bIsServerShutdowned = false;
	m_cShutDownCode = 0;
	m_iMiddlelandMapIndex = -1;
	m_iAresdenMapIndex = -1;
	m_iElvineMapIndex = -1;
	m_iBTFieldMapIndex = -1;
	m_iGodHMapIndex = -1;
	m_iAresdenOccupyTiles = 0;
	m_iElvineOccupyTiles = 0;
	m_iSubLogSockInitIndex = 0;
	m_iCurMsgs = 0;
	m_iMaxMsgs = 0;
	m_stCityStatus[1].iCrimes = 0;
	m_stCityStatus[1].iFunds = 0;
	m_stCityStatus[1].iWins = 0;
	m_stCityStatus[2].iCrimes = 0;
	m_stCityStatus[2].iFunds = 0;
	m_stCityStatus[2].iWins = 0;
	m_iStrategicStatus = 0;
	m_iCollectedMana[0] = 0;
	m_iCollectedMana[1] = 0;
	m_iCollectedMana[2] = 0;
	m_iAresdenMana = 0;
	m_iElvineMana = 0;
	m_dwSpecialEventTime = m_dwWhetherTime = m_dwGameTime1 =
			  m_dwGameTime2 = m_dwGameTime3 = m_dwGameTime4 = m_dwGameTime5 = m_dwGameTime6 = m_dwFishTime = dwTime;
	m_bIsSpecialEventTime = false;
	GetLocalTime(&SysTime);
	m_dwCanFightzoneReserveTime = dwTime - ((SysTime.wHour % 2)*60 * 60 + SysTime.wMinute * 60) *1000;
	for (i = 0; i < DEF_MAXFIGHTZONE; i++)
		m_iFightZoneReserve[i] = 0;
	m_iFightzoneNoForceRecall = 0;
	for (i = 1; i < 3500; i++) {
		m_iLevelExpTable[i] = iGetLevelExp(i);
		//testcode
		//wsprintf(G_cTxt, "Level:%d --- Exp:%d", i, m_iLevelExpTable[i]);
		//PutLogFileList(G_cTxt);
	}
	m_iLimitedUserExp = m_iLevelExpTable[DEF_LEVELLIMIT + 1];
	m_iLevelExp20 = m_iLevelExpTable[20];
	m_iGameServerMode = 0;
	if (bReadProgramConfigFile("GServer.cfg") == false) {
		PutLogList(" ");
		PutLogList("(!!!) CRITICAL ERROR! Cannot execute server! GServer.cfg file contents error!");
		return false;
	}
	if (bReadSettingsConfigFile("..\\GameConfigs\\Settings.cfg") == false) {
		;
		PutLogList(" ");
		PutLogList("(!!!) CRITICAL ERROR! Cannot execute server! Settings.cfg file contents error!");
		return false;
	}
	if (bReadBallSystemConfigFile("..\\GameConfigs\\BallItems.cfg") == false) {
		PutLogList(" ");
		PutLogList("(!!!) CRITICAL ERROR! Cannot execute server! AdminSettings.cfg file contents error!");
		return false;
	}
	if (bReadAdminListConfigFile("..\\GameConfigs\\AdminList.cfg") == false) {
		;
		PutLogList(" ");
		PutLogList("(!!!) CRITICAL ERROR! Cannot execute server! AdminList.cfg file contents error!");
		return false;
	}
	if (bReadBannedListConfigFile("..\\GameConfigs\\BannedList.cfg") == false) {
		;
		PutLogList(" ");
		PutLogList("(!!!) CRITICAL ERROR! Cannot execute server! BannedList.cfg file contents error!");
		return false;
	}
	if (bReadAdminSetConfigFile("..\\GameConfigs\\AdminSettings.cfg") == false) {
		;
		PutLogList(" ");
		PutLogList("(!!!) CRITICAL ERROR! Cannot execute server! AdminSettings.cfg file contents error!");
		return false;
	}
	srand((unsigned) time(0));
	m_pMainLogSock = new XSocket(m_hWnd, DEF_SERVERSOCKETBLOCKLIMIT);
	m_pMainLogSock->bConnect(m_cLogServerAddr, m_iLogServerPort, WM_ONLOGSOCKETEVENT);
	m_pMainLogSock->bInitBufferSize(DEF_MSGBUFFERSIZE);
	wsprintf(cTxt, "(!) Try to Connect main-log-socket... Addr:%s  Port:%d", m_cLogServerAddr, m_iLogServerPort);
	PutLogList(cTxt);
	//Sleep(100);
	m_bF1pressed = m_bF4pressed = m_bF12pressed = m_bF5pressed = false;
	m_bOnExitProcess = false;
	for (i = 0; i <= 100; i++) {
		m_iSkillSSNpoint[i] = _iCalcSkillSSNpoint(i);
	}
	GetLocalTime(&SysTime);
	if (SysTime.wMinute >= DEF_NIGHTTIME)
		m_cDayOrNight = 2;
	else m_cDayOrNight = 1;
	bReadNotifyMsgListFile("notice.txt");
	m_dwNoticeTime = dwTime;
	m_iCurSubLogSockIndex = 0;
	m_iSubLogSockFailCount = 0;
	m_iSubLogSockActiveCount = 0;
	m_pNoticementData = 0;
	m_dwNoticementDataSize = 0;
	m_dwMapSectorInfoTime = dwTime;
	m_iMapSectorInfoUpdateCount = 0;
	m_iCrusadeCount = 0;
	m_bIsCrusadeMode = false;
	m_bIsApocalypseMode = false;
	m_dwCrusadeGUID = 0;
	m_iCrusadeWinnerSide = 0;
	m_iLastCrusadeWinner = 0;
	m_sLastCrusadeDate = -1;
	m_iFinalShutdownCount = 0;
	m_bIsCrusadeWarStarter = false;
	m_iLatestCrusadeDayOfWeek = -1;
	//Heldenian 3.00 Sources
	m_dwHeldenianGUID = 0;
	m_bHeldinianDuty = 0; // new
	m_bHeldenianDutyMultiplyer = 1; // new
	m_cHeldenianModeType = 0;
	m_bIsHeldenianMode = false;
	m_bHeldenianRunning = false;
	m_bHeldenianInitiated = false;
	m_iHeldenianAresdenLeftTower = 0;
	m_iHeldenianElvineLeftTower = 0;
	m_iHeldenianAresdenDead = 0;
	m_iHeldenianElvineDead = 0;
	m_bIsHeldenianReady = false; // new
	m_sLastHeldenianWinner = 0; // new
	std::memset(m_cHeldenianMapName, 0, sizeof(m_cHeldenianMapName)); // new
	//50Cent - Capture The Flag
	m_sFlagCountWin = 0;
	m_bIsCTFMode = false;
	m_bIsElvineFlagCaptured = false;
	m_bIsAresdenFlagCaptured = false;
	m_iFlagCarrierIndex = -1;
	return true;
}

void CGame::OnClientRead(int iClientH) {
	char * pData, cKey;
	uint32_t dwMsgSize;
	if (m_pClientList[iClientH] == 0) return;
	pData = m_pClientList[iClientH]->m_pXSock->pGetRcvDataPointer(&dwMsgSize, &cKey); // v1.4
	if (bPutMsgQuene(DEF_MSGFROM_CLIENT, pData, dwMsgSize, iClientH, cKey) == false) {
		PutLogList("@@@@@@ CRITICAL ERROR in MsgQuene!!! @@@@@@");
	}
}

void CGame::DisplayInfo(HDC hdc) {
	char cTxt[350];
	int i;
	int iLine;
	wsprintf(cTxt, "Server-Name(%s) Max.Level(%d) Players(%d/%d) Crusade(%d:%d) SLSock(%d:%d) RBT(%d)", m_cServerName, m_iPlayerMaxLevel, m_iTotalClients, m_iMaxClients, m_dwCrusadeGUID, (int) m_bIsCrusadeMode, m_iSubLogSockActiveCount, m_iSubLogSockFailCount, m_iAutoRebootingCount);
	TextOut(hdc, 5, 10, cTxt, strlen(cTxt));
	//#ifdef DEF_TESTSERVER
	//	std::memset(cTxt, 0, sizeof(cTxt));
	//	TextOut(hdc, 5, 25, cTxt, strlen(cTxt));
	//#endif
	const char text[] = " ********* Helbreath Shadow **********";
	TextOut(hdc, 5, 25, text, strlen(text));
	iLine = 0;
	for (i = 0; i < DEF_MAXMAPS; i++)
		if (m_pMapList[i] != 0) {
			std::memset(G_cTxt, 0, sizeof(G_cTxt));
			wsprintf(G_cTxt, "Map(%s)    Object(%d)    P(%d, %d)    N(%d, %d)    A(%d, %d)    E(%d, %d)    M(%d, %d)",
					  m_pMapList[i]->m_cName, m_pMapList[i]->m_iTotalActiveObject, m_pMapList[i]->m_iMaxPx * 20 + 10, m_pMapList[i]->m_iMaxPy * 20 + 10,
					  m_pMapList[i]->m_iMaxNx * 20 + 10, m_pMapList[i]->m_iMaxNy * 20 + 10, m_pMapList[i]->m_iMaxAx * 20 + 10, m_pMapList[i]->m_iMaxAy * 20 + 10,
					  m_pMapList[i]->m_iMaxEx * 20 + 10, m_pMapList[i]->m_iMaxEy * 20 + 10, m_pMapList[i]->m_iMaxMx * 20 + 10, m_pMapList[i]->m_iMaxMy * 20 + 10);
			TextOut(hdc, 5, 400 + iLine * 15, G_cTxt, strlen(G_cTxt));
			iLine++;
		}
}

void CGame::ClientMotionHandler(int iClientH, char * pData) {
	uint32_t * dwp, dwClientTime;
	uint16_t * wp, wCommand, wTargetObjectID;
	short * sp, sX, sY, dX, dY, wType;
	char * cp, cDir;
	int iRet;
	int iTemp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	m_pClientList[iClientH]->m_dwLastActionTime = m_pClientList[iClientH]->m_dwAFKCheckTime = timeGetTime();
	/*m_pClientList[iClientH]->m_cConnectionCheck++;
	if (m_pClientList[iClientH]->m_cConnectionCheck > 50) {
		wsprintf(G_cTxt, "Hex: (%s) Player: (%s) - removed 03203203h, vital to hack detection.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
		PutHackLogFileList(G_cTxt);
		DeleteClient(iClientH, true, true);
		return;
	}*/
	wp = (uint16_t *) (pData + DEF_INDEX2_MSGTYPE);
	wCommand = *wp;
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *) cp;
	sX = *sp;
	cp += 2;
	sp = (short *) cp;
	sY = *sp;
	cp += 2;
	cDir = *cp;
	cp++;
	sp = (short *) cp;
	dX = *sp;
	cp += 2;
	sp = (short *) cp;
	dY = *sp;
	cp += 2;
	sp = (short *) cp;
	wType = *sp;
	cp += 2;
	if ((wCommand == DEF_OBJECTATTACK) || (wCommand == DEF_OBJECTATTACKMOVE)) { // v1.4
		wp = (uint16_t *) cp;
		wTargetObjectID = *wp;
		cp += 2;
	}
	// v2.171
	dwp = (uint32_t *) cp;
	dwClientTime = *dwp;
	cp += 4;
	CheckDenialServiceAttack(iClientH, dwClientTime);
	switch (wCommand) {
		case DEF_OBJECTSTOP:
			iRet = iClientMotion_Stop_Handler(iClientH, sX, sY, cDir);
			if (iRet == 1) {
				SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTSTOP, 0, 0, 0);
			} else if (iRet == 2) SendObjectMotionRejectMsg(iClientH);
			break;
		case DEF_OBJECTRUN:
			iRet = iClientMotion_Move_Handler(iClientH, sX, sY, cDir, 1);
			if (iRet == 1) {
				SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTRUN, 0, 0, 0);
			}
			if ((m_pClientList[iClientH] != 0) && (m_pClientList[iClientH]->m_iHP <= 0)) ClientKilledHandler(iClientH, 0, 0, 1); // v1.4
			// v2.171
			bCheckClientMoveFrequency(iClientH, dwClientTime);
			break;
		case DEF_OBJECTMOVE:
			iRet = iClientMotion_Move_Handler(iClientH, sX, sY, cDir, 2);
			if (iRet == 1) {
				SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTMOVE, 0, 0, 0);
			}
			if ((m_pClientList[iClientH] != 0) && (m_pClientList[iClientH]->m_iHP <= 0)) ClientKilledHandler(iClientH, 0, 0, 1); // v1.4
			// v2.171
			bCheckClientMoveFrequency(iClientH, dwClientTime);
			break;
		case DEF_OBJECTDAMAGEMOVE:
			iRet = iClientMotion_Move_Handler(iClientH, sX, sY, cDir, 0);
			if (iRet == 1) {
				SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGEMOVE, m_pClientList[iClientH]->m_iLastDamage, 0, 0);
			}
			if ((m_pClientList[iClientH] != 0) && (m_pClientList[iClientH]->m_iHP <= 0)) ClientKilledHandler(iClientH, 0, 0, 1); // v1.4
			break;
		case DEF_OBJECTATTACKMOVE:
			iRet = iClientMotion_Move_Handler(iClientH, sX, sY, cDir, 0);
			if ((iRet == 1) && (m_pClientList[iClientH] != 0)) {
				SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTATTACKMOVE, 0, 0, 0);
				iClientMotion_Attack_Handler(iClientH, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, dX, dY, wType, cDir, wTargetObjectID, false, true); // v1.4
			}
			if ((m_pClientList[iClientH] != 0) && (m_pClientList[iClientH]->m_iHP <= 0)) ClientKilledHandler(iClientH, 0, 0, 1); // v1.4
			// v2.171
			bCheckClientAttackFrequency(iClientH, dwClientTime);
			break;
		case DEF_OBJECTATTACK:
			_CheckAttackType(iClientH, &wType);
			iRet = iClientMotion_Attack_Handler(iClientH, sX, sY, dX, dY, wType, cDir, wTargetObjectID); // v1.4
			if (iRet == 1) {
				if (wType >= 20) {
					m_pClientList[iClientH]->m_iSuperAttackLeft--;
					if (m_pClientList[iClientH]->m_iSuperAttackLeft < 0) m_pClientList[iClientH]->m_iSuperAttackLeft = 0;
				}
				SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, dX, dY, wType);
			} else if (iRet == 2) SendObjectMotionRejectMsg(iClientH);
			// v2.171
			bCheckClientAttackFrequency(iClientH, dwClientTime);
			break;
		case DEF_OBJECTGETITEM:
			iRet = iClientMotion_GetItem_Handler(iClientH, sX, sY, cDir);
			if (iRet == 1) {
				SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTGETITEM, 0, 0, 0);
			} else if (iRet == 2) SendObjectMotionRejectMsg(iClientH);
			break;
		case DEF_OBJECTMAGIC:
			iRet = iClientMotion_Magic_Handler(iClientH, sX, sY, cDir);
			//client hp recorded here ONLY if its less than
			if (iRet == 1) {
				if (m_pClientList[iClientH]->m_bMagicPauseTime == false) {
					m_pClientList[iClientH]->m_bMagicPauseTime = true;
					iTemp = 10;
					SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTMAGIC, dX, iTemp, 0);
					m_pClientList[iClientH]->m_iSpellCount++;
					bCheckClientMagicFrequency(iClientH, dwClientTime);
				} else if (m_pClientList[iClientH]->m_bMagicPauseTime == true) {
					wsprintf(G_cTxt, "Cast Delay Hack: (%s) Player: (%s) - player casting too fast.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
					PutHackLogFileList(G_cTxt);
					DeleteClient(iClientH, true, true);
				}
			} else if (iRet == 2) SendObjectMotionRejectMsg(iClientH);
			break;
		default:
			break;
	}
}
//  int CGame::iClientMotion_Move_Handler(int iClientH, short sX, short sY, char cDir, char cMoveType)
//  description			:: Handles how player or npc run, walk, attack, or get flown by attack
//  last updated		:: October 30, 2004; 1:52 AM; Hypnotoad
//	return value		:: int
//  commentary			:: - contains speed hack detection previously unavailable
//						   - changed variable 5 to char, prior bool.
//								1 = object run
//								2 = object malk
//								0 = object damage move, object attack move
//						   - fixed bump bug removing aura
// Missing 3.51:
//			m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->3CA18h
// 			bRet = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->sub_4C0F20(dX, dY, cTemp, wV1, wV2);

int CGame::iClientMotion_Move_Handler(int iClientH, short sX, short sY, char cDir, char cMoveType) {
	char * cp, cData[3000];
	CTile * pTile;
	uint32_t * dwp;
	uint16_t * wp, wObjectID;
	short * sp, dX, dY, sTemp, sTemp2, sDOtype, pTopItem;
	int * ip, iRet, iSize, iDamage;
	bool bRet;
	bool bIsBlocked = false;
	if (m_pClientList[iClientH] == 0) return 0;
	if ((cDir <= 0) || (cDir > 8)) return 0;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return 0;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return 0;
	if ((sX != m_pClientList[iClientH]->m_sX) || (sY != m_pClientList[iClientH]->m_sY)) return 2;
	/*dwTime = timeGetTime();
	m_pClientList[iClientH]->m_dwLastActionTime = dwTime;
	if (cMoveType == 2) {
		if (m_pClientList[iClientH]->m_iRecentWalkTime > dwTime) {
			m_pClientList[iClientH]->m_iRecentWalkTime = dwTime;
			if (m_pClientList[iClientH]->m_sV1 < 1) {
				if (m_pClientList[iClientH]->m_iRecentWalkTime < dwTime) {
					m_pClientList[iClientH]->m_sV1++;
				}
				else {
					bIsBlocked = true;
					m_pClientList[iClientH]->m_sV1 = 0;
				}
			}
		m_pClientList[iClientH]->m_iRecentWalkTime = dwTime;
		}
		if (bIsBlocked == false) m_pClientList[iClientH]->m_iMoveMsgRecvCount++;
		if (m_pClientList[iClientH]->m_iMoveMsgRecvCount >= 3) {
			if (m_pClientList[iClientH]->m_dwMoveLAT != 0) {
				if ((dwTime - m_pClientList[iClientH]->m_dwMoveLAT) < (590)) {
					//wsprintf(G_cTxt, "3.51 Walk Speeder: (%s) Player: (%s) walk difference: %d. Speed Hack?", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, dwTime - m_pClientList[iClientH]->m_dwMoveLAT);
					//PutHackLogFileList(G_cTxt);
					bIsBlocked = true;
				}
			}
			m_pClientList[iClientH]->m_dwMoveLAT = dwTime;
			m_pClientList[iClientH]->m_iMoveMsgRecvCount = 0;
		}
	}
	else if (cMoveType == 1) {
		if (m_pClientList[iClientH]->m_iRecentRunTime > dwTime) {
			m_pClientList[iClientH]->m_iRecentRunTime = dwTime;
			if (m_pClientList[iClientH]->m_sV1 < 1) {
				if (m_pClientList[iClientH]->m_iRecentRunTime < dwTime) {
					m_pClientList[iClientH]->m_sV1++;
				}
				else {
					bIsBlocked = true;
					m_pClientList[iClientH]->m_sV1 = 0;
				}
			}
		m_pClientList[iClientH]->m_iRecentRunTime = dwTime;
		}
		if (bIsBlocked == false) m_pClientList[iClientH]->m_iRunMsgRecvCount++;
		if (m_pClientList[iClientH]->m_iRunMsgRecvCount >= 3) {
			if (m_pClientList[iClientH]->m_dwRunLAT != 0) {
				if ((dwTime - m_pClientList[iClientH]->m_dwRunLAT) < (290)) {
					//wsprintf(G_cTxt, "3.51 Run Speeder: (%s) Player: (%s) run difference: %d. Speed Hack?", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, dwTime - m_pClientList[iClientH]->m_dwRunLAT);
					//PutHackLogFileList(G_cTxt);
					bIsBlocked = true;
				}
			}
			m_pClientList[iClientH]->m_dwRunLAT	= dwTime;
			m_pClientList[iClientH]->m_iRunMsgRecvCount = 0;
		}
	}*/
	int iStX;
	int iStY;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex] != 0) {
		iStX = m_pClientList[iClientH]->m_sX / 20;
		iStY = m_pClientList[iClientH]->m_sY / 20;
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iPlayerActivity++;
		switch (m_pClientList[iClientH]->m_cSide) {
			case 0: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iNeutralActivity++;
				break;
			case 1: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iAresdenActivity++;
				break;
			case 2: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iElvineActivity++;
				break;
		}
	}
	ClearSkillUsingStatus(iClientH);
	dX = m_pClientList[iClientH]->m_sX;
	dY = m_pClientList[iClientH]->m_sY;
	switch (cDir) {
		case 1: dY--;
			break;
		case 2: dX++;
			dY--;
			break;
		case 3: dX++;
			break;
		case 4: dX++;
			dY++;
			break;
		case 5: dY++;
			break;
		case 6: dX--;
			dY++;
			break;
		case 7: dX--;
			break;
		case 8: dX--;
			dY--;
			break;
	}
	pTopItem = 0;
	bRet = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bGetMoveable(dX, dY, &sDOtype, &pTopItem);
	if (m_pClientList[iClientH]->m_cMagicEffectStatus[DEF_MAGICTYPE_HOLDOBJECT] != 0)
		bRet = false;
	if ((bRet == true) && (bIsBlocked == false)) {
		if (m_pClientList[iClientH]->m_iQuest != 0) _bCheckIsQuestCompleted(iClientH);
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->ClearOwner(1, iClientH, DEF_OWNERTYPE_PLAYER, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
		m_pClientList[iClientH]->m_sX = dX;
		m_pClientList[iClientH]->m_sY = dY;
		m_pClientList[iClientH]->m_cDir = cDir;
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetOwner((short) iClientH,
				  DEF_OWNERTYPE_PLAYER,
				  dX, dY);
		if (sDOtype == DEF_DYNAMICOBJECT_SPIKE) {
			if ((m_pClientList[iClientH]->m_bIsNeutral == true) && ((m_pClientList[iClientH]->m_sAppr2 & 0xF000) == 0)) {
			} else {
				iDamage = iDice(2, 4);
				if (m_pClientList[iClientH]->m_iAdminUserLevel == 0)
					m_pClientList[iClientH]->m_iHP -= iDamage;
			}
		}
		if (m_pClientList[iClientH]->m_iHP <= 0) m_pClientList[iClientH]->m_iHP = 0;
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_RESPONSE_MOTION;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_OBJECTMOVE_CONFIRM;
		cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
		sp = (short *) cp;
		*sp = (short) (dX - 10);
		cp += 2;
		sp = (short *) cp;
		*sp = (short) (dY - 7);
		cp += 2;
		*cp = cDir;
		cp++;
		if (cMoveType == 1) {
			if (m_pClientList[iClientH]->m_iSP > 0) {
				*cp = 0;
				if (m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar == 0) {
					m_pClientList[iClientH]->m_iSP--;
					*cp = 1;
				}
			} else {
				*cp = 0;
				if (m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar == 0) {
					m_pClientList[iClientH]->m_iSP--;
					*cp = 1;
				}
				if (m_pClientList[iClientH]->m_iSP < -10) {
					m_pClientList[iClientH]->m_iSP = 0;
					DeleteClient(iClientH, true, true);
					return 0;
				}
			}
		} else *cp = 0;
		cp++;
		pTile = (CTile *) (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_pTile + dX + dY * m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_sSizeY);
		*cp = (char) pTile->m_iOccupyStatus;
		cp++;
		ip = (int *) cp;
		*ip = m_pClientList[iClientH]->m_iHP;
		cp += 4;
		iSize = iComposeMoveMapData((short) (dX - 10), (short) (dY - 7), iClientH, cDir, cp);
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, iSize + 12 + 1 + 4);
		switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
			case DEF_XSOCKEVENT_SOCKETCLOSED:
				DeleteClient(iClientH, true, true);
				return 0;
		}
		/*if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->3CA18h == true) {
			.text:00406037                 mov     [ebp+var_C1C], 0
			.text:0040603E                 xor     edx, edx
			.text:00406040                 mov     [ebp+var_C1B], edx
			.text:00406046                 mov     [ebp+var_C17], edx
			.text:0040604C                 mov     [ebp+var_C13], dx
			bRet = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->sub_4C0F20(dX, dY, cTemp, wV1, wV2);
			if (bRet == 1) {
				RequestTeleportHandler(iClientH, "2   ", cTemp, wV1, wV2);
			}
		}*/
	} else {
		m_pClientList[iClientH]->m_bIsMoveBlocked = true;
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_RESPONSE_MOTION;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_OBJECTMOVE_REJECT;
		if (bIsBlocked == true) {
			m_pClientList[iClientH]->m_dwAttackLAT = 1050;
		}
		m_pClientList[iClientH]->m_dwAttackLAT = 1010;
		wObjectID = (uint16_t) iClientH;
		cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
		wp = (uint16_t *) cp;
		*wp = wObjectID;
		cp += 2;
		sp = (short *) cp;
		sX = m_pClientList[wObjectID]->m_sX;
		*sp = sX;
		cp += 2;
		sp = (short *) cp;
		sY = m_pClientList[wObjectID]->m_sY;
		*sp = sY;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[wObjectID]->m_sType;
		cp += 2;
		*cp = m_pClientList[wObjectID]->m_cDir;
		cp++;
		memcpy(cp, m_pClientList[wObjectID]->m_cCharName, 10);
		cp += 10;
		sp = (short *) cp;
		*sp = m_pClientList[wObjectID]->m_sAppr1;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[wObjectID]->m_sAppr2;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[wObjectID]->m_sAppr3;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[wObjectID]->m_sAppr4;
		cp += 2;
		ip = (int *) cp;
		*ip = m_pClientList[wObjectID]->m_iApprColor;
		cp += 4;
		ip = (int *) cp;
		sTemp = m_pClientList[wObjectID]->m_iStatus;
		sTemp = 0x0FFFFFFF & sTemp;
		sTemp2 = iGetPlayerABSStatus(wObjectID, iClientH);
		sTemp = (sTemp | (sTemp2 << 28));
		*ip = sTemp;
		cp += 4;
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 42);
		switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
			case DEF_XSOCKEVENT_SOCKETCLOSED:
				DeleteClient(iClientH, true, true);
				return 0;
		}
		return 0;
	}
	SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
	return 1;
}

void CGame::RequestInitPlayerHandler(int iClientH, char * pData, char cKey) {
	int i;
	char * cp, cCharName[11], cAccountName[11], cAccountPassword[11], cTxt[120];
	bool bIsObserverMode;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == true) return;
	std::memset(cCharName, 0, sizeof(cCharName));
	std::memset(cAccountName, 0, sizeof(cAccountName));
	std::memset(cAccountPassword, 0, sizeof(cAccountPassword));
	std::memset(m_pClientList[iClientH]->m_cCharName, 0, sizeof(m_pClientList[iClientH]->m_cCharName));
	std::memset(m_pClientList[iClientH]->m_cAccountName, 0, sizeof(m_pClientList[iClientH]->m_cAccountName));
	std::memset(m_pClientList[iClientH]->m_cAccountPassword, 0, sizeof(m_pClientList[iClientH]->m_cAccountPassword));
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cCharName, cp, 10);
	cp += 10;
	std::memset(cTxt, 0, sizeof(cTxt)); // v1.4
	memcpy(cTxt, cCharName, 10);
	m_Misc.bDecode(cKey, cTxt);
	std::memset(cCharName, 0, sizeof(cCharName));
	memcpy(cCharName, cTxt, 10);
	//testcode
	if (strlen(cTxt) == 0) PutLogList("RIPH - cTxt: Char 0!");
	memcpy(cAccountName, cp, 10);
	cp += 10;
	std::memset(cTxt, 0, sizeof(cTxt)); // v1.4
	memcpy(cTxt, cAccountName, 10);
	m_Misc.bDecode(cKey, cTxt);
	std::memset(cAccountName, 0, sizeof(cAccountName));
	memcpy(cAccountName, cTxt, 10);
	memcpy(cAccountPassword, cp, 10);
	cp += 10;
	std::memset(cTxt, 0, sizeof(cTxt)); // v1.4
	memcpy(cTxt, cAccountPassword, 10);
	m_Misc.bDecode(cKey, cTxt);
	std::memset(cAccountPassword, 0, sizeof(cAccountPassword));
	memcpy(cAccountPassword, cTxt, 10);
	bIsObserverMode = (bool) * cp;
	cp++;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (iClientH != i) && (memcmp(m_pClientList[i]->m_cAccountName, cAccountName, 10) == 0)) {
			if (memcmp(m_pClientList[i]->m_cAccountPassword, cAccountPassword, 10) == 0) {
				wsprintf(G_cTxt, "<%d> Duplicate account player! Deleted with data save : CharName(%s) AccntName(%s) IP(%s)", i, m_pClientList[i]->m_cCharName, m_pClientList[i]->m_cAccountName, m_pClientList[i]->m_cIPaddress);
				PutLogList(G_cTxt);
				//PutLogFileList(G_cTxt);
				DeleteClient(i, true, true, false);
			} else {
				memcpy(m_pClientList[iClientH]->m_cCharName, cCharName, 10);
				memcpy(m_pClientList[iClientH]->m_cAccountName, cAccountName, 10);
				memcpy(m_pClientList[iClientH]->m_cAccountPassword, cAccountPassword, 10);
				DeleteClient(iClientH, false, false, false);
				return;
			}
		}
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (iClientH != i) && (memcmp(m_pClientList[i]->m_cCharName, cCharName, 10) == 0)) {
			if (memcmp(m_pClientList[i]->m_cAccountPassword, cAccountPassword, 10) == 0) {
				wsprintf(G_cTxt, "<%d> Duplicate player! Deleted with data save : CharName(%s) IP(%s)", i, m_pClientList[i]->m_cCharName, m_pClientList[i]->m_cIPaddress);
				PutLogList(G_cTxt);
				//PutLogFileList(G_cTxt);
				DeleteClient(i, true, true, false);
			} else {
				memcpy(m_pClientList[iClientH]->m_cCharName, cCharName, 10);
				memcpy(m_pClientList[iClientH]->m_cAccountName, cAccountName, 10);
				memcpy(m_pClientList[iClientH]->m_cAccountPassword, cAccountPassword, 10);
				DeleteClient(iClientH, false, false);
				return;
			}
		}
	memcpy(m_pClientList[iClientH]->m_cCharName, cCharName, 10);
	memcpy(m_pClientList[iClientH]->m_cAccountName, cAccountName, 10);
	memcpy(m_pClientList[iClientH]->m_cAccountPassword, cAccountPassword, 10);
	m_pClientList[iClientH]->m_bIsObserverMode = bIsObserverMode;
	bSendMsgToLS(MSGID_REQUEST_PLAYERDATA, iClientH);
}

void CGame::RequestInitDataHandler(int iClientH, char * pData, char cKey) {
	bool bFlag;
	char * pBuffer = 0;
	short * sp;
	uint32_t * dwp;
	uint16_t * wp;
	char * cp, cPlayerName[11], cTxt[120];
	int sSummonPoints;
	int * ip, i, iTotalItemA, iTotalItemB, iSize, iRet, iStats;
	SYSTEMTIME SysTime;
	if (m_pClientList[iClientH] == 0) return;
	pBuffer = new char [DEF_MSGBUFFERSIZE + 1];
	ZeroMemory(pBuffer, DEF_MSGBUFFERSIZE + 1);
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	std::memset(cPlayerName, 0, sizeof(cPlayerName));
	memcpy(cPlayerName, cp, 10);
	std::memset(cTxt, 0, sizeof(cTxt)); // v1.4
	memcpy(cTxt, cPlayerName, 10);
	m_Misc.bDecode(cKey, cTxt);
	std::memset(cPlayerName, 0, sizeof(cPlayerName));
	memcpy(cPlayerName, cTxt, 10);
	if (memcmp(m_pClientList[iClientH]->m_cCharName, cPlayerName, 10) != 0) {
		DeleteClient(iClientH, false, true);
		return;
	}
	dwp = (uint32_t *) (pBuffer + DEF_INDEX4_MSGID);
	*dwp = MSGID_PLAYERCHARACTERCONTENTS; // 0x0Fm_cHeldenianVictoryType000 = 262406144
	wp = (uint16_t *) (pBuffer + DEF_INDEX2_MSGTYPE);
	*wp = DEF_MSGTYPE_CONFIRM;
	cp = (char *) (pBuffer + DEF_INDEX2_MSGTYPE + 2);
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iHP;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iMP;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iSP;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iDefenseRatio;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iHitRatio;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iLevel;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iStr;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iInt;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iVit;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iDex;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iMag;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iCharisma;
	cp += 4;
	iStats = (m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iDex + m_pClientList[iClientH]->m_iVit +
			  m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iCharisma);
	m_pClientList[iClientH]->m_iLU_Pool = m_pClientList[iClientH]->m_iLevel * 3 - (iStats - 70);
	wp = (uint16_t *) cp;
	//*wp = m_pClientList[iClientH]->m_iLevel*3 - (iStats - 70);
	*wp = m_pClientList[iClientH]->m_iLU_Pool;
	cp += 2;
	*cp = m_pClientList[iClientH]->m_cVar;
	cp++;
	*cp = 0;
	cp++;
	*cp = 0;
	cp++;
	*cp = 0;
	cp++;
	*cp = 0;
	cp++;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iExp;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iEnemyKillCount;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iPKCount;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iRewardGold;
	cp += 4;
	memcpy(cp, m_pClientList[iClientH]->m_cLocation, 10);
	cp += 10;
	memcpy(cp, m_pClientList[iClientH]->m_cGuildName, 20);
	cp += 20;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iGuildRank;
	cp += 4;
	// v1.4311
	*cp = (char) m_pClientList[iClientH]->m_iSuperAttackLeft;
	cp++;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iFightzoneNumber;
	cp += 4;
	//Syntax : ======HP==MP==SP==DRatHRatLVL=STR=INT=VIT=DEX=MAG=CHR=LUstatEXP=EK==PK==RewaLocation==GuildName=RankAF
	//Syntax : 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345
	//Syntax : ......145212521152........376.200=200=200=200=200=195=......big.8...17......aresden...NONE......NONE30
	// 0x0Fm_cHeldenianVictoryType000 = 262406144
	//Debug Event
	//DbgWnd->AddEventMsg(MSG_SEND,pBuffer,180,0);
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(pBuffer, 118); // Original : 115
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			delete pBuffer;
			return;
	}
	dwp = (uint32_t *) (pBuffer + DEF_INDEX4_MSGID);
	*dwp = MSGID_PLAYERITEMLISTCONTENTS;
	wp = (uint16_t *) (pBuffer + DEF_INDEX2_MSGTYPE);
	*wp = DEF_MSGTYPE_CONFIRM;
	bFlag = false; // Kaozures - Adaptado darmart123.
	while (bFlag == false) {
		bFlag = true;
		for (i = 0; i < DEF_MAXITEMS - 1; i++)
			if ((m_pClientList[iClientH]->m_pItemList[i] == 0) && (m_pClientList[iClientH]->m_pItemList[i + 1] != 0)) {
				m_pClientList[iClientH]->m_pItemList[i] = m_pClientList[iClientH]->m_pItemList[i + 1];
				m_pClientList[iClientH]->m_pItemList[i + 1] = 0;
				m_pClientList[iClientH]->m_ItemPosList[i].x = m_pClientList[iClientH]->m_ItemPosList[i + 1].x;
				m_pClientList[iClientH]->m_ItemPosList[i].y = m_pClientList[iClientH]->m_ItemPosList[i + 1].y;
				bFlag = false;
			}
	}
	iTotalItemA = 0;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] != 0)
			iTotalItemA++;
	cp = (char *) (pBuffer + DEF_INDEX2_MSGTYPE + 2);
	*cp = iTotalItemA;
	cp++;
	for (i = 0; i < iTotalItemA; i++) {
		// ### ERROR POINT!!!
		if (m_pClientList[iClientH]->m_pItemList[i] == 0) {
			wsprintf(G_cTxt, "RequestInitDataHandler error: Client(%s) Item(%d)", m_pClientList[iClientH]->m_cCharName, i);
			PutLogFileList(G_cTxt);
			DeleteClient(iClientH, false, true);
			delete pBuffer;
			return;
		}
		memcpy(cp, m_pClientList[iClientH]->m_pItemList[i]->m_cName, 20);
		cp += 20;
		dwp = (uint32_t *) cp;
		*dwp = m_pClientList[iClientH]->m_pItemList[i]->m_dwCount;
		cp += 4;
		*cp = (char) m_pClientList[iClientH]->m_pItemList[i]->m_cItemType;
		cp++;
		*cp = (char) m_pClientList[iClientH]->m_pItemList[i]->m_cEquipPos;
		cp++;
		*cp = (char) m_pClientList[iClientH]->m_bIsItemEquipped[i];
		cp++;
		sp = (short *) cp;
		*sp = m_pClientList[iClientH]->m_pItemList[i]->m_sLevelLimit;
		cp += 2;
		*cp = m_pClientList[iClientH]->m_pItemList[i]->m_cGenderLimit;
		cp++;
		wp = (uint16_t *) cp;
		*wp = m_pClientList[iClientH]->m_pItemList[i]->m_wCurLifeSpan;
		cp += 2;
		wp = (uint16_t *) cp;
		*wp = m_pClientList[iClientH]->m_pItemList[i]->m_wWeight;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[iClientH]->m_pItemList[i]->m_sSprite;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[iClientH]->m_pItemList[i]->m_sSpriteFrame;
		cp += 2;
		*cp = m_pClientList[iClientH]->m_pItemList[i]->m_cItemColor; // v1.4
		cp++;
		*cp = (char) m_pClientList[iClientH]->m_pItemList[i]->m_sItemSpecEffectValue2; // v1.41
		cp++;
		dwp = (uint32_t *) cp;
		*dwp = m_pClientList[iClientH]->m_pItemList[i]->m_dwAttribute;
		cp += 4;
		/*
		 *cp = (char)(m_pClientList[iClientH]->m_pItemList[i]->m_dwAttribute & 0x00000001);
		cp++;
		 */
	}
	iTotalItemB = 0;
	for (i = 0; i < DEF_MAXBANKITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemInBankList[i] != 0)
			iTotalItemB++;
	*cp = iTotalItemB;
	cp++;
	for (i = 0; i < iTotalItemB; i++) {
		if (m_pClientList[iClientH]->m_pItemInBankList[i] == 0) {
			wsprintf(G_cTxt, "RequestInitDataHandler error: Client(%s) Bank-Item(%d)", m_pClientList[iClientH]->m_cCharName, i);
			PutLogFileList(G_cTxt);
			DeleteClient(iClientH, false, true);
			delete pBuffer;
			return;
		}
		memcpy(cp, m_pClientList[iClientH]->m_pItemInBankList[i]->m_cName, 20);
		cp += 20;
		dwp = (uint32_t *) cp;
		*dwp = m_pClientList[iClientH]->m_pItemInBankList[i]->m_dwCount;
		cp += 4;
		*cp = (char) m_pClientList[iClientH]->m_pItemInBankList[i]->m_cItemType;
		cp++;
		*cp = (char) m_pClientList[iClientH]->m_pItemInBankList[i]->m_cEquipPos;
		cp++;
		sp = (short *) cp;
		*sp = m_pClientList[iClientH]->m_pItemInBankList[i]->m_sLevelLimit;
		cp += 2;
		*cp = m_pClientList[iClientH]->m_pItemInBankList[i]->m_cGenderLimit;
		cp++;
		wp = (uint16_t *) cp;
		*wp = m_pClientList[iClientH]->m_pItemInBankList[i]->m_wCurLifeSpan;
		cp += 2;
		wp = (uint16_t *) cp;
		*wp = m_pClientList[iClientH]->m_pItemInBankList[i]->m_wWeight;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[iClientH]->m_pItemInBankList[i]->m_sSprite;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[iClientH]->m_pItemInBankList[i]->m_sSpriteFrame;
		cp += 2;
		*cp = m_pClientList[iClientH]->m_pItemInBankList[i]->m_cItemColor; // v1.4
		cp++;
		*cp = (char) m_pClientList[iClientH]->m_pItemInBankList[i]->m_sItemSpecEffectValue2; // v1.41
		cp++;
		dwp = (uint32_t *) cp;
		*dwp = m_pClientList[iClientH]->m_pItemInBankList[i]->m_dwAttribute;
		cp += 4;
		/*
		 *cp = (char)(m_pClientList[iClientH]->m_pItemInBankList[i]->m_dwAttribute & 0x00000001);
		cp++;
		 */
	}
	for (i = 0; i < DEF_MAXMAGICTYPE; i++) {
		*cp = m_pClientList[iClientH]->m_cMagicMastery[i];
		cp++;
	}
	for (i = 0; i < DEF_MAXSKILLTYPE; i++) {
		*cp = m_pClientList[iClientH]->m_cSkillMastery[i];
		cp++;
	}
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(pBuffer, 6 + 1 + iTotalItemA * 44 + 1 + iTotalItemB * 43 + DEF_MAXMAGICTYPE + DEF_MAXSKILLTYPE);
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			delete pBuffer;
			return;
	}
	dwp = (uint32_t *) (pBuffer + DEF_INDEX4_MSGID);
	*dwp = MSGID_RESPONSE_INITDATA;
	wp = (uint16_t *) (pBuffer + DEF_INDEX2_MSGTYPE);
	*wp = DEF_MSGTYPE_CONFIRM;
	cp = (char *) (pBuffer + DEF_INDEX2_MSGTYPE + 2);
	if (m_pClientList[iClientH]->m_bIsObserverMode == false)
		bGetEmptyPosition(&m_pClientList[iClientH]->m_sX, &m_pClientList[iClientH]->m_sY, m_pClientList[iClientH]->m_cMapIndex);
	else GetMapInitialPoint(m_pClientList[iClientH]->m_cMapIndex, &m_pClientList[iClientH]->m_sX, &m_pClientList[iClientH]->m_sY);
	// ObjectID
	wp = (uint16_t *) cp;
	*wp = iClientH;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sX - 14 - 5;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sY - 12 - 5;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sType;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sAppr1;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sAppr2;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sAppr3;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sAppr4;
	cp += 2;
	ip = (int *) cp; // v1.4
	*ip = m_pClientList[iClientH]->m_iApprColor;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iStatus;
	cp += 4; // Original : 2
	memcpy(cp, m_pClientList[iClientH]->m_cMapName, 10);
	cp += 10;
	memcpy(cp, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, 10);
	cp += 10;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsFixedDayMode == true)
		*cp = 1;
	else *cp = m_cDayOrNight;
	cp++;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsFixedDayMode == true)
		*cp = 0;
	else *cp = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cWhetherStatus;
	cp++;
	// v1.4 Contribution
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iContribution;
	cp += 4;
	if (m_pClientList[iClientH]->m_bIsObserverMode == false) {
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetOwner(iClientH,
				  DEF_OWNERTYPE_PLAYER,
				  m_pClientList[iClientH]->m_sX,
				  m_pClientList[iClientH]->m_sY);
	}
	// v1.41
	*cp = (char) m_pClientList[iClientH]->m_bIsObserverMode;
	cp++;
	// catches debug on player load up
	// v1.41
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iRating;
	cp += 4;
	// v1.44
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iHP;
	cp += 4;
	//Unknown variable
	*cp = 0;
	cp++;
	iSize = iComposeInitMapData(m_pClientList[iClientH]->m_sX - 10, m_pClientList[iClientH]->m_sY - 7, iClientH, cp);
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(pBuffer, 46 + iSize + 4 + 4 + 1 + 4 + 4 + 3); // Zabuza fix
	//iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(pBuffer, 59 + iSize +4 +4 +1 +4 +4); // v1.41
	//	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(pBuffer, 46 + iSize +4 +4 +1 +4 +4); // v1.41
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			delete pBuffer;
			return;
	}
	delete pBuffer;
	SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_LOG, DEF_MSGTYPE_CONFIRM, 0, 0, 0);
	if ((memcmp(m_pClientList[iClientH]->m_cLocation, "are", 3) == 0) &&
			  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "elvine", 6) == 0)
			  && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) {
		m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
		m_pClientList[iClientH]->m_bIsWarLocation = true;
		SetForceRecallTime(iClientH);
	} else if ((memcmp(m_pClientList[iClientH]->m_cLocation, "elv", 3) == 0) &&
			  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "aresden", 7) == 0)
			  && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) {
		m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
		m_pClientList[iClientH]->m_bIsWarLocation = true;
		SetForceRecallTime(iClientH);
	} else if (((memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "arejail", 7) == 0) ||
			  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "elvjail", 7) == 0))
			  && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) {
		m_pClientList[iClientH]->m_bIsWarLocation = true;
		m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
		// v2.17 2002-7-15
		if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall == 0) {
			m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 20 * 5;
		} else if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall > 20 * 5) {
			m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 20 * 5;
		}
	} else if ((m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsFightZone == true) &&
			  (m_iFightzoneNoForceRecall == 0) && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) {
		m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
		m_pClientList[iClientH]->m_bIsWarLocation = true;
		GetLocalTime(&SysTime);
		m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 2 * 60 * 20 - ((SysTime.wHour % 2)*20 * 60 + SysTime.wMinute * 20) - 2 * 20;
	} else {
		m_pClientList[iClientH]->m_bIsWarLocation = false;
		// v1.42
		m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 0;
		// 06/11/2004
		SetForceRecallTime(iClientH);
	}
	if ((m_pClientList[iClientH]->m_iTimeLeft_ForceRecall > 0) && (m_pClientList[iClientH]->m_bIsWarLocation == true)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_FORCERECALLTIME, m_pClientList[iClientH]->m_iTimeLeft_ForceRecall, 0, 0, 0);
		wsprintf(G_cTxt, "(!) Game Server Force Recall Time  %d (%d)min", m_pClientList[iClientH]->m_iTimeLeft_ForceRecall, m_pClientList[iClientH]->m_iTimeLeft_ForceRecall / 20);
		PutLogList(G_cTxt);
	}
	// No entering enemy shops
	int iMapside;
	int iMapside2;
	iMapside = iGetMapLocationSide(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName);
	if (iMapside > 3) iMapside2 = iMapside - 2;
	else iMapside2 = iMapside;
	m_pClientList[iClientH]->m_bIsInsideOwnTown = false;
	if ((m_pClientList[iClientH]->m_cSide != iMapside2) && (iMapside != 0)) {
		if ((iMapside <= 2) && (m_pClientList[iClientH]->m_iAdminUserLevel < 1)) {
			if (m_pClientList[iClientH]->m_cSide != 0) {
				m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
				m_pClientList[iClientH]->m_bIsWarLocation = true;
				m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 1;
				m_pClientList[iClientH]->m_bIsInsideOwnTown = true;
			}
		}
	} else {
		if (m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_bIsFightZone == true &&
				  m_iFightzoneNoForceRecall == false &&
				  m_pClientList[iClientH]->m_iAdminUserLevel == 0) {
			m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
			m_pClientList[iClientH]->m_bIsWarLocation = true;
			GetLocalTime(&SysTime);
			m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 2 * 60 * 20 - ((SysTime.wHour % 2)*20 * 60 + SysTime.wMinute * 20) - 2 * 20;
		} else {
			if (memcmp(m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_cLocationName, "arejail", 7) == 0 ||
					  memcmp(m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_cLocationName, "elvjail", 7) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel == 0) {
					m_pClientList[iClientH]->m_bIsWarLocation = true;
					m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
					if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall == 0)
						m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 100;
					else if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall > 100)
						m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 100;
				}
			}
		}
	}
	/*if ((m_pClientList[iClientH]->m_iTimeLeft_ForceRecall > 0) &&
		(m_pClientList[iClientH]->m_bIsWarLocation == true)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_FORCERECALLTIME, m_pClientList[iClientH]->m_iTimeLeft_ForceRecall, 0, 0, 0);
	}*/
	if (m_pClientList[iClientH]->m_iGizonItemUpgradeLeft < 0) {
		m_pClientList[iClientH]->m_iGizonItemUpgradeLeft = 0;
	}
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_SAFEATTACKMODE, 0, 0, 0, 0);
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_DOWNSKILLINDEXSET, m_pClientList[iClientH]->m_iDownSkillIndex, 0, 0, 0);
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMPOSLIST, 0, 0, 0, 0);
	_SendQuestContents(iClientH);
	_CheckQuestEnvironment(iClientH);
	// v1.432
	if (m_pClientList[iClientH]->m_iSpecialAbilityTime == 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SPECIALABILITYENABLED, 0, 0, 0, 0);
	}
	if (m_bIsCrusadeMode == true) {
		if (m_pClientList[iClientH]->m_dwCrusadeGUID == 0) {
			m_pClientList[iClientH]->m_iCrusadeDuty = 0;
			m_pClientList[iClientH]->m_iConstructionPoint = 0;
			m_pClientList[iClientH]->m_dwCrusadeGUID = m_dwCrusadeGUID;
		} else if (m_pClientList[iClientH]->m_dwCrusadeGUID != m_dwCrusadeGUID) {
			m_pClientList[iClientH]->m_iCrusadeDuty = 0;
			m_pClientList[iClientH]->m_iConstructionPoint = 0;
			m_pClientList[iClientH]->m_iWarContribution = 0;
			m_pClientList[iClientH]->m_dwCrusadeGUID = m_dwCrusadeGUID;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, 0, 0, 0, -1);
		}
		m_pClientList[iClientH]->m_cVar = 1;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, m_pClientList[iClientH]->m_iCrusadeDuty, 0, 0);
	} else if (m_bIsHeldenianMode == true) {
		sSummonPoints = m_pClientList[iClientH]->m_iCharisma * 300;
		if (sSummonPoints > 12000) sSummonPoints = 12000;
		if (m_pClientList[iClientH]->m_dwHeldenianGUID == 0) {
			m_pClientList[iClientH]->m_dwCrusadeGUID = m_dwHeldenianGUID;
			m_pClientList[iClientH]->m_iConstructionPoint = sSummonPoints;
		} else if (m_pClientList[iClientH]->m_dwCrusadeGUID != m_dwHeldenianGUID) {
			m_pClientList[iClientH]->m_iConstructionPoint = sSummonPoints;
			m_pClientList[iClientH]->m_iWarContribution = 0;
			m_pClientList[iClientH]->m_dwCrusadeGUID = m_dwHeldenianGUID;
		}
		m_pClientList[iClientH]->m_cWarType = 2;
		if (m_bIsHeldenianMode == true) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_HELDENIANTELEPORT, 0, 0, 0, 0);
			if (m_bHeldenianInitiated == false) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_HELDENIANSTART, 0, 0, 0, 0);
			}
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[iClientH]->m_iConstructionPoint, m_pClientList[iClientH]->m_iWarContribution, 0, 0);
			UpdateHeldenianStatus();
		}
	} else if ((m_pClientList[iClientH]->m_cVar == 1) && (m_pClientList[iClientH]->m_dwCrusadeGUID == m_dwCrusadeGUID)) {
		m_pClientList[iClientH]->m_iCrusadeDuty = 0;
		m_pClientList[iClientH]->m_iConstructionPoint = 0;
	} else {
		if (m_pClientList[iClientH]->m_dwCrusadeGUID == m_dwCrusadeGUID) {
			if (m_pClientList[iClientH]->m_cVar == 1) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, 0, 0, 0, -1);
			}
		} else {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, 0, 0, 0, -1);
			m_pClientList[iClientH]->m_dwCrusadeGUID = 0;
			m_pClientList[iClientH]->m_iWarContribution = 0;
			m_pClientList[iClientH]->m_dwCrusadeGUID = 0;
		}
	}
	// v1.42
	if (memcmp(m_pClientList[iClientH]->m_cMapName, "fightzone", 9) == 0) {
		wsprintf(G_cTxt, "Char(%s)-Enter(%s) Observer(%d)", m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_bIsObserverMode);
		PutLogEventFileList(G_cTxt);
	}
	if (m_bIsHeldenianMode == true) SendNotifyMsg(0, iClientH, DEF_NOTIFY_HELDENIANTELEPORT, 0, 0, 0, 0, 0);
	if (m_bHeldenianInitiated == true) SendNotifyMsg(0, iClientH, DEF_NOTIFY_HELDENIANSTART, 0, 0, 0, 0, 0);
	// Crusade
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[iClientH]->m_iConstructionPoint, m_pClientList[iClientH]->m_iWarContribution, 1, 0);
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMUPGRADELEFT, m_pClientList[iClientH]->m_iGizonItemUpgradeLeft, 0, 0, 0);
	//Critical Count Fix.
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_SUPERATTACKLEFT, 0, 0, 0, 0);
}

int CGame::iComposeInitMapData(short sX, short sY, int iClientH, char * pData) {
	int * ip, ix, iy, iSize, iTileExists;
	CTile * pTileSrc, * pTile;
	unsigned char ucHeader;
	short * sp, * pTotal;
	int sTemp;
	int sTemp2;
	uint16_t * wp;
	char * cp;
	if (m_pClientList[iClientH] == 0) return 0;
	pTotal = (short *) pData;
	cp = (char *) (pData + 2);
	iSize = 2;
	iTileExists = 0;
	pTileSrc = (CTile *) (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_pTile +
			  (sX) + (sY) * m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_sSizeY);
	for (iy = 0; iy < 16; iy++)
		for (ix = 0; ix < 21; ix++) {
			if (((sX + ix) == 100) && ((sY + iy) == 100))
				sX = sX;
			pTile = (CTile *) (pTileSrc + ix + iy * m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_sSizeY);
			//If player not same side and is invied (Beholder Hack)
			if ((m_pClientList[pTile->m_sOwner] != 0) && (pTile->m_sOwner != iClientH))
				if ((m_pClientList[pTile->m_sOwner]->m_cSide != 0) &&
						  (m_pClientList[pTile->m_sOwner]->m_cSide != m_pClientList[iClientH]->m_cSide) &&
						  ((m_pClientList[pTile->m_sOwner]->m_iStatus & 0x00000010) != 0)) {
					continue;
				}
			if ((pTile->m_sOwner != 0) || (pTile->m_sDeadOwner != 0) ||
					  (pTile->m_pItem[0] != 0) || (pTile->m_sDynamicObjectType != 0)) {
				iTileExists++;
				sp = (short *) cp;
				*sp = ix;
				cp += 2;
				sp = (short *) cp;
				*sp = iy;
				cp += 2;
				iSize += 4;
				ucHeader = 0;
				if (pTile->m_sOwner != 0) {
					if (pTile->m_cOwnerClass == DEF_OWNERTYPE_PLAYER) {
						if (m_pClientList[pTile->m_sOwner] != 0) ucHeader = ucHeader | 0x01;
						else {
							// ###debugcode
							wsprintf(G_cTxt, "Empty player handle: %d", pTile->m_sOwner);
							//PutLogFileList(G_cTxt);
							//
							pTile->m_sOwner = 0;
						}
					}
					if (pTile->m_cOwnerClass == DEF_OWNERTYPE_NPC) {
						if (m_pNpcList[pTile->m_sOwner] != 0) ucHeader = ucHeader | 0x01;
						else pTile->m_sOwner = 0;
					}
				}
				if (pTile->m_sDeadOwner != 0) {
					if (pTile->m_cDeadOwnerClass == DEF_OWNERTYPE_PLAYER) {
						if (m_pClientList[pTile->m_sDeadOwner] != 0) ucHeader = ucHeader | 0x02;
						else pTile->m_sDeadOwner = 0;
					}
					if (pTile->m_cDeadOwnerClass == DEF_OWNERTYPE_NPC) {
						if (m_pNpcList[pTile->m_sDeadOwner] != 0) ucHeader = ucHeader | 0x02;
						else pTile->m_sDeadOwner = 0;
					}
				}
				if (pTile->m_pItem[0] != 0) ucHeader = ucHeader | 0x04;
				if (pTile->m_sDynamicObjectType != 0) ucHeader = ucHeader | 0x08;
				//
				*cp = ucHeader;
				cp++;
				iSize++;
				if ((ucHeader & 0x01) != 0) {
					switch (pTile->m_cOwnerClass) {
						case DEF_OWNERTYPE_PLAYER:
							// Object ID number(Player) : 1~10000
							sp = (short *) cp;
							*sp = pTile->m_sOwner;
							cp += 2;
							iSize += 2;
							// object type
							sp = (short *) cp;
							*sp = m_pClientList[pTile->m_sOwner]->m_sType;
							cp += 2;
							iSize += 2;
							// dir
							*cp = m_pClientList[pTile->m_sOwner]->m_cDir;
							cp++;
							iSize++;
							// Appearance1
							sp = (short *) cp;
							*sp = m_pClientList[pTile->m_sOwner]->m_sAppr1;
							cp += 2;
							iSize += 2;
							// Appearance2
							sp = (short *) cp;
							*sp = m_pClientList[pTile->m_sOwner]->m_sAppr2;
							cp += 2;
							iSize += 2;
							// Appearance3
							sp = (short *) cp;
							*sp = m_pClientList[pTile->m_sOwner]->m_sAppr3;
							cp += 2;
							iSize += 2;
							// Appearance4
							sp = (short *) cp;
							*sp = m_pClientList[pTile->m_sOwner]->m_sAppr4;
							cp += 2;
							iSize += 2;
							// v1.4 ApprColor
							ip = (int *) cp;
							*ip = m_pClientList[pTile->m_sOwner]->m_iApprColor;
							cp += 4;
							iSize += 4;
							// Status
							ip = (int *) cp;
							sTemp = m_pClientList[pTile->m_sOwner]->m_iStatus;
							sTemp = 0x0FFFFFFF & sTemp;
							sTemp2 = iGetPlayerABSStatus(pTile->m_sOwner, iClientH); //(short)iGetPlayerRelationship(iClientH, pTile->m_sOwner);
							sTemp = (sTemp | (sTemp2 << 28)); //Original : 12
							*ip = sTemp;
							//*sp = DEF_TEST;
							cp += 4; //Original 2
							iSize += 4; //Original 2
							// Name
							memcpy(cp, m_pClientList[pTile->m_sOwner]->m_cCharName, 10);
							cp += 10;
							iSize += 10;
							break;
						case DEF_OWNERTYPE_NPC:
							// Object ID number(NPC) : 10000~
							sp = (short *) cp;
							*sp = pTile->m_sOwner + 10000;
							cp += 2;
							iSize += 2;
							// object type
							sp = (short *) cp;
							*sp = (short) m_pNpcList[pTile->m_sOwner]->m_sType;
							cp += 2;
							iSize += 2;
							// dir
							*cp = m_pNpcList[pTile->m_sOwner]->m_cDir;
							cp++;
							iSize++;
							// Appr2
							sp = (short *) cp;
							*sp = m_pNpcList[pTile->m_sOwner]->m_sAppr2;
							cp += 2;
							iSize += 2;
							// Status
							ip = (int *) cp;
							sTemp = m_pNpcList[pTile->m_sOwner]->m_iStatus;
							sTemp = 0x0FFFFFFF & sTemp;
							sTemp2 = iGetNpcRelationship(pTile->m_sOwner, iClientH);
							sTemp = (sTemp | (sTemp2 << 28)); //Original : 12
							*ip = sTemp;
							//*sp = DEF_TEST;
							cp += 4; //Original 2
							iSize += 4; //Original 2
							// Name
							memcpy(cp, m_pNpcList[pTile->m_sOwner]->m_cName, 5);
							cp += 5;
							iSize += 5;
							break;
					}
				}
				if ((ucHeader & 0x02) != 0) {
					switch (pTile->m_cDeadOwnerClass) {
						case DEF_OWNERTYPE_PLAYER:
							// Object ID number : 1~10000
							sp = (short *) cp;
							*sp = pTile->m_sDeadOwner;
							cp += 2;
							iSize += 2;
							// object type
							sp = (short *) cp;
							*sp = m_pClientList[pTile->m_sDeadOwner]->m_sType;
							cp += 2;
							iSize += 2;
							// dir
							*cp = m_pClientList[pTile->m_sDeadOwner]->m_cDir;
							cp++;
							iSize++;
							// Appearance1
							sp = (short *) cp;
							*sp = m_pClientList[pTile->m_sDeadOwner]->m_sAppr1;
							cp += 2;
							iSize += 2;
							// Appearance2
							sp = (short *) cp;
							*sp = m_pClientList[pTile->m_sDeadOwner]->m_sAppr2;
							cp += 2;
							iSize += 2;
							// Appearance3
							sp = (short *) cp;
							*sp = m_pClientList[pTile->m_sDeadOwner]->m_sAppr3;
							cp += 2;
							iSize += 2;
							// Appearance4
							sp = (short *) cp;
							*sp = m_pClientList[pTile->m_sDeadOwner]->m_sAppr4;
							cp += 2;
							iSize += 2;
							// v1.4 ApprColor
							ip = (int *) cp;
							*ip = m_pClientList[pTile->m_sDeadOwner]->m_iApprColor;
							cp += 4;
							iSize += 4;
							// Status
							ip = (int *) cp;
							sTemp = m_pClientList[pTile->m_sDeadOwner]->m_iStatus;
							sTemp = 0x0FFFFFFF & sTemp;
							sTemp2 = iGetPlayerABSStatus(pTile->m_sDeadOwner, iClientH); //(short)iGetPlayerRelationship(iClientH, pTile->m_sDeadOwner);
							sTemp = (sTemp | (sTemp2 << 28)); //Original : 12
							*ip = sTemp;
							//*sp = DEF_TEST;
							cp += 4; //Original 2
							iSize += 4; //Original 2
							// Name
							memcpy(cp, m_pClientList[pTile->m_sDeadOwner]->m_cCharName, 10);
							cp += 10;
							iSize += 10;
							break;
						case DEF_OWNERTYPE_NPC:
							// Object ID number : 10000	~
							sp = (short *) cp;
							*sp = pTile->m_sDeadOwner + 10000;
							cp += 2;
							iSize += 2;
							// object type
							sp = (short *) cp;
							*sp = (short) m_pNpcList[pTile->m_sDeadOwner]->m_sType;
							cp += 2;
							iSize += 2;
							// dir
							*cp = m_pNpcList[pTile->m_sDeadOwner]->m_cDir;
							cp++;
							iSize++;
							// Appr2
							sp = (short *) cp;
							*sp = m_pNpcList[pTile->m_sDeadOwner]->m_sAppr2;
							cp += 2;
							iSize += 2;
							// Status
							ip = (int *) cp;
							sTemp = m_pNpcList[pTile->m_sDeadOwner]->m_iStatus;
							sTemp = 0x0FFFFFFF & sTemp;
							sTemp2 = iGetNpcRelationship(pTile->m_sDeadOwner, iClientH);
							sTemp = (sTemp | (sTemp2 << 28)); //Original : 12
							*ip = sTemp;
							//*sp = DEF_TEST;
							cp += 4; //Original 2
							iSize += 4; //Original 2
							// Name
							memcpy(cp, m_pNpcList[pTile->m_sDeadOwner]->m_cName, 5);
							cp += 5;
							iSize += 5;
							break;
					}
				}
				if (pTile->m_pItem[0] != 0) {
					sp = (short *) cp;
					*sp = pTile->m_pItem[0]->m_sSprite;
					cp += 2;
					iSize += 2;
					sp = (short *) cp;
					*sp = pTile->m_pItem[0]->m_sSpriteFrame;
					cp += 2;
					iSize += 2;
					*cp = pTile->m_pItem[0]->m_cItemColor;
					cp++;
					iSize++;
				}
				if (pTile->m_sDynamicObjectType != 0) {
					wp = (uint16_t *) cp;
					*wp = pTile->m_wDynamicObjectID;
					cp += 2;
					iSize += 2;
					sp = (short *) cp;
					*sp = pTile->m_sDynamicObjectType;
					cp += 2;
					iSize += 2;
				}
			} // Big if
		} // while(1)
	*pTotal = iTileExists;
	return iSize;
}

void CGame::DeleteClient(int iClientH, bool bSave, bool bNotify, bool bCountLogout, bool bForceCloseConn) {
	int i;
	int iExH;
	char cTmpMap[30];
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == true) {
		if (memcmp(m_pClientList[iClientH]->m_cMapName, "fight", 5) == 0) {
			wsprintf(G_cTxt, "Char(%s)-Exit(%s)", m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_cMapName);
			PutLogEventFileList(G_cTxt);
		}
		if (m_pClientList[iClientH]->m_bIsExchangeMode == true) {
			iExH = m_pClientList[iClientH]->m_iExchangeH;
			_ClearExchangeStatus(iExH);
			_ClearExchangeStatus(iClientH);
		}
		if ((m_pClientList[iClientH]->m_iAllocatedFish != 0) && (m_pFish[m_pClientList[iClientH]->m_iAllocatedFish] != 0))
			m_pFish[m_pClientList[iClientH]->m_iAllocatedFish]->m_sEngagingCount--;
		if (bNotify == true)
			SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_LOG, DEF_MSGTYPE_REJECT, 0, 0, 0);
		RemoveFromTarget(iClientH, DEF_OWNERTYPE_PLAYER);
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_iWhisperPlayerIndex == iClientH)) {
				m_pClientList[i]->m_iWhisperPlayerIndex = -1;
				SendNotifyMsg(0, i, DEF_NOTIFY_WHISPERMODEOFF, 0, 0, 0, m_pClientList[iClientH]->m_cCharName);
			}
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->ClearOwner(2, iClientH, DEF_OWNERTYPE_PLAYER,
				  m_pClientList[iClientH]->m_sX,
				  m_pClientList[iClientH]->m_sY);
		bRemoveFromDelayEventList(iClientH, DEF_OWNERTYPE_PLAYER, 0);
	}
	if ((bSave == true) && (m_pClientList[iClientH]->m_bIsOnServerChange == false)) {
		if (m_pClientList[iClientH]->m_bIsKilled == true) {
			m_pClientList[iClientH]->m_sX = -1;
			m_pClientList[iClientH]->m_sY = -1;
			strcpy(cTmpMap, m_pClientList[iClientH]->m_cMapName);
			std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
			if (m_pClientList[iClientH]->m_cSide == 0) {
				strcpy(m_pClientList[iClientH]->m_cMapName, "default");
			} else {
				if (memcmp(m_pClientList[iClientH]->m_cLocation, "are", 3) == 0) {
					if (m_bIsCrusadeMode == true) {
						if (m_pClientList[iClientH]->m_iDeadPenaltyTime > 0) {
							std::memset(m_pClientList[iClientH]->m_cLockedMapName, 0, sizeof(m_pClientList[iClientH]->m_cLockedMapName));
							strcpy(m_pClientList[iClientH]->m_cLockedMapName, "aresden");
							m_pClientList[iClientH]->m_iLockedMapTime = 60 * 5;
							m_pClientList[iClientH]->m_iDeadPenaltyTime = 60 * 10;
						} else {
							m_pClientList[iClientH]->m_iDeadPenaltyTime = 60 * 10;
						}
					}
					if (strcmp(cTmpMap, "elvine") == 0) {
						strcpy(m_pClientList[iClientH]->m_cLockedMapName, "elvjail");
						m_pClientList[iClientH]->m_iLockedMapTime = 10 * 2;
						memcpy(m_pClientList[iClientH]->m_cMapName, "elvjail", 7);
					} else if (m_pClientList[iClientH]->m_iLevel > 80)
						memcpy(m_pClientList[iClientH]->m_cMapName, "resurr1", 7);
					else memcpy(m_pClientList[iClientH]->m_cMapName, "resurr1", 7);
				} else {
					if (m_bIsCrusadeMode == true) {
						if (m_pClientList[iClientH]->m_iDeadPenaltyTime > 0) {
							std::memset(m_pClientList[iClientH]->m_cLockedMapName, 0, sizeof(m_pClientList[iClientH]->m_cLockedMapName));
							strcpy(m_pClientList[iClientH]->m_cLockedMapName, "elvine");
							m_pClientList[iClientH]->m_iLockedMapTime = 60 * 5;
							m_pClientList[iClientH]->m_iDeadPenaltyTime = 60 * 10;
						} else {
							m_pClientList[iClientH]->m_iDeadPenaltyTime = 60 * 10;
						}
					}
					if (strcmp(cTmpMap, "aresden") == 0) {
						strcpy(m_pClientList[iClientH]->m_cLockedMapName, "arejail");
						m_pClientList[iClientH]->m_iLockedMapTime = 10 * 2;
						memcpy(m_pClientList[iClientH]->m_cMapName, "arejail", 7);
					} else if (m_pClientList[iClientH]->m_iLevel > 80)
						memcpy(m_pClientList[iClientH]->m_cMapName, "resurr2", 7);
					else memcpy(m_pClientList[iClientH]->m_cMapName, "resurr2", 7);
				}
			}
		} else if (bForceCloseConn == true) {
			std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
			memcpy(m_pClientList[iClientH]->m_cMapName, "bisle", 5);
			m_pClientList[iClientH]->m_sX = -1;
			m_pClientList[iClientH]->m_sY = -1;
			std::memset(m_pClientList[iClientH]->m_cLockedMapName, 0, sizeof(m_pClientList[iClientH]->m_cLockedMapName));
			strcpy(m_pClientList[iClientH]->m_cLockedMapName, "bisle");
			m_pClientList[iClientH]->m_iLockedMapTime = 10 * 60;
		}
		if (m_pClientList[iClientH]->m_bIsObserverMode == true) {
			std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
			if (m_pClientList[iClientH]->m_cSide == 0) {
				switch (iDice(1, 2)) {
					case 1:
						memcpy(m_pClientList[iClientH]->m_cMapName, "aresden", 7);
						break;
					case 2:
						memcpy(m_pClientList[iClientH]->m_cMapName, "elvine", 6);
						break;
				}
			} else {
				memcpy(m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_cLocation, 10);
			}
			m_pClientList[iClientH]->m_sX = -1;
			m_pClientList[iClientH]->m_sY = -1;
		}
		if (memcmp(m_pClientList[iClientH]->m_cMapName, "fight", 5) == 0) {
			std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
			if (m_pClientList[iClientH]->m_cSide == 0) {
				switch (iDice(1, 2)) {
					case 1:
						memcpy(m_pClientList[iClientH]->m_cMapName, "aresden", 7);
						break;
					case 2:
						memcpy(m_pClientList[iClientH]->m_cMapName, "elvine", 6);
						break;
				}
			} else {
				memcpy(m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_cLocation, 10);
			}
			m_pClientList[iClientH]->m_sX = -1;
			m_pClientList[iClientH]->m_sY = -1;
		}
		if (m_pClientList[iClientH]->m_bIsInitComplete == true) {
			if (bSendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATALOGOUT, iClientH, bCountLogout) == false) LocalSavePlayerData(iClientH);
		} else bSendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATALOGOUT, iClientH, bCountLogout);
	} else {
		if (m_pClientList[iClientH]->m_bIsOnServerChange == false) {
			bSendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATALOGOUT, iClientH, bCountLogout);
		} else {
			bSendMsgToLS(MSGID_REQUEST_SETACCOUNTWAITSTATUS, iClientH, false);
		}
	}
	if (m_pClientList[iClientH]->m_iPartyID != 0) {
		for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
			if (m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] == iClientH) {
				m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] = 0;
				m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers--;
				wsprintf(G_cTxt, "PartyID:%d member:%d Out(Delete) Total:%d", m_pClientList[iClientH]->m_iPartyID, iClientH, m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers);
				PutLogList(G_cTxt);
				goto DC_LOOPBREAK1;
			}
DC_LOOPBREAK1:
		;
		for (i = 0; i < DEF_MAXPARTYMEMBERS - 1; i++)
			if ((m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] == 0) && (m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i + 1] != 0)) {
				m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] = m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i + 1];
				m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i + 1] = 0;
			}
	}
	m_iTotalClients--;
	//50Cent - Capture The Flag
	if (bCheckIfIsFlagCarrier(iClientH)) {
		SetFlagCarrierFlag(iClientH, false);
		SetIceFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
	}
	delete m_pClientList[iClientH];
	m_pClientList[iClientH] = 0;
	RemoveClientShortCut(iClientH);
}

void CGame::SendEventToNearClient_TypeA(short sOwnerH, char cOwnerType, uint32_t dwMsgID, uint16_t wMsgType, short sV1, short sV2, short sV3) {
	int * ip, i, iShortCutIndex;
	char * cp_a, * cp_s, * cp_sv, cData_All[200], cData_Srt[200], cData_Srt_Av[200];
	uint32_t * dwp;
	uint16_t * wp;
	int * ipStatus, iDumm;
	short * sp, sRange, sX, sY;
	bool bFlag;
	bool cOwnerSend;
	char cKey;
	int iTemp3;
	int iTemp;
	int iTemp2;
	std::memset(cData_All, 0, sizeof(cData_All));
	std::memset(cData_Srt, 0, sizeof(cData_Srt));
	std::memset(cData_Srt_Av, 0, sizeof(cData_Srt_Av));
	ipStatus = (int *) &iDumm;
	cKey = (rand() % 255) + 1;
	dwp = (uint32_t *) (cData_All + DEF_INDEX4_MSGID);
	*dwp = dwMsgID;
	wp = (uint16_t *) (cData_All + DEF_INDEX2_MSGTYPE);
	*wp = wMsgType;
	dwp = (uint32_t *) (cData_Srt + DEF_INDEX4_MSGID);
	*dwp = dwMsgID;
	wp = (uint16_t *) (cData_Srt + DEF_INDEX2_MSGTYPE);
	*wp = wMsgType;
	dwp = (uint32_t *) (cData_Srt_Av + DEF_INDEX4_MSGID);
	*dwp = dwMsgID;
	wp = (uint16_t *) (cData_Srt_Av + DEF_INDEX2_MSGTYPE);
	*wp = wMsgType;
	cp_a = (char *) (cData_All + DEF_INDEX2_MSGTYPE + 2);
	cp_s = (char *) (cData_Srt + DEF_INDEX2_MSGTYPE + 2);
	cp_sv = (char *) (cData_Srt_Av + DEF_INDEX2_MSGTYPE + 2);
	if ((dwMsgID == MSGID_EVENT_LOG) || (wMsgType == DEF_OBJECTMOVE) || (wMsgType == DEF_OBJECTRUN) ||
			  (wMsgType == DEF_OBJECTATTACKMOVE) || (wMsgType == DEF_OBJECTDAMAGEMOVE) || (wMsgType == DEF_OBJECTDYING))
		sRange = 1;
	else sRange = 0;
	if (cOwnerType == DEF_OWNERTYPE_PLAYER) {
		if (m_pClientList[sOwnerH] == 0) return;
		switch (wMsgType) {
			case DEF_OBJECTNULLACTION:
			case DEF_OBJECTDAMAGE:
			case DEF_OBJECTDYING:
			case DEF_MSGTYPE_CONFIRM:
				cOwnerSend = true;
				break;
			default:
				cOwnerSend = false;
				break;
		}
		wp = (uint16_t *) cp_a;
		*wp = sOwnerH;
		cp_a += 2;
		sp = (short *) cp_a;
		sX = m_pClientList[sOwnerH]->m_sX;
		*sp = sX;
		cp_a += 2;
		sp = (short *) cp_a;
		sY = m_pClientList[sOwnerH]->m_sY;
		*sp = sY;
		cp_a += 2;
		sp = (short *) cp_a;
		*sp = m_pClientList[sOwnerH]->m_sType;
		cp_a += 2;
		*cp_a = m_pClientList[sOwnerH]->m_cDir;
		cp_a++;
		memcpy(cp_a, m_pClientList[sOwnerH]->m_cCharName, 10);
		cp_a += 10;
		sp = (short *) cp_a;
		*sp = m_pClientList[sOwnerH]->m_sAppr1;
		cp_a += 2;
		sp = (short *) cp_a;
		*sp = m_pClientList[sOwnerH]->m_sAppr2;
		cp_a += 2;
		sp = (short *) cp_a;
		*sp = m_pClientList[sOwnerH]->m_sAppr3;
		cp_a += 2;
		sp = (short *) cp_a;
		*sp = m_pClientList[sOwnerH]->m_sAppr4;
		cp_a += 2;
		ip = (int *) cp_a;
		*ip = m_pClientList[sOwnerH]->m_iApprColor;
		cp_a += 4;
		ip = (int *) cp_a;
		ipStatus = ip;
		*ip = m_pClientList[sOwnerH]->m_iStatus;
		cp_a += 4;
		//iTemp += m_pClientList[sOwnerH]->m_iStatus & 0x0F0;
		iTemp3 = m_pClientList[sOwnerH]->m_iStatus & 0x0F0FFFF7F; //0F0FFFF7Fh
		if (wMsgType == DEF_OBJECTNULLACTION) {
			if (m_pClientList[sOwnerH]->m_bIsKilled == true)
				*cp_a = 1;
			else *cp_a = 0;
		} else *cp_a = 0;
		cp_a++;
		wp = (uint16_t *) cp_s;
		*wp = sOwnerH + 30000;
		cp_s += 2;
		*cp_s = m_pClientList[sOwnerH]->m_cDir;
		cp_s++;
		*cp_s = (unsigned char) sV1;
		cp_s++;
		*cp_s = (unsigned char) sV2;
		cp_s++;
		sp = (short *) cp_s;
		sX = m_pClientList[sOwnerH]->m_sX;
		*sp = sX;
		cp_s += 2;
		sp = (short *) cp_s;
		sY = m_pClientList[sOwnerH]->m_sY;
		*sp = sY;
		cp_s += 2;
		wp = (uint16_t *) cp_sv;
		*wp = sOwnerH + 30000;
		cp_sv += 2;
		*cp_sv = m_pClientList[sOwnerH]->m_cDir;
		cp_sv++;
		*cp_sv = sV1 - sX;
		cp_sv++;
		*cp_sv = sV2 - sY;
		cp_sv++;
		sp = (short *) cp_sv;
		*sp = sV3;
		cp_sv += 2;
		bFlag = true;
		iShortCutIndex = 0;
		while (bFlag) {
			i = m_iClientShortCut[iShortCutIndex];
			iShortCutIndex++;
			if (i == 0) bFlag = false;
			if ((bFlag == true) && (m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true))
				if ((m_pClientList[i]->m_cMapIndex == m_pClientList[sOwnerH]->m_cMapIndex) &&
						  (m_pClientList[i]->m_sX >= m_pClientList[sOwnerH]->m_sX - 10 - sRange) &&
						  (m_pClientList[i]->m_sX <= m_pClientList[sOwnerH]->m_sX + 10 + sRange) &&
						  (m_pClientList[i]->m_sY >= m_pClientList[sOwnerH]->m_sY - 8 - sRange) &&
						  (m_pClientList[i]->m_sY <= m_pClientList[sOwnerH]->m_sY + 8 + sRange)) {
					/*//If player not same side and is invied (Beholder Hack)
					if (m_pClientList[sOwnerH] != 0 && i != sOwnerH)
						if ((m_pClientList[i]->m_cSide != m_pClientList[sOwnerH]->m_cSide) &&
							((m_pClientList[sOwnerH]->m_iStatus & 0x00000010) != 0)) {
							if(wMsgType == DEF_OBJECTRUN || wMsgType == DEF_OBJECTMOVE || wMsgType == DEF_OBJECTSTOP || wMsgType == DEF_OBJECTGETITEM)
								if we filter attacking
								[KLKS] - http://xtremehb.com -> Play Abaddon (PRO ARESDEN) says:
								the poor guy who's being attacked wont know what hit him
						continue;
					}*/
					/*iTemp = *ipStatus;
					iTemp = 0x0FFFFFFF & iTemp;
					iTemp2 = (short)iGetPlayerABSStatus(sOwnerH, i); //(short)iGetPlayerRelationship_SendEvent(sOwnerH, i);
					iTemp  = (iTemp | (iTemp2 << 28));
					 *ipStatus = iTemp;*/
					if (m_pClientList[sOwnerH]->m_cSide != m_pClientList[i]->m_cSide) {
						if (m_pClientList[i]->m_iAdminUserLevel > 0) {
							iTemp = m_pClientList[sOwnerH]->m_iStatus;
						} else if (i != sOwnerH) {
							iTemp = iTemp3;
						} else {
							iTemp = m_pClientList[sOwnerH]->m_iStatus;
						}
					} else {
						iTemp = m_pClientList[sOwnerH]->m_iStatus;
						//iTemp = 0x0FFFFFFF;
					}
					//iTemp = m_pClientList[sOwnerH]->m_iStatus;
					iTemp = 0x0FFFFFFF & iTemp;
					iTemp2 = iGetPlayerABSStatus(sOwnerH, i);
					iTemp = (iTemp | (iTemp2 << 28));
					*ipStatus = iTemp;
					if ((m_pClientList[i]->m_sX >= m_pClientList[sOwnerH]->m_sX - 9) &&
							  (m_pClientList[i]->m_sX <= m_pClientList[sOwnerH]->m_sX + 9) &&
							  (m_pClientList[i]->m_sY >= m_pClientList[sOwnerH]->m_sY - 7) &&
							  (m_pClientList[i]->m_sY <= m_pClientList[sOwnerH]->m_sY + 7)) {
						switch (wMsgType) {
							case DEF_MSGTYPE_CONFIRM:
							case DEF_MSGTYPE_REJECT:
							case DEF_OBJECTNULLACTION:
								if (cOwnerSend == true)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_All, 43, cKey);
								else
									if (i != sOwnerH)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_All, 43, cKey);
								break;
							case DEF_OBJECTATTACK:
							case DEF_OBJECTATTACKMOVE:
								if (cOwnerSend == true)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt_Av, 13, cKey);
								else
									if (i != sOwnerH)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt_Av, 13, cKey);
								break;
							case DEF_OBJECTMAGIC:
							case DEF_OBJECTDAMAGE:
							case DEF_OBJECTDAMAGEMOVE:
								if (cOwnerSend == true)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 11, cKey);
								else
									if (i != sOwnerH)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 11, cKey);
								break;
							case DEF_OBJECTDYING:
								if (cOwnerSend == true)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 15, cKey);
								else
									if (i != sOwnerH)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 15, cKey);
								break;
							default:
								if (cOwnerSend == true)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 9, cKey);
								else
									if (i != sOwnerH)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 9, cKey);
								break;
						} //Switch
					}// If 2
					else {
						switch (wMsgType) {
							case DEF_MSGTYPE_CONFIRM:
							case DEF_MSGTYPE_REJECT:
							case DEF_OBJECTNULLACTION:
								if (cOwnerSend == true)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_All, 43, cKey);
								else
									if (i != sOwnerH)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_All, 43, cKey);
								break;
							case DEF_OBJECTATTACK:
							case DEF_OBJECTATTACKMOVE:
								if (cOwnerSend == true)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt_Av, 13, cKey);
								else
									if (i != sOwnerH)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt_Av, 13, cKey);
								break;
							case DEF_OBJECTMAGIC:
							case DEF_OBJECTDAMAGE:
							case DEF_OBJECTDAMAGEMOVE:
								if (cOwnerSend == true)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 11, cKey);
								else
									if (i != sOwnerH)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 11, cKey);
								break;
							case DEF_OBJECTDYING:
								if (cOwnerSend == true)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 15, cKey);
								else
									if (i != sOwnerH)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 15, cKey);
								break;
							default:
								if (cOwnerSend == true)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_All, 43, cKey);
								else
									if (i != sOwnerH)
									m_pClientList[i]->m_pXSock->iSendMsg(cData_All, 43, cKey);
								break;
						} //Switch
					} //else
				} // If 1
		} //While finish
	}//Finish Player
	else {
		if (m_pNpcList[sOwnerH] == 0) return;
		wp = (uint16_t *) cp_a;
		*wp = sOwnerH + 10000;
		cp_a += 2;
		sp = (short *) cp_a;
		sX = m_pNpcList[sOwnerH]->m_sX;
		*sp = sX;
		cp_a += 2;
		sp = (short *) cp_a;
		sY = m_pNpcList[sOwnerH]->m_sY;
		*sp = sY;
		cp_a += 2;
		sp = (short *) cp_a;
		*sp = (short) m_pNpcList[sOwnerH]->m_sType;
		cp_a += 2;
		*cp_a = m_pNpcList[sOwnerH]->m_cDir;
		cp_a++;
		memcpy(cp_a, m_pNpcList[sOwnerH]->m_cName, 5);
		cp_a += 5;
		sp = (short *) cp_a;
		*sp = m_pNpcList[sOwnerH]->m_sAppr2;
		cp_a += 2;
		ip = (int *) cp_a;
		ipStatus = ip;
		*ip = m_pNpcList[sOwnerH]->m_iStatus;
		cp_a += 4;
		if (wMsgType == DEF_OBJECTNULLACTION) {
			if (m_pNpcList[sOwnerH]->m_bIsKilled == true)
				*cp_a = 1;
			else *cp_a = 0;
		} else *cp_a = 0;
		cp_a++;
		wp = (uint16_t *) cp_s;
		*wp = sOwnerH + 40000;
		cp_s += 2;
		*cp_s = m_pNpcList[sOwnerH]->m_cDir;
		cp_s++;
		*cp_s = (unsigned char) sV1;
		cp_s++;
		*cp_s = (unsigned char) sV2;
		cp_s++;
		sp = (short *) cp_s;
		sX = m_pNpcList[sOwnerH]->m_sX;
		*sp = sX;
		cp_s += 2;
		sp = (short *) cp_s;
		sY = m_pNpcList[sOwnerH]->m_sY;
		*sp = sY;
		cp_s += 2;
		wp = (uint16_t *) cp_sv;
		*wp = sOwnerH + 40000;
		cp_sv += 2;
		*cp_sv = m_pNpcList[sOwnerH]->m_cDir;
		cp_sv++;
		*cp_sv = sV1 - sX;
		cp_sv++;
		*cp_sv = sV2 - sY;
		cp_sv++;
		sp = (short *) cp_sv;
		*sp = sV3;
		cp_sv += 2;
		bFlag = true;
		iShortCutIndex = 0;
		while (bFlag) {
			i = m_iClientShortCut[iShortCutIndex];
			iShortCutIndex++;
			if (i == 0) bFlag = false;
			if ((bFlag == true) && (m_pClientList[i] != 0))
				if ((m_pClientList[i]->m_cMapIndex == m_pNpcList[sOwnerH]->m_cMapIndex) &&
						  (m_pClientList[i]->m_sX >= m_pNpcList[sOwnerH]->m_sX - 10 - sRange) &&
						  (m_pClientList[i]->m_sX <= m_pNpcList[sOwnerH]->m_sX + 10 + sRange) &&
						  (m_pClientList[i]->m_sY >= m_pNpcList[sOwnerH]->m_sY - 8 - sRange) &&
						  (m_pClientList[i]->m_sY <= m_pNpcList[sOwnerH]->m_sY + 8 + sRange)) {
					iTemp = *ipStatus;
					iTemp = 0x0FFFFFFF & iTemp;
					iTemp2 = iGetNpcRelationship(sOwnerH, i);
					iTemp = (iTemp | (iTemp2 << 28));
					*ipStatus = iTemp;
					if ((m_pClientList[i]->m_sX >= m_pNpcList[sOwnerH]->m_sX - 9) &&
							  (m_pClientList[i]->m_sX <= m_pNpcList[sOwnerH]->m_sX + 9) &&
							  (m_pClientList[i]->m_sY >= m_pNpcList[sOwnerH]->m_sY - 7) &&
							  (m_pClientList[i]->m_sY <= m_pNpcList[sOwnerH]->m_sY + 7)) {
						switch (wMsgType) {
							case DEF_MSGTYPE_CONFIRM:
							case DEF_MSGTYPE_REJECT:
							case DEF_OBJECTNULLACTION:
								m_pClientList[i]->m_pXSock->iSendMsg(cData_All, 27, cKey);
								break;
							case DEF_OBJECTDYING:
								m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 15, cKey);
								break;
							case DEF_OBJECTDAMAGE:
							case DEF_OBJECTDAMAGEMOVE:
								m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 11, cKey);
								break;
							case DEF_OBJECTATTACK:
							case DEF_OBJECTATTACKMOVE:
								m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt_Av, 13, cKey);
								break;
							default:
								m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 9, cKey);
								break;
						} //Switch
					} else {
						switch (wMsgType) {
							case DEF_MSGTYPE_CONFIRM:
							case DEF_MSGTYPE_REJECT:
							case DEF_OBJECTNULLACTION:
								m_pClientList[i]->m_pXSock->iSendMsg(cData_All, 27, cKey);
								break;
							case DEF_OBJECTDYING:
								m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 15, cKey);
								break;
							case DEF_OBJECTDAMAGE:
							case DEF_OBJECTDAMAGEMOVE:
								m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt, 11, cKey);
								break;
							case DEF_OBJECTATTACK:
							case DEF_OBJECTATTACKMOVE:
								m_pClientList[i]->m_pXSock->iSendMsg(cData_Srt_Av, 13, cKey);
								break;
							default:
								m_pClientList[i]->m_pXSock->iSendMsg(cData_All, 27, cKey);
								break;
						} //Switch
					}
				}
		}
	} // else - NPC
}

int CGame::iComposeMoveMapData(short sX, short sY, int iClientH, char cDir, char * pData) {
	int * ip, ix, iy, iSize, iTileExists, iIndex;
	CTile * pTileSrc, * pTile;
	unsigned char ucHeader;
	short * sp, * pTotal;
	int iTemp;
	int iTemp2;
	uint16_t * wp;
	char * cp;
	if (m_pClientList[iClientH] == 0) return 0;
	pTotal = (short *) pData;
	cp = (char *) (pData + 2);
	iSize = 2;
	iTileExists = 0;
	pTileSrc = (CTile *) (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_pTile +
			  (sX) + (sY) * m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_sSizeY);
	iIndex = 0;
	while (1) {
		ix = _tmp_iMoveLocX[cDir][iIndex];
		iy = _tmp_iMoveLocY[cDir][iIndex];
		if ((ix == -1) || (iy == -1)) break;
		iIndex++;
		pTile = (CTile *) (pTileSrc + ix + iy * m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_sSizeY);
		//If player not same side and is invied (Beholder Hack)
		// there is another person on the tiles, and the owner is not the player
		//xxxxxx
		if ((m_pClientList[pTile->m_sOwner] != 0) && (pTile->m_sOwner != iClientH))
			if ((m_pClientList[pTile->m_sOwner]->m_cSide != 0) &&
					  (m_pClientList[pTile->m_sOwner]->m_cSide != m_pClientList[iClientH]->m_cSide) &&
					  ((m_pClientList[pTile->m_sOwner]->m_iStatus & 0x00000010) != 0)) {
				continue;
			}
		if ((pTile->m_sOwner != 0) || (pTile->m_sDeadOwner != 0) ||
				  (pTile->m_pItem[0] != 0) || (pTile->m_sDynamicObjectType != 0)) {
			iTileExists++;
			sp = (short *) cp;
			*sp = ix;
			cp += 2;
			sp = (short *) cp;
			*sp = iy;
			cp += 2;
			iSize += 4;
			ucHeader = 0;
			if (pTile->m_sOwner != 0) {
				if (pTile->m_cOwnerClass == DEF_OWNERTYPE_PLAYER) {
					if (m_pClientList[pTile->m_sOwner] != 0) ucHeader = ucHeader | 0x01;
					else pTile->m_sOwner = 0;
				}
				if (pTile->m_cOwnerClass == DEF_OWNERTYPE_NPC) {
					if (m_pNpcList[pTile->m_sOwner] != 0) ucHeader = ucHeader | 0x01;
					else pTile->m_sOwner = 0;
				}
			}
			if (pTile->m_sDeadOwner != 0) {
				if (pTile->m_cDeadOwnerClass == DEF_OWNERTYPE_PLAYER) {
					if (m_pClientList[pTile->m_sDeadOwner] != 0) ucHeader = ucHeader | 0x02;
					else pTile->m_sDeadOwner = 0;
				}
				if (pTile->m_cDeadOwnerClass == DEF_OWNERTYPE_NPC) {
					if (m_pNpcList[pTile->m_sDeadOwner] != 0) ucHeader = ucHeader | 0x02;
					else pTile->m_sDeadOwner = 0;
				}
			}
			if (pTile->m_pItem[0] != 0) ucHeader = ucHeader | 0x04;
			if (pTile->m_sDynamicObjectType != 0) ucHeader = ucHeader | 0x08;
			*cp = ucHeader;
			cp++;
			iSize++;
			if ((ucHeader & 0x01) != 0) {
				switch (pTile->m_cOwnerClass) {
					case DEF_OWNERTYPE_PLAYER:
						sp = (short *) cp;
						*sp = pTile->m_sOwner;
						cp += 2;
						iSize += 2;
						sp = (short *) cp;
						*sp = m_pClientList[pTile->m_sOwner]->m_sType;
						cp += 2;
						iSize += 2;
						*cp = m_pClientList[pTile->m_sOwner]->m_cDir;
						cp++;
						iSize++;
						sp = (short *) cp;
						*sp = m_pClientList[pTile->m_sOwner]->m_sAppr1;
						cp += 2;
						iSize += 2;
						sp = (short *) cp;
						*sp = m_pClientList[pTile->m_sOwner]->m_sAppr2;
						cp += 2;
						iSize += 2;
						sp = (short *) cp;
						*sp = m_pClientList[pTile->m_sOwner]->m_sAppr3;
						cp += 2;
						iSize += 2;
						sp = (short *) cp;
						*sp = m_pClientList[pTile->m_sOwner]->m_sAppr4;
						cp += 2;
						iSize += 2;
						ip = (int *) cp;
						*ip = m_pClientList[pTile->m_sOwner]->m_iApprColor;
						cp += 4;
						iSize += 4;
						ip = (int *) cp;
						if (m_pClientList[iClientH]->m_cSide != m_pClientList[pTile->m_sOwner]->m_cSide) {
							if (iClientH != pTile->m_sOwner) {
								iTemp = m_pClientList[pTile->m_sOwner]->m_iStatus & 0x0F0FFFF7F;
							} else {
								iTemp = m_pClientList[pTile->m_sOwner]->m_iStatus;
							}
						} else {
							iTemp = m_pClientList[pTile->m_sOwner]->m_iStatus;
						}
						//iTemp = m_pClientList[pTile->m_sOwner]->m_iStatus;
						iTemp = 0x0FFFFFFF & iTemp;
						iTemp2 = iGetPlayerABSStatus(pTile->m_sOwner, iClientH);
						iTemp = (iTemp | (iTemp2 << 28));
						*ip = iTemp;
						cp += 4;
						iSize += 4;
						memcpy(cp, m_pClientList[pTile->m_sOwner]->m_cCharName, 10);
						cp += 10;
						iSize += 10;
						break;
					case DEF_OWNERTYPE_NPC:
						sp = (short *) cp;
						*sp = pTile->m_sOwner + 10000;
						cp += 2;
						iSize += 2;
						sp = (short *) cp;
						*sp = (short) m_pNpcList[pTile->m_sOwner]->m_sType;
						cp += 2;
						iSize += 2;
						*cp = m_pNpcList[pTile->m_sOwner]->m_cDir;
						cp++;
						iSize++;
						sp = (short *) cp;
						*sp = m_pNpcList[pTile->m_sOwner]->m_sAppr2;
						cp += 2;
						iSize += 2;
						ip = (int *) cp;
						iTemp = m_pNpcList[pTile->m_sOwner]->m_iStatus;
						iTemp = 0x0FFFFFFF & iTemp;
						iTemp2 = iGetNpcRelationship(pTile->m_sOwner, iClientH);
						iTemp = (iTemp | (iTemp2 << 28));
						*ip = iTemp;
						cp += 4;
						iSize += 4;
						memcpy(cp, m_pNpcList[pTile->m_sOwner]->m_cName, 5);
						cp += 5;
						iSize += 5;
				}//end switch
			}// if ((ucHeader & 0x01) != 0)
			if ((ucHeader & 0x02) != 0) {
				switch (pTile->m_cDeadOwnerClass) {
					case DEF_OWNERTYPE_PLAYER:
						sp = (short *) cp;
						*sp = pTile->m_sDeadOwner;
						cp += 2;
						iSize += 2;
						sp = (short *) cp;
						*sp = m_pClientList[pTile->m_sDeadOwner]->m_sType;
						cp += 2;
						iSize += 2;
						*cp = m_pClientList[pTile->m_sDeadOwner]->m_cDir;
						cp++;
						iSize++;
						sp = (short *) cp;
						*sp = m_pClientList[pTile->m_sDeadOwner]->m_sAppr1;
						cp += 2;
						iSize += 2;
						sp = (short *) cp;
						*sp = m_pClientList[pTile->m_sDeadOwner]->m_sAppr2;
						cp += 2;
						iSize += 2;
						sp = (short *) cp;
						*sp = m_pClientList[pTile->m_sDeadOwner]->m_sAppr3;
						cp += 2;
						iSize += 2;
						sp = (short *) cp;
						*sp = m_pClientList[pTile->m_sDeadOwner]->m_sAppr4;
						cp += 2;
						iSize += 2;
						ip = (int *) cp;
						*ip = m_pClientList[pTile->m_sDeadOwner]->m_iApprColor;
						cp += 4;
						iSize += 4;
						ip = (int *) cp;
						if (m_pClientList[iClientH]->m_cSide != m_pClientList[pTile->m_sDeadOwner]->m_cSide) {
							if (iClientH != pTile->m_sDeadOwner) {
								iTemp = m_pClientList[pTile->m_sDeadOwner]->m_iStatus & 0x0F0FFFF7F;
							} else {
								iTemp = m_pClientList[pTile->m_sDeadOwner]->m_iStatus;
							}
						} else {
							iTemp = m_pClientList[pTile->m_sDeadOwner]->m_iStatus;
						}
						//iTemp = m_pClientList[pTile->m_sDeadOwner]->m_iStatus;
						iTemp = 0x0FFFFFFF & iTemp;
						iTemp2 = iGetPlayerABSStatus(pTile->m_sDeadOwner, iClientH);
						iTemp = (iTemp | (iTemp2 << 28));
						*ip = iTemp;
						cp += 4;
						iSize += 4;
						memcpy(cp, m_pClientList[pTile->m_sDeadOwner]->m_cCharName, 10);
						cp += 10;
						iSize += 10;
						break;
					case DEF_OWNERTYPE_NPC:
						sp = (short *) cp;
						*sp = pTile->m_sDeadOwner + 10000;
						cp += 2;
						iSize += 2;
						sp = (short *) cp;
						*sp = (short) m_pNpcList[pTile->m_sDeadOwner]->m_sType;
						cp += 2;
						iSize += 2;
						*cp = m_pNpcList[pTile->m_sDeadOwner]->m_cDir;
						cp++;
						iSize++;
						sp = (short *) cp;
						*sp = m_pNpcList[pTile->m_sDeadOwner]->m_sAppr2;
						cp += 2;
						iSize += 2;
						ip = (int *) cp;
						iTemp = m_pNpcList[pTile->m_sDeadOwner]->m_iStatus;
						iTemp = 0x0FFFFFFF & iTemp;
						iTemp2 = iGetNpcRelationship(pTile->m_sDeadOwner, iClientH);
						iTemp = (iTemp | (iTemp2 << 28));
						*ip = iTemp;
						cp += 4;
						iSize += 4;
						memcpy(cp, m_pNpcList[pTile->m_sDeadOwner]->m_cName, 5);
						cp += 5;
						iSize += 5;
						break;
				}//End Switch
			}// if ((ucHeader & 0x02) != 0)
			if (pTile->m_pItem[0] != 0) {
				sp = (short *) cp;
				*sp = pTile->m_pItem[0]->m_sSprite;
				cp += 2;
				iSize += 2;
				sp = (short *) cp;
				*sp = pTile->m_pItem[0]->m_sSpriteFrame;
				cp += 2;
				iSize += 2;
				*cp = pTile->m_pItem[0]->m_cItemColor;
				cp++;
				iSize++;
			}
			if (pTile->m_sDynamicObjectType != 0) {
				wp = (uint16_t *) cp;
				*wp = pTile->m_wDynamicObjectID;
				cp += 2;
				iSize += 2;
				sp = (short *) cp;
				*sp = pTile->m_sDynamicObjectType;
				cp += 2;
				iSize += 2;
			} //(pTile->m_sDynamicObjectType != 0)
		} //(pTile->m_sOwner != 0)
	} // end While(1)
	*pTotal = iTileExists;
	return iSize;
}

void CGame::CheckClientResponseTime() {
	int i;
	int iPlusTime;
	int iMaxSuperAttack;
	int iValue;
	short sTemp;
	uint32_t dwTime;
	short sItemIndex;
	int iMapside;
	int iMapside2;
	//SYSTEMTIME SysTime;
	/*
	GetLocalTime(&SysTime);
	switch (SysTime.wDayOfWeek) {
	case 1:	iWarPeriod = 30; break;
	case 2:	iWarPeriod = 30; break;
	case 3:	iWarPeriod = 60; break;
	case 4:	iWarPeriod = 60*2;  break;
	case 5:	iWarPeriod = 60*5;  break;
	case 6:	iWarPeriod = 60*10; break;
	case 0:	iWarPeriod = 60*20; break;
	}
	 */
	dwTime = timeGetTime();
	for (i = 1; i < DEF_MAXCLIENTS; i++) {
		if (m_pClientList[i] != 0) {
			if ((dwTime - m_pClientList[i]->m_dwTime) > DEF_CLIENTTIMEOUT) {
				if (m_pClientList[i]->m_bIsInitComplete == true) {
					//Testcode
					wsprintf(G_cTxt, "Client Timeout: %s", m_pClientList[i]->m_cIPaddress);
					PutLogList(G_cTxt);
					DeleteClient(i, true, true);
				} else if ((dwTime - m_pClientList[i]->m_dwTime) > DEF_CLIENTTIMEOUT) {
					DeleteClient(i, false, false);
				}
			} else if (m_pClientList[i]->m_bIsInitComplete == true) {
				m_pClientList[i]->m_iTimeLeft_ShutUp--;
				if (m_pClientList[i]->m_iTimeLeft_ShutUp < 0) m_pClientList[i]->m_iTimeLeft_ShutUp = 0;
				m_pClientList[i]->m_iTimeLeft_Rating--;
				if (m_pClientList[i]->m_iTimeLeft_Rating < 0) m_pClientList[i]->m_iTimeLeft_Rating = 0;
				if (((dwTime - m_pClientList[i]->m_dwHungerTime) > DEF_HUNGERTIME) && (m_pClientList[i]->m_bIsKilled == false)) {
					if ((m_pClientList[i]->m_iLevel < DEF_LEVELLIMIT) || (m_pClientList[i]->m_iAdminUserLevel >= 1)) {
					} else m_pClientList[i]->m_iHungerStatus--;
					if (m_pClientList[i]->m_iHungerStatus <= 0) m_pClientList[i]->m_iHungerStatus = 0;
					m_pClientList[i]->m_dwHungerTime = dwTime;
					if ((m_pClientList[i]->m_iHP > 0) && (m_pClientList[i]->m_iHungerStatus < 40)) {//50Cent - Hunger Fix
						SendNotifyMsg(0, i, DEF_NOTIFY_HUNGER, m_pClientList[i]->m_iHungerStatus, 0, 0, 0);
					}
				}
				if (_bCheckCharacterData(i) == false) {
					DeleteClient(i, true, true);
					break;
				}
				if ((m_pClientList[i]->m_iHungerStatus <= 30) && (m_pClientList[i]->m_iHungerStatus >= 0))
					iPlusTime = (30 - m_pClientList[i]->m_iHungerStatus)*1000;
				else iPlusTime = 0;
				iPlusTime = abs(iPlusTime);
				if ((dwTime - m_pClientList[i]->m_dwHPTime) > (uint32_t) (DEF_HPUPTIME + iPlusTime)) {
					TimeHitPointsUp(i);
					m_pClientList[i]->m_dwHPTime = dwTime;
				}
				if ((dwTime - m_pClientList[i]->m_dwMPTime) > (uint32_t) (DEF_MPUPTIME + iPlusTime)) {
					TimeManaPointsUp(i);
					m_pClientList[i]->m_dwMPTime = dwTime;
				}
				if ((dwTime - m_pClientList[i]->m_dwSPTime) > (uint32_t) (DEF_SPUPTIME + iPlusTime)) {
					TimeStaminarPointsUp(i);
					m_pClientList[i]->m_dwSPTime = dwTime;
				}
				if ((m_pClientList[i]->m_bIsPoisoned == true) && ((dwTime - m_pClientList[i]->m_dwPoisonTime) > DEF_POISONTIME)) {
					PoisonEffect(i, 0);
					m_pClientList[i]->m_dwPoisonTime = dwTime;
				}
				if ((m_pMapList[m_pClientList[i]->m_cMapIndex]->m_bIsFightZone == false) &&
						  ((dwTime - m_pClientList[i]->m_dwAutoSaveTime) > (uint32_t) DEF_AUTOSAVETIME)) {
					bSendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATA, i);
					m_pClientList[i]->m_dwAutoSaveTime = dwTime;
				}
				if ((dwTime - m_pClientList[i]->m_dwExpStockTime) > (uint32_t) DEF_EXPSTOCKTIME) {
					m_pClientList[i]->m_dwExpStockTime = dwTime;
					CalcExpStock(i);
					CheckUniqueItemEquipment(i);
					CheckCrusadeResultCalculation(i);
					CheckHeldenianResultCalculation(i); // new
				}
				if ((dwTime - m_pClientList[i]->m_dwAutoExpTime) > (uint32_t) DEF_AUTOEXPTIME) {
					iValue = (m_pClientList[i]->m_iLevel / 2);
					if (iValue <= 0) iValue = 1;
					if (m_pClientList[i]->m_iAutoExpAmount < iValue) {
						if ((m_pClientList[i]->m_iExp + iValue) < m_iLevelExpTable[m_pClientList[i]->m_iLevel + 1]) {
							//m_pClientList[i]->m_iExpStock += iValue;
							GetExp(i, iValue, false);
							CalcExpStock(i);
						}
					}
					m_pClientList[i]->m_iAutoExpAmount = 0;
					m_pClientList[i]->m_dwAutoExpTime = dwTime;
				}
				if (m_pClientList[i]->m_iSpecialAbilityTime == 3) {
					SendNotifyMsg(0, i, DEF_NOTIFY_SPECIALABILITYENABLED, 0, 0, 0, 0);
					// New 25/05/2004
					// After the time up, add magic back
					sItemIndex = m_pClientList[i]->m_sItemEquipmentStatus[ItemEquipPos::rhand];
					if (sItemIndex != -1) {
						if ((m_pClientList[i]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::resur_wand_ms20) || (m_pClientList[i]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::resur_wand_ms10)) {
							if ((m_pClientList[i]->m_iInt + m_pClientList[i]->m_iAngelicInt) > 99 && (m_pClientList[i]->m_iMag + m_pClientList[i]->m_iAngelicMag) > 99) {
								m_pClientList[i]->m_cMagicMastery[94] = true;
								SendNotifyMsg(0, i, DEF_NOTIFY_STATECHANGE_SUCCESS, 0, 0, 0, 0);
							}
						}
					}
				}
				m_pClientList[i]->m_iSpecialAbilityTime -= 3;
				if (m_pClientList[i]->m_iSpecialAbilityTime < 0) m_pClientList[i]->m_iSpecialAbilityTime = 0;
				if (m_pClientList[i]->m_bIsSpecialAbilityEnabled == true) {
					if (((dwTime - m_pClientList[i]->m_dwSpecialAbilityStartTime) / 1000) > (uint32_t) m_pClientList[i]->m_iSpecialAbilityLastSec) {
						SendNotifyMsg(0, i, DEF_NOTIFY_SPECIALABILITYSTATUS, 3, 0, 0, 0);
						m_pClientList[i]->m_bIsSpecialAbilityEnabled = false;
						m_pClientList[i]->m_iSpecialAbilityTime = DEF_SPECABLTYTIMESEC;
						sTemp = m_pClientList[i]->m_sAppr4;
						sTemp = sTemp & 0xFF0F;
						m_pClientList[i]->m_sAppr4 = sTemp;
						SendEventToNearClient_TypeA(i, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
					}
				}
				//Crusade
				m_pClientList[i]->m_iLockedMapTime -= 3;
				if (m_pClientList[i]->m_iLockedMapTime < 0) {
					m_pClientList[i]->m_iLockedMapTime = 0;
					std::memset(m_pClientList[i]->m_cLockedMapName, 0, sizeof(m_pClientList[i]->m_cLockedMapName));
					strcpy(m_pClientList[i]->m_cLockedMapName, "NONE");
				}
				m_pClientList[i]->m_iDeadPenaltyTime -= 3;
				if (m_pClientList[i]->m_iDeadPenaltyTime < 0) m_pClientList[i]->m_iDeadPenaltyTime = 0;
				if ((m_pClientList[i]->m_bIsWarLocation == true)) {
					// Crusade
					if (m_bIsCrusadeMode == false)
						if (m_pClientList[i]->m_bIsInsideOwnTown == false)
							m_pClientList[i]->m_iTimeLeft_ForceRecall--;
					if (m_pClientList[i]->m_iTimeLeft_ForceRecall <= 0) {
						m_pClientList[i]->m_iTimeLeft_ForceRecall = 0;
						m_pClientList[i]->m_dwWarBeginTime = dwTime;
						m_pClientList[i]->m_bIsWarLocation = false;
						SendNotifyMsg(0, i, DEF_NOTIFY_TOBERECALLED, 0, 0, 0, 0);
						RequestTeleportHandler(i, "1   ");
					}
				}
				if ((m_bIsHeldenianMode == true) && (m_pMapList[m_pClientList[i]->m_cMapIndex] != 0)) {
					if (bCheckHeldenianMap(i, m_iBTFieldMapIndex, DEF_OWNERTYPE_PLAYER) == 1) {
						SetHeroFlag(i, DEF_OWNERTYPE_PLAYER, true);
					} else {
						SetHeroFlag(i, DEF_OWNERTYPE_PLAYER, false);
					}
				}
				if (m_pClientList[i] == 0) break;
				if (m_pClientList[i]->m_iSkillMsgRecvCount >= 2) {
					//PutLogFileList(G_cTxt);
					DeleteClient(i, true, true);
				} else {
					m_pClientList[i]->m_iSkillMsgRecvCount = 0;
				}
				if (m_pClientList[i] == 0) break;
				//if (m_pClientList[i]->m_iLevel < m_pMapList[m_pClientList[i]->m_cMapIndex]->m_iLevelLimit) {
				if ((m_pClientList[i]->m_iLevel < m_pMapList[m_pClientList[i]->m_cMapIndex]->m_iLevelLimit) && (m_pClientList[i]->m_iAdminUserLevel < 2)) {
					SendNotifyMsg(0, i, DEF_NOTIFY_TOBERECALLED, 0, 0, 0, 0);
					RequestTeleportHandler(i, "0   ");
				}
				if (m_pClientList[i] == 0) break;
				//if ( (m_pMapList[m_pClientList[i]->m_cMapIndex]->m_iUpperLevelLimit != 0) &&
				//	 (m_pClientList[i]->m_iLevel > m_pMapList[m_pClientList[i]->m_cMapIndex]->m_iUpperLevelLimit) ) {
				if ((m_pMapList[m_pClientList[i]->m_cMapIndex]->m_iUpperLevelLimit != 0) &&
						  (m_pClientList[i]->m_iLevel > m_pMapList[m_pClientList[i]->m_cMapIndex]->m_iUpperLevelLimit) && (m_pClientList[i]->m_iAdminUserLevel < 2)) {
					SendNotifyMsg(0, i, DEF_NOTIFY_TOBERECALLED, 0, 0, 0, 0);
					if ((m_pClientList[i]->m_cSide == 1) &&
							  (m_pClientList[i]->m_iAdminUserLevel == 0)) {
						RequestTeleportHandler(i, "2   ", "aresden", -1, -1);
					} else if ((m_pClientList[i]->m_cSide == 2) &&
							  (m_pClientList[i]->m_iAdminUserLevel == 0)) {
						RequestTeleportHandler(i, "2   ", "elvine", -1, -1);
					}
				}
				if (m_pClientList[i] == 0) break;
				if ((strcmp(m_pClientList[i]->m_cLocation, "elvine") != 0) &&
						  (strcmp(m_pClientList[i]->m_cLocation, "elvhunter") != 0) &&
						  (strcmp(m_pClientList[i]->m_cLocation, "arehunter") != 0) &&
						  (strcmp(m_pClientList[i]->m_cLocation, "aresden") != 0) &&
						  (m_pClientList[i]->m_iLevel >= 20) &&
						  (m_pClientList[i]->m_iAdminUserLevel == 0)) {
					wsprintf(G_cTxt, "Traveller Hack: (%s) Player: (%s) is a traveller and is greater than level 19.", m_pClientList[i]->m_cIPaddress, m_pClientList[i]->m_cCharName);
					PutHackLogFileList(G_cTxt);
					DeleteClient(i, true, true);
				}
				if (m_pClientList[i] == 0) break;
				if (((memcmp(m_pClientList[i]->m_cLocation, "aresden", 7) == 0) || (memcmp(m_pClientList[i]->m_cLocation, "elvine", 6) == 0)) &&
						  (m_bIsCrusadeMode == true)) {
					iMapside = iGetMapLocationSide(m_pMapList[m_pClientList[i]->m_cMapIndex]->m_cName);
					if (iMapside > 3) iMapside2 = iMapside - 2;
					else iMapside2 = iMapside;
					if ((m_pClientList[i]->m_cSide != iMapside2) && (iMapside != 0)) {
						if ((iMapside <= 2) && (m_pClientList[i]->m_iAdminUserLevel < 1)) {
							if (m_pClientList[i]->m_cSide != 0) {
								m_pClientList[i]->m_dwWarBeginTime = timeGetTime();
								m_pClientList[i]->m_bIsWarLocation = true;
								m_pClientList[i]->m_iTimeLeft_ForceRecall = 1;
								RequestTeleportHandler(i, "1   ");
								SendNotifyMsg(0, i, DEF_NOTIFY_TOBERECALLED, 0, 0, 0, 0);
							}
						}
					}
				}
				if (m_pClientList[i] == 0) break;
				if (((memcmp(m_pClientList[i]->m_cLocation, "arehunter", 9) == 0) || (memcmp(m_pClientList[i]->m_cLocation, "elvhunter", 9) == 0)) &&
						  ((strcmp(m_pMapList[m_pClientList[i]->m_cMapIndex]->m_cName, "2ndmiddle") == 0) || (strcmp(m_pMapList[m_pClientList[i]->m_cMapIndex]->m_cName, "middleland") == 0))) {
					SendNotifyMsg(0, i, DEF_NOTIFY_TOBERECALLED, 0, 0, 0, 0);
					RequestTeleportHandler(i, "1   ");
				}
				if (m_bIsApocalypseMode == true) {
					if (memcmp(m_pMapList[m_pClientList[i]->m_cMapIndex]->m_cName, "abaddon", 7) == 0) {
						SendNotifyMsg(0, i, DEF_NOTIFY_APOCGATEOPEN, 167, 169, 0, m_pClientList[i]->m_cMapName);
					} else if (memcmp(m_pMapList[m_pClientList[i]->m_cMapIndex]->m_cName, "icebound", 8) == 0) {
						SendNotifyMsg(0, i, DEF_NOTIFY_APOCGATEOPEN, 89, 31, 0, m_pClientList[i]->m_cMapName);
					}
				}
				//50Cent - Capture The Flag
				if (m_bIsCTFMode) {
					RequestCheckFlag(i);
					if (bCheckIfIsFlagCarrier(i)) {
						if (m_pClientList[i]->m_iHP >= 1) {
							SetInvisibilityFlag(i, DEF_OWNERTYPE_PLAYER, false);
							SetIceFlag(i, DEF_OWNERTYPE_PLAYER, true);
						}
					}
				}
				if (m_pClientList[i] == 0) break;
				if ((m_bIsApocalypseMode == true) &&
						  (memcmp(m_pMapList[m_pClientList[i]->m_cMapIndex]->m_cName, "icebound", 8) == 0) &&
						  ((m_pClientList[i]->m_sX == 89 && m_pClientList[i]->m_sY == 31) ||
						  (m_pClientList[i]->m_sX == 89 && m_pClientList[i]->m_sY == 32) ||
						  (m_pClientList[i]->m_sX == 90 && m_pClientList[i]->m_sY == 31) ||
						  (m_pClientList[i]->m_sX == 90 && m_pClientList[i]->m_sY == 32))) {
					RequestTeleportHandler(i, "2   ", "druncncity", -1, -1);
				}
				if (m_pClientList[i] == 0) break;
				if ((memcmp(m_pClientList[i]->m_cLocation, "are", 3) == 0) &&
						  (strcmp(m_pMapList[m_pClientList[i]->m_cMapIndex]->m_cName, "elvfarm") == 0)) {
					SendNotifyMsg(0, i, DEF_NOTIFY_TOBERECALLED, 0, 0, 0, 0);
					RequestTeleportHandler(i, "0   ");
				}
				if (m_pClientList[i] == 0) break;
				if ((memcmp(m_pClientList[i]->m_cLocation, "elv", 3) == 0) &&
						  (strcmp(m_pMapList[m_pClientList[i]->m_cMapIndex]->m_cName, "arefarm") == 0)) {
					SendNotifyMsg(0, i, DEF_NOTIFY_TOBERECALLED, 0, 0, 0, 0);
					RequestTeleportHandler(i, "0   ");
				}
				if (m_pClientList[i] == 0) break;
				if ((strcmp(m_pMapList[m_pClientList[i]->m_cMapIndex]->m_cName, "middleland") == 0)
						  && (strcmp(m_pClientList[i]->m_cLocation, "NONE") == 0) &&
						  (m_pClientList[i]->m_iAdminUserLevel < 1)) {
					SendNotifyMsg(0, i, DEF_NOTIFY_TOBERECALLED, 0, 0, 0, 0);
					RequestTeleportHandler(i, "0   ");
				}
				if (m_pClientList[i]->m_bInRecallImpossibleMap == true) {
					m_pClientList[i]->m_iTimeLeft_ForceRecall--;
					if (m_pClientList[i]->m_iTimeLeft_ForceRecall <= 0) {
						m_pClientList[i]->m_iTimeLeft_ForceRecall = 0;
						m_pClientList[i]->m_bInRecallImpossibleMap = false;
						SendNotifyMsg(0, i, DEF_NOTIFY_TOBERECALLED, 0, 0, 0, 0);
						RequestTeleportHandler(i, "0   ");
					}
				}
				if (m_pClientList[i] == 0) break;
				m_pClientList[i]->m_iSuperAttackCount++;
				if (m_pClientList[i]->m_iSuperAttackCount > 12) {
					m_pClientList[i]->m_iSuperAttackCount = 0;
					iMaxSuperAttack = (m_pClientList[i]->m_iLevel / 10);
					if (m_pClientList[i]->m_iSuperAttackLeft < iMaxSuperAttack) m_pClientList[i]->m_iSuperAttackLeft++;
					SendNotifyMsg(0, i, DEF_NOTIFY_SUPERATTACKLEFT, 0, 0, 0, 0);
				}
				m_pClientList[i]->m_iTimeLeft_FirmStaminar--;
				if (m_pClientList[i]->m_iTimeLeft_FirmStaminar < 0) m_pClientList[i]->m_iTimeLeft_FirmStaminar = 0;
				if (m_pClientList[i] == 0) break;
				if (m_pClientList[i]->m_bIsSendingMapStatus == true) _SendMapStatus(i);
				if (m_pClientList[i]->m_iConstructionPoint > 0) {
					CheckCommanderConstructionPoint(i);
				}
			}
		}
	}
}

void CGame::OnMainLogSocketEvent(UINT /*message*/, WPARAM wParam, LPARAM lParam) {
	int iRet;
	if (m_pMainLogSock == 0) return;
	iRet = m_pMainLogSock->iOnSocketEvent(wParam, lParam);
	switch (iRet) {
		case DEF_XSOCKEVENT_CONNECTIONESTABLISH:
			PutLogList("(!!!) Main-log-socket connected!");
			bSendMsgToLS(MSGID_REQUEST_REGISTERGAMESERVER, 0);
			break;
		case DEF_XSOCKEVENT_READCOMPLETE:
			OnMainLogRead();
			break;
		case DEF_XSOCKEVENT_BLOCK:
			PutLogList("(!!!) Main-log-socket BLOCKED!");
			break;
		case DEF_XSOCKEVENT_CONFIRMCODENOTMATCH:
		case DEF_XSOCKEVENT_MSGSIZETOOLARGE:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			delete m_pMainLogSock;
			m_pMainLogSock = 0;
			PutLogList("(!!!) Main-log-socket connection lost!");
			m_bIsLogSockAvailable = false;
			if (m_bOnExitProcess == false) {
				m_cShutDownCode = 3;
				m_bOnExitProcess = true;
				m_dwExitProcessTime = timeGetTime();
				PutLogList("(!!!) GAME SERVER SHUTDOWN PROCESS BEGIN(by main-log-socket connection Lost)!!!");
			}
			break;
	}
}

void CGame::OnMainLogRead() {
	uint32_t dwMsgSize;
	char * pData, cKey;
	pData = m_pMainLogSock->pGetRcvDataPointer(&dwMsgSize, &cKey);
	if (bPutMsgQuene(DEF_MSGFROM_LOGSERVER, pData, dwMsgSize, 0, cKey) == false) {
		PutLogList("@@@@@@ CRITICAL ERROR in MsgQuene!!! @@@@@@");
	}
}

bool CGame::bSendMsgToLS(uint32_t dwMsg, int iClientH, bool bFlag, char* pData) {
	uint32_t * dwp;
	uint16_t * wp;
	int iRet;
	int i;
	int iSize;
	char cCharName[11], cAccountName[11], cAccountPassword[11], cAddress[16], cGuildName[21], cTxt[120], * cp;
	char cGuildLoc[11], cTemp[120];
	int * ip, iSendSize;
	/*
	m_iCurSubLogSockIndex++;
	if (m_iCurSubLogSockIndex >= DEF_MAXSUBLOGSOCK) m_iCurSubLogSockIndex = 0;
	iCnt = 0;
	bLoopFlag = false;
	while (bLoopFlag == false) {
		if (m_pSubLogSock[m_iCurSubLogSockIndex] != 0)
			 bLoopFlag = true;
		else m_iCurSubLogSockIndex++;
		iCnt++;
		if (iCnt >= DEF_MAXSUBLOGSOCK) {
			if (m_bOnExitProcess == false) {
				m_cShutDownCode      = 3;
				m_bOnExitProcess     = true;
				m_dwExitProcessTime  = timeGetTime();
				PutLogList("(!) GAME SERVER SHUTDOWN PROCESS STARTED(by Log-server connection Lost)!!!");
			}
			return false;
		}
	}
	 */
	// v1.41
	std::memset(G_cData50000, 0, sizeof(G_cData50000));
	std::memset(cCharName, 0, sizeof(cCharName));
	std::memset(cAccountName, 0, sizeof(cAccountName));
	std::memset(cAccountPassword, 0, sizeof(cAccountPassword));
	std::memset(cAddress, 0, sizeof(cAddress));
	std::memset(cGuildName, 0, sizeof(cGuildName));
	std::memset(cGuildLoc, 0, sizeof(cGuildLoc));
	switch (dwMsg) {
			// New 07/05/2004
		case MSGID_GAMEMASTERLOG:
			if (_bCheckSubLogSocketIndex() == false) return false;
			if (m_pClientList[iClientH] == 0) return false;
			if (pData == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_GAMEMASTERLOG;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			iSize = strlen(pData);
			memcpy((char *) cp, pData, iSize);
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 6 + iSize);
			iSendSize = 6 + iSize;
			break;
			// v2.15
		case MSGID_GAMEITEMLOG:
			if (_bCheckSubLogSocketIndex() == false) return false;
			//		if (m_pClientList[iClientH] == 0) return false;
			if (pData == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_GAMEITEMLOG;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			iSize = strlen(pData);
			memcpy((char *) cp, pData, iSize);
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 6 + iSize);
			iSendSize = 6 + iSize;
			break;
		case MSGID_SENDSERVERSHUTDOWNMSG:
			if (m_pMainLogSock == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_SENDSERVERSHUTDOWNMSG;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			iRet = m_pMainLogSock->iSendMsg(G_cData50000, 6);
			break;
		case MSGID_GAMESERVERSHUTDOWNED:
			if (m_pMainLogSock == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_GAMESERVERSHUTDOWNED;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			iRet = m_pMainLogSock->iSendMsg(G_cData50000, 6);
			return true;
		case MSGID_REQUEST_SETACCOUNTWAITSTATUS:
		case MSGID_REQUEST_SETACCOUNTINITSTATUS:
			if (_bCheckSubLogSocketIndex() == false) return false;
			if (m_pClientList[iClientH] == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = dwMsg;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			memcpy(cp, m_pClientList[iClientH]->m_cAccountName, 10);
			cp += 10;
			ip = (int *) cp;
			*ip = m_pClientList[iClientH]->m_iLevel;
			cp += 4;
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 20);
			iSendSize = 16;
			break;
		case MSGID_ENTERGAMECONFIRM:
			if (_bCheckSubLogSocketIndex() == false) return false;
			if (m_pClientList[iClientH] == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_ENTERGAMECONFIRM;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			memcpy(cp, m_pClientList[iClientH]->m_cAccountName, 10);
			cp += 10;
			memcpy(cp, m_pClientList[iClientH]->m_cAccountPassword, 10);
			cp += 10;
			memcpy(cp, m_cServerName, 10);
			cp += 10;
			std::memset(cTxt, 0, sizeof(cTxt));
			m_pClientList[iClientH]->m_pXSock->iGetPeerAddress(cTxt);
			memcpy(cp, cTxt, 16);
			cp += 16;
			ip = (int *) cp;
			*ip = m_pClientList[iClientH]->m_iLevel;
			cp += 4;
			//testcode
			wsprintf(G_cTxt, "Confirmed. Account: (%s) Name: (%s) Level: (%d)", m_pClientList[iClientH]->m_cAccountName, m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_iLevel);
			PutLogList(G_cTxt);
			if ((m_bIsCrusadeMode == false) && (m_pClientList[iClientH]->m_dwCrusadeGUID == m_dwCrusadeGUID)) {
				break;
			} else
				m_pClientList[iClientH]->m_dwCrusadeGUID = m_dwCrusadeGUID;
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 56);
			iSendSize = 56;
			break;
		case MSGID_REQUEST_REGISTERGAMESERVER:
			if (m_pMainLogSock == 0) return false;
			wsprintf(cTxt, "(!) Try to register game server(%s)", m_cServerName);
			PutLogList(cTxt);
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_REQUEST_REGISTERGAMESERVER;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			memcpy(cAccountName, m_cServerName, 10);
			if (m_iGameServerMode == 1) {
				memcpy(cAddress, m_cGameServerAddrExternal, strlen(m_cGameServerAddrExternal));
			}
			if (m_iGameServerMode == 2) {
				memcpy(cAddress, m_cGameServerAddr, strlen(m_cGameServerAddr));
			}
			memcpy(cp, cAccountName, 10);
			cp += 10;
			memcpy(cp, cAddress, 16);
			cp += 16;
			wp = (uint16_t *) cp;
			*wp = m_iGameServerPort;
			cp += 2;
			*cp = m_iTotalMaps;
			cp++;
			for (i = 0; i < m_iTotalMaps; i++) {
				memcpy(cp, m_pMapList[i]->m_cName, 11);
				cp += 11;
			}
			iRet = m_pMainLogSock->iSendMsg(G_cData50000, 35 + m_iTotalMaps * 11);
			return true;
		case MSGID_REQUEST_PLAYERDATA:
			if (_bCheckSubLogSocketIndex() == false) return false;
			if (m_pClientList[iClientH] == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_REQUEST_PLAYERDATA;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			//testcode
			if (strlen(m_pClientList[iClientH]->m_cCharName) == 0) PutLogList("(X) CharName 0!");
			memcpy(cCharName, m_pClientList[iClientH]->m_cCharName, 10);
			memcpy(cAccountName, m_pClientList[iClientH]->m_cAccountName, 10);
			memcpy(cAccountPassword, m_pClientList[iClientH]->m_cAccountPassword, 10);
			memcpy((char *) cp, cCharName, 10);
			cp += 10;
			memcpy((char *) cp, cAccountName, 10);
			cp += 10;
			memcpy((char *) cp, cAccountPassword, 10);
			cp += 10;
			std::memset(cTemp, 0, sizeof(cTemp));
			iRet = m_pClientList[iClientH]->m_pXSock->iGetPeerAddress(cTemp);
			memcpy((char *) cp, cTemp, 15);
			cp += 15;
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 52);
			iSendSize = 52;
			break;
		case MSGID_REQUEST_SAVEPLAYERDATA_REPLY:
		case MSGID_REQUEST_SAVEPLAYERDATA:
		case MSGID_REQUEST_SAVEPLAYERDATALOGOUT:
			if (_bCheckSubLogSocketIndex() == false) return false;
			if (m_pClientList[iClientH] == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = dwMsg;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			memcpy(cCharName, m_pClientList[iClientH]->m_cCharName, 10);
			memcpy(cAccountName, m_pClientList[iClientH]->m_cAccountName, 10);
			memcpy(cAccountPassword, m_pClientList[iClientH]->m_cAccountPassword, 10);
			memcpy((char *) cp, cCharName, 10);
			cp += 10;
			memcpy((char *) cp, cAccountName, 10);
			cp += 10;
			memcpy((char *) cp, cAccountPassword, 10);
			cp += 10;
			*cp = (char) bFlag;
			cp++;
			iSize = _iComposePlayerDataFileContents(iClientH, cp);
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 37 + iSize);
			iSendSize = 37 + iSize;
			break;
		case MSGID_REQUEST_NOSAVELOGOUT:
			if (_bCheckSubLogSocketIndex() == false) return false;
			if (m_pClientList[iClientH] == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_REQUEST_NOSAVELOGOUT;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			memcpy(cCharName, m_pClientList[iClientH]->m_cCharName, 10);
			memcpy(cAccountName, m_pClientList[iClientH]->m_cAccountName, 10);
			memcpy(cAccountPassword, m_pClientList[iClientH]->m_cAccountPassword, 10);
			memcpy((char *) cp, cCharName, 10);
			cp += 10;
			memcpy((char *) cp, cAccountName, 10);
			cp += 10;
			memcpy((char *) cp, cAccountPassword, 10);
			cp += 10;
			*cp = (char) bFlag;
			cp++;
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 37);
			iSendSize = 37;
			break;
		case MSGID_REQUEST_CREATENEWGUILD:
			if (_bCheckSubLogSocketIndex() == false) return false;
			if (m_pClientList[iClientH] == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_REQUEST_CREATENEWGUILD;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			memcpy(cCharName, m_pClientList[iClientH]->m_cCharName, 10);
			memcpy(cAccountName, m_pClientList[iClientH]->m_cAccountName, 10);
			memcpy(cAccountPassword, m_pClientList[iClientH]->m_cAccountPassword, 10);
			memcpy(cGuildName, m_pClientList[iClientH]->m_cGuildName, 20);
			memcpy(cGuildLoc, m_pClientList[iClientH]->m_cLocation, 10);
			memcpy((char *) cp, cCharName, 10);
			cp += 10;
			memcpy((char *) cp, cAccountName, 10);
			cp += 10;
			memcpy((char *) cp, cAccountPassword, 10);
			cp += 10;
			memcpy((char *) cp, cGuildName, 20);
			cp += 20;
			memcpy((char *) cp, cGuildLoc, 10);
			cp += 10;
			ip = (int *) cp;
			*ip = m_pClientList[iClientH]->m_iGuildGUID;
			cp += 4;
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 75);
			iSendSize = 75;
			break;
		case MSGID_REQUEST_DISBANDGUILD:
			if (_bCheckSubLogSocketIndex() == false) return false;
			if (m_pClientList[iClientH] == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_REQUEST_DISBANDGUILD;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			memcpy(cCharName, m_pClientList[iClientH]->m_cCharName, 10);
			memcpy(cAccountName, m_pClientList[iClientH]->m_cAccountName, 10);
			memcpy(cAccountPassword, m_pClientList[iClientH]->m_cAccountPassword, 10);
			memcpy(cGuildName, m_pClientList[iClientH]->m_cGuildName, 20);
			memcpy((char *) cp, cCharName, 10);
			cp += 10;
			memcpy((char *) cp, cAccountName, 10);
			cp += 10;
			memcpy((char *) cp, cAccountPassword, 10);
			cp += 10;
			memcpy((char *) cp, cGuildName, 20);
			cp += 20;
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 56);
			iSendSize = 56;
			break;
		case MSGID_REQUEST_HELDENIAN_WINNER:
			if (_bCheckSubLogSocketIndex() == false) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_REQUEST_HELDENIAN_WINNER;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			if (m_cHeldenianVictoryType == 1)
				memcpy(cp, "aresden", 7);
			else if (m_cHeldenianVictoryType == 2)
				memcpy(cp, "elvine", 6);
			else
				memcpy(cp, "draw", 4);
			cp += 7;
			ip = (int *) cp;
			ip = (int *) m_dwHeldenianStartTime;
			cp += 4;
			ip = (int *) cp;
			ip = (int *) m_dwHeldenianFinishTime;
			cp += 4;
			ip = (int *) cp;
			*ip = (int) m_cHeldenianModeType;
			cp += 4;
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 21);
			iSendSize = 21;
			break;
		case MSGID_REQUEST_UPDATEGUILDINFO_NEWGUILDSMAN:
			if (_bCheckSubLogSocketIndex() == false) return false;
			if (m_pClientList[iClientH] == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_REQUEST_UPDATEGUILDINFO_NEWGUILDSMAN;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			memcpy(cCharName, m_pClientList[iClientH]->m_cCharName, 10);
			memcpy(cGuildName, m_pClientList[iClientH]->m_cGuildName, 20);
			memcpy((char *) cp, cCharName, 10);
			cp += 10;
			memcpy((char *) cp, cGuildName, 20);
			cp += 20;
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 36);
			iSendSize = 36;
			break;
		case MSGID_REQUEST_UPDATEGUILDINFO_DELGUILDSMAN:
			if (_bCheckSubLogSocketIndex() == false) return false;
			if (m_pClientList[iClientH] == 0) return false;
			dwp = (uint32_t *) (G_cData50000 + DEF_INDEX4_MSGID);
			*dwp = MSGID_REQUEST_UPDATEGUILDINFO_DELGUILDSMAN;
			wp = (uint16_t *) (G_cData50000 + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;
			cp = (char *) (G_cData50000 + DEF_INDEX2_MSGTYPE + 2);
			memcpy(cCharName, m_pClientList[iClientH]->m_cCharName, 10);
			memcpy(cGuildName, m_pClientList[iClientH]->m_cGuildName, 20);
			memcpy((char *) cp, cCharName, 10);
			cp += 10;
			memcpy((char *) cp, cGuildName, 20);
			cp += 20;
			iRet = m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, 36);
			iSendSize = 36;
			break;
	}
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			wsprintf(G_cTxt, "(!!!) Sub-log-socket(%d) send error!", m_iCurSubLogSockIndex);
			PutLogList(G_cTxt);
			PutLogFileList(G_cTxt);
			delete m_pSubLogSock[m_iCurSubLogSockIndex];
			m_pSubLogSock[m_iCurSubLogSockIndex] = 0;
			m_bIsSubLogSockAvailable[m_iCurSubLogSockIndex] = false;
			m_iSubLogSockActiveCount--;
			m_pSubLogSock[m_iCurSubLogSockIndex] = new XSocket(m_hWnd, DEF_SERVERSOCKETBLOCKLIMIT);
			m_pSubLogSock[m_iCurSubLogSockIndex]->bConnect(m_cLogServerAddr, m_iLogServerPort, (WM_ONLOGSOCKETEVENT + m_iCurSubLogSockIndex + 1));
			m_pSubLogSock[m_iCurSubLogSockIndex]->bInitBufferSize(DEF_MSGBUFFERSIZE);
			wsprintf(G_cTxt, "(!) Try to reconnect sub-log-socket(%d)... Addr:%s  Port:%d", m_iCurSubLogSockIndex, m_cLogServerAddr, m_iLogServerPort);
			PutLogList(G_cTxt);
			m_iSubLogSockFailCount++;
			if (_bCheckSubLogSocketIndex() == false) return false;
			m_pSubLogSock[m_iCurSubLogSockIndex]->iSendMsg(G_cData50000, iSendSize);
			return false;
	}
	return true;
}

void CGame::ResponsePlayerDataHandler(char * pData, uint32_t dwSize) {
	uint16_t * wp;
	char * cp, cCharName[11], cTxt[120];
	int i;
	std::memset(cCharName, 0, sizeof(cCharName));
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cCharName, cp, 10);
	cp += 10;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if (m_pClientList[i] != 0) {
			if (memcmp(m_pClientList[i]->m_cCharName, cCharName, 10) == 0) {
				wp = (uint16_t *) (pData + DEF_INDEX2_MSGTYPE);
				switch (*wp) {
					case DEF_LOGRESMSGTYPE_CONFIRM:
						InitPlayerData(i, pData, dwSize);
						break;
					case DEF_LOGRESMSGTYPE_REJECT:
						wsprintf(G_cTxt, "(HACK?) Not existing character(%s) data request! Rejected!", m_pClientList[i]->m_cCharName);
						PutLogList(G_cTxt);
						//PutLogFileList(G_cTxt); // v1.4
						DeleteClient(i, false, false);
						break;
					default:
						break;
				}
				return;
			}
		}
	wsprintf(cTxt, "(!)Non-existing player data received from Log server: CharName(%s)", cCharName);
	PutLogList(cTxt);
}

void CGame::InitPlayerData(int iClientH, char * pData, uint32_t dwSize) {
	char * cp, cName[11], cData[256], cTxt[256], cGuildStatus, cQuestRemain;
	uint32_t * dwp;
	uint16_t * wp;
	int iRet;
	int i;
	int iTotalPoints;
	bool bRet;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == true) return;
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	std::memset(cName, 0, sizeof(cName));
	memcpy(cName, cp, 10);
	cp += 10;
	//m_pClientList[iClientH]->m_cAccountStatus = *cp;
	cp++;
	cGuildStatus = *cp;
	cp++;
	m_pClientList[iClientH]->m_iHitRatio = 0;
	m_pClientList[iClientH]->m_iDefenseRatio = 0;
	m_pClientList[iClientH]->m_cSide = 0;
	bRet = _bDecodePlayerDatafileContents(iClientH, cp, dwSize - 19);
	if (bRet == false) {
		wsprintf(G_cTxt, "(HACK?) Character(%s) data error!", m_pClientList[iClientH]->m_cCharName);
		DeleteClient(iClientH, false, true);
		return;
	}
	if (m_bHappyHour == true) {
		StarHappyHour();
	}
	___RestorePlayerCharacteristics(iClientH);
	___RestorePlayerRating(iClientH);
	if ((m_pClientList[iClientH]->m_sX == -1) && (m_pClientList[iClientH]->m_sY == -1)) {
		GetMapInitialPoint(m_pClientList[iClientH]->m_cMapIndex, &m_pClientList[iClientH]->m_sX, &m_pClientList[iClientH]->m_sY, m_pClientList[iClientH]->m_cLocation);
	}
	// New 17/05/2004
	SetPlayingStatus(iClientH);
	int iTemp;
	int iTemp2;
	iTemp = m_pClientList[iClientH]->m_iStatus;
	iTemp = 0x0FFFFFFF & iTemp;
	iTemp2 = iGetPlayerABSStatus(iClientH);
	iTemp = iTemp | (iTemp2 << 28);
	m_pClientList[iClientH]->m_iStatus = iTemp;
	if (m_pClientList[iClientH]->m_iLevel >= DEF_LIMITHUNTERLEVEL)
		if (m_pClientList[iClientH]->m_bIsPlayerCivil == true)
			ForceChangePlayMode(iClientH, false);
	m_pClientList[iClientH]->m_iNextLevelExp = m_iLevelExpTable[m_pClientList[iClientH]->m_iLevel + 1]; //iGetLevelExp(m_pClientList[iClientH]->m_iLevel + 1);
	CalcTotalItemEffect(iClientH, -1, true); //false
	iCalcTotalWeight(iClientH);
	// New 23/05/2004
	//GM Invi comes here
	if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) {
		SetInvisibilityFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
	}
	if ((m_pClientList[iClientH]->m_iLevel > 2) && (m_pClientList[iClientH]->m_iAdminUserLevel == 0) &&
			  (m_pClientList[iClientH]->m_iExp < iGetLevelExp(m_pClientList[iClientH]->m_iLevel - 1) - 3000)) {
		m_pClientList[iClientH]->m_iExp = iGetLevelExp(m_pClientList[iClientH]->m_iLevel - 1) - 3000;
		wsprintf(G_cTxt, "IP (%s) Player: (%s) has below level experience (%d).", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_iExp);
		PutHackLogFileList(G_cTxt);
		DeleteClient(iClientH, true, true);
		return;
	}
	iTotalPoints = 0;
	for (i = 0; i < DEF_MAXSKILLTYPE; i++)
		iTotalPoints += m_pClientList[iClientH]->m_cSkillMastery[i];
	if ((iTotalPoints - 21 > m_sCharSkillLimit) && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) {
		wsprintf(G_cTxt, "Packet Editing: (%s) Player: (%s) - has more than allowed skill points (%d).", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, iTotalPoints);
		PutHackLogFileList(G_cTxt);
		DeleteClient(iClientH, true, true);
		return;
	}
	CheckSpecialEvent(iClientH);
	bCheckMagicInt(iClientH);
	if ((cGuildStatus == 0) && (memcmp(m_pClientList[iClientH]->m_cGuildName, "NONE", 4) != 0)) {
		std::memset(m_pClientList[iClientH]->m_cGuildName, 0, sizeof(m_pClientList[iClientH]->m_cGuildName));
		strcpy(m_pClientList[iClientH]->m_cGuildName, "NONE");
		m_pClientList[iClientH]->m_iGuildRank = -1;
		m_pClientList[iClientH]->m_iGuildGUID = -1;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_GUILDDISBANDED, 0, 0, 0, m_pClientList[iClientH]->m_cGuildName);
	}
	if (m_pClientList[iClientH]->m_iQuest != 0) {
		cQuestRemain = (m_pQuestConfigList[m_pClientList[iClientH]->m_iQuest]->m_iMaxCount - m_pClientList[iClientH]->m_iCurQuestCount);
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTCOUNTER, cQuestRemain, 0, 0, 0);
		_bCheckIsQuestCompleted(iClientH);
	}
	if (m_pClientList[iClientH] == 0) {
		wsprintf(cTxt, "<%d> InitPlayerData error - Socket error! Disconnected.", iClientH);
		PutLogList(cTxt);
		return;
	}
	std::memset(cData, 0, sizeof(cData));
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_RESPONSE_INITPLAYER;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = DEF_MSGTYPE_CONFIRM;
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			wsprintf(cTxt, "<%d> InitPlayerData - Socket error! Disconnected.", iClientH);
			PutLogList(cTxt);
			DeleteClient(iClientH, false, true);
			return;
	}
	m_pClientList[iClientH]->m_bIsInitComplete = true;
	bSendMsgToLS(MSGID_ENTERGAMECONFIRM, iClientH);
	m_pClientList[iClientH]->m_dwLastActionTime = m_pClientList[iClientH]->m_dwAFKCheckTime = timeGetTime();
	if (m_iTotalClients > DEF_MAXONESERVERUSERS) {
		switch (iDice(1, 2)) {
			case 1:
				RequestTeleportHandler(iClientH, "2   ", "bisle", -1, -1);
				break;
			case 2:
				switch (m_pClientList[iClientH]->m_cSide) {
					case 0: RequestTeleportHandler(iClientH, "2   ", "resurr1", -1, -1);
						break;
					case 1: RequestTeleportHandler(iClientH, "2   ", "resurr1", -1, -1);
						break;
					case 2: RequestTeleportHandler(iClientH, "2   ", "resurr2", -1, -1);
						break;
				}
				break;
		}
	}
	//PlayerOrder_GetSkills(iClientH);
	return;
}

void CGame::GameProcess() {
	NpcProcess();
	MsgProcess();
	DelayEventProcess();
}

bool CGame::bReadProgramConfigFile(const char * cFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadMode, cTxt[120], cGSMode[16] = "";
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	bool bLogDNS = false; // bLogDNS added by snaipperi
	cReadMode = 0;
	hFile = CreateFile(cFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFn, "rt");
	if (pFile == 0) {
		//	PutLogList("(!) Cannot open configuration file.");
		return false;
	} else {
		PutLogList("(!) Reading configuration file...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		//token = strtok( cp, seps );
		while (token != 0) {
			if (cReadMode != 0) {
				switch (cReadMode) {
					case 1:
						std::memset(m_cServerName, 0, sizeof(m_cServerName));
						if (strlen(token) > 10) {
							wsprintf(cTxt, "(!!!) Game server name(%s) must within 10 chars!", token);
							PutLogList(cTxt);
							return false;
						}
						strcpy(m_cServerName, token);
						wsprintf(cTxt, "(*) Game server name : %s", m_cServerName);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 2:
						std::memset(m_cGameServerAddr, 0, sizeof(m_cGameServerAddr));
						char ServerAddr[50];
						::gethostname(ServerAddr, 50);
						struct hostent *pHostEnt;
						pHostEnt = ::gethostbyname(ServerAddr);
						if (pHostEnt != 0) {
							wsprintf(ServerAddr, "%d.%d.%d.%d",
									  (pHostEnt->h_addr_list[0][0] & 0x00ff),
									  (pHostEnt->h_addr_list[0][1] & 0x00ff),
									  (pHostEnt->h_addr_list[0][2] & 0x00ff),
									  (pHostEnt->h_addr_list[0][3] & 0x00ff));
						}
						strcpy(m_cGameServerAddr, ServerAddr);
						wsprintf(cTxt, "(*) Game server address : %s", m_cGameServerAddr);
						PutLogList(cTxt);
						m_iGameServerPort = atoi(token);
						wsprintf(cTxt, "(*) Game server port : %d", m_iGameServerPort);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 3:
						std::memset(m_cLogServerAddr, 0, sizeof(m_cLogServerAddr));
						if (bLogDNS == true) { //bLogDNS by Snaipperi
							PutLogList(cTxt);
							char *cAddress = token;
							char cDnsResult[40];
							struct hostent *host_entry;
							host_entry = gethostbyname(cAddress);
							if (host_entry == 0) {
								wsprintf(cTxt, "(!)DNS (%s) failed", token);
								PutLogList(cTxt);
								return false;
							}
							wsprintf(cDnsResult, "%d.%d.%d.%d",
									  (pHostEnt->h_addr_list[0][0] & 0x00ff),
									  (pHostEnt->h_addr_list[0][1] & 0x00ff),
									  (pHostEnt->h_addr_list[0][2] & 0x00ff),
									  (pHostEnt->h_addr_list[0][3] & 0x00ff));
							wsprintf(cTxt, "(!)DNS from (%s) to (%s) success!", token, cDnsResult);
							PutLogList(cTxt);
							strcpy(m_cLogServerAddr, cDnsResult);
							wsprintf(cTxt, "(*) Log server address : %s", m_cLogServerAddr);
							PutLogList(cTxt);
							cReadMode = 0;
							break;
						}
						if (strlen(token) > 20) {
							wsprintf(cTxt, "(!!!) Log server address(%s) must within 20 chars!", token);
							PutLogList(cTxt);
							return false;
						}
						strcpy(m_cLogServerAddr, token);
						wsprintf(cTxt, "(*) Log server address : %s", m_cLogServerAddr);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 4:
						m_iLogServerPort = atoi(token);
						wsprintf(cTxt, "(*) Log server port : %d", m_iLogServerPort);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 5:
						if (strlen(token) > 10) {
							wsprintf(cTxt, "(!!!) CRITICAL ERROR! Map name(%s) must within 10 chars!", token);
							PutLogList(cTxt);
							return false;
						}
						if (_bRegisterMap(token) == false) {
							return false;
						}
						cReadMode = 0;
						break;
					case 8:
						std::memset(m_cGameServerAddrInternal, 0, sizeof(m_cGameServerAddrInternal));
						if (strlen(token) > 15) {
							wsprintf(cTxt, "(!!!) Internal (LAN) Game server address(%s) must within 15 chars!", token);
							PutLogList(cTxt);
							return false;
						}
						strcpy(m_cGameServerAddrInternal, token);
						wsprintf(cTxt, "(*) Internal (LAN) Game server address : %s", m_cGameServerAddrInternal);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 9:
						std::memset(m_cGameServerAddrExternal, 0, sizeof(m_cGameServerAddrExternal));
						if (strlen(token) > 15) {
							wsprintf(cTxt, "(!!!) External (Internet) Game server address(%s) must within 15 chars!", token);
							PutLogList(cTxt);
							return false;
						}
						strcpy(m_cGameServerAddrExternal, token);
						wsprintf(cTxt, "(*) External (Internet) Game server address : %s", m_cGameServerAddrExternal);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 10:
						std::memset(m_cGameServerAddr, 0, sizeof(m_cGameServerAddr));
						if (strlen(token) > 15) {
							wsprintf(cTxt, "(!!!) Game server address(%s) must within 15 chars!", token);
							PutLogList(cTxt);
							return false;
						}
						strcpy(m_cGameServerAddr, token);
						wsprintf(cTxt, "(*) Game server address : %s", m_cGameServerAddr);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 11:
						if ((memcmp(token, "lan", 3) == 0) || (memcmp(token, "LAN", 3) == 0)) {
							m_iGameServerMode = 1;
							memcpy(cGSMode, "LAN", 3);
						}
						if ((memcmp(token, "internet", 3) == 0) || (memcmp(token, "INTERNET", 3) == 0)) {
							m_iGameServerMode = 2;
							memcpy(cGSMode, "INTERNET", 8);
						}
						if (m_iGameServerMode == 0) {
							wsprintf(cTxt, "(!!!) Game server mode(%s) must be either LAN/lan/INTERNET/internet", token);
							PutLogList(cTxt);
							return false;
						}
						wsprintf(cTxt, "(*) Game server mode : %s", cGSMode);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 13: //Log DNS by Snaipperi
						if (memcmp(token, "true", 4) == 0) {
							bLogDNS = true;
						} else bLogDNS = false;
						wsprintf(cTxt, "Log DNS is set to %i", bLogDNS);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
				}
			} else {
				if (memcmp(token, "game-server-name", 16) == 0) cReadMode = 1;
				if (memcmp(token, "game-server-port", 16) == 0) cReadMode = 2;
				if (memcmp(token, "log-server-address", 18) == 0) cReadMode = 3;
				if (memcmp(token, "internal-log-server-port", 24) == 0) cReadMode = 4;
				if (memcmp(token, "game-server-map", 15) == 0) cReadMode = 5;
				if (memcmp(token, "game-server-internal-address", 28) == 0) cReadMode = 8;
				if (memcmp(token, "game-server-external-address", 28) == 0) cReadMode = 9;
				if (memcmp(token, "game-server-address", 19) == 0) cReadMode = 10;
				if (memcmp(token, "game-server-mode", 16) == 0) cReadMode = 11;
				if (memcmp(token, "log-server-dns", 14) == 0) cReadMode = 13;
			}
			token = pStrTok->pGet();
			//token = strtok( 0, seps );
		}
		delete pStrTok;
		delete cp;
	}
	if (pFile != 0) fclose(pFile);
	if (m_iGameServerMode == 0) {
		wsprintf(cTxt, "(!!!) Game server mode cannot be empty. It must be either LAN/lan/INTERNET/internet", token);
		PutLogList(cTxt);
		return false;
	}
	return true;
}

bool CGame::bReadSettingsConfigFile(const char * cFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadMode, cTxt[120], len;
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	cReadMode = 0;
	hFile = CreateFile(cFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFn, "rt");
	if (pFile == 0) {
		//   PutLogList("(!) Cannot open configuration file.");
		return false;
	} else {
		PutLogList("(!) Reading settings file...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		//token = strtok( cp, seps );
		while (token != 0) {
			if (cReadMode != 0) {
				switch (cReadMode) {
					case 1:
						if ((strlen(token) != 0) && (strlen(token) <= 10000) && (strlen(token) >= 1)) {
							m_iPrimaryDropRate = atoi(token);
						} else {
							wsprintf(cTxt, "(!!!) Primary drop rate(%s) invalid must be between 1 to 10000", token);
							PutLogList(cTxt);
						}
						wsprintf(cTxt, "(*) Primary drop rate: (%d)", m_iPrimaryDropRate);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 2:
						if ((strlen(token) != 0) && (strlen(token) <= 10000) && (strlen(token) >= 1)) {
							m_iSecondaryDropRate = atoi(token);
						} else {
							wsprintf(cTxt, "(!!!) Secondary drop rate(%s) invalid must be between 1 to 10000", token);
							PutLogList(cTxt);
						}
						wsprintf(cTxt, "(*) Secondary drop rate: (%d)", m_iSecondaryDropRate);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 3:
						if ((memcmp(token, "classic", 7) == 0) || (memcmp(token, "CLASSIC", 7) == 0)) {
							m_bEnemyKillMode = false;
							wsprintf(cTxt, "(*) Enemy Kill Mode: CLASSIC");
							PutLogList(cTxt);
						} else if ((memcmp(token, "deathmatch", 10) == 0) || (memcmp(token, "DEATHMATCH", 10) == 0)) {
							m_bEnemyKillMode = true;
							wsprintf(cTxt, "(*) Enemy Kill Mode: DEATHMATCH");
							PutLogList(cTxt);
						} else {
							wsprintf(cTxt, "(!!!) ENEMY-KILL-MODE: (%s) must be either DEATHMATCH or CLASSIC", token);
							PutLogList(cTxt);
							return false;
						}
						cReadMode = 0;
						break;
					case 4:
						if ((strlen(token) != 0) && (strlen(token) <= 100) && (strlen(token) >= 1)) {
							m_iEnemyKillAdjust = atoi(token);
						} else {
							wsprintf(cTxt, "(!!!) ENEMY-KILL-ADJUST: (%s) invalid must be between 1 to 100", token);
							PutLogList(cTxt);
						}
						wsprintf(cTxt, "(*) Player gains (%d) EK per enemy kill.", m_iEnemyKillAdjust);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 5:
						if ((memcmp(token, "on", 2) == 0) || (memcmp(token, "ON", 2) == 0)) {
							m_bAdminSecurity = true;
							wsprintf(cTxt, "(*) Administator actions limited through security.");
							PutLogList(cTxt);
						}
						if ((memcmp(token, "off", 3) == 0) || (memcmp(token, "OFF", 3) == 0)) {
							m_bAdminSecurity = false;
							wsprintf(cTxt, "(*) Administator vulnerability ignored.");
							PutLogList(cTxt);
						}
						cReadMode = 0;
						break;
					case 6:
						m_sRaidTimeMonday = atoi(token);
						if (m_sRaidTimeMonday == 0) m_sRaidTimeMonday = 3;
						wsprintf(cTxt, "(*) Monday Raid Time : (%d) minutes", m_sRaidTimeMonday);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 7:
						m_sRaidTimeTuesday = atoi(token);
						if (m_sRaidTimeTuesday == 0) m_sRaidTimeTuesday = 3;
						wsprintf(cTxt, "(*) Tuesday Raid Time : (%d) minutes", m_sRaidTimeTuesday);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 8:
						m_sRaidTimeWednesday = atoi(token);
						if (m_sRaidTimeWednesday == 0) m_sRaidTimeWednesday = 3;
						wsprintf(cTxt, "(*) Wednesday Raid Time : (%d) minutes", m_sRaidTimeWednesday);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 9:
						m_sRaidTimeThursday = atoi(token);
						if (m_sRaidTimeThursday == 0) m_sRaidTimeThursday = 3;
						wsprintf(cTxt, "(*) Thursday Raid Time : (%d) minutes", m_sRaidTimeThursday);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 10:
						m_sRaidTimeFriday = atoi(token);
						if (m_sRaidTimeFriday == 0) m_sRaidTimeFriday = 10;
						wsprintf(cTxt, "(*) Friday Raid Time : (%d) minutes", m_sRaidTimeFriday);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 11:
						m_sRaidTimeSaturday = atoi(token);
						if (m_sRaidTimeSaturday == 0) m_sRaidTimeSaturday = 45;
						wsprintf(cTxt, "(*) Saturday Raid Time : (%d) minutes", m_sRaidTimeSaturday);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 12:
						m_sRaidTimeSunday = atoi(token);
						if (m_sRaidTimeSunday == 0) m_sRaidTimeSunday = 60;
						wsprintf(cTxt, "(*) Sunday Raid Time : (%d) minutes", m_sRaidTimeSunday);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 13:
						if ((memcmp(token, "player", 6) == 0) || (memcmp(token, "PLAYER", 6) == 0)) {
							m_iLogChatOption = 1;
							wsprintf(cTxt, "(*) Logging Player Chat.");
							PutLogList(cTxt);
						}
						if ((memcmp(token, "gm", 2) == 0) || (memcmp(token, "GM", 2) == 0)) {
							m_iLogChatOption = 2;
							wsprintf(cTxt, "(*) Logging GM Chat.");
							PutLogList(cTxt);
						}
						if ((memcmp(token, "all", 3) == 0) || (memcmp(token, "ALL", 3) == 0)) {
							m_iLogChatOption = 3;
							wsprintf(cTxt, "(*) Logging All Chat.");
							PutLogList(cTxt);
						}
						if ((memcmp(token, "none", 4) == 0) || (memcmp(token, "NONE", 4) == 0)) {
							m_iLogChatOption = 4;
							wsprintf(cTxt, "(*) Not Logging Any Chat.");
							PutLogList(cTxt);
						}
						cReadMode = 0;
						break;
					case 14:
						m_iSummonGuildCost = atoi(token);
						wsprintf(cTxt, "(*) Summoning guild costs (%d) gold", m_iSummonGuildCost);
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 15:
						m_sSlateSuccessRate = atoi(token);
						wsprintf(cTxt, "(*) Slate Success Rate (%d) percent", m_sSlateSuccessRate);
						PutLogList(cTxt);
						if (m_sSlateSuccessRate == 0) m_sSlateSuccessRate = 14;
						cReadMode = 0;
						break;
					case 16:
						m_sCharStatLimit = atoi(token);
						if (m_sCharStatLimit == 0) m_sCharStatLimit = 200;
						cReadMode = 0;
						break;
					case 17:
						m_sCharSkillLimit = atoi(token);
						if (m_sCharSkillLimit == 0) m_sCharSkillLimit = 700;
						cReadMode = 0;
						break;
					case 18:
						m_cRepDropModifier = atoi(token);
						wsprintf(cTxt, "(*) Rep<->Drop modifier: (%d)", m_cRepDropModifier);
						PutLogList(cTxt);
						if (m_cRepDropModifier < 0) m_cRepDropModifier = 0;
						cReadMode = 0;
						break;
					case 19:
						std::memset(m_cSecurityNumber, 0, sizeof(m_cSecurityNumber));
						len = strlen(token);
						if (len > 10) len = 10;
						memcpy(m_cSecurityNumber, token, len);
						wsprintf(cTxt, "(*) Security number memorized!");
						PutLogList(cTxt);
						cReadMode = 0;
						break;
					case 20:
						m_sMaxPlayerLevel = atoi(token);
						if (m_sMaxPlayerLevel == 0) m_sMaxPlayerLevel = 100;
						cReadMode = 0;
						break;
				}
			} else {
				if (memcmp(token, "primary-drop-rate", 17) == 0) cReadMode = 1;
				if (memcmp(token, "secondary-drop-rate", 19) == 0) cReadMode = 2;
				if (memcmp(token, "enemy-kill-mode", 15) == 0) cReadMode = 3;
				if (memcmp(token, "enemy-kill-adjust", 17) == 0) cReadMode = 4;
				if (memcmp(token, "admin-security", 14) == 0) cReadMode = 5;
				if (memcmp(token, "monday-raid-time", 16) == 0) cReadMode = 6;
				if (memcmp(token, "tuesday-raid-time", 17) == 0) cReadMode = 7;
				if (memcmp(token, "wednesday-raid-time", 19) == 0) cReadMode = 8;
				if (memcmp(token, "thursday-raid-time", 18) == 0) cReadMode = 9;
				if (memcmp(token, "friday-raid-time", 16) == 0) cReadMode = 10;
				if (memcmp(token, "saturday-raid-time", 18) == 0) cReadMode = 11;
				if (memcmp(token, "sunday-raid-time", 16) == 0) cReadMode = 12;
				if (memcmp(token, "log-chat-settings", 17) == 0) cReadMode = 13;
				if (memcmp(token, "summonguild-cost", 16) == 0) cReadMode = 14;
				if (memcmp(token, "slate-success-rate", 18) == 0) cReadMode = 15;
				if (memcmp(token, "character-stat-limit", 20) == 0) cReadMode = 16;
				if (memcmp(token, "character-skill-limit", 21) == 0) cReadMode = 17;
				if (memcmp(token, "rep-drop-modifier", 17) == 0) cReadMode = 18;
				if (memcmp(token, "admin-security-code", 19) == 0) cReadMode = 19;
				if (memcmp(token, "max-player-level", 16) == 0) cReadMode = 20;
			}
			token = pStrTok->pGet();
			//token = strtok( 0, seps );
		}
		delete pStrTok;
		delete cp;
	}
	if (pFile != 0) fclose(pFile);
	return true;
}

bool CGame::bReadCrusadeStructureConfigFile(const char * cFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadModeA, cReadModeB;
	char seps[] = "= \t\n";
	int iIndex;
	CStrTok * pStrTok;
	cReadModeA = 0;
	cReadModeB = 0;
	hFile = CreateFile(cFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFn, "rt");
	if (pFile == 0) {
		PutLogList("(!) Cannot open Crusade configuration file.");
		return false;
	} else {
		PutLogList("(!) Reading Crusade configuration file...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		iIndex = 0;
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		while (token != 0) {
			if (cReadModeA != 0) {
				switch (cReadModeA) {
					case 1:
						switch (cReadModeB) {
							case 1:
								if (_bGetIsStringIsNumber(token) == false) {
									PutLogList("(!!!) CRITICAL ERROR!  Crusade configuration file error - Wrong Data format(1).");
									delete cp;
									delete pStrTok;
									return false;
								}
								iIndex = atoi(token);
								if (m_stCrusadeStructures[iIndex].cType != 0) {
									PutLogList("(!!!) CRITICAL ERROR!  Crusade configuration file error - Duplicate portion number.");
									delete cp;
									delete pStrTok;
									return false;
								}
								cReadModeB = 2;
								break;
							case 2:
								std::memset(m_stCrusadeStructures[iIndex].cMapName, 0, sizeof(m_stCrusadeStructures[iIndex].cMapName));
								memcpy(m_stCrusadeStructures[iIndex].cMapName, token, strlen(token));
								cReadModeB = 3;
								break;
							case 3:
								if (_bGetIsStringIsNumber(token) == false) {
									PutLogList("(!!!) CRITICAL ERROR!  Crusade configuration file error - Wrong Data format.");
									delete cp;
									delete pStrTok;
									return false;
								}
								m_stCrusadeStructures[iIndex].cType = atoi(token);
								cReadModeB = 4;
								break;
							case 4:
								if (_bGetIsStringIsNumber(token) == false) {
									PutLogList("(!!!) CRITICAL ERROR!  Crusade configuration file error - Wrong Data format.");
									delete cp;
									delete pStrTok;
									return false;
								}
								m_stCrusadeStructures[iIndex].dX = atoi(token);
								cReadModeB = 5;
								break;
							case 5:
								if (_bGetIsStringIsNumber(token) == false) {
									PutLogList("(!!!) CRITICAL ERROR!  Crusade configuration file error - Wrong Data format.");
									delete cp;
									delete pStrTok;
									return false;
								}
								m_stCrusadeStructures[iIndex].dY = atoi(token);
								cReadModeA = 0;
								cReadModeB = 0;
								break;
						}
						break;
					default:
						break;
				}
			} else {
				if (memcmp(token, "crusade-structure", 17) == 0) {
					cReadModeA = 1;
					cReadModeB = 1;
				}
			}
			token = pStrTok->pGet();
		}
		delete pStrTok;
		delete cp;
		if ((cReadModeA != 0) || (cReadModeB != 0)) {
			PutLogList("(!!!) CRITICAL ERROR! Crusade Structure configuration file contents error!");
			return false;
		}
	}
	if (pFile != 0) fclose(pFile);
	return true;
}

void logPlayerDataError(int line, const char *playerName) {
	char cTxt[120];
	wsprintf(cTxt, "(!!!) Player(%s) data file error! wrong Data format @ %d- Connection closed. ", playerName, line);
	PutLogList(cTxt);
}

bool CGame::_bDecodePlayerDatafileContents(int iClientH, char * pData, uint32_t dwSize) {
	char * pContents, * token, * pOriginContents, cTmpName[11], cTxt[120];
	char seps[] = "= \t\n";
	char cReadModeA;
	char cReadModeB;
	int i;
	int iItemIndex;
	int iItemInBankIndex;
	int iTotalGold;
	int iNotUsedItemPrice;
	CStrTok * pStrTok;
	short sTmpType;
	short sTmpAppr1;
	bool bRet;
	int iTemp;
	SYSTEMTIME SysTime;
	__int64 iDateSum1;
	__int64 iDateSum2;
	bool bIsNotUsedItemFound = false;
	if (m_pClientList[iClientH] == 0) return false;
	iTotalGold = 0;
	iItemIndex = 0;
	iItemInBankIndex = 0;
	iNotUsedItemPrice = 0;
	cReadModeA = 0;
	cReadModeB = 0;
	pContents = new char[dwSize + 2];
	ZeroMemory(pContents, dwSize + 2);
	memcpy(pContents, pData, dwSize);
	pOriginContents = pContents;
	pStrTok = new CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != 0) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
					strcpy(m_pClientList[iClientH]->m_cMapName, token);
					std::memset(cTmpName, 0, sizeof(cTmpName));
					strcpy(cTmpName, token);
					for (i = 0; i < DEF_MAXMAPS; i++)
						if ((m_pMapList[i] != 0) && (memcmp(m_pMapList[i]->m_cName, cTmpName, 10) == 0)) {
							m_pClientList[iClientH]->m_cMapIndex = (char) i;
						}
					if (m_pClientList[iClientH]->m_cMapIndex == -1) {
						wsprintf(cTxt, "(!) Player(%s) tries to enter unknown map : %s", m_pClientList[iClientH]->m_cCharName, cTmpName);
						PutLogList(cTxt);
						delete pContents;
						delete pStrTok;
						return false;
					}
					cReadModeA = 0;
					break;
				case 2:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_sX = atoi(token);
					cReadModeA = 0;
					break;
				case 3:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_sY = atoi(token);
					cReadModeA = 0;
					break;
				case 4:
					/*
					if (_bGetIsStringIsNumber(token) == false) {
					logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
					delete pContents;
					delete pStrTok;
					return false;
					}
					m_pClientList[iClientH]->m_cAccountStatus = atoi(token);
					 */
					cReadModeA = 0;
					break;
				case 5:
					switch (cReadModeB) {
						case 1:
							// New 07/05/2004
							// v2.12
							if (iItemIndex >= DEF_MAXITEMS) {
								delete pContents;
								delete pStrTok;
								return false;
							}
							if (_bInitItemAttr(m_pClientList[iClientH]->m_pItemList[iItemIndex], token) == false) {
								wsprintf(cTxt, "(!!!) Client(%s)-Item(%s) is not existing Item! Conection closed.", m_pClientList[iClientH]->m_cCharName, token);
								PutLogList(cTxt);
								// Debug code @@@@@@@@@@@@@@@
								HANDLE hFile;
								DWORD nWrite;
								hFile = CreateFile("Error.Log", GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0);
								WriteFile(hFile, (char *) pContents, dwSize + 2, &nWrite, 0);
								CloseHandle(hFile);
								delete pContents;
								delete pStrTok;
								return false;
							}
							cReadModeB = 2;
							break;
						case 2:
							// m_dwCount
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							iTemp = atoi(token);
							if (iTemp < 0) iTemp = 1;
							if (iGetItemWeight(m_pClientList[iClientH]->m_pItemList[iItemIndex], iTemp) > _iCalcMaxLoad(iClientH)) {
								iTemp = 1;
								wsprintf(G_cTxt, "(!) Player (%s) Item (%s) too heavy for player to carry", m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName);
								PutLogFileList(G_cTxt);
								PutLogList(G_cTxt);
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwCount = (uint32_t) iTemp;
							cReadModeB = 3;
							if (memcmp(m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName, "Gold", 4) == 0)
								iTotalGold += iTemp;
							break;
						case 3:
							// m_sTouchEffectType
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectType = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							// m_sTouchEffectValue1
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							// m_sTouchEffectValue2
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							// m_sTouchEffectValue3
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 = atoi(token);
							cReadModeB = 7;
							break;
						case 7:
							// m_cItemColor
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor = atoi(token);
							cReadModeB = 8;
							break;
						case 8:
							// m_sItemSpecEffectValue1
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1 = atoi(token);
							cReadModeB = 9;
							break;
						case 9:
							// m_sItemSpecEffectValue2
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2 = atoi(token);
							cReadModeB = 10;
							break;
						case 10:
							// m_sItemSpecEffectValue3
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue3 = atoi(token);
							cReadModeB = 11;
							break;
						case 11:
							// m_wCurLifeSpan
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan = atoi(token);
							cReadModeB = 12;
							break;
						case 12:
							// m_dwAttribute
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = atoi(token);
							cReadModeB = 13;
							break;
						case 13:
							// x
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x = atoi(token);
							if (m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x < -10) m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x = -10;
							cReadModeB = 14;
							break;
						case 14:
							// y
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y = atoi(token);
							if (m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y < -10) m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y = -10;
							cReadModeB = 15;
							break;
						case 15:
							// equipped
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							if ((atoi(token)) && (m_pClientList[iClientH]->m_pItemList[iItemIndex] != 0)) {
								if (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType == ItemType::equip)
									m_pClientList[iClientH]->m_bIsItemEquipped[iItemIndex] = true;
								else m_pClientList[iClientH]->m_bIsItemEquipped[iItemIndex] = false;
							} else m_pClientList[iClientH]->m_bIsItemEquipped[iItemIndex] = false;
							if ((m_pClientList[iClientH] != 0) && (m_pClientList[iClientH]->m_bIsItemEquipped[iItemIndex] == true)) {
								if (bEquipItemHandler(iClientH, iItemIndex) == false) // false
									m_pClientList[iClientH]->m_bIsItemEquipped[iItemIndex] = false;
							}
							if (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectType == DEF_ITET_UNIQUE_OWNER) {
								if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 != m_pClientList[iClientH]->m_sCharIDnum1) ||
										  (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 != m_pClientList[iClientH]->m_sCharIDnum2) ||
										  (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 != m_pClientList[iClientH]->m_sCharIDnum3)) {
									wsprintf(cTxt, "(!) Player carries item bound to another player: Player(%s) Item(%s) %d %d %d - %d %d %d", m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
											  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1,
											  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2,
											  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3,
											  m_pClientList[iClientH]->m_sCharIDnum1,
											  m_pClientList[iClientH]->m_sCharIDnum2,
											  m_pClientList[iClientH]->m_sCharIDnum3);
									PutLogList(cTxt);
									//PutLogFileList(cTxt);
								}
							}
							cReadModeA = 0;
							cReadModeB = 0;
							if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00000001) != 0) {
								m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1;
							}
							_AdjustRareItemValue(m_pClientList[iClientH]->m_pItemList[iItemIndex]);
							if (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan > m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan)
								m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan;
							// v1.433
							if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan == 0) &&
									  (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemEffectType == ItemEffectType::alteritemdrop)) {
								wsprintf(G_cTxt, "(!) Player (%s) has zem with 0 endurance!", m_pClientList[iClientH]->m_cCharName);
								PutLogFileList(G_cTxt);
								m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan = 1;
							}
							bCheckAndConvertPlusWeaponItem(iClientH, iItemIndex);
							if (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType == ItemType::notused) {
								iNotUsedItemPrice += m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wPrice;
								delete m_pClientList[iClientH]->m_pItemList[iItemIndex];
								m_pClientList[iClientH]->m_pItemList[iItemIndex] = 0;
								// v1.41
								bIsNotUsedItemFound = true;
							} else
								if (_bCheckDupItemID(m_pClientList[iClientH]->m_pItemList[iItemIndex]) == true) {
								_bItemLog(DEF_ITEMLOG_DUPITEMID, iClientH, 0, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
								iNotUsedItemPrice += m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wPrice;
								delete m_pClientList[iClientH]->m_pItemList[iItemIndex];
								m_pClientList[iClientH]->m_pItemList[iItemIndex] = 0;
							} else iItemIndex++;
							break;
					}
					break;
				case 6:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_cSex = atoi(token);
					cReadModeA = 0;
					break;
				case 7:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_cSkin = atoi(token);
					cReadModeA = 0;
					break;
				case 8:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_cHairStyle = atoi(token);
					cReadModeA = 0;
					break;
				case 9:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_cHairColor = atoi(token);
					cReadModeA = 0;
					break;
				case 10:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_cUnderwear = atoi(token);
					cReadModeA = 0;
					break;
				case 11:
					m_pClientList[iClientH]->m_sItemEquipmentStatus.clear();
					for (i = 0; i < DEF_MAXITEMS; i++)
						m_pClientList[iClientH]->m_bIsItemEquipped[i] = false;
					if (bIsNotUsedItemFound == false) {
						for (i = 0; i < DEF_MAXITEMS; i++) {
							wsprintf(cTxt, "%d", token[i]);
							if ((token[i] == '1') && (m_pClientList[iClientH]->m_pItemList[i] != 0)) {
								if (m_pClientList[iClientH]->m_pItemList[i]->m_cItemType == ItemType::equip)
									m_pClientList[iClientH]->m_bIsItemEquipped[i] = true;
								else m_pClientList[iClientH]->m_bIsItemEquipped[i] = false;
							} else m_pClientList[iClientH]->m_bIsItemEquipped[i] = false;
							if ((m_pClientList[iClientH] != 0) && (m_pClientList[iClientH]->m_bIsItemEquipped[i] == true)) {
								if (bEquipItemHandler(iClientH, i) == false) // false
									m_pClientList[iClientH]->m_bIsItemEquipped[i] = false;
							}
						}
					}
					cReadModeA = 0;
					break;
				case 12:
					std::memset(m_pClientList[iClientH]->m_cGuildName, 0, sizeof(m_pClientList[iClientH]->m_cGuildName));
					strcpy(m_pClientList[iClientH]->m_cGuildName, token);
					cReadModeA = 0;
					break;
				case 13:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iGuildRank = atoi(token);
					cReadModeA = 0;
					break;
				case 14:
					// HP
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iHP = atoi(token);
					cReadModeA = 0;
					break;
				case 15:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					//m_pClientList[iClientH]->m_iOriginDefenseRatio = atoi(token);
					//m_pClientList[iClientH]->m_iCurDefenseRatio = m_pClientList[iClientH]->m_iOriginDefenseRatio;
					cReadModeA = 0;
					break;
				case 16:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					//m_pClientList[iClientH]->m_iOriginHitRatio = atoi(token);
					//m_pClientList[iClientH]->m_iCurHitRatio = m_pClientList[iClientH]->m_iOriginHitRatio;
					cReadModeA = 0;
					break;
				case 17:
					// Level
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iLevel = atoi(token);
					cReadModeA = 0;
					break;
				case 18:
					// Str
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iStr = atoi(token);
					cReadModeA = 0;
					break;
				case 19:
					// Int
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iInt = atoi(token);
					cReadModeA = 0;
					break;
				case 20:
					// Vit
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iVit = atoi(token);
					cReadModeA = 0;
					break;
				case 21:
					// Dex
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iDex = atoi(token);
					cReadModeA = 0;
					break;
				case 22:
					// Mag
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iMag = atoi(token);
					cReadModeA = 0;
					break;
				case 23:
					// Charisma
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iCharisma = atoi(token);
					cReadModeA = 0;
					break;
				case 24:
					// Luck
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iLuck = atoi(token);
					cReadModeA = 0;
					break;
				case 25:
					// Exp
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iExp = atoi(token);
					cReadModeA = 0;
					break;
				case 26:
					for (i = 0; i < DEF_MAXMAGICTYPE; i++) {
						m_pClientList[iClientH]->m_cMagicMastery[i] = token[i] - 48;
					}
					cReadModeA = 0;
					break;
				case 27:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_cSkillMastery[cReadModeB] = atoi(token);
					cReadModeB++;
					if (cReadModeB >= DEF_MAXSKILLTYPE) {
						cReadModeA = 0;
						cReadModeB = 0;
					}
					break;
					//
				case 28:
					switch (cReadModeB) {
						case 1:
							if (iItemInBankIndex >= DEF_MAXBANKITEMS) {
								delete pContents;
								delete pStrTok;
								return false;
							}
							if (_bInitItemAttr(m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex], token) == false) {
								wsprintf(cTxt, "(!!!) Client(%s)-Bank Item(%s) is not existing Item! Conection closed.", m_pClientList[iClientH]->m_cCharName, token);
								PutLogList(cTxt);
								// Debug code @@@@@@@@@@@@@@@
								HANDLE hFile;
								DWORD nWrite;
								hFile = CreateFile("Error.Log", GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0);
								WriteFile(hFile, (char *) pOriginContents, dwSize + 2, &nWrite, 0);
								CloseHandle(hFile);
								delete pContents;
								delete pStrTok;
								return false;
							}
							cReadModeB = 2;
							break;
						case 2:
							// m_dwCount
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							iTemp = atoi(token);
							if (iTemp < 0) iTemp = 1;
							if (iGetItemWeight(m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex], iTemp) > _iCalcMaxLoad(iClientH)) {
								iTemp = 1;
								wsprintf(G_cTxt, "(!) Player (%s) has item (%s) in bank too heavy to carry", m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_cName);
								PutLogFileList(G_cTxt);
								PutLogList(G_cTxt);
							}
							m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_dwCount = (uint32_t) iTemp;
							cReadModeB = 3;
							if (memcmp(m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_cName, "Gold", 4) == 0)
								iTotalGold += iTemp;
							break;
						case 3:
							// m_sTouchEffectType
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_sTouchEffectType = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							// m_sTouchEffectValue1
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_sTouchEffectValue1 = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							// m_sTouchEffectValue2
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_sTouchEffectValue2 = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							// m_sTouchEffectValue3
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_sTouchEffectValue3 = atoi(token);
							cReadModeB = 7;
							break;
						case 7:
							// m_cItemColor
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_cItemColor = atoi(token);
							cReadModeB = 8;
							break;
						case 8:
							// m_sItemSpecEffectValue1
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_sItemSpecEffectValue1 = atoi(token);
							cReadModeB = 9;
							break;
						case 9:
							// m_sItemSpecEffectValue2
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_sItemSpecEffectValue2 = atoi(token);
							cReadModeB = 10;
							break;
						case 10:
							// m_sItemSpecEffectValue3
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_sItemSpecEffectValue3 = atoi(token);
							cReadModeB = 11;
							break;
						case 11:
							// m_wCurLifeSpan
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_wCurLifeSpan = atoi(token);
							cReadModeB = 12;
							break;
						case 12:
							// m_dwAttribute
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_dwAttribute = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							if ((m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_dwAttribute & 0x00000001) != 0) {
								m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_wMaxLifeSpan = m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_sItemSpecEffectValue1;
							}
							int iValue = (m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_dwAttribute & 0xF0000000) >> 28;
							if (iValue > 0) {
								switch (m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_cCategory) {
									case 5:
									case 6:
										m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_wMaxLifeSpan = m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_sItemSpecEffectValue1;
										break;
								}
							}
							_AdjustRareItemValue(m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]);
							if (m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_wCurLifeSpan > m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_wMaxLifeSpan)
								m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_wCurLifeSpan = m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_wMaxLifeSpan;
							// v1.433
							if ((m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_wCurLifeSpan == 0) &&
									  (m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_sItemEffectType == ItemEffectType::alteritemdrop)) {
								wsprintf(G_cTxt, "(!) Player (%s) has zem in bank with 0 endurance!", m_pClientList[iClientH]->m_cCharName);
								PutLogFileList(G_cTxt);
								m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_wCurLifeSpan = 1;
							}
							if (m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_cItemType == ItemType::notused) {
								iNotUsedItemPrice += m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_wPrice;
								delete m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex];
								m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex] = 0;
							} else
								if (_bCheckDupItemID(m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]) == true) {
								_bItemLog(DEF_ITEMLOG_DUPITEMID, iClientH, 0, m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]);
								iNotUsedItemPrice += m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex]->m_wPrice;
								delete m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex];
								m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex] = 0;
							} else iItemInBankIndex++;
							break;
					}
					break;
				case 29:
					std::memset(m_pClientList[iClientH]->m_cLocation, 0, sizeof(m_pClientList[iClientH]->m_cLocation));
					strcpy(m_pClientList[iClientH]->m_cLocation, token);
					if (memcmp(m_pClientList[iClientH]->m_cLocation + 3, "hunter", 6) == 0)
						m_pClientList[iClientH]->m_bIsPlayerCivil = true;
					cReadModeA = 0;
					break;
					/* 2.03 Code - Fixed by KLKS
								case 29:
									std::memset(m_pClientList[iClientH]->m_cLocation, 0, sizeof(m_pClientList[iClientH]->m_cLocation));
									strcpy(m_pClientList[iClientH]->m_cLocation, token);
									cReadModeA = 0;
									break;
					 */
				case 30:
					// m_iMP
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iMP = atoi(token);
					cReadModeA = 0;
					break;
				case 31:
					// m_iSP
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iSP = atoi(token);
					cReadModeA = 0;
					break;
				case 32:
					// m_cLU_Pool
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iLU_Pool = atoi(token);
					cReadModeA = 0;
					break;
					/*
					case 33:
						// m_cLU_Vit
						if (_bGetIsStringIsNumber(token) == false) {
							logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
							delete pContents;
							delete pStrTok;
							return false;
						}
						m_pClientList[iClientH]->m_cLU_Vit = atoi(token);
						cReadModeA = 0;
						break;
					case 34:
						// m_cLU_Dex
						if (_bGetIsStringIsNumber(token) == false) {
							logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
							delete pContents;
							delete pStrTok;
							return false;
						}
						m_pClientList[iClientH]->m_cLU_Dex = atoi(token);
						cReadModeA = 0;
						break;
					case 35:
						// m_cLU_Int
						if (_bGetIsStringIsNumber(token) == false) {
							logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
							delete pContents;
							delete pStrTok;
							return false;
						}
						m_pClientList[iClientH]->m_cLU_Int = atoi(token);
						cReadModeA = 0;
						break;
					case 36:
						// m_cLU_Mag
						if (_bGetIsStringIsNumber(token) == false) {
							logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
							delete pContents;
							delete pStrTok;
							return false;
						}
						m_pClientList[iClientH]->m_cLU_Mag = atoi(token);
						cReadModeA = 0;
						break;
					case 37:
						// m_cLU_Char
						if (_bGetIsStringIsNumber(token) == false) {
							logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
							delete pContents;
							delete pStrTok;
							return false;
						}
						m_pClientList[iClientH]->m_cLU_Char = atoi(token);
						cReadModeA = 0;
						break;
					 */
				case 38:
					// m_iEnemyKillCount
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iEnemyKillCount = atoi(token);
					cReadModeA = 0;
					break;
				case 39:
					// m_iPKCount
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iPKCount = atoi(token);
					cReadModeA = 0;
					break;
				case 40:
					// m_iRewardGold
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iRewardGold = atoi(token);
					cReadModeA = 0;
					break;
				case 41:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iSkillSSN[cReadModeB] = atoi(token);
					cReadModeB++;
					if (cReadModeB >= DEF_MAXSKILLTYPE) {
						cReadModeA = 0;
						cReadModeB = 0;
					}
					break;
				case 42:
					if (token != 0) {
						std::memset(m_pClientList[iClientH]->m_cProfile, 0, sizeof(m_pClientList[iClientH]->m_cProfile));
						strcpy(m_pClientList[iClientH]->m_cProfile, token);
					}
					cReadModeA = 0;
					break;
				case 43:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iHungerStatus = atoi(token);
					cReadModeA = 0;
					break;
				case 44:
					// AdminUserLevel
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iAdminUserLevel = 0; //Default it to 0
					if (atoi(token) > 0) {
						for (i = 0; i < DEF_MAXADMINS; i++) {
							if (strlen(m_stAdminList[i].m_cGMName) == 0) break; //No more GM's on list
							if ((strlen(m_stAdminList[i].m_cGMName)) == (strlen(m_pClientList[iClientH]->m_cCharName))) {
								if (memcmp(m_stAdminList[i].m_cGMName, m_pClientList[iClientH]->m_cCharName, strlen(m_pClientList[iClientH]->m_cCharName)) == 0) {
									m_pClientList[iClientH]->m_iAdminUserLevel = atoi(token);
									break; //Break goes to cReadModeA = 0;, so no need to do it again
								}
							}
						}
					}
					cReadModeA = 0;
					break;
					/*case 44:
					// AdminUserLevel
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					for (i = 0; i < DEF_MAXADMINS; i++) {
						if (atoi(token) > 0) {
							if ((strlen(m_stAdminList[i].m_cGMName)) == (strlen(m_pClientList[iClientH]->m_cCharName))) {
								m_pClientList[iClientH]->m_iAdminUserLevel = atoi(token);
								cReadModeA = 0;
								break;
							}
							else {
								m_pClientList[iClientH]->m_iAdminUserLevel = 0;
							}
						else m_pClientList[iClientH]->m_iAdminUserLevel = 0;
						}
					}
					cReadModeA = 0;
					break;*/
				case 45:
					// TimeLeft_ShutUp
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iTimeLeft_ShutUp = atoi(token);
					cReadModeA = 0;
					break;
				case 46:
					// TimeLeft_Rating
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iTimeLeft_Rating = atoi(token);
					cReadModeA = 0;
					break;
				case 47:
					// Rating
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iRating = atoi(token);
					cReadModeA = 0;
					break;
				case 48:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iGuildGUID = atoi(token);
					cReadModeA = 0;
					break;
				case 49:
					// Down Skill Index
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iDownSkillIndex = atoi(token);
					cReadModeA = 0;
					break;
				case 50:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_ItemPosList[cReadModeB - 1].x = atoi(token);
					if (m_pClientList[iClientH]->m_ItemPosList[cReadModeB - 1].x < -10) m_pClientList[iClientH]->m_ItemPosList[cReadModeB - 1].x = -10; //KaoZureS adaptado darmart123
					cReadModeB++;
					if (cReadModeB > 50) {
						cReadModeA = 0;
						cReadModeB = 0;
					}
					break;
				case 51:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_ItemPosList[cReadModeB - 1].y = atoi(token);
					if (m_pClientList[iClientH]->m_ItemPosList[cReadModeB - 1].y < -10) m_pClientList[iClientH]->m_ItemPosList[cReadModeB - 1].y = -10;
					cReadModeB++;
					if (cReadModeB > 50) {
						cReadModeA = 0;
						cReadModeB = 0;
					}
					break;
				case 52:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_sCharIDnum1 = atoi(token);
					cReadModeA = 0;
					break;
				case 53:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_sCharIDnum2 = atoi(token);
					cReadModeA = 0;
					break;
				case 54:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_sCharIDnum3 = atoi(token);
					cReadModeA = 0;
					break;
				case 55:
					switch (cReadModeB) {
						case 1:
							// Penalty Block Year
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_iPenaltyBlockYear = atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							// Penalty Block Month
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_iPenaltyBlockMonth = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							// Penalty Block day
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_iPenaltyBlockDay = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 56:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iQuest = atoi(token);
					cReadModeA = 0;
					break;
				case 57:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iCurQuestCount = atoi(token);
					cReadModeA = 0;
					break;
				case 58:
					cReadModeA = 0;
					break;
				case 59:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iQuestRewardType = atoi(token);
					cReadModeA = 0;
					break;
				case 60:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iQuestRewardAmount = atoi(token);
					cReadModeA = 0;
					break;
				case 61:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iContribution = atoi(token);
					cReadModeA = 0;
					break;
				case 62:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iQuestID = atoi(token);
					cReadModeA = 0;
					break;
				case 63:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_bIsQuestCompleted = (bool) atoi(token);
					cReadModeA = 0;
					break;
				case 64:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = (bool) atoi(token);
					cReadModeA = 0;
					break;
				case 65:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar = (bool) atoi(token);
					cReadModeA = 0;
					break;
				case 66:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iSpecialEventID = (bool) atoi(token);
					cReadModeA = 0;
					break;
				case 67:
					switch (cReadModeB) {
						case 1:
							// FightZone Number
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_iFightzoneNumber = atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_iReserveTime = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pClientList[iClientH]->m_iFightZoneTicketNumber = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 70:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iSuperAttackLeft = (bool) atoi(token);
					cReadModeA = 0;
					break;
				case 71:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iSpecialAbilityTime = atoi(token);
					cReadModeA = 0;
					break;
				case 72:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iWarContribution = atoi(token);
					cReadModeA = 0;
					break;
				case 73:
					if (strlen(token) > 10) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					std::memset(m_pClientList[iClientH]->m_cLockedMapName, 0, sizeof(m_pClientList[iClientH]->m_cLockedMapName));
					strcpy(m_pClientList[iClientH]->m_cLockedMapName, token);
					cReadModeA = 0;
					break;
				case 74:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iLockedMapTime = atoi(token);
					cReadModeA = 0;
					break;
				case 75:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iCrusadeDuty = atoi(token);
					cReadModeA = 0;
					break;
				case 76:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iConstructionPoint = atoi(token);
					cReadModeA = 0;
					break;
				case 77:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_dwCrusadeGUID = atoi(token);
					cReadModeA = 0;
					break;
				case 78:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iDeadPenaltyTime = atoi(token);
					cReadModeA = 0;
					break;
				case 79: // v2.06 12-4
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iPartyID = atoi(token);
					if (m_pClientList[iClientH]->m_iPartyID != 0) m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_CONFIRM;
					cReadModeA = 0;
					break;
				case 80:
					if (_bGetIsStringIsNumber(token) == false) {
						logPlayerDataError(__LINE__, m_pClientList[iClientH]->m_cCharName);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iGizonItemUpgradeLeft = atoi(token);
					cReadModeA = 0;
					break;
				case 81:
					if (_bGetIsStringIsNumber(token) == false) {
						wsprintf(cTxt, "(!!!) Player(%s) data file error! (BallPoints) - Connection closed. ", m_pClientList[iClientH]->m_cCharName);
						PutLogList(cTxt);
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pClientList[iClientH]->m_iBallPoints = atoi(token);
					cReadModeA = 0;
					break;
			}
		} else {
			if (memcmp(token, "character-loc-map", 17) == 0) cReadModeA = 1;
			if (memcmp(token, "character-loc-x", 15) == 0) cReadModeA = 2;
			if (memcmp(token, "character-loc-y", 15) == 0) cReadModeA = 3;
			if (memcmp(token, "character-account-status", 21) == 0) cReadModeA = 4;
			if (memcmp(token, "character-item", 14) == 0) {
				cReadModeA = 5;
				cReadModeB = 1;
				m_pClientList[iClientH]->m_pItemList[iItemIndex] = new CItem;
			}
			if (memcmp(token, "character-bank-item", 18) == 0) {
				cReadModeA = 28;
				cReadModeB = 1;
				m_pClientList[iClientH]->m_pItemInBankList[iItemInBankIndex] = new CItem;
			}
			if (memcmp(token, "sex-status", 10) == 0) cReadModeA = 6;
			if (memcmp(token, "skin-status", 11) == 0) cReadModeA = 7;
			if (memcmp(token, "hairstyle-status", 16) == 0) cReadModeA = 8;
			if (memcmp(token, "haircolor-status", 16) == 0) cReadModeA = 9;
			if (memcmp(token, "underwear-status", 16) == 0) cReadModeA = 10;
			if (memcmp(token, "item-equip-status", 17) == 0) cReadModeA = 11;
			if (memcmp(token, "character-guild-name", 20) == 0) cReadModeA = 12;
			if (memcmp(token, "character-guild-rank", 20) == 0) cReadModeA = 13;
			if (memcmp(token, "character-HP", 12) == 0) cReadModeA = 14;
			if (memcmp(token, "character-DefenseRatio", 22) == 0) cReadModeA = 15;
			if (memcmp(token, "character-HitRatio", 18) == 0) cReadModeA = 16;
			if (memcmp(token, "character-LEVEL", 15) == 0) cReadModeA = 17;
			if (memcmp(token, "character-STR", 13) == 0) cReadModeA = 18;
			if (memcmp(token, "character-INT", 13) == 0) cReadModeA = 19;
			if (memcmp(token, "character-VIT", 13) == 0) cReadModeA = 20;
			if (memcmp(token, "character-DEX", 13) == 0) cReadModeA = 21;
			if (memcmp(token, "character-MAG", 13) == 0) cReadModeA = 22;
			if (memcmp(token, "character-CHARISMA", 18) == 0) cReadModeA = 23;
			if (memcmp(token, "character-LUCK", 14) == 0) cReadModeA = 24;
			if (memcmp(token, "character-EXP", 13) == 0) cReadModeA = 25;
			if (memcmp(token, "magic-mastery", 13) == 0) cReadModeA = 26;
			if (memcmp(token, "skill-mastery", 13) == 0) {
				cReadModeA = 27;
				cReadModeB = 0;
			}
			if (memcmp(token, "character-location", 18) == 0) cReadModeA = 29;
			if (memcmp(token, "character-MP", 12) == 0) cReadModeA = 30;
			if (memcmp(token, "character-SP", 12) == 0) cReadModeA = 31;
			if (memcmp(token, "character-LU_Pool", 17) == 0) cReadModeA = 32;
			/*
			if (memcmp(token, "character-LU_Str", 16) == 0)     cReadModeA = 32;
			if (memcmp(token, "character-LU_Vit", 16) == 0)     cReadModeA = 33;
			if (memcmp(token, "character-LU_Dex", 16) == 0)     cReadModeA = 34;
			if (memcmp(token, "character-LU_Int", 16) == 0)     cReadModeA = 35;
			if (memcmp(token, "character-LU_Mag", 16) == 0)     cReadModeA = 36;
			if (memcmp(token, "character-LU_Char",17) == 0)     cReadModeA = 37;
			 */
			if (memcmp(token, "character-EK-Count", 18) == 0) cReadModeA = 38;
			if (memcmp(token, "character-PK-Count", 18) == 0) cReadModeA = 39;
			if (memcmp(token, "character-reward-gold", 21) == 0) cReadModeA = 40;
			if (memcmp(token, "skill-SSN", 9) == 0) cReadModeA = 41;
			if (memcmp(token, "character-profile", 17) == 0) cReadModeA = 42;
			if (memcmp(token, "hunger-status", 13) == 0) cReadModeA = 43;
			if (memcmp(token, "admin-user-level", 16) == 0) cReadModeA = 44;
			if (memcmp(token, "timeleft-shutup", 15) == 0) cReadModeA = 45;
			if (memcmp(token, "timeleft-rating", 15) == 0) cReadModeA = 46;
			if (memcmp(token, "character-RATING", 16) == 0) cReadModeA = 47;
			if (memcmp(token, "character-guild-GUID", 20) == 0) cReadModeA = 48;
			if (memcmp(token, "character-downskillindex", 24) == 0) cReadModeA = 49;
			if (memcmp(token, "item-position-x", 16) == 0) {
				cReadModeA = 50;
				cReadModeB = 1;
			}
			if (memcmp(token, "item-position-y", 16) == 0) {
				cReadModeA = 51;
				cReadModeB = 1;
			}
			if (memcmp(token, "character-IDnum1", 16) == 0) cReadModeA = 52;
			if (memcmp(token, "character-IDnum2", 16) == 0) cReadModeA = 53;
			if (memcmp(token, "character-IDnum3", 16) == 0) cReadModeA = 54;
			if (memcmp(token, "penalty-block-date", 18) == 0) {
				cReadModeA = 55;
				cReadModeB = 1;
			}
			if (memcmp(token, "character-quest-number", 22) == 0) cReadModeA = 56;
			if (memcmp(token, "current-quest-count", 19) == 0) cReadModeA = 57;
			if (memcmp(token, "quest-reward-type", 17) == 0) cReadModeA = 59;
			if (memcmp(token, "quest-reward-amount", 19) == 0) cReadModeA = 60;
			if (memcmp(token, "character-contribution", 22) == 0) cReadModeA = 61;
			if (memcmp(token, "character-quest-ID", 18) == 0) cReadModeA = 62;
			if (memcmp(token, "character-quest-completed", 25) == 0) cReadModeA = 63;
			if (memcmp(token, "timeleft-force-recall", 21) == 0) cReadModeA = 64;
			if (memcmp(token, "timeleft-firm-staminar", 22) == 0) cReadModeA = 65;
			if (memcmp(token, "special-event-id", 16) == 0) cReadModeA = 66;
			if (memcmp(token, "super-attack-left", 17) == 0) cReadModeA = 70;
			if (memcmp(token, "reserved-fightzone-id", 21) == 0) {
				cReadModeA = 67;
				cReadModeB = 1;
			}
			if (memcmp(token, "special-ability-time", 20) == 0) cReadModeA = 71;
			if (memcmp(token, "character-war-contribution", 26) == 0) cReadModeA = 72;
			if (memcmp(token, "locked-map-name", 15) == 0) cReadModeA = 73;
			if (memcmp(token, "locked-map-time", 15) == 0) cReadModeA = 74;
			if (memcmp(token, "crusade-job", 11) == 0) cReadModeA = 75;
			if (memcmp(token, "construct-point", 15) == 0) cReadModeA = 76;
			if (memcmp(token, "crusade-GUID", 12) == 0) cReadModeA = 77;
			if (memcmp(token, "dead-penalty-time", 17) == 0) cReadModeA = 78;
			if (memcmp(token, "party-id", 8) == 0) cReadModeA = 79; // v2.06 12-4
			if (memcmp(token, "gizon-item-upgade-left", 22) == 0) cReadModeA = 80;
			if (memcmp(token, "character-ball-points", 21) == 0) cReadModeA = 81;
			if (memcmp(token, "[EOF]", 5) == 0) goto DPDC_STOP_DECODING;
		}
		token = pStrTok->pGet();
		//token = strtok( 0, seps );
	}
DPDC_STOP_DECODING:
	;
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		wsprintf(cTxt, "(!!!) Player(%s) data file contents error(%d %d)! Connection closed.", m_pClientList[iClientH]->m_cCharName, cReadModeA, cReadModeB);
		PutLogList(cTxt);
		// Debug code @@@@@@@@@@@@@@@
		HANDLE hFile2;
		DWORD nWrite2;
		hFile2 = CreateFile("Error.Log", GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0);
		WriteFile(hFile2, (char *) pOriginContents, dwSize + 2, &nWrite2, 0);
		CloseHandle(hFile2);
		return false;
	}
	bRet = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bIsValidLoc(m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
	if (bRet == false) {
		if ((m_pClientList[iClientH]->m_sX != -1) || (m_pClientList[iClientH]->m_sY != -1)) {
			wsprintf(cTxt, "Invalid location error! %s (%d, %d)", m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
			PutLogList(cTxt);
			return false;
		}
	}
	/*	if ((m_pClientList[iClientH]->m_cLU_Str > DEF_TOTALLEVELUPPOINT) || (m_pClientList[iClientH]->m_cLU_Str < 0))
	return false;
	if ((m_pClientList[iClientH]->m_cLU_Vit > DEF_TOTALLEVELUPPOINT) || (m_pClientList[iClientH]->m_cLU_Vit < 0))
	return false;
	if ((m_pClientList[iClientH]->m_cLU_Dex > DEF_TOTALLEVELUPPOINT) || (m_pClientList[iClientH]->m_cLU_Dex < 0))
	return false;
	if ((m_pClientList[iClientH]->m_cLU_Int > DEF_TOTALLEVELUPPOINT) || (m_pClientList[iClientH]->m_cLU_Int < 0))
	return false;
	if ((m_pClientList[iClientH]->m_cLU_Mag > DEF_TOTALLEVELUPPOINT) || (m_pClientList[iClientH]->m_cLU_Mag < 0))
	return false;
	if ((m_pClientList[iClientH]->m_cLU_Char > DEF_TOTALLEVELUPPOINT) || (m_pClientList[iClientH]->m_cLU_Char < 0))
	return false;
	 */
	//	if ( (m_pClientList[iClientH]->m_cLU_Str + m_pClientList[iClientH]->m_cLU_Vit + m_pClientList[iClientH]->m_cLU_Dex +
	//  		  m_pClientList[iClientH]->m_cLU_Int + m_pClientList[iClientH]->m_cLU_Mag + m_pClientList[iClientH]->m_cLU_Char) > DEF_TOTALLEVELUPPOINT)
	if ((m_pClientList[iClientH]->m_iLU_Pool < 0) || (m_pClientList[iClientH]->m_iLU_Pool > DEF_CHARPOINTLIMIT))
		return false;
	if ((m_pClientList[iClientH]->m_iStr < 10) || (m_pClientList[iClientH]->m_iStr > DEF_CHARPOINTLIMIT))
		return false;
	if ((m_pClientList[iClientH]->m_iDex < 10) || (m_pClientList[iClientH]->m_iDex > DEF_CHARPOINTLIMIT))
		return false;
	if ((m_pClientList[iClientH]->m_iVit < 10) || (m_pClientList[iClientH]->m_iVit > DEF_CHARPOINTLIMIT))
		return false;
	if ((m_pClientList[iClientH]->m_iInt < 10) || (m_pClientList[iClientH]->m_iInt > DEF_CHARPOINTLIMIT))
		return false;
	if ((m_pClientList[iClientH]->m_iMag < 10) || (m_pClientList[iClientH]->m_iMag > DEF_CHARPOINTLIMIT))
		return false;
	if ((m_pClientList[iClientH]->m_iCharisma < 10) || (m_pClientList[iClientH]->m_iCharisma > DEF_CHARPOINTLIMIT))
		return false;
	//	if ((m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iDex + m_pClientList[iClientH]->m_iVit +
	//		 m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iCharisma)
	//		 !=	((m_pClientList[iClientH]->m_iLevel-1)*3 + 70)) return false;
	//if ((m_pClientList[iClientH]->m_cAccountStatus != 2) && (m_pClientList[iClientH]->m_iLevel > DEF_LEVELLIMIT))
	//	return false;
	if ((m_Misc.bCheckValidName(m_pClientList[iClientH]->m_cCharName) == false) || (m_Misc.bCheckValidName(m_pClientList[iClientH]->m_cAccountName) == false))
		return false;
	if (m_pClientList[iClientH]->m_iPenaltyBlockYear != 0) {
		GetLocalTime(&SysTime);
		iDateSum1 = (__int64) (m_pClientList[iClientH]->m_iPenaltyBlockYear * 10000 + m_pClientList[iClientH]->m_iPenaltyBlockMonth * 100 + m_pClientList[iClientH]->m_iPenaltyBlockDay);
		iDateSum2 = (__int64) (SysTime.wYear * 10000 + SysTime.wMonth * 100 + SysTime.wDay);
		if (iDateSum1 >= iDateSum2) return false;
	}
	if (m_pClientList[iClientH]->m_iReserveTime != 0) {
		GetLocalTime(&SysTime);
		iDateSum1 = (__int64) m_pClientList[iClientH]->m_iReserveTime;
		iDateSum2 = (__int64) (SysTime.wMonth * 10000 + SysTime.wDay * 100 + SysTime.wHour);
		if (iDateSum2 >= iDateSum1) {
			SendNotifyMsg(0, i, DEF_NOTIFY_FIGHTZONERESERVE, -2, 0, 0, 0);
			m_pClientList[iClientH]->m_iFightzoneNumber = 0;
			m_pClientList[iClientH]->m_iReserveTime = 0;
			m_pClientList[iClientH]->m_iFightZoneTicketNumber = 0;
		}
	}
	if (m_pClientList[iClientH]->m_iAdminUserLevel < 0) m_pClientList[iClientH]->m_iAdminUserLevel = 0;
	if (m_pClientList[iClientH]->m_cSex == 1) {
		sTmpType = 1;
	} else if (m_pClientList[iClientH]->m_cSex == 2) {
		sTmpType = 4;
	}
	switch (m_pClientList[iClientH]->m_cSkin) {
		case 1:
			break;
		case 2:
			sTmpType += 1;
			break;
		case 3:
			sTmpType += 2;
			break;
	}
	if (m_pClientList[iClientH]->m_iAdminUserLevel >= 10)
		sTmpType = m_pClientList[iClientH]->m_iAdminUserLevel;
	sTmpAppr1 = (m_pClientList[iClientH]->m_cHairStyle << 8) | (m_pClientList[iClientH]->m_cHairColor << 4) | (m_pClientList[iClientH]->m_cUnderwear);
	m_pClientList[iClientH]->m_sType = sTmpType;
	m_pClientList[iClientH]->m_sAppr1 = sTmpAppr1;
	iCalcTotalWeight(iClientH);
	//if (iTotalGold > 800000) {
	//PutLogFileList(G_cTxt);
	//}
	// v.135
	/*
	if ((m_pClientList[iClientH]->m_cSkillMastery[0] >= 70) || (m_pClientList[iClientH]->m_cSkillMastery[1] >= 70) ||
	(m_pClientList[iClientH]->m_cSkillMastery[12] >= 70)) {
	wsprintf(G_cTxt, "(!) Player (%s) has >= 70 skill in mining, fishing and alchemy(%d %d %d)", m_pClientList[iClientH]->m_cCharName,
	m_pClientList[iClientH]->m_cSkillMastery[0], m_pClientList[iClientH]->m_cSkillMastery[1],
	m_pClientList[iClientH]->m_cSkillMastery[12]);
	PutLogFileList(G_cTxt);
	}
	 */
	if (m_pClientList[iClientH]->m_sCharIDnum1 == 0) {
		int _i;
		int _iTemp1;
		int _iTemp2;
		short _sID1;
		short _sID2;
		short _sID3;
		_iTemp1 = 1;
		_iTemp2 = 1;
		for (_i = 0; _i < 10; _i++) {
			_iTemp1 += m_pClientList[iClientH]->m_cCharName[_i];
			_iTemp2 += abs(m_pClientList[iClientH]->m_cCharName[_i] ^ m_pClientList[iClientH]->m_cCharName[_i]);
		}
		_sID1 = (short) timeGetTime();
		_sID2 = (short) _iTemp1;
		_sID3 = (short) _iTemp2;
		m_pClientList[iClientH]->m_sCharIDnum1 = _sID1;
		m_pClientList[iClientH]->m_sCharIDnum2 = _sID2;
		m_pClientList[iClientH]->m_sCharIDnum3 = _sID3;
	}
	m_pClientList[iClientH]->m_iRewardGold += iNotUsedItemPrice;
	//
	m_pClientList[iClientH]->m_iSpeedHackCheckExp = m_pClientList[iClientH]->m_iExp;
	// v1.41
	if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) m_pClientList[iClientH]->m_bIsNeutral = true;
	return true;
}

int CGame::_iComposePlayerDataFileContents(int iClientH, char * pData) {
	SYSTEMTIME SysTime;
	char cTxt[120], cTmp[21];
	POINT TempItemPosList[DEF_MAXITEMS];
	int i;
	int iPos;
	if (m_pClientList[iClientH] == 0) return 0;
	GetLocalTime(&SysTime);
	strcat(pData, "[FILE-DATE]\n\n");
	wsprintf(cTxt, "file-saved-date: %d %d %d %d %d\n", SysTime.wYear, SysTime.wMonth, SysTime.wDay, SysTime.wHour, SysTime.wMinute);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	strcat(pData, "[NAME-ACCOUNT]\n\n");
	strcat(pData, "character-name     = ");
	strcat(pData, m_pClientList[iClientH]->m_cCharName);
	strcat(pData, "\n");
	strcat(pData, "account-name       = ");
	strcat(pData, m_pClientList[iClientH]->m_cAccountName);
	strcat(pData, "\n\n");
	strcat(pData, "[STATUS]\n\n");
	strcat(pData, "character-profile 	=");
	if (strlen(m_pClientList[iClientH]->m_cProfile) == 0) {
		strcat(pData, "__________");
	} else strcat(pData, m_pClientList[iClientH]->m_cProfile);
	strcat(pData, "\n");
	strcat(pData, "character-location   = ");
	strcat(pData, m_pClientList[iClientH]->m_cLocation);
	strcat(pData, "\n");
	strcat(pData, "character-guild-name = ");
	if (m_pClientList[iClientH]->m_iGuildRank != -1) {
		strcat(pData, m_pClientList[iClientH]->m_cGuildName);
	} else strcat(pData, "NONE");
	strcat(pData, "\n");
	strcat(pData, "character-guild-GUID = ");
	if (m_pClientList[iClientH]->m_iGuildRank != -1) {
		std::memset(cTxt, 0, sizeof(cTxt));
		wsprintf(cTxt, "%d", m_pClientList[iClientH]->m_iGuildGUID);
		strcat(pData, cTxt);
	} else strcat(pData, "-1");
	strcat(pData, "\n");
	strcat(pData, "character-guild-rank = ");
	itoa(m_pClientList[iClientH]->m_iGuildRank, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	strcat(pData, "character-loc-map = ");
	strcat(pData, m_pClientList[iClientH]->m_cMapName);
	strcat(pData, "\n");
	strcat(pData, "character-loc-x   = ");
	itoa(m_pClientList[iClientH]->m_sX, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	strcat(pData, "character-loc-y   = ");
	itoa(m_pClientList[iClientH]->m_sY, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n\n");
	//
	if (m_pClientList[iClientH]->m_iHP <= 0)
		m_pClientList[iClientH]->m_iHP = iGetMaxHP(iClientH); //50Cent - 30HP CL Fix
	wsprintf(cTxt, "character-HP       = %d", m_pClientList[iClientH]->m_iHP);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-MP       = %d", m_pClientList[iClientH]->m_iMP);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	if (m_pClientList[iClientH]->m_iSP < 0) m_pClientList[iClientH]->m_iSP = 0; // v1.1
	wsprintf(cTxt, "character-SP       = %d", m_pClientList[iClientH]->m_iSP);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-LEVEL    = %d", m_pClientList[iClientH]->m_iLevel);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-RATING   = %d", m_pClientList[iClientH]->m_iRating);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-STR      = %d", m_pClientList[iClientH]->m_iStr);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-INT      = %d", m_pClientList[iClientH]->m_iInt);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-VIT      = %d", m_pClientList[iClientH]->m_iVit);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-DEX      = %d", m_pClientList[iClientH]->m_iDex);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-MAG      = %d", m_pClientList[iClientH]->m_iMag);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-CHARISMA = %d", m_pClientList[iClientH]->m_iCharisma);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-LUCK     = %d", m_pClientList[iClientH]->m_iLuck);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-EXP      = %d", m_pClientList[iClientH]->m_iExp);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-LU_Pool  = %d", m_pClientList[iClientH]->m_iLU_Pool);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	/*
	wsprintf(cTxt, "character-LU_Str   = %d", m_pClientList[iClientH]->m_cLU_Str);
	strcat(pData, cTxt);
	strcat(pData,"\n");
	wsprintf(cTxt, "character-LU_Vit   = %d", m_pClientList[iClientH]->m_cLU_Vit);
	strcat(pData, cTxt);
	strcat(pData,"\n");
	wsprintf(cTxt, "character-LU_Dex   = %d", m_pClientList[iClientH]->m_cLU_Dex);
	strcat(pData, cTxt);
	strcat(pData,"\n");
	wsprintf(cTxt, "character-LU_Int   = %d", m_pClientList[iClientH]->m_cLU_Int);
	strcat(pData, cTxt);
	strcat(pData,"\n");
	wsprintf(cTxt, "character-LU_Mag   = %d", m_pClientList[iClientH]->m_cLU_Mag);
	strcat(pData, cTxt);
	strcat(pData,"\n");
	wsprintf(cTxt, "character-LU_Char  = %d", m_pClientList[iClientH]->m_cLU_Char);
	strcat(pData, cTxt);
	strcat(pData,"\n");
	 */
	wsprintf(cTxt, "character-EK-Count = %d", m_pClientList[iClientH]->m_iEnemyKillCount);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-PK-Count = %d", m_pClientList[iClientH]->m_iPKCount);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-reward-gold = %d", m_pClientList[iClientH]->m_iRewardGold);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-downskillindex = %d", m_pClientList[iClientH]->m_iDownSkillIndex);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-IDnum1 = %d", m_pClientList[iClientH]->m_sCharIDnum1);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-IDnum2 = %d", m_pClientList[iClientH]->m_sCharIDnum2);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-IDnum3 = %d", m_pClientList[iClientH]->m_sCharIDnum3);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	/*
	wsprintf(cTxt, "party-rank = %d", m_pClientList[iClientH]->m_iPartyRank);
	strcat(pData, cTxt);
	strcat(pData,"\n");
	wsprintf(cTxt, "party-IDnum1 = %d", m_pClientList[iClientH]->m_sPartyIDnum1);
	strcat(pData, cTxt);
	strcat(pData,"\n");
	wsprintf(cTxt, "party-IDnum2 = %d", m_pClientList[iClientH]->m_sPartyIDnum2);
	strcat(pData, cTxt);
	strcat(pData,"\n");
	wsprintf(cTxt, "party-IDnum3 = %d", m_pClientList[iClientH]->m_sPartyIDnum3);
	strcat(pData, cTxt);
	strcat(pData,"\n\n");
	 */
	strcat(pData, "sex-status       = ");
	itoa(m_pClientList[iClientH]->m_cSex, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	strcat(pData, "skin-status      = ");
	itoa(m_pClientList[iClientH]->m_cSkin, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	strcat(pData, "hairstyle-status = ");
	itoa(m_pClientList[iClientH]->m_cHairStyle, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	strcat(pData, "haircolor-status = ");
	itoa(m_pClientList[iClientH]->m_cHairColor, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	strcat(pData, "underwear-status = ");
	itoa(m_pClientList[iClientH]->m_cUnderwear, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "hunger-status    = %d", m_pClientList[iClientH]->m_iHungerStatus);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "timeleft-shutup  = %d", m_pClientList[iClientH]->m_iTimeLeft_ShutUp);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "timeleft-rating  = %d", m_pClientList[iClientH]->m_iTimeLeft_Rating);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "timeleft-force-recall  = %d", m_pClientList[iClientH]->m_iTimeLeft_ForceRecall);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "timeleft-firm-staminar = %d", m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "admin-user-level = %d", m_pClientList[iClientH]->m_iAdminUserLevel);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "penalty-block-date = %d %d %d", m_pClientList[iClientH]->m_iPenaltyBlockYear, m_pClientList[iClientH]->m_iPenaltyBlockMonth, m_pClientList[iClientH]->m_iPenaltyBlockDay);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-quest-number = %d", m_pClientList[iClientH]->m_iQuest);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-quest-ID     = %d", m_pClientList[iClientH]->m_iQuestID);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "current-quest-count    = %d", m_pClientList[iClientH]->m_iCurQuestCount);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "quest-reward-type      = %d", m_pClientList[iClientH]->m_iQuestRewardType);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "quest-reward-amount    = %d", m_pClientList[iClientH]->m_iQuestRewardAmount);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-contribution = %d", m_pClientList[iClientH]->m_iContribution);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-war-contribution = %d", m_pClientList[iClientH]->m_iWarContribution);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-quest-completed = %d", (int) m_pClientList[iClientH]->m_bIsQuestCompleted);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "special-event-id = %d", (int) m_pClientList[iClientH]->m_iSpecialEventID);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "super-attack-left = %d", (int) m_pClientList[iClientH]->m_iSuperAttackLeft);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "reserved-fightzone-id = %d %d %d", m_pClientList[iClientH]->m_iFightzoneNumber, m_pClientList[iClientH]->m_iReserveTime, m_pClientList[iClientH]->m_iFightZoneTicketNumber);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "special-ability-time = %d", m_pClientList[iClientH]->m_iSpecialAbilityTime);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "locked-map-name = %s", m_pClientList[iClientH]->m_cLockedMapName);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "locked-map-time = %d", m_pClientList[iClientH]->m_iLockedMapTime);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "crusade-job = %d", m_pClientList[iClientH]->m_iCrusadeDuty);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "crusade-GUID = %d", m_pClientList[iClientH]->m_dwCrusadeGUID);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "construct-point = %d", m_pClientList[iClientH]->m_iConstructionPoint);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "dead-penalty-time = %d", m_pClientList[iClientH]->m_iDeadPenaltyTime);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "party-id = 0", m_pClientList[iClientH]->m_iPartyID);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "character-ball-points = %d", m_pClientList[iClientH]->m_iBallPoints);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	wsprintf(cTxt, "gizon-item-upgade-left = %d", m_pClientList[iClientH]->m_iGizonItemUpgradeLeft);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	/*wsprintf(cTxt, "gizon-item-upgade-left = %d", m_pClientList[iClientH]->m_iGizonItemUpgradeLeft);
	strcat(pData, cTxt);
	strcat(pData,"\n");*/
	strcat(pData, "\n\n");
	strcat(pData, "appr1 = ");
	itoa(m_pClientList[iClientH]->m_sAppr1, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	strcat(pData, "appr2 = ");
	//m_pClientList[iClientH]->m_sAppr2 = m_pClientList[iClientH]->m_sAppr2 & 0x0FFF;
	itoa(m_pClientList[iClientH]->m_sAppr2, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	strcat(pData, "appr3 = ");
	itoa(m_pClientList[iClientH]->m_sAppr3, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	strcat(pData, "appr4 = ");
	itoa(m_pClientList[iClientH]->m_sAppr4, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n");
	// v1.4 ApprColor
	strcat(pData, "appr-color = ");
	itoa(m_pClientList[iClientH]->m_iApprColor, cTxt, 10);
	strcat(pData, cTxt);
	strcat(pData, "\n\n");
	strcat(pData, "[ITEMLIST]\n\n");
	for (i = 0; i < DEF_MAXITEMS; i++) { // v1.4
		TempItemPosList[i].x = 40;
		TempItemPosList[i].y = 30;
	}
	iPos = 0;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
			TempItemPosList[iPos].x = m_pClientList[iClientH]->m_ItemPosList[i].x;
			TempItemPosList[iPos].y = m_pClientList[iClientH]->m_ItemPosList[i].y;
			iPos++;
			strcat(pData, "character-item = ");
			memset(cTmp, ' ', 21);
			strcpy(cTmp, m_pClientList[iClientH]->m_pItemList[i]->m_cName);
			cTmp[strlen(m_pClientList[iClientH]->m_pItemList[i]->m_cName)] = (char) ' ';
			cTmp[20] = 0;
			strcat(pData, cTmp);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemList[i]->m_dwCount, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemList[i]->m_sTouchEffectType, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemList[i]->m_sTouchEffectValue1, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemList[i]->m_sTouchEffectValue2, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemList[i]->m_sTouchEffectValue3, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemList[i]->m_cItemColor, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemList[i]->m_sItemSpecEffectValue1, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemList[i]->m_sItemSpecEffectValue2, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemList[i]->m_sItemSpecEffectValue3, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemList[i]->m_wCurLifeSpan, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemList[i]->m_dwAttribute, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_ItemPosList[i].x, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_ItemPosList[i].y, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_bIsItemEquipped[i], cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, "\n");
		}
	strcat(pData, "\n\n");
	for (i = 0; i < DEF_MAXITEMS; i++) {
		m_pClientList[iClientH]->m_ItemPosList[i].x = TempItemPosList[i].x;
		m_pClientList[iClientH]->m_ItemPosList[i].y = TempItemPosList[i].y;
	}
	for (i = 0; i < DEF_MAXBANKITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemInBankList[i] != 0) {
			strcat(pData, "character-bank-item = ");
			memset(cTmp, ' ', 21);
			strcpy(cTmp, m_pClientList[iClientH]->m_pItemInBankList[i]->m_cName);
			cTmp[strlen(m_pClientList[iClientH]->m_pItemInBankList[i]->m_cName)] = (char) ' ';
			cTmp[20] = 0;
			strcat(pData, cTmp);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemInBankList[i]->m_dwCount, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemInBankList[i]->m_sTouchEffectType, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemInBankList[i]->m_sTouchEffectValue1, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemInBankList[i]->m_sTouchEffectValue2, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemInBankList[i]->m_sTouchEffectValue3, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemInBankList[i]->m_cItemColor, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemInBankList[i]->m_sItemSpecEffectValue1, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemInBankList[i]->m_sItemSpecEffectValue2, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemInBankList[i]->m_sItemSpecEffectValue3, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemInBankList[i]->m_wCurLifeSpan, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, " ");
			itoa(m_pClientList[iClientH]->m_pItemInBankList[i]->m_dwAttribute, cTxt, 10);
			strcat(pData, cTxt);
			strcat(pData, "\n");
		}
	strcat(pData, "\n\n");
	strcat(pData, "[MAGIC-SKILL-MASTERY]\n\n");
	strcat(pData, "//------------------012345678901234567890123456789012345678901234567890");
	strcat(pData, "\n");
	strcat(pData, "magic-mastery     = ");
	for (i = 0; i < DEF_MAXMAGICTYPE; i++) {
		wsprintf(cTxt, "%d", (int) m_pClientList[iClientH]->m_cMagicMastery[i]);
		strcat(pData, cTxt);
	}
	strcat(pData, "\n");
	strcat(pData, "skill-mastery     = ");
	for (i = 0; i < 60; i++) {
		std::memset(cTxt, 0, sizeof(cTxt));
		wsprintf(cTxt, "%d ", m_pClientList[iClientH]->m_cSkillMastery[i]);
		strcat(pData, cTxt);
	}
	strcat(pData, "\n");
	strcat(pData, "skill-SSN     = ");
	for (i = 0; i < 60; i++) {
		std::memset(cTxt, 0, sizeof(cTxt));
		wsprintf(cTxt, "%d ", m_pClientList[iClientH]->m_iSkillSSN[i]);
		strcat(pData, cTxt);
	}
	strcat(pData, "\n");
	strcat(pData, "[ITEM-EQUIP-STATUS]\n\n");
	strcat(pData, "item-equip-status = ");
	std::memset(cTxt, 0, sizeof(cTxt));
	strcpy(cTxt, "00000000000000000000000000000000000000000000000000");
	int iEP = 0;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
			if ((m_pClientList[iClientH]->m_bIsItemEquipped[i] == true) &&
					  (m_pClientList[iClientH]->m_pItemList[i]->m_cItemType == ItemType::equip)) {
				cTxt[iEP] = '1';
			}
			iEP++;
		}
	strcat(pData, cTxt);
	strcat(pData, "\n");
	strcat(pData, "item-position-x = ");
	for (i = 0; i < DEF_MAXITEMS; i++) {
		std::memset(cTxt, 0, sizeof(cTxt));
		wsprintf(cTxt, "%d ", m_pClientList[iClientH]->m_ItemPosList[i].x);
		strcat(pData, cTxt);
	}
	strcat(pData, "\n");
	strcat(pData, "item-position-y = ");
	for (i = 0; i < DEF_MAXITEMS; i++) {
		std::memset(cTxt, 0, sizeof(cTxt));
		wsprintf(cTxt, "%d ", m_pClientList[iClientH]->m_ItemPosList[i].y);
		strcat(pData, cTxt);
	}
	strcat(pData, "\n\n");
	strcat(pData, "[EOF]");
	strcat(pData, "\n\n\n\n");
	return strlen(pData);
}

bool CGame::_bDecodeItemConfigFileContents(char * pData, uint32_t dwMsgSize) {
	char * pContents, * token, cTxt[120];
	char seps[] = "= \t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int iItemConfigListIndex;
	int iTemp;
	CStrTok * pStrTok;
	pContents = new char[dwMsgSize + 1];
	ZeroMemory(pContents, dwMsgSize + 1);
	memcpy(pContents, pData, dwMsgSize);
	pStrTok = new CStrTok(pContents, seps);
	token = pStrTok->pGet();
	//token = strtok( pContents, seps );
	while (token != 0) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - ItemIDnumber");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iItemConfigListIndex = atoi(token);
							//testcode
							if (iItemConfigListIndex == 490)
								iItemConfigListIndex = atoi(token);
							if (m_pItemConfigList[iItemConfigListIndex] != 0) {
								wsprintf(cTxt, "(!!!) CRITICAL ERROR! Duplicate ItemIDnum(%d)", iItemConfigListIndex);
								PutLogList(cTxt);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex] = new CItem;
							m_pItemConfigList[iItemConfigListIndex]->m_sIDnum = (ItemId) iItemConfigListIndex;
							cReadModeB = 2;
							break;
						case 2:
							// m_cName
							std::memset(m_pItemConfigList[iItemConfigListIndex]->m_cName, 0, sizeof(m_pItemConfigList[iItemConfigListIndex]->m_cName));
							memcpy(m_pItemConfigList[iItemConfigListIndex]->m_cName, token, strlen(token));
							cReadModeB = 3;
							break;
						case 3:
							// m_cItemType
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - ItemType");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_cItemType = (ItemType) atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							// m_cEquipPos
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - EquipPos");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_cEquipPos = (ItemEquipPos) atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							// m_sItemEffectType
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - ItemEffectType");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sItemEffectType = (ItemEffectType) atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							// m_sItemEffectValue1
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - ItemEffectValue1");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sItemEffectValue1 = atoi(token);
							cReadModeB = 7;
							break;
						case 7:
							// m_sItemEffectValue2
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - ItemEffectValue2");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sItemEffectValue2 = atoi(token);
							cReadModeB = 8;
							break;
						case 8:
							// m_sItemEffectValue3
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - ItemEffectValue3");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sItemEffectValue3 = atoi(token);
							cReadModeB = 9;
							break;
						case 9:
							// m_sItemEffectValue4
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - ItemEffectValue4");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sItemEffectValue4 = atoi(token);
							cReadModeB = 10;
							break;
						case 10:
							// m_sItemEffectValue5
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - ItemEffectValue5");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sItemEffectValue5 = atoi(token);
							cReadModeB = 11;
							break;
						case 11:
							// m_sItemEffectValue6
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - ItemEffectValue6");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sItemEffectValue6 = atoi(token);
							cReadModeB = 12;
							break;
						case 12:
							// m_wMaxLifeSpan
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - MaxLifeSpan");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_wMaxLifeSpan = (uint16_t) atoi(token);
							cReadModeB = 13;
							break;
						case 13:
							// m_sSpecialEffect
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - MaxFixCount");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sSpecialEffect = atoi(token);
							cReadModeB = 14;
							break;
						case 14:
							// m_sSprite
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - Sprite");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sSprite = atoi(token);
							cReadModeB = 15;
							break;
						case 15:
							// m_sSpriteFrame
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - SpriteFrame");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sSpriteFrame = atoi(token);
							cReadModeB = 16;
							break;
						case 16:
							// m_wPrice
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - Price");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iTemp = atoi(token);
							if (iTemp < 0)
								m_pItemConfigList[iItemConfigListIndex]->m_bIsForSale = false;
							else m_pItemConfigList[iItemConfigListIndex]->m_bIsForSale = true;
							m_pItemConfigList[iItemConfigListIndex]->m_wPrice = abs(iTemp);
							cReadModeB = 17;
							break;
						case 17:
							// m_wWeight
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - Weight");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_wWeight = atoi(token);
							cReadModeB = 18;
							break;
						case 18:
							// Appr Value
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - ApprValue");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_cApprValue = atoi(token);
							cReadModeB = 19;
							break;
						case 19:
							// m_cSpeed
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - Speed");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_cSpeed = atoi(token);
							cReadModeB = 20;
							break;
						case 20:
							// m_sLevelLimit
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - LevelLimit");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sLevelLimit = atoi(token);
							cReadModeB = 21;
							break;
						case 21:
							// m_cGederLimit
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - GenderLimit");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_cGenderLimit = atoi(token);
							cReadModeB = 22;
							break;
						case 22:
							// m_sSpecialEffectValue1
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - SM_HitRatio");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sSpecialEffectValue1 = atoi(token);
							cReadModeB = 23;
							break;
						case 23:
							// m_sSpecialEffectValue2
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - L_HitRatio");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sSpecialEffectValue2 = atoi(token);
							cReadModeB = 24;
							break;
						case 24:
							// m_sRelatedSkill
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - RelatedSkill");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_sRelatedSkill = atoi(token);
							cReadModeB = 25;
							break;
						case 25:
							// m_cCategory
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - Category");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_cCategory = atoi(token);
							cReadModeB = 26;
							break;
						case 26:
							// m_cItemColor
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file error - Category");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pItemConfigList[iItemConfigListIndex]->m_cItemColor = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				default:
					break;
			}
		} else {
			if (memcmp(token, "Item", 4) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
			}
			if (memcmp(token, "[ENDITEMLIST]", 13) == 0) {
				cReadModeA = 0;
				cReadModeB = 0;
				goto DICFC_STOPDECODING;
			}
		}
		token = pStrTok->pGet();
		//token = strtok( 0, seps );
	}
DICFC_STOPDECODING:
	;
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		PutLogList("(!!!) CRITICAL ERROR! ITEM configuration file contents error!");
		return false;
	}
	wsprintf(cTxt, "(!) ITEM(Total:%d) configuration - success!", iItemConfigListIndex);
	PutLogList(cTxt);
	return true;
}

bool CGame::_bInitItemAttr(CItem * pItem, const char * pItemName) {
	int i;
	char cTmpName[21];
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, pItemName);
	for (i = 0; i < DEF_MAXITEMTYPES; i++)
		if (m_pItemConfigList[i] != 0) {
			if (memcmp(cTmpName, m_pItemConfigList[i]->m_cName, 20) == 0) {
				std::memset(pItem->m_cName, 0, sizeof(pItem->m_cName));
				strcpy(pItem->m_cName, m_pItemConfigList[i]->m_cName);
				pItem->m_cItemType = m_pItemConfigList[i]->m_cItemType;
				pItem->m_cEquipPos = m_pItemConfigList[i]->m_cEquipPos;
				pItem->m_sItemEffectType = m_pItemConfigList[i]->m_sItemEffectType;
				pItem->m_sItemEffectValue1 = m_pItemConfigList[i]->m_sItemEffectValue1;
				pItem->m_sItemEffectValue2 = m_pItemConfigList[i]->m_sItemEffectValue2;
				pItem->m_sItemEffectValue3 = m_pItemConfigList[i]->m_sItemEffectValue3;
				pItem->m_sItemEffectValue4 = m_pItemConfigList[i]->m_sItemEffectValue4;
				pItem->m_sItemEffectValue5 = m_pItemConfigList[i]->m_sItemEffectValue5;
				pItem->m_sItemEffectValue6 = m_pItemConfigList[i]->m_sItemEffectValue6;
				pItem->m_wMaxLifeSpan = m_pItemConfigList[i]->m_wMaxLifeSpan;
				pItem->m_wCurLifeSpan = pItem->m_wMaxLifeSpan;
				pItem->m_sSpecialEffect = m_pItemConfigList[i]->m_sSpecialEffect;
				pItem->m_sSprite = m_pItemConfigList[i]->m_sSprite;
				pItem->m_sSpriteFrame = m_pItemConfigList[i]->m_sSpriteFrame;
				pItem->m_wPrice = m_pItemConfigList[i]->m_wPrice;
				pItem->m_wWeight = m_pItemConfigList[i]->m_wWeight;
				pItem->m_cApprValue = m_pItemConfigList[i]->m_cApprValue;
				pItem->m_cSpeed = m_pItemConfigList[i]->m_cSpeed;
				pItem->m_sLevelLimit = m_pItemConfigList[i]->m_sLevelLimit;
				pItem->m_cGenderLimit = m_pItemConfigList[i]->m_cGenderLimit;
				pItem->m_sSpecialEffectValue1 = m_pItemConfigList[i]->m_sSpecialEffectValue1;
				pItem->m_sSpecialEffectValue2 = m_pItemConfigList[i]->m_sSpecialEffectValue2;
				pItem->m_sRelatedSkill = m_pItemConfigList[i]->m_sRelatedSkill;
				pItem->m_cCategory = m_pItemConfigList[i]->m_cCategory;
				pItem->m_sIDnum = m_pItemConfigList[i]->m_sIDnum;
				pItem->m_bIsForSale = m_pItemConfigList[i]->m_bIsForSale;
				pItem->m_cItemColor = m_pItemConfigList[i]->m_cItemColor;
				return true;
			}
		}
	return false;
}

bool CGame::_bGetIsStringIsNumber(char * pStr) {
	int i;
	for (i = 0; i < (int) strlen(pStr); i++)
		if ((pStr[i] != '-') && ((pStr[i] < (char) '0') || (pStr[i] > (char) '9'))) return false;
	return true;
}

bool CGame::_bReadMapInfoFiles(int iMapIndex) {
	if (__bReadMapInfo(iMapIndex) == false) {
		return false;
	}
	return true;
}

bool CGame::bSetNpcFollowMode(char * pName, char * pFollowName, char cFollowOwnerType) {
	int i;
	int iIndex;
	int iMapIndex;
	int iFollowIndex;
	char cTmpName[11], cFollowSide;
	std::memset(cTmpName, 0, sizeof(cTmpName));
	iMapIndex = -1;
	iFollowIndex = -1;
	for (i = 1; i < DEF_MAXNPCS; i++)
		if ((m_pNpcList[i] != 0) && (memcmp(m_pNpcList[i]->m_cName, pName, 5) == 0)) {
			iIndex = i;
			iMapIndex = m_pNpcList[i]->m_cMapIndex;
			goto NEXT_STEP_SNFM1;
		}
NEXT_STEP_SNFM1:
	;
	switch (cFollowOwnerType) {
		case DEF_OWNERTYPE_NPC:
			for (i = 1; i < DEF_MAXNPCS; i++)
				if ((m_pNpcList[i] != 0) && (memcmp(m_pNpcList[i]->m_cName, pFollowName, 5) == 0)) {
					if (m_pNpcList[i]->m_cMapIndex != iMapIndex) return false;
					iFollowIndex = i;
					cFollowSide = m_pNpcList[i]->m_cSide;
					goto NEXT_STEP_SNFM2;
				}
			break;
		case DEF_OWNERTYPE_PLAYER:
			for (i = 1; i < DEF_MAXCLIENTS; i++)
				if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, pFollowName, 10) == 0)) {
					if (m_pClientList[i]->m_cMapIndex != iMapIndex) return false;
					iFollowIndex = i;
					cFollowSide = m_pClientList[i]->m_cSide;
					goto NEXT_STEP_SNFM2;
				}
			break;
	}
NEXT_STEP_SNFM2:
	;
	if ((iIndex == -1) || (iFollowIndex == -1)) return false;
	m_pNpcList[iIndex]->m_cMoveType = NpcMoveType::follow;
	m_pNpcList[iIndex]->m_cFollowOwnerType = cFollowOwnerType;
	m_pNpcList[iIndex]->m_iFollowOwnerIndex = iFollowIndex;
	m_pNpcList[iIndex]->m_cSide = cFollowSide;
	return true;
}

int CGame::bCreateNewNpc(const char * pNpcName, char * pName, const char * pMapName, short sClass, char cSA, NpcMoveType cMoveType, int * poX, int * poY, char * pWaypointList, RECT * pArea, int iSpotMobIndex, char cChangeSide, bool bHideGenMode, bool bIsSummoned, bool bFirmBerserk, bool bIsMaster, int iGuildGUID) {
	int i;
	int t;
	int j;
	int k;
	int iMapIndex;
	char cTmpName[11], cTxt[120];
	short sX;
	short sY;
	short sRange;
	bool bFlag;
	SYSTEMTIME SysTime;
	if (strlen(pName) == 0) return false;
	if (strlen(pNpcName) == 0) return false;
	GetLocalTime(&SysTime);
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, pMapName);
	iMapIndex = -1;
	for (i = 0; i < DEF_MAXMAPS; i++)
		if (m_pMapList[i] != 0) {
			if (memcmp(m_pMapList[i]->m_cName, cTmpName, 10) == 0)
				iMapIndex = i;
		}
	if (iMapIndex == -1) return false;
	for (i = 1; i < DEF_MAXNPCS; i++)
		if (m_pNpcList[i] == 0) {
			m_pNpcList[i] = new CNpc(pName);
			if (_bInitNpcAttr(m_pNpcList[i], pNpcName, sClass, cSA) == false) {
				wsprintf(cTxt, "(!) Not existing NPC creation request! (%s) Ignored.", pNpcName);
				PutLogList(cTxt);
				delete m_pNpcList[i];
				m_pNpcList[i] = 0;
				return false;
			}
			if (m_pNpcList[i]->m_cDayOfWeekLimit < 10) {
				if (m_pNpcList[i]->m_cDayOfWeekLimit != SysTime.wDayOfWeek) {
					delete m_pNpcList[i];
					m_pNpcList[i] = 0;
					return false;
				}
			}
			switch (cMoveType) {
				case NpcMoveType::guard:
				case NpcMoveType::random:
					if ((poX != 0) && (poY != 0) && (*poX != 0) && (*poY != 0)) {
						sX = *poX;
						sY = *poY;
					} else {
						for (j = 0; j <= 30; j++) {
							sX = (rand() % (m_pMapList[iMapIndex]->m_sSizeX - 50)) + 15;
							sY = (rand() % (m_pMapList[iMapIndex]->m_sSizeY - 50)) + 15;
							bFlag = true;
							for (k = 0; k < DEF_MAXMGAR; k++)
								if (m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[k].left != -1) {
									if ((sX >= m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[k].left) &&
											  (sX <= m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[k].right) &&
											  (sY >= m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[k].top) &&
											  (sY <= m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[k].bottom)) {
										bFlag = false;
									}
								}
							if (bFlag == true) goto GET_VALIDLOC_SUCCESS;
						}
						delete m_pNpcList[i];
						m_pNpcList[i] = 0;
						return false;
GET_VALIDLOC_SUCCESS:
						;
					}
					break;
				case NpcMoveType::randomarea:
					sRange = (short) (pArea->right - pArea->left);
					sX = (short) ((rand() % sRange) + pArea->left);
					sRange = (short) (pArea->bottom - pArea->top);
					sY = (short) ((rand() % sRange) + pArea->top);
					break;
				case NpcMoveType::randomwaypoint:
					sX = (short) m_pMapList[iMapIndex]->m_WaypointList[pWaypointList[iDice(1, 10) - 1]].x;
					sY = (short) m_pMapList[iMapIndex]->m_WaypointList[pWaypointList[iDice(1, 10) - 1]].y;
					break;
				default:
					if ((poX != 0) && (poY != 0) && (*poX != 0) && (*poY != 0)) {
						sX = *poX;
						sY = *poY;
					} else {
						sX = (short) m_pMapList[iMapIndex]->m_WaypointList[pWaypointList[0]].x;
						sY = (short) m_pMapList[iMapIndex]->m_WaypointList[pWaypointList[0]].y;
					}
					break;
			}
			if (bGetEmptyPosition(&sX, &sY, iMapIndex) == false) {
				delete m_pNpcList[i];
				m_pNpcList[i] = 0;
				return false;
			}
			if ((bHideGenMode == true) && (_iGetPlayerNumberOnSpot(sX, sY, iMapIndex, 7) != 0)) {
				delete m_pNpcList[i];
				m_pNpcList[i] = 0;
				return false;
			}
			if ((poX != 0) && (poY != 0)) {
				*poX = sX;
				*poY = sY;
			}
			m_pNpcList[i]->m_sX = sX;
			m_pNpcList[i]->m_sY = sY;
			m_pNpcList[i]->m_vX = sX;
			m_pNpcList[i]->m_vY = sY;
			for (t = 0; t < 10; t++)
				m_pNpcList[i]->m_iWayPointIndex[t] = pWaypointList[t];
			m_pNpcList[i]->m_cTotalWaypoint = 0;
			for (t = 0; t < 10; t++)
				if (m_pNpcList[i]->m_iWayPointIndex[t] != -1) m_pNpcList[i]->m_cTotalWaypoint++;
			if (pArea != 0) {
				// RANDOMAREA Copy
				SetRect(&m_pNpcList[i]->m_rcRandomArea, pArea->left, pArea->top, pArea->right, pArea->bottom);
			}
			switch (cMoveType) {
				case NpcMoveType::guard:
					m_pNpcList[i]->m_dX = m_pNpcList[i]->m_sX;
					m_pNpcList[i]->m_dY = m_pNpcList[i]->m_sY;
					break;
				case NpcMoveType::seqwaypoint:
					m_pNpcList[i]->m_cCurWaypoint = 1;
					m_pNpcList[i]->m_dX = (short) m_pMapList[iMapIndex]->m_WaypointList[ m_pNpcList[i]->m_iWayPointIndex[ m_pNpcList[i]->m_cCurWaypoint ] ].x;
					m_pNpcList[i]->m_dY = (short) m_pMapList[iMapIndex]->m_WaypointList[ m_pNpcList[i]->m_iWayPointIndex[ m_pNpcList[i]->m_cCurWaypoint ] ].y;
					break;
				case NpcMoveType::randomwaypoint:
					m_pNpcList[i]->m_cCurWaypoint = (rand() % (m_pNpcList[i]->m_cTotalWaypoint - 1)) + 1;
					m_pNpcList[i]->m_dX = (short) m_pMapList[iMapIndex]->m_WaypointList[ m_pNpcList[i]->m_iWayPointIndex[ m_pNpcList[i]->m_cCurWaypoint ] ].x;
					m_pNpcList[i]->m_dY = (short) m_pMapList[iMapIndex]->m_WaypointList[ m_pNpcList[i]->m_iWayPointIndex[ m_pNpcList[i]->m_cCurWaypoint ] ].y;
					break;
				case NpcMoveType::randomarea:
					m_pNpcList[i]->m_cCurWaypoint = 0;
					sRange = (short) (m_pNpcList[i]->m_rcRandomArea.right - m_pNpcList[i]->m_rcRandomArea.left);
					m_pNpcList[i]->m_dX = (short) ((rand() % sRange) + m_pNpcList[i]->m_rcRandomArea.left);
					sRange = (short) (m_pNpcList[i]->m_rcRandomArea.bottom - m_pNpcList[i]->m_rcRandomArea.top);
					m_pNpcList[i]->m_dY = (short) ((rand() % sRange) + m_pNpcList[i]->m_rcRandomArea.top);
					break;
				case NpcMoveType::random:
					m_pNpcList[i]->m_dX = (short) ((rand() % (m_pMapList[iMapIndex]->m_sSizeX - 50)) + 15);
					m_pNpcList[i]->m_dY = (short) ((rand() % (m_pMapList[iMapIndex]->m_sSizeY - 50)) + 15);
					break;
				case NpcMoveType::stop: break;
				case NpcMoveType::follow: break;
			}
			m_pNpcList[i]->m_tmp_iError = 0;
			m_pNpcList[i]->m_cMoveType = cMoveType;
			switch (m_pNpcList[i]->m_cActionLimit) {
				case 2:
				case 3:
				case 5:
					m_pNpcList[i]->m_cBehavior = NpcBehavior::stop;
					switch (m_pNpcList[i]->m_sType) {
						case NpcType::shop_keeper_w: // ShopKeeper-W
						case NpcType::gandlf: // Gandlf
						case NpcType::howard: // Howard
						case NpcType::tom: // Tom
						case NpcType::william: // William
						case NpcType::kennedy: // Kennedy
							m_pNpcList[i]->m_cDir = 4 + iDice(1, 3) - 1;
							break;
						default:
							m_pNpcList[i]->m_cDir = iDice(1, 8);
							break;
					}
					break;
				default:
					m_pNpcList[i]->m_cBehavior = NpcBehavior::move;
					m_pNpcList[i]->m_cDir = 5;
					break;
			}
			m_pNpcList[i]->m_iFollowOwnerIndex = 0;
			m_pNpcList[i]->m_iTargetIndex = 0;
			m_pNpcList[i]->m_cTurn = (rand() % 2);
			switch (m_pNpcList[i]->m_sType) {
				case NpcType::xb:
				case NpcType::xw:
				case NpcType::xy:
				case NpcType::yb:
				case NpcType::yw:
				case NpcType::yy:
					m_pNpcList[i]->m_sAppr2 = (short) 0xF000;
					m_pNpcList[i]->m_sAppr2 = m_pNpcList[i]->m_sAppr2 | ((rand() % 13) << 4);
					m_pNpcList[i]->m_sAppr2 = m_pNpcList[i]->m_sAppr2 | (rand() % 9);
					break;
				case NpcType::agt: // AGT-Aresden/AGT-Elvine
				case NpcType::cgt: // CGT-Aresden/CGT-Elvine
				case NpcType::ms: // MS-Aresden/MS-Elvine
				case NpcType::dt: // DT-Aresden/DT-Elvine
					m_pNpcList[i]->m_sAppr2 = 3;
					break;
					//case NpcId::crops: // Crop
					//	m_pNpcList[i]->m_sAppr2 = 1;
					//	break;
					// appr2 = 2 seems to be enemy detection for crusade
					/*case NpcId::gate: // gate
						m_pNpcList[i]->m_sAppr2 = 0xF000; // 10 aura no sphere 13 no name movable with magic (crash) test to 29
						break;*/
				case NpcType::crops: // Crop
					m_pNpcList[i]->m_sAppr2 = 1; // 1 bud; 2 grown; 3 large
					break;
					// case 66: // Wyvern
					//	m_pNpcList[i]->m_iStatus = 0x00000010;
					//	// m_pNpcList[i]->m_cSide = 2;
					//	break;
				default:
					m_pNpcList[i]->m_sAppr2 = 0;
					break;
			}
			m_pNpcList[i]->m_cMapIndex = (char) iMapIndex;
			m_pNpcList[i]->m_dwTime = timeGetTime() + (rand() % 10000);
			m_pNpcList[i]->m_dwActionTime += (rand() % 300);
			m_pNpcList[i]->m_dwMPupTime = timeGetTime();
			m_pNpcList[i]->m_dwHPupTime = m_pNpcList[i]->m_dwMPupTime;
			m_pNpcList[i]->m_sBehaviorTurnCount = 0;
			m_pNpcList[i]->m_bIsSummoned = bIsSummoned;
			m_pNpcList[i]->m_bIsMaster = bIsMaster;
			if (bIsSummoned == true)
				m_pNpcList[i]->m_dwSummonedTime = timeGetTime();
			if (bFirmBerserk == true) {
				m_pNpcList[i]->m_cMagicEffectStatus[DEF_MAGICTYPE_BERSERK] = 1;
				m_pNpcList[i]->m_iStatus = m_pNpcList[i]->m_iStatus | 0x20;
				//iExpRoll = iDice(m_pNpcList[i]->m_iExpDiceMin, m_pNpcList[i]->m_iExpDiceMax);
				//iExpRoll *= 2;
			}
			if (cChangeSide != -1) m_pNpcList[i]->m_cSide = cChangeSide;
			m_pNpcList[i]->m_cBravery = (rand() % 3) + m_pNpcList[i]->m_iMinBravery;
			m_pNpcList[i]->m_iSpotMobIndex = iSpotMobIndex;
			m_pNpcList[i]->m_iGuildGUID = iGuildGUID;
			//testcode
			if (iGuildGUID != 0) {
				wsprintf(G_cTxt, "Summon War Unit(%d) GUID(%d)", m_pNpcList[i]->m_sType, iGuildGUID);
				PutLogList(G_cTxt);
			}
			m_pMapList[iMapIndex]->SetOwner(i, DEF_OWNERTYPE_NPC, sX, sY);
			m_pMapList[iMapIndex]->m_iTotalActiveObject++;
			m_pMapList[iMapIndex]->m_iTotalAliveObject++;
			switch (m_pNpcList[i]->m_sType) {
				case NpcType::agt: // AGT-Aresden/AGT-Elvine
				case NpcType::cgt: // CGT-Aresden/CGT-Elvine
				case NpcType::ms: // MS-Aresden/MS-Elvine
				case NpcType::dt: // DT-Aresden/DT-Elvine
				case NpcType::mana_stone: // ManaStone
					m_pMapList[iMapIndex]->bAddCrusadeStructureInfo(m_pNpcList[i]->m_sType, sX, sY, m_pNpcList[i]->m_cSide);
					break;
				case NpcType::crops:
					m_pMapList[iMapIndex]->bAddCropsTotalSum();
					break;
				default: break;
			}
			SendEventToNearClient_TypeA(i, DEF_OWNERTYPE_NPC, MSGID_EVENT_LOG, DEF_MSGTYPE_CONFIRM, 0, 0, 0);
			return true;
		}
	return false;
}

void CGame::NpcProcess() {
	int i;
	int iMaxHP;
	uint32_t dwTime;
	uint32_t dwActionTime;
	dwTime = timeGetTime();
	for (i = 1; i < DEF_MAXNPCS; i++) {
		if (m_pNpcList[i] != 0) {
			if (m_pNpcList[i]->m_cBehavior == NpcBehavior::attack) {
				switch (iDice(1, 7)) {
					case 1: dwActionTime = m_pNpcList[i]->m_dwActionTime;
						break;
					case 2: dwActionTime = m_pNpcList[i]->m_dwActionTime - 100;
						break;
					case 3: dwActionTime = m_pNpcList[i]->m_dwActionTime - 200;
						break;
					case 4: dwActionTime = m_pNpcList[i]->m_dwActionTime - 300;
						break;
					case 5: dwActionTime = m_pNpcList[i]->m_dwActionTime - 400;
						break;
					case 6: dwActionTime = m_pNpcList[i]->m_dwActionTime - 600;
						break;
					case 7: dwActionTime = m_pNpcList[i]->m_dwActionTime - 700;
						break;
				}
				if (dwActionTime < 600) dwActionTime = 600;
			} else dwActionTime = m_pNpcList[i]->m_dwActionTime;
			if (m_pNpcList[i]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] != 0)
				dwActionTime += (dwActionTime / 2);
		}
		if ((m_pNpcList[i] != 0) && ((dwTime - m_pNpcList[i]->m_dwTime) > dwActionTime)) {
			m_pNpcList[i]->m_dwTime = dwTime;
			if (abs(m_pNpcList[i]->m_cMagicLevel) > 0) {
				if ((dwTime - m_pNpcList[i]->m_dwMPupTime) > DEF_MPUPTIME) {
					m_pNpcList[i]->m_dwMPupTime = dwTime;
					m_pNpcList[i]->m_iMana += iDice(1, (m_pNpcList[i]->m_iMaxMana / 5));
					if (m_pNpcList[i]->m_iMana > m_pNpcList[i]->m_iMaxMana)
						m_pNpcList[i]->m_iMana = m_pNpcList[i]->m_iMaxMana;
				}
			}
			if (((dwTime - m_pNpcList[i]->m_dwHPupTime) > DEF_HPUPTIME) && (m_pNpcList[i]->m_bIsKilled == false)) {
				m_pNpcList[i]->m_dwHPupTime = dwTime;
				iMaxHP = iDice(m_pNpcList[i]->m_iHitDice, 8) + m_pNpcList[i]->m_iHitDice;
				if (m_pNpcList[i]->m_iHP < iMaxHP) {
					if (m_pNpcList[i]->m_bIsSummoned == false)
						m_pNpcList[i]->m_iHP += iDice(1, m_pNpcList[i]->m_iHitDice);
					if (m_pNpcList[i]->m_iHP > iMaxHP) m_pNpcList[i]->m_iHP = iMaxHP;
					if (m_pNpcList[i]->m_iHP <= 0) m_pNpcList[i]->m_iHP = 1;
				}
			}
			switch (m_pNpcList[i]->m_cBehavior) {
				case NpcBehavior::dead:
					NpcBehavior_Dead(i);
					break;
				case NpcBehavior::stop:
					NpcBehavior_Stop(i);
					break;
				case NpcBehavior::move:
					NpcBehavior_Move(i);
					break;
				case NpcBehavior::attack:
					NpcBehavior_Attack(i);
					break;
				case NpcBehavior::flee:
					NpcBehavior_Flee(i);
					break;
			}
			if ((m_pNpcList[i] != 0) && (m_pNpcList[i]->m_iHP != 0) && (m_pNpcList[i]->m_bIsSummoned == true)) {
				switch (m_pNpcList[i]->m_sType) {
					case NpcType::orge:
						if ((dwTime - m_pNpcList[i]->m_dwSummonedTime) > 1000 * 90)
							NpcKilledHandler(0, 0, i, 0);
						break;
					default:
						if ((dwTime - m_pNpcList[i]->m_dwSummonedTime) > DEF_SUMMONTIME)
							NpcKilledHandler(0, 0, i, 0);
						break;
				}
			}
		}
	}
}
// 05/29/2004 - Hypnotoad - GM chat tweak

void CGame::ChatMsgHandler(int iClientH, char * pData, uint32_t dwMsgSize) {
	int i;
	int iRet;
	uint16_t * wp;
	char * cp;
	char cBuffer[256], cTemp[256], cSendMode = 0;
	m_pClientList[iClientH]->m_dwAFKCheckTime = timeGetTime();
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (dwMsgSize > 83 + 30) return;
	{
	}
	if (m_pClientList[iClientH]->m_iTimeLeft_ShutUp > 0) return;
	if (memcmp((pData + 10), m_pClientList[iClientH]->m_cCharName, strlen(m_pClientList[iClientH]->m_cCharName)) != 0) return;
	if ((m_pClientList[iClientH]->m_bIsObserverMode == true) && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) return;
	int iStX;
	int iStY;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex] != 0) {
		iStX = m_pClientList[iClientH]->m_sX / 20;
		iStY = m_pClientList[iClientH]->m_sY / 20;
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iPlayerActivity++;
		switch (m_pClientList[iClientH]->m_cSide) {
			case 0: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iNeutralActivity++;
				break;
			case 1: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iAresdenActivity++;
				break;
			case 2: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iElvineActivity++;
				break;
		}
	}
	cp = (char *) (pData + 21);
	switch (m_iLogChatOption) {
			// Chat Logs of only players
		case 1:
			if (m_pClientList[iClientH]->m_iAdminUserLevel == 0) {
				std::memset(cTemp, 0, sizeof(cTemp));
				pData[dwMsgSize - 1] = 0;
				wsprintf(cTemp, "Loc(%s) IP(%s) PC(%s):\"%s\"", m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, cp);
				bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
			}
			break;
			// Chat Logs of only GM
		case 2:
			if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) {
				std::memset(cTemp, 0, sizeof(cTemp));
				pData[dwMsgSize - 1] = 0;
				wsprintf(cTemp, "Loc(%s) IP(%s) GM(%s):\"%s\"", m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, cp);
				bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
			}
			break;
			// Chat logs of all
		case 3:
			if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) {
				std::memset(cTemp, 0, sizeof(cTemp));
				pData[dwMsgSize - 1] = 0;
				wsprintf(cTemp, "Loc(%s) IP(%s) GM(%s):\"%s\"", m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, cp);
				bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
			} else {
				std::memset(cTemp, 0, sizeof(cTemp));
				pData[dwMsgSize - 1] = 0;
				wsprintf(cTemp, "Loc(%s) IP(%s) PC(%s):\"%s\"", m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, cp);
				bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
			}
			break;
			// Chat logs of none
		case 4:
			break;
	}
	/*	// New 08/05/2004
	// Log GM Chats
	if (m_pClientList[iClientH]->m_iAdminUserLevel > 0){
		std::memset(cTemp, 0, sizeof(cTemp));
		pData[dwMsgSize-1] = 0;
		wsprintf(cTemp,"GM Chat(%s):\"%s\"",m_pClientList[iClientH]->m_cCharName,cp);
		bSendMsgToLS(MSGID_GAMEMASTERLOG,iClientH, false,cTemp);
	}*/
	switch (*cp) {
		case '@':
			*cp = 32;
			if ((m_pClientList[iClientH]->m_iTimeLeft_ShutUp == 0) && (m_pClientList[iClientH]->m_iLevel > 1) &&
					  (m_pClientList[iClientH]->m_iSP >= 3)) {
				//v1.42
				if (m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar == 0) {
					m_pClientList[iClientH]->m_iSP -= 3;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_SP, 0, 0, 0, 0);
				}
				cSendMode = 1;
			} else cSendMode = 0;
			if (m_pClientList[iClientH]->m_iTimeLeft_ShutUp > 0) cSendMode = 0;
			break;
			// New 08/05/2004
			// Party chat
		case '$':
			*cp = 32;
			if ((m_pClientList[iClientH]->m_iTimeLeft_ShutUp == 0) && (m_pClientList[iClientH]->m_iSP >= 3)) {
				if (m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar == 0) {
					m_pClientList[iClientH]->m_iSP -= 3;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_SP, 0, 0, 0, 0);
				}
				cSendMode = 4;
			} else {
				cSendMode = 0;
			}
			if (m_pClientList[iClientH]->m_iTimeLeft_ShutUp > 0) {
				cSendMode = 0;
			}
			break;
		case '^':
			*cp = 32;
			if ((m_pClientList[iClientH]->m_iTimeLeft_ShutUp == 0) && (m_pClientList[iClientH]->m_iLevel > 10) &&
					  (m_pClientList[iClientH]->m_iSP > 5) && m_pClientList[iClientH]->m_iGuildRank != -1) {
				if (m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar == 0) {
					m_pClientList[iClientH]->m_iSP -= 3;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_SP, 0, 0, 0, 0);
				}
				cSendMode = 1;
			} else cSendMode = 0;
			if (m_pClientList[iClientH]->m_iTimeLeft_ShutUp > 0) cSendMode = 0;
			if (m_pClientList[iClientH]->m_iHP < 0) cSendMode = 0;
			if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) cSendMode = 10;
			break;
		case '!':
			*cp = 32;
			if ((m_pClientList[iClientH]->m_iTimeLeft_ShutUp == 0) && (m_pClientList[iClientH]->m_iLevel > 10) &&
					  (m_pClientList[iClientH]->m_iSP >= 5)) {
				//v1.42
				if (m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar == 0) {
					m_pClientList[iClientH]->m_iSP -= 5;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_SP, 0, 0, 0, 0);
				}
				cSendMode = 2;
			} else cSendMode = 0;
			if (m_pClientList[iClientH]->m_iTimeLeft_ShutUp > 0) cSendMode = 0;
			if (m_pClientList[iClientH]->m_iHP <= 0) cSendMode = 0;
			if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) cSendMode = 35; // GM Chat By Carlos
			break;
		case '~':
			*cp = 32;
			if ((m_pClientList[iClientH]->m_iTimeLeft_ShutUp == 0) && (m_pClientList[iClientH]->m_iLevel > 1) &&
					  (m_pClientList[iClientH]->m_iSP >= 3)) {
				//v1.42
				if (m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar == 0) {
					m_pClientList[iClientH]->m_iSP -= 3;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_SP, 0, 0, 0, 0);
				}
				cSendMode = 3;
			} else cSendMode = 0;
			if (m_pClientList[iClientH]->m_iTimeLeft_ShutUp > 0) cSendMode = 0;
			if (m_pClientList[iClientH]->m_iHP <= 0) cSendMode = 0;
			break;
		case '/':
			std::memset(cBuffer, 0, sizeof(cBuffer));
			memcpy(cBuffer, cp, dwMsgSize - 21);
			cp = (char *) (cBuffer);
			// New 19/05/2004
			if (memcmp(cp, "/version", 8) == 0) {
				ShowVersion(iClientH);
				return;
			}
			// New 10/05/2004
			if (memcmp(cp, "/begincrusadetotalwar", 21) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel > 3) {
					GlobalStartCrusadeMode();
					wsprintf(cTemp, "(%s) GM Order(%s): begincrusadetotalwar", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
					bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
				}
				return;
			}
			if (memcmp(cp, "/endcrusadetotalwar", 19) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel > 3) {
					ManualEndCrusadeMode(0);
					wsprintf(cTemp, "(%s) GM Order(%s): endcrusadetotalwar", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
					bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
				}
				return;
			}
			// New 08/05/2004
			if (memcmp(cp, "/goto ", 6) == 0) {
				AdminOrder_GoTo(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/unsummonboss", 13) == 0) {
				AdminOrder_UnsummonBoss(iClientH);
				return;
			}
			//Showdmg
			if (memcmp(cp, "/showdmg", 8) == 0) {
				PlayerOrder_ShowDamage(iClientH);
				return;
			}
			if (memcmp(cp, "/clearnpc", 9) == 0) {
				AdminOrder_ClearNpc(iClientH);
				return;
			}
			if (memcmp(cp, "/clearmap", 9) == 0) {
				AdminOrder_CleanMap(iClientH, cp, dwMsgSize);
				return;
			}
			if (memcmp(cp, "/setforcerecalltime ", 20) == 0) {
				AdminOrder_SetForceRecallTime(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/enableadmincommand ", 20) == 0) {
				AdminOrder_EnableAdminCommand(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/monstercount", 13) == 0) {
				AdminOrder_MonsterCount(iClientH, cp, dwMsgSize - 21);
				return;
			}
			// New 07/05/2004
			if (memcmp(cp, "/createparty", 12) == 0) {
				RequestCreatePartyHandler(iClientH);
				return;
			}
			if (memcmp(cp, "/joinparty ", 11) == 0) {
				RequestJoinPartyHandler(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/dismissparty", 13) == 0) {
				RequestDismissPartyHandler(iClientH);
				return;
			}
			if (memcmp(cp, "/getpartyinfo", 13) == 0) {
				GetPartyInfoHandler(iClientH);
				return;
			}
			if (memcmp(cp, "/deleteparty", 12) == 0) {
				RequestDeletePartyHandler(iClientH);
				return;
			}
			if (memcmp(cp, "/who", 4) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel >= m_iAdminLevelWho) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_TOTALUSERS, 0, 0, 0, 0);
				}
				return;
			}
			//50Cent - Capture The Flag
			if (memcmp(cp, "/startctf", 9) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel >= 4) StartCaptureTheFlag();
				return;
			}
			if (memcmp(cp, "/endctf", 7) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel >= 4) EndCaptureTheFlag(0);
				return;
			}
			if (memcmp(cp, "/happyhour ", 11) == 0) { // MORLA 2.3 - Comando Happy Hour
				if (m_pClientList[iClientH]->m_iAdminUserLevel == 0) return;
				ManualStartHappyHour(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/porpatas", 3) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel > 0)
					DeleteClient(iClientH, true, true);
				return;
			}
			if (memcmp(cp, "/desbug ", 8) == 0) {
				DesbugCharacter(iClientH, cp, dwMsgSize - 21);
				return;
			}
			/*if (memcmp(cp, "/dkset", 6) == 0) {
				GetDkSet(iClientH);
				return;
			}*/
			//criticals by MihD
			if (memcmp(cp, "/criticals", 10) == 0) {
				PlayerOrder_GetCrits(iClientH);
				return;
			}
			if (memcmp(cp, "/addmaster ", 11) == 0) {
				PlayerCommandAddMaster(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/deletemaster ", 13) == 0) {
				PlayerOrder_DeleteGuildMaster(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/balltrade ", 7) == 0) {
				_TradeItem(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/ballpoints", 10) == 0) {
				char cInfoString[50];
				wsprintf(cInfoString, " You have got:(%d) Ball Points. ", m_pClientList[iClientH]->m_iBallPoints);
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_IPACCOUNTINFO, 0, 0, 0, cInfoString);
				return;
			}
			if (memcmp(cp, "/setcrit", 6) == 0) {
				AdminOrder_SetCrit(iClientH, cp, dwMsgSize - 21);
				;
				return;
			}
			if (memcmp(cp, "/setek", 6) == 0) {
				AdminOrder_SetEK(iClientH, cp, dwMsgSize - 21);
				;
				return;
			}
			if (memcmp(cp, "/setmaj", 7) == 0) {
				AdminOrder_SetMAJ(iClientH, cp, dwMsgSize - 21);
				;
				return;
			}
			if (memcmp(cp, "/setrep", 7) == 0) {
				AdminOrder_SetRep(iClientH, cp, dwMsgSize - 21);
				;
				return;
			}
			if (memcmp(cp, "/setpk", 6) == 0) {
				AdminOrder_SetPK(iClientH, cp, dwMsgSize - 21);
				;
				return;
			}
			if (memcmp(cp, "/fi ", 4) == 0) {
				CheckAndNotifyPlayerConnection(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/to", 3) == 0) {
				ToggleWhisperPlayer(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/setpf ", 7) == 0) {
				SetPlayerProfile(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/weather", 8) == 0) {
				AdminOrder_Weather(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/pf ", 4) == 0) {
				GetPlayerProfile(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/shutup ", 8) == 0) {
				ShutUpPlayer(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/rep+ ", 6) == 0) {
				SetPlayerReputation(iClientH, cp, 1, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/time ", 6) == 0) {
				AdminOrder_Time(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/checkrep", 9) == 0) {
				AdminOrder_CheckRep(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/checkstatus ", 13) == 0) {
				AdminOrder_CheckStats(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/send ", 5) == 0) {
				AdminOrder_Pushplayer(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/rep- ", 6) == 0) {
				SetPlayerReputation(iClientH, cp, 0, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/hold", 5) == 0) {
				SetSummonMobAction(iClientH, 1, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/tgt ", 5) == 0) {
				SetSummonMobAction(iClientH, 2, dwMsgSize - 21, cp);
				return;
			}
			if (memcmp(cp, "/free", 5) == 0) {
				SetSummonMobAction(iClientH, 0, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/summonall ", 11) == 0) {
				AdminOrder_SummonAll(iClientH, cp, dwMsgSize - 21);
				return;
			}
			/*		if (memcmp(cp, "/summonguild ", 13) == 0) {
						AdminOrder_SummonGuild(iClientH, cp, dwMsgSize - 21);
						return;
					}*/
			if (memcmp(cp, "/summonplayer ", 14) == 0) {
				AdminOrder_SummonPlayer(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/storm ", 7) == 0) {
				AdminOrder_SummonStorm(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/summondeath ", 13) == 0) {
				AdminOrder_SummonDeath(iClientH);
				return;
			}
			if (memcmp(cp, "/kill ", 6) == 0) {
				AdminOrder_Kill(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/revive ", 8) == 0) {
				AdminOrder_Revive(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/closeconn ", 11) == 0) {
				AdminOrder_CloseConn(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/ban", 4) == 0) {
				UserCommand_BanGuildsman(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/reservefightzone", 17) == 0) {
				AdminOrder_ReserveFightzone(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/dissmiss ", 9) == 0) {
				UserCommand_DissmissGuild(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/attack ", 8) == 0) {
				AdminOrder_CallGuard(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/createfish ", 12) == 0) {
				AdminOrder_CreateFish(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/teleport ", 10) == 0 || memcmp(cp, "/tp ", 4) == 0) {
				AdminOrder_Teleport(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/summondemon ", 13) == 0) {
				AdminOrder_SummonDemon(iClientH);
				return;
			}
			if (memcmp(cp, "/unsummonall ", 13) == 0) {
				AdminOrder_UnsummonAll(iClientH);
				return;
			}
			if (memcmp(cp, "/unsummondemon ", 15) == 0) {
				AdminOrder_UnsummonDemon(iClientH);
				return;
			}
			if (memcmp(cp, "/checkip ", 9) == 0) {
				AdminOrder_CheckIP(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/polymorph ", 11) == 0) {
				AdminOrder_Polymorph(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/setinvi ", 9) == 0) {
				AdminOrder_SetInvi(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/gns ", 4) == 0) {
				AdminOrder_GetNpcStatus(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/setattackmode ", 15) == 0) {
				AdminOrder_SetAttackMode(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/summon ", 8) == 0) {
				AdminOrder_Summon(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/setzerk ", 9) == 0) {
				AdminOrder_SetZerk(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/setfreeze ", 11) == 0) {
				AdminOrder_SetFreeze(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/setstatus ", 11) == 0) {
				AdminOrder_SetStatus(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/disconnectall ", 15) == 0) {
				AdminOrder_DisconnectAll(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/createitem ", 12) == 0) {
				AdminOrder_CreateItem(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/energysphere ", 14) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel >= m_iAdminLevelEnergySphere) EnergySphereProcessor(true, iClientH);
				return;
			}
			if (memcmp(cp, "/banip ", 7) == 0) {
				AdminOrder_BanIP(iClientH, cp, dwMsgSize - 21);
				return;
			}
			if (memcmp(cp, "/roll", 5) == 0) {
				CStrTok * pStrTok = new CStrTok(cp, " ");
				char * token;
				token = pStrTok->pGet();
				token = pStrTok->pGet();
				if (token == 0) {
					delete pStrTok;
					return;
				}
				delete pStrTok;
				return;
			}
			if ((memcmp(cp, "/shutdownthisserverrightnow ", 28) == 0) && (m_pClientList[iClientH]->m_iAdminUserLevel >= m_iAdminLevelShutdown)) {
				m_cShutDownCode = 2;
				m_bOnExitProcess = true;
				m_dwExitProcessTime = timeGetTime();
				PutLogList("(!) GAME SERVER SHUTDOWN PROCESS BEGIN(by Admin-Command)!!!");
				bSendMsgToLS(MSGID_GAMESERVERSHUTDOWNED, 0);
				if (m_iMiddlelandMapIndex > 0) {
					// Crusade
					SaveOccupyFlagData();
					//bSendMsgToLS(MSGID_REQUEST_SAVEARESDENOCCUPYFLAGDATA, 0, 0);
					//bSendMsgToLS(MSGID_REQUEST_SAVEELVINEOCCUPYFLAGDATA, 0, 0);
				}
				return;
			}
			if ((memcmp(cp, "/setobservermode ", 17) == 0) && (m_pClientList[iClientH]->m_iAdminUserLevel >= m_iAdminLevelObserver)) {
				AdminOrder_SetObserverMode(iClientH);
				return;
			}
			if ((memcmp(cp, "/getticket ", 11) == 0) && (m_pClientList[iClientH]->m_iAdminUserLevel >= 2)) {
				AdminOrder_GetFightzoneTicket(iClientH);
				return;
			}
			if (memcmp(cp, "/beginapocalypse", 16) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel > 3) {
					if (m_pClientList[iClientH]->m_bIsAdminCommandEnabled == false) return;
					GlobalStartApocalypseMode();
					wsprintf(cTemp, "GM Order(%s): beginapocalypse", m_pClientList[iClientH]->m_cCharName);
					bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
				}
				return;
			}
			if (memcmp(cp, "/endapocalypse", 14) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel > 3) {
					if (m_pClientList[iClientH]->m_bIsAdminCommandEnabled == false) return;
					GlobalEndApocalypseMode();
					wsprintf(cTemp, "GM Order(%s): endapocalypse", m_pClientList[iClientH]->m_cCharName);
					bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
				}
				return;
			}
			if (memcmp(cp, "/beginheldenian ", 16) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel > 2) {
					ManualStartHeldenianMode(iClientH, cp, dwMsgSize - 21);
				}
				return;
			}
			if (memcmp(cp, "/endheldenian ", 14) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel > 2) {
					ManualEndHeldenianMode(iClientH, cp, dwMsgSize - 21);
				}
				return;
			}
			if (memcmp(cp, "/beginheldenianfight", 20) == 0) {
				if ((m_pClientList[iClientH]->m_iAdminUserLevel > 2) && (m_bIsHeldenianMode == 1)) {
					NotifyStartHeldenianFightMode();
				}
				return;
			}
			return;
	}
	pData[dwMsgSize - 1] = 0;
	if ((m_pClientList[iClientH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_CONFUSE ] == 1) && (iDice(1, 3) != 2)) {
		cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 17);
		while (*cp != 0) {
			if ((cp[0] != 0) && (cp[0] != ' ') && (cp[1] != 0) && (cp[1] != ' ')) {
				switch (iDice(1, 3)) {
					case 1: memcpy(cp, "ga", 2);
						break;
					case 2: memcpy(cp, "de", 2);
						break;
					case 3: memcpy(cp, "mi", 2);
						break;
				}
				cp += 2;
			} else cp++;
		}
	}
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 17);
	if ((cSendMode == 0) && (m_pClientList[iClientH]->m_iWhisperPlayerIndex != -1)) {
		cSendMode = 20;
		if (*cp == '#') cSendMode = 0;
		if (m_pClientList[iClientH]->m_iTimeLeft_ShutUp > 0) cSendMode = 0;
	}
	wp = (uint16_t *) (pData + DEF_INDEX2_MSGTYPE);
	*wp = (uint16_t) iClientH;
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 16);
	*cp = cSendMode;
	if (cSendMode != 20) {
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if (m_pClientList[i] != 0) {
				switch (cSendMode) {
					case 0:
						if (m_pClientList[i]->m_bIsInitComplete == false) break;
						if ((m_pClientList[i]->m_cMapIndex == m_pClientList[iClientH]->m_cMapIndex) &&
								  (m_pClientList[i]->m_sX > m_pClientList[iClientH]->m_sX - 10) &&
								  (m_pClientList[i]->m_sX < m_pClientList[iClientH]->m_sX + 10) &&
								  (m_pClientList[i]->m_sY > m_pClientList[iClientH]->m_sY - 7) &&
								  (m_pClientList[i]->m_sY < m_pClientList[iClientH]->m_sY + 7)) {
							// Crusade
							if (m_bIsCrusadeMode == true) {
								if ((m_pClientList[iClientH]->m_cSide != 0) && (m_pClientList[i]->m_cSide != 0) &&
										  (m_pClientList[i]->m_cSide != m_pClientList[iClientH]->m_cSide)) {
								} else iRet = m_pClientList[i]->m_pXSock->iSendMsg(pData, dwMsgSize);
							} else iRet = m_pClientList[i]->m_pXSock->iSendMsg(pData, dwMsgSize);
						}
						break;
					case 1:
						if (m_pClientList[i]->m_bIsInitComplete == false) break;
						if ((memcmp(m_pClientList[i]->m_cGuildName, m_pClientList[iClientH]->m_cGuildName, 20) == 0) &&
								  (memcmp(m_pClientList[i]->m_cGuildName, "NONE", 4) != 0)) {
							// Crusade
							if (m_bIsCrusadeMode == true) {
								if ((m_pClientList[iClientH]->m_cSide != 0) && (m_pClientList[i]->m_cSide != 0) &&
										  (m_pClientList[i]->m_cSide != m_pClientList[iClientH]->m_cSide)) {
								} else iRet = m_pClientList[i]->m_pXSock->iSendMsg(pData, dwMsgSize);
							} else iRet = m_pClientList[i]->m_pXSock->iSendMsg(pData, dwMsgSize);
						}
						break;
					case 2:
					case 10:
					case 35: // GM Chat By Carlos
						// Crusade
						if (m_bIsCrusadeMode == true) {
							if ((m_pClientList[iClientH]->m_cSide != 0) && (m_pClientList[i]->m_cSide != 0) &&
									  (m_pClientList[i]->m_cSide != m_pClientList[iClientH]->m_cSide)) {
							} else iRet = m_pClientList[i]->m_pXSock->iSendMsg(pData, dwMsgSize);
						} else iRet = m_pClientList[i]->m_pXSock->iSendMsg(pData, dwMsgSize);
						break;
					case 3:
						if (m_pClientList[i]->m_bIsInitComplete == false) break;
						if ((m_pClientList[i]->m_cSide == m_pClientList[iClientH]->m_cSide))
							iRet = m_pClientList[i]->m_pXSock->iSendMsg(pData, dwMsgSize);
						break;
					case 4:
						if (m_pClientList[i]->m_bIsInitComplete == false) break;
						if ((m_pClientList[i]->m_iPartyID != 0) && (m_pClientList[i]->m_iPartyID == m_pClientList[iClientH]->m_iPartyID))
							iRet = m_pClientList[i]->m_pXSock->iSendMsg(pData, dwMsgSize);
						break;
				}
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						//DeleteClient(i, true, true);
						break;
				}
			}
	} else {
		// New 16/05/2004
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(pData, dwMsgSize);
		if (m_pClientList[ m_pClientList[iClientH]->m_iWhisperPlayerIndex ] != 0 &&
				  strcmp(m_pClientList[iClientH]->m_cWhisperPlayerName, m_pClientList[ m_pClientList[iClientH]->m_iWhisperPlayerIndex ]->m_cCharName) == 0) {
			iRet = m_pClientList[m_pClientList[iClientH]->m_iWhisperPlayerIndex]->m_pXSock->iSendMsg(pData, dwMsgSize);
			switch (m_iLogChatOption) {
				case 1:
					if (m_pClientList[m_pClientList[iClientH]->m_iWhisperPlayerIndex]->m_iAdminUserLevel == 0) {
						std::memset(cTemp, 0, sizeof(cTemp));
						wsprintf(cTemp, "GM Whisper   (%s):\"%s\"\tto Player(%s)", m_pClientList[iClientH]->m_cCharName, pData + 21, m_pClientList[iClientH]->m_cWhisperPlayerName);
						bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
					}
					break;
				case 2:
					if (m_pClientList[m_pClientList[iClientH]->m_iWhisperPlayerIndex]->m_iAdminUserLevel > 0) {
						std::memset(cTemp, 0, sizeof(cTemp));
						wsprintf(cTemp, "GM Whisper   (%s):\"%s\"\tto GM(%s)", m_pClientList[iClientH]->m_cCharName, pData + 21, m_pClientList[iClientH]->m_cWhisperPlayerName);
						bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
					}
					break;
				case 3:
					if (m_pClientList[m_pClientList[iClientH]->m_iWhisperPlayerIndex]->m_iAdminUserLevel > 0) {
						std::memset(cTemp, 0, sizeof(cTemp));
						wsprintf(cTemp, "GM Whisper   (%s):\"%s\"\tto GM(%s)", m_pClientList[iClientH]->m_cCharName, pData + 21, m_pClientList[iClientH]->m_cWhisperPlayerName);
						bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
					} else {
						std::memset(cTemp, 0, sizeof(cTemp));
						wsprintf(cTemp, "Player Whisper   (%s):\"%s\"\tto Player(%s)", m_pClientList[iClientH]->m_cCharName, pData + 21, m_pClientList[iClientH]->m_cWhisperPlayerName);
						bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cTemp);
					}
					break;
				case 4:
					break;
			}
		}
		switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
			case DEF_XSOCKEVENT_SOCKETCLOSED:
				//DeleteClient(i, true, true);
				break;
		}
	}
}

void CGame::ChatMsgHandlerGSM(int iMsgType, int iV1, char * pName, char * pData, uint32_t dwMsgSize) {
	uint32_t * dwp;
	uint16_t * wp;
	short * sp;
	char * cp, cTemp[256];
	std::memset(cTemp, 0, sizeof(cTemp));
	dwp = (uint32_t *) cTemp;
	*dwp = MSGID_COMMAND_CHATMSG;
	wp = (uint16_t *) (cTemp + DEF_INDEX2_MSGTYPE);
	*wp = 0;
	cp = (char *) (cTemp + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *) cp;
	*sp = 0;
	cp += 2;
	sp = (short *) cp;
	*sp = 0;
	cp += 2;
	memcpy(cp, pName, 10);
	cp += 10;
	*cp = (char) iMsgType;
	cp++;
	memcpy(cp, pData, dwMsgSize);
	cp += dwMsgSize;
	switch (iMsgType) {
		case 1:
			for (int i = 1; i < DEF_MAXCLIENTS; i++)
				if (m_pClientList[i] != 0) {
					if (m_pClientList[i]->m_bIsInitComplete == false) break;
					if ((m_pClientList[i]->m_iGuildGUID == iV1) && (m_pClientList[i]->m_iGuildGUID != 0)) {
						m_pClientList[i]->m_pXSock->iSendMsg(cTemp, dwMsgSize + 22);
					}
				}
			break;
		case 2:
		case 10:
			for (int i = 1; i < DEF_MAXCLIENTS; i++)
				if (m_pClientList[i] != 0) {
					m_pClientList[i]->m_pXSock->iSendMsg(cTemp, dwMsgSize + 22);
				}
			break;
	}
}
//  int CGame::iClientMotion_Attack_Handler(int iClientH, short sX, short sY, short dX, short dY, short wType, char cDir, uint16_t wTargetObjectID, bool bResponse, bool bIsDash)
//  description			:: controls player attack
//	return value		:: int
//  last updated		:: October 29, 2004; 8:06 PM; Hypnotoad
//  commentary			:: - contains attack hack detection
//						   - added checks for Firebow and Directionbow to see if player is m_bIsInsideOwnTown
//						   - added ability to attack moving object
//						   - fixed attack unmoving object
// Incomplete:
//			- Direction Bow damage disabled

int CGame::iClientMotion_Attack_Handler(int iClientH, short sX, short sY, short dX, short dY, short wType, char cDir, uint16_t wTargetObjectID, bool bResponse, bool bIsDash) {
	char cData[100];
	uint32_t * dwp, dwTime;
	uint16_t * wp;
	int iRet;
	int iExp;
	int tdX = 0, tdY = 0, i;
	short sOwner;
	short sAbsX;
	short sAbsY;
	char cOwnerType;
	bool bNearAttack = false, var_AC = false;
	short sItemIndex;
	int tX;
	int tY;
	int iErr;
	int iStX;
	int iStY;
	if (m_pClientList[iClientH] == 0) return 0;
	if ((cDir <= 0) || (cDir > 8)) return 0;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return 0;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return 0;
	dwTime = timeGetTime();
	m_pClientList[iClientH]->m_dwLastActionTime = dwTime;
	m_pClientList[iClientH]->m_iAttackMsgRecvCount++;
	if (m_pClientList[iClientH]->m_iAttackMsgRecvCount >= 7) {
		if (m_pClientList[iClientH]->m_dwAttackLAT != 0) {
			if ((dwTime - m_pClientList[iClientH]->m_dwAttackLAT) < (3500)) {
				DeleteClient(iClientH, true, true, true);
				return 0;
			}
		}
		m_pClientList[iClientH]->m_dwAttackLAT = dwTime;
		m_pClientList[iClientH]->m_iAttackMsgRecvCount = 0;
	}
	if ((wTargetObjectID != 0) && (wType != 2)) {
		if (wTargetObjectID < DEF_MAXCLIENTS) {
			if (m_pClientList[wTargetObjectID] != 0) {
				tdX = m_pClientList[wTargetObjectID]->m_sX;
				tdY = m_pClientList[wTargetObjectID]->m_sY;
			}
		} else if ((wTargetObjectID > 10000) && (wTargetObjectID < (10000 + DEF_MAXNPCS))) {
			if (m_pNpcList[wTargetObjectID - 10000] != 0) {
				tdX = m_pNpcList[wTargetObjectID - 10000]->m_sX;
				tdY = m_pNpcList[wTargetObjectID - 10000]->m_sY;
			}
		}
		m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->GetOwner(&sOwner, &cOwnerType, dX, dY);
		if (sOwner == (wTargetObjectID - 10000)) {
			tdX = m_pNpcList[sOwner]->m_sX;
			dX = tdX;
			tdY = m_pNpcList[sOwner]->m_sY;
			dY = tdY;
			bNearAttack = false;
			var_AC = true;
		}
		if (var_AC != true) {
			if ((tdX == dX) && (tdY == dY)) {
				bNearAttack = false;
			} else if ((abs(tdX - dX) <= 1) && (abs(tdY - dY) <= 1)) {
				dX = tdX;
				dY = tdY;
				bNearAttack = true;
			}
		}
	}
	if ((dX < 0) || (dX >= m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_sSizeX) ||
			  (dY < 0) || (dY >= m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_sSizeY)) return 0;
	if ((sX != m_pClientList[iClientH]->m_sX) || (sY != m_pClientList[iClientH]->m_sY)) return 2;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex] != 0) {
		iStX = m_pClientList[iClientH]->m_sX / 20;
		iStY = m_pClientList[iClientH]->m_sY / 20;
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iPlayerActivity++;
		switch (m_pClientList[iClientH]->m_cSide) {
			case 0: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iNeutralActivity++;
				break;
			case 1: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iAresdenActivity++;
				break;
			case 2: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iElvineActivity++;
				break;
		}
	}
	sAbsX = abs(sX - dX);
	sAbsY = abs(sY - dY);
	if ((wType != 2) && (wType < 20)) {
		if (var_AC == false) {
			sItemIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ];
			if (sItemIndex != -1) {
				if (m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) return 0;
				if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::storm_bringer) {
					if ((sAbsX > 4) || (sAbsY > 4)) wType = 0;
				} else {
					if ((sAbsX > 1) || (sAbsY > 1)) wType = 0;
				}
			} else {
				if ((sAbsX > 1) || (sAbsY > 1)) wType = 0;
			}
		} else if (var_AC != false) {
			sItemIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ];
			if (sItemIndex != -1) {
				if (m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) return 0;
				if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::storm_bringer) {
					cDir = m_Misc.cGetNextMoveDir(sX, sY, dX, dY);
					if ((m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bCheckFlySpaceAvailable(sX, sY, cDir, sOwner)) != false) {
						wType = 0;
					}
				} else {
					if ((sAbsX > 1) || (sAbsY > 1)) wType = 0;
				}
			} else {
				if ((sAbsX > 1) || (sAbsY > 1)) wType = 0;
			}
		} else {
			if ((sAbsX > 1) || (sAbsY > 1)) wType = 0;
		}
	}
	ClearSkillUsingStatus(iClientH);
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->ClearOwner(0, iClientH, DEF_OWNERTYPE_PLAYER, sX, sY);
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetOwner(iClientH, DEF_OWNERTYPE_PLAYER, sX, sY);
	m_pClientList[iClientH]->m_cDir = cDir;
	iExp = 0;
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwner, &cOwnerType, dX, dY);
	if (sOwner != 0) {
		if ((wType != 0) && ((dwTime - m_pClientList[iClientH]->m_dwRecentAttackTime) > 100)) {
			if ((m_pClientList[iClientH]->m_pIsProcessingAllowed == false) && (m_pClientList[iClientH]->m_bIsInsideOwnTown == false)) {
				sItemIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::twohand];
				if (sItemIndex != -1 && m_pClientList[iClientH]->m_pItemList[sItemIndex] != 0) {
					if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::direction_bow) { // Directional bow
						iErr = 0;
						for (i = 1; i < 2; i++) {
							m_Misc.GetPoint2(sX, sY, dX, dY, &tX, &tY, &iErr, i);
							m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwner, &cOwnerType, tX, tY);
							iExp += iCalculateAttackEffect(sOwner, cOwnerType, iClientH, DEF_OWNERTYPE_PLAYER, tX, tY, wType, bNearAttack, bIsDash, true); // 1
							if (((abs(tdX - dX) >= 1) && (abs(tdY - dY) >= 1)) || ((abs(tdX - dX) <= 1) && (abs(tdY - dY) <= 1))) {
								m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwner, &cOwnerType, dX, dY);
								iExp += iCalculateAttackEffect(sOwner, cOwnerType, iClientH, DEF_OWNERTYPE_PLAYER, dX, dY, wType, bNearAttack, bIsDash, false); // 0
								while (((tdX - dX) >= 1) && ((tdY - dY) >= 1)) {
									dX += 4;
									dY += 4;
									tY += 4;
									tX += 4;
								}
								while (((tdX - dX) >= 1) && ((tdY - dY) >= 1)) {
									dX += 4;
									dY += 4;
									tY += 4;
									tX += 4;
								}
								while (((tdX - dX) >= 1) && ((tdY - dY) >= 1)) {
									dX += 4;
									dY += 4;
									tY += 4;
									tX += 4;
								}
								while (((tdX - dX) >= 1) && ((tdY - dY) >= 1)) {
									dX += 4;
									dY += 4;
									tY += 4;
									tX += 4;
								}
								while (((tdX - dX) >= 1) && ((tdY - dY) >= 1)) {
									dX += 4;
									dY += 4;
									tY += 4;
									tX += 4;
								}
								while (((tdX - dX) >= 1) && ((tdY - dY) >= 1)) {
									dX += 4;
									dY += 4;
									tY += 4;
									tX += 4;
								}
							}
						}
					} else if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::fire_bow) { // Firebow
						if ((strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "aresden") == 0) ||
								  (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "elvine") == 0) ||
								  (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "arefarm") == 0) ||
								  (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "elvfarm") == 0)) {
							iExp += iCalculateAttackEffect(sOwner, cOwnerType, iClientH, DEF_OWNERTYPE_PLAYER, dX, dY, wType, bNearAttack, bIsDash, false);
						} else {
							if ((m_pClientList[iClientH]->m_sAppr2 & 0xF000) != 0) {
								if (m_bHeldenianInitiated != 1) {
									iAddDynamicObjectList(iClientH, DEF_OWNERTYPE_PLAYER_INDIRECT, DEF_DYNAMICOBJECT_FIRE3, m_pClientList[iClientH]->m_cMapIndex, dX, dY, (iDice(1, 7) + 3)*1000, 8);
								}
								iExp += iCalculateAttackEffect(sOwner, cOwnerType, iClientH, DEF_OWNERTYPE_PLAYER, dX, dY, wType, bNearAttack, bIsDash, false); // 0
							}
						}
					} else {
						iExp += iCalculateAttackEffect(sOwner, cOwnerType, iClientH, DEF_OWNERTYPE_PLAYER, dX, dY, wType, bNearAttack, bIsDash, false); // 0
					}
				} else {
					iExp += iCalculateAttackEffect(sOwner, cOwnerType, iClientH, DEF_OWNERTYPE_PLAYER, dX, dY, wType, bNearAttack, bIsDash, false); // 0
				}
			} else {
				iExp += iCalculateAttackEffect(sOwner, cOwnerType, iClientH, DEF_OWNERTYPE_PLAYER, dX, dY, wType, bNearAttack, bIsDash, false); // 0
			}
			if (m_pClientList[iClientH] == 0) return 0;
			m_pClientList[iClientH]->m_dwRecentAttackTime = dwTime;
		}
	} else _CheckMiningAction(iClientH, dX, dY);
	if (iExp != 0) {
		GetExp(iClientH, iExp, true);
	}
	if (bResponse == true) {
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_RESPONSE_MOTION;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_OBJECTMOTION_ATTACK_CONFIRM;
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
		switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
			case DEF_XSOCKEVENT_SOCKETCLOSED:
				DeleteClient(iClientH, true, true);
				return 0;
		}
	}
	return 1;
}

char CGame::cGetNextMoveDir(short sX, short sY, short dstX, short dstY, char cMapIndex, char cTurn, int * pError) {
	char cDir;
	char cTmpDir;
	int aX;
	int aY;
	int dX;
	int dY;
	int i;
	int iResX;
	int iResY;
	if ((sX == dstX) && (sY == dstY)) return 0;
	dX = sX;
	dY = sY;
	if ((abs(dX - dstX) <= 1) && (abs(dY - dstY) <= 1)) {
		iResX = dstX;
		iResY = dstY;
	} else m_Misc.GetPoint(dX, dY, dstX, dstY, &iResX, &iResY, pError);
	cDir = m_Misc.cGetNextMoveDir(dX, dY, iResX, iResY);
	if (cTurn == 0)
		for (i = cDir; i <= cDir + 7; i++) {
			cTmpDir = i;
			if (cTmpDir > 8) cTmpDir -= 8;
			aX = _tmp_cTmpDirX[cTmpDir];
			aY = _tmp_cTmpDirY[cTmpDir];
			if (m_pMapList[cMapIndex]->bGetMoveable(dX + aX, dY + aY) == true) return cTmpDir;
		}
	if (cTurn == 1)
		for (i = cDir; i >= cDir - 7; i--) {
			cTmpDir = i;
			if (cTmpDir < 1) cTmpDir += 8;
			aX = _tmp_cTmpDirX[cTmpDir];
			aY = _tmp_cTmpDirY[cTmpDir];
			if (m_pMapList[cMapIndex]->bGetMoveable(dX + aX, dY + aY) == true) return cTmpDir;
		}
	return 0;
}
char _tmp_cEmptyPosX[] = {0, 1, 1, 0, -1, -1, -1, 0, 1, 2, 2, 2, 2, 1, 0, -1, -2, -2, -2, -2, -2, -1, 0, 1, 2};
char _tmp_cEmptyPosY[] = {0, 0, 1, 1, 1, 0, -1, -1, -1, -1, 0, 1, 2, 2, 2, 2, 2, 1, 0, -1, -2, -2, -2, -2, -2};

bool CGame::bGetEmptyPosition(short * pX, short * pY, char cMapIndex) {
	int i;
	short sX;
	short sY;
	for (i = 0; i < 25; i++)
		if ((m_pMapList[cMapIndex]->bGetMoveable(*pX + _tmp_cEmptyPosX[i], *pY + _tmp_cEmptyPosY[i]) == true) &&
				  (m_pMapList[cMapIndex]->bGetIsTeleport(*pX + _tmp_cEmptyPosX[i], *pY + _tmp_cEmptyPosY[i]) == false)) {
			sX = *pX + _tmp_cEmptyPosX[i];
			sY = *pY + _tmp_cEmptyPosY[i];
			*pX = sX;
			*pY = sY;
			return true;
		}
	GetMapInitialPoint(cMapIndex, &sX, &sY);
	*pX = sX;
	*pY = sY;
	return false;
}

void CGame::NpcBehavior_Move(int iNpcH) {
	char cDir;
	short sX;
	short sY;
	short dX;
	short dY;
	short absX;
	short absY;
	short sTarget;
	short sDistance;
	char cTargetType;
	if (m_pNpcList[iNpcH] == 0) return;
	if (m_pNpcList[iNpcH]->m_bIsKilled == true) return;
	if ((m_pNpcList[iNpcH]->m_bIsSummoned == true) &&
			  (m_pNpcList[iNpcH]->m_iSummonControlMode == 1)) return;
	if (m_pNpcList[iNpcH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) return;
	switch (m_pNpcList[iNpcH]->m_cActionLimit) {
		case 2:
		case 3:
		case 5:
			m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::stop;
			m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
			return;
	}
	int iStX;
	int iStY;
	if (m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex] != 0) {
		iStX = m_pNpcList[iNpcH]->m_sX / 20;
		iStY = m_pNpcList[iNpcH]->m_sY / 20;
		m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iMonsterActivity++;
	}
	m_pNpcList[iNpcH]->m_sBehaviorTurnCount++;
	if (m_pNpcList[iNpcH]->m_sBehaviorTurnCount > 5) {
		m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
		absX = abs(m_pNpcList[iNpcH]->m_vX - m_pNpcList[iNpcH]->m_sX);
		absY = abs(m_pNpcList[iNpcH]->m_vY - m_pNpcList[iNpcH]->m_sY);
		if ((absX <= 2) && (absY <= 2)) {
			CalcNextWayPointDestination(iNpcH);
		}
		m_pNpcList[iNpcH]->m_vX = m_pNpcList[iNpcH]->m_sX;
		m_pNpcList[iNpcH]->m_vY = m_pNpcList[iNpcH]->m_sY;
	}
	TargetSearch(iNpcH, &sTarget, &cTargetType);
	if (sTarget != 0) {
		if (m_pNpcList[iNpcH]->m_dwActionTime < 1000) {
			if (iDice(1, 3) == 3) {
				m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::attack;
				m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
				m_pNpcList[iNpcH]->m_iTargetIndex = sTarget;
				m_pNpcList[iNpcH]->m_cTargetType = cTargetType;
				return;
			}
		} else {
			m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::attack;
			m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
			m_pNpcList[iNpcH]->m_iTargetIndex = sTarget;
			m_pNpcList[iNpcH]->m_cTargetType = cTargetType;
			return;
		}
	}
	if ((m_pNpcList[iNpcH]->m_bIsMaster == true) && (iDice(1, 3) == 2)) return;
	if (m_pNpcList[iNpcH]->m_cMoveType == NpcMoveType::follow) {
		sX = m_pNpcList[iNpcH]->m_sX;
		sY = m_pNpcList[iNpcH]->m_sY;
		switch (m_pNpcList[iNpcH]->m_cFollowOwnerType) {
			case DEF_OWNERTYPE_PLAYER:
				if (m_pClientList[m_pNpcList[iNpcH]->m_iFollowOwnerIndex] == 0) {
					m_pNpcList[iNpcH]->m_cMoveType = NpcMoveType::random;
					return;
				}
				dX = m_pClientList[m_pNpcList[iNpcH]->m_iFollowOwnerIndex]->m_sX;
				dY = m_pClientList[m_pNpcList[iNpcH]->m_iFollowOwnerIndex]->m_sY;
				break;
			case DEF_OWNERTYPE_NPC:
				if (m_pNpcList[m_pNpcList[iNpcH]->m_iFollowOwnerIndex] == 0) {
					m_pNpcList[iNpcH]->m_cMoveType = NpcMoveType::random;
					m_pNpcList[iNpcH]->m_iFollowOwnerIndex = 0;
					//bSerchMaster(iNpcH);
					return;
				}
				dX = m_pNpcList[m_pNpcList[iNpcH]->m_iFollowOwnerIndex]->m_sX;
				dY = m_pNpcList[m_pNpcList[iNpcH]->m_iFollowOwnerIndex]->m_sY;
				break;
		}
		if (abs(sX - dX) >= abs(sY - dY))
			sDistance = abs(sX - dX);
		else sDistance = abs(sY - dY);
		if (sDistance >= 3) {
			cDir = cGetNextMoveDir(sX, sY, dX, dY, m_pNpcList[iNpcH]->m_cMapIndex, m_pNpcList[iNpcH]->m_cTurn, &m_pNpcList[iNpcH]->m_tmp_iError);
			if (cDir == 0) {
			} else {
				dX = m_pNpcList[iNpcH]->m_sX + _tmp_cTmpDirX[cDir];
				dY = m_pNpcList[iNpcH]->m_sY + _tmp_cTmpDirY[cDir];
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->ClearOwner(3, iNpcH, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY);
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->SetOwner(iNpcH, DEF_OWNERTYPE_NPC, dX, dY);
				m_pNpcList[iNpcH]->m_sX = dX;
				m_pNpcList[iNpcH]->m_sY = dY;
				m_pNpcList[iNpcH]->m_cDir = cDir;
				SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTMOVE, 0, 0, 0);
			}
		}
	} else {
		cDir = cGetNextMoveDir(m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY,
				  m_pNpcList[iNpcH]->m_dX, m_pNpcList[iNpcH]->m_dY,
				  m_pNpcList[iNpcH]->m_cMapIndex, m_pNpcList[iNpcH]->m_cTurn, &m_pNpcList[iNpcH]->m_tmp_iError);
		if (cDir == 0) {
			if (iDice(1, 10) == 3) CalcNextWayPointDestination(iNpcH);
		} else {
			dX = m_pNpcList[iNpcH]->m_sX + _tmp_cTmpDirX[cDir];
			dY = m_pNpcList[iNpcH]->m_sY + _tmp_cTmpDirY[cDir];
			m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->ClearOwner(4, iNpcH, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY);
			m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->SetOwner(iNpcH, DEF_OWNERTYPE_NPC, dX, dY);
			m_pNpcList[iNpcH]->m_sX = dX;
			m_pNpcList[iNpcH]->m_sY = dY;
			m_pNpcList[iNpcH]->m_cDir = cDir;
			SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTMOVE, 0, 0, 0);
		}
	}
}

void CGame::TargetSearch(int iNpcH, short * pTarget, char * pTargetType) {
	int ix;
	int iy;
	int iPKCount;
	short sX;
	short sY;
	short rX;
	short rY;
	short dX;
	short dY;
	short sOwner;
	short sTargetOwner;
	short sDistance;
	short sTempDistance;
	char cOwnerType;
	char cTargetType;
	char cTargetSide;
	int iInv;
	sTargetOwner = 0;
	cTargetType = 0;
	sDistance = 100;
	sX = m_pNpcList[iNpcH]->m_sX;
	sY = m_pNpcList[iNpcH]->m_sY;
	rX = m_pNpcList[iNpcH]->m_sX - m_pNpcList[iNpcH]->m_cTargetSearchRange;
	rY = m_pNpcList[iNpcH]->m_sY - m_pNpcList[iNpcH]->m_cTargetSearchRange;
	for (ix = rX; ix < rX + m_pNpcList[iNpcH]->m_cTargetSearchRange * 2 + 1; ix++)
		for (iy = rY; iy < rY + m_pNpcList[iNpcH]->m_cTargetSearchRange * 2 + 1; iy++) {
			m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwner, &cOwnerType, ix, iy);
			if (sOwner != 0) {
				if ((sOwner == iNpcH) && (cOwnerType == DEF_OWNERTYPE_NPC)) break;
				iPKCount = 0;
				switch (cOwnerType) {
					case DEF_OWNERTYPE_PLAYER:
						if (m_pClientList[sOwner] == 0) {
							m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->ClearOwner(5, sOwner, DEF_OWNERTYPE_PLAYER, ix, iy);
						} else {
							if (m_pClientList[sOwner]->m_iAdminUserLevel > 0) goto SKIP_SEARCH;
							if (m_pClientList[sOwner]->m_cSide == 0) goto SKIP_SEARCH;
							dX = m_pClientList[sOwner]->m_sX;
							dY = m_pClientList[sOwner]->m_sY;
							cTargetSide = m_pClientList[sOwner]->m_cSide;
							iPKCount = m_pClientList[sOwner]->m_iPKCount;
							iInv = m_pClientList[sOwner]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ];
						}
						break;
					case DEF_OWNERTYPE_NPC:
						if (m_pNpcList[sOwner] == 0) {
							m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->ClearOwner(6, sOwner, DEF_OWNERTYPE_NPC, ix, iy);
						} else {
							dX = m_pNpcList[sOwner]->m_sX;
							dY = m_pNpcList[sOwner]->m_sY;
							cTargetSide = m_pNpcList[sOwner]->m_cSide;
							iPKCount = 0;
							iInv = m_pNpcList[sOwner]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ];
							if (m_pNpcList[iNpcH]->m_sType == NpcType::guard) {
								if (_iCalcPlayerNum(m_pNpcList[sOwner]->m_cMapIndex, dX, dY, 2) != 0) {
									sOwner = 0;
									cOwnerType = 0;
								}
							}
						}
						break;
				}
				if (m_pNpcList[iNpcH]->m_cSide < 10) {
					if (cTargetSide == 0) {
						if (iPKCount == 0) goto SKIP_SEARCH;
					} else {
						if ((iPKCount == 0) && (cTargetSide == m_pNpcList[iNpcH]->m_cSide)) goto SKIP_SEARCH;
						if (m_pNpcList[iNpcH]->m_cSide == 0) goto SKIP_SEARCH;
					}
				} else {
					if ((cOwnerType == DEF_OWNERTYPE_NPC) && (cTargetSide == 0)) goto SKIP_SEARCH;
					if (cTargetSide == m_pNpcList[iNpcH]->m_cSide) goto SKIP_SEARCH;
				}
				if ((iInv != 0) && (m_pNpcList[iNpcH]->m_cSpecialAbility != 1)) goto SKIP_SEARCH;
				if (abs(sX - dX) >= abs(sY - dY))
					sTempDistance = abs(sX - dX);
				else sTempDistance = abs(sY - dY);
				if (sTempDistance < sDistance) {
					sDistance = sTempDistance;
					sTargetOwner = sOwner;
					cTargetType = cOwnerType;
				}
SKIP_SEARCH:
				;
			}
		}
	*pTarget = sTargetOwner;
	*pTargetType = cTargetType;
	return;
}

void CGame::NpcBehavior_Attack(int iNpcH) {
	int iMagicType;
	short sX;
	short sY;
	short dX;
	short dY;
	char cDir;
	uint32_t dwTime = timeGetTime();
	if (m_pNpcList[iNpcH] == 0) return;
	if (m_pNpcList[iNpcH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) return;
	if (m_pNpcList[iNpcH]->m_bIsKilled == true) return;
	switch (m_pNpcList[iNpcH]->m_cActionLimit) {
		case 1:
		case 2:
		case 3:
		case 4:
			return;
		case 5:
			if (m_pNpcList[iNpcH]->m_iBuildCount > 0) return;
	}
	int iStX;
	int iStY;
	if (m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex] != 0) {
		iStX = m_pNpcList[iNpcH]->m_sX / 20;
		iStY = m_pNpcList[iNpcH]->m_sY / 20;
		m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iMonsterActivity++;
	}
	if (m_pNpcList[iNpcH]->m_sBehaviorTurnCount == 0)
		m_pNpcList[iNpcH]->m_iAttackCount = 0;
	m_pNpcList[iNpcH]->m_sBehaviorTurnCount++;
	if (m_pNpcList[iNpcH]->m_sBehaviorTurnCount > 20) {
		m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
		if ((m_pNpcList[iNpcH]->m_bIsPermAttackMode == false))
			m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::move;
		return;
	}
	sX = m_pNpcList[iNpcH]->m_sX;
	sY = m_pNpcList[iNpcH]->m_sY;
	switch (m_pNpcList[iNpcH]->m_cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex] == 0) {
				m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
				m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::move;
				return;
			}
			dX = m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_sX;
			dY = m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_sY;
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex] == 0) {
				m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
				m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::move;
				return;
			}
			dX = m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_sX;
			dY = m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_sY;
			break;
	}
	if ((iGetDangerValue(iNpcH, dX, dY) > m_pNpcList[iNpcH]->m_cBravery) &&
			  (m_pNpcList[iNpcH]->m_bIsPermAttackMode == false) &&
			  (m_pNpcList[iNpcH]->m_cActionLimit != 5)) {
		m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
		m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::flee;
		return;
	}
	if ((m_pNpcList[iNpcH]->m_iHP <= 2) && (iDice(1, m_pNpcList[iNpcH]->m_cBravery) <= 3) &&
			  (m_pNpcList[iNpcH]->m_bIsPermAttackMode == false) &&
			  (m_pNpcList[iNpcH]->m_cActionLimit != 5)) {
		m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
		m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::flee;
		return;
	}
	if ((abs(sX - dX) <= 1) && (abs(sY - dY) <= 1)) {
		cDir = m_Misc.cGetNextMoveDir(sX, sY, dX, dY);
		if (cDir == 0) return;
		m_pNpcList[iNpcH]->m_cDir = cDir;
		if (m_pNpcList[iNpcH]->m_cActionLimit == 5) {
			switch (m_pNpcList[iNpcH]->m_sType) {
				case NpcType::agc:
					SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, dX, dY, 1);
					m_pNpcList[iNpcH]->m_iMagicHitRatio = 1000;
					NpcMagicHandler(iNpcH, dX, dY, 61);
					break;
				case NpcType::ct:
					SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, dX, dY, 2);
					iCalculateAttackEffect(m_pNpcList[iNpcH]->m_iTargetIndex, m_pNpcList[iNpcH]->m_cTargetType, iNpcH, DEF_OWNERTYPE_NPC, dX, dY, 2);
					break;
				case NpcType::agt:
					SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, m_pNpcList[iNpcH]->m_sX + _tmp_cTmpDirX[cDir], m_pNpcList[iNpcH]->m_sY + _tmp_cTmpDirY[cDir], 2);
					iCalculateAttackEffect(m_pNpcList[iNpcH]->m_iTargetIndex, m_pNpcList[iNpcH]->m_cTargetType, iNpcH, DEF_OWNERTYPE_NPC, dX, dY, 2, false, false, false);
					break;
				case NpcType::cgt: // Cannon Guard Tower:
					SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, dX, dY, 1);
					m_pNpcList[iNpcH]->m_iMagicHitRatio = 1000;
					NpcMagicHandler(iNpcH, dX, dY, 61);
					break;
				default: break;
			}
		} else {
			SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, m_pNpcList[iNpcH]->m_sX + _tmp_cTmpDirX[cDir], m_pNpcList[iNpcH]->m_sY + _tmp_cTmpDirY[cDir], 1);
			iCalculateAttackEffect(m_pNpcList[iNpcH]->m_iTargetIndex, m_pNpcList[iNpcH]->m_cTargetType, iNpcH, DEF_OWNERTYPE_NPC, dX, dY, 1, false, false);
		}
		m_pNpcList[iNpcH]->m_iAttackCount++;
		if ((m_pNpcList[iNpcH]->m_bIsPermAttackMode == false) && (m_pNpcList[iNpcH]->m_cActionLimit == 0)) {
			switch (m_pNpcList[iNpcH]->m_iAttackStrategy) {
				case DEF_ATTACKAI_EXCHANGEATTACK:
					m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
					m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::flee;
					break;
				case DEF_ATTACKAI_TWOBYONEATTACK:
					if (m_pNpcList[iNpcH]->m_iAttackCount >= 2) {
						m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
						m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::flee;
					}
					break;
			}
		}
	} else {
		cDir = m_Misc.cGetNextMoveDir(sX, sY, dX, dY);
		if (cDir == 0) return;
		m_pNpcList[iNpcH]->m_cDir = cDir;
		if ((m_pNpcList[iNpcH]->m_cMagicLevel > 0) && (iDice(1, 2) == 1) &&
				  (abs(sX - dX) <= 9) && (abs(sY - dY) <= 7)) {
			iMagicType = -1;
			switch (m_pNpcList[iNpcH]->m_cMagicLevel) {
				case 1:
					if (m_pMagicConfigList[0]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 0;
					break;
				case 2:
					if (m_pMagicConfigList[10]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 10;
					else if (m_pMagicConfigList[0]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 0;
					break;
				case 3: // Orc-Mage
					if (m_pMagicConfigList[20]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 20;
					else if (m_pMagicConfigList[10]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 10;
					break;
				case 4:
					if (m_pMagicConfigList[30]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 30;
					else if (m_pMagicConfigList[37]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 37;
					else if (m_pMagicConfigList[20]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 20;
					else if (m_pMagicConfigList[10]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 10;
					break;
				case 5: // Rudolph, Cannibal-Plant, Cyclops
					if (m_pMagicConfigList[43]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 43;
					else if (m_pMagicConfigList[30]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 30;
					else if (m_pMagicConfigList[37]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 37;
					else if (m_pMagicConfigList[20]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 20;
					else if (m_pMagicConfigList[10]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 10;
					break;
				case 6: // Tentocle, Liche
					if (m_pMagicConfigList[51]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 51;
					else if (m_pMagicConfigList[43]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 43;
					else if (m_pMagicConfigList[30]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 30;
					else if (m_pMagicConfigList[37]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 37;
					else if (m_pMagicConfigList[20]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 20;
					else if (m_pMagicConfigList[10]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 10;
					break;
				case 7: // Barlog, Fire-Wyvern, MasterMage-Orc , LightWarBeatle, GHK, GHKABS, TK, BG
					// Sor, Gagoyle, Demon
					if ((m_pMagicConfigList[70]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana) && (iDice(1, 5) == 3))
						iMagicType = 70;
					else if (m_pMagicConfigList[61]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 61;
					else if (m_pMagicConfigList[60]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 60;
					else if (m_pMagicConfigList[51]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 51;
					else if (m_pMagicConfigList[43]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 43;
					break;
				case 8: // Unicorn, Centaurus
					if ((m_pMagicConfigList[35]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana) && (iDice(1, 3) == 2))
						iMagicType = 35;
					else if (m_pMagicConfigList[60]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 60;
					else if (m_pMagicConfigList[51]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 51;
					else if (m_pMagicConfigList[43]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 43;
					break;
				case 9: // Tigerworm
					if ((m_pMagicConfigList[74]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana) && (iDice(1, 3) == 2))
						iMagicType = 74; // Lightning-Strike
					break;
				case 10: // Frost, Nizie
					break;
				case 11: // Ice-Golem
					break;
				case 12: // Wyvern
					if ((m_pMagicConfigList[91]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana) && (iDice(1, 3) == 2))
						iMagicType = 91; // Blizzard
					else if (m_pMagicConfigList[63]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 63; // Mass-Chill-Wind
					break;
				case 13: // Abaddon
					if ((m_pMagicConfigList[96]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana) && (iDice(1, 3) == 2))
						iMagicType = 92; // Earth Shock Wave
					else if (m_pMagicConfigList[81]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
						iMagicType = 96; // Metoer Strike
					break;
			}
			if (iMagicType != -1) {
				if (m_pNpcList[iNpcH]->m_iAILevel >= 2) {
					switch (m_pNpcList[iNpcH]->m_cTargetType) {
						case DEF_OWNERTYPE_PLAYER:
							if (m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] == 2) {
								if ((abs(sX - dX) > m_pNpcList[iNpcH]->m_iAttackRange) || (abs(sY - dY) > m_pNpcList[iNpcH]->m_iAttackRange)) {
									m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
									m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::move;
									return;
								} else goto NBA_CHASE;
							}
							if ((iMagicType == 35) && (m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0)) goto NBA_CHASE;
							break;
						case DEF_OWNERTYPE_NPC:
							if (m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] == 2) {
								if ((abs(sX - dX) > m_pNpcList[iNpcH]->m_iAttackRange) || (abs(sY - dY) > m_pNpcList[iNpcH]->m_iAttackRange)) {
									m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
									m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::move;
									return;
								} else goto NBA_CHASE;
							}
							if ((iMagicType == 35) && (m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0)) goto NBA_CHASE;
							break;
					}
				}
				SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, m_pNpcList[iNpcH]->m_sX + _tmp_cTmpDirX[cDir], m_pNpcList[iNpcH]->m_sY + _tmp_cTmpDirY[cDir], 1);
				NpcMagicHandler(iNpcH, dX, dY, iMagicType);
				m_pNpcList[iNpcH]->m_dwTime = dwTime + 2000;
				return;
			}
		}
		if ((m_pNpcList[iNpcH]->m_cMagicLevel < 0) && (iDice(1, 2) == 1) &&
				  (abs(sX - dX) <= 9) && (abs(sY - dY) <= 7)) {
			iMagicType = -1;
			if (m_pMagicConfigList[43]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
				iMagicType = 43;
			else if (m_pMagicConfigList[37]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
				iMagicType = 37;
			else if (m_pMagicConfigList[0]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana)
				iMagicType = 0;
			if (iMagicType != -1) {
				SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, m_pNpcList[iNpcH]->m_sX + _tmp_cTmpDirX[cDir], m_pNpcList[iNpcH]->m_sY + _tmp_cTmpDirY[cDir], 1);
				NpcMagicHandler(iNpcH, dX, dY, iMagicType);
				m_pNpcList[iNpcH]->m_dwTime = dwTime + 2000;
				return;
			}
		}
		if ((m_pNpcList[iNpcH]->m_iAttackRange > 1) &&
				  (abs(sX - dX) <= m_pNpcList[iNpcH]->m_iAttackRange) && (abs(sY - dY) <= m_pNpcList[iNpcH]->m_iAttackRange)) {
			cDir = m_Misc.cGetNextMoveDir(sX, sY, dX, dY);
			if (cDir == 0) return;
			m_pNpcList[iNpcH]->m_cDir = cDir;
			if (m_pNpcList[iNpcH]->m_cActionLimit == 5) {
				switch (m_pNpcList[iNpcH]->m_sType) {
					case NpcType::agt: // Crossbow Guard Tower
						SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, dX, dY, 2);
						iCalculateAttackEffect(m_pNpcList[iNpcH]->m_iTargetIndex, m_pNpcList[iNpcH]->m_cTargetType, iNpcH, DEF_OWNERTYPE_NPC, dX, dY, 2);
						break;
					case NpcType::cgt:
						SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, dX, dY, 1);
						m_pNpcList[iNpcH]->m_iMagicHitRatio = 1000;
						NpcMagicHandler(iNpcH, dX, dY, 61);
						break;
					default: break;
				}
			} else {
				switch (m_pNpcList[iNpcH]->m_sType) {
					case NpcType::cp:
						SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, dX, dY, 1);
						m_pNpcList[iNpcH]->m_iMagicHitRatio = 1000;
						NpcMagicHandler(iNpcH, dX, dY, 61);
						break;
					case NpcType::dark_elf:
						SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, dX, dY, 2);
						iCalculateAttackEffect(m_pNpcList[iNpcH]->m_iTargetIndex, m_pNpcList[iNpcH]->m_cTargetType, iNpcH, DEF_OWNERTYPE_NPC, dX, dY, 2);
						break;
					case NpcType::frost: // Frost
					case NpcType::nizie: // Nizie
						switch (m_pNpcList[iNpcH]->m_cTargetType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex] == 0) goto NBA_BREAK1;
								if ((m_pMagicConfigList[57]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana) && (iDice(1, 3) == 2))
									NpcMagicHandler(iNpcH, dX, dY, 57);
								if ((m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_iHP > 0) &&
										  (bCheckResistingIceSuccess(m_pNpcList[iNpcH]->m_cDir, m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_PLAYER, m_pNpcList[iNpcH]->m_iMagicHitRatio) == false)) {
									if (m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_PLAYER, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (5 * 1000),
												  m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_PLAYER, 0, 0, 0, 1, 0, 0);
										SendNotifyMsg(0, m_pNpcList[iNpcH]->m_iTargetIndex, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
									}
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex] == 0) goto NBA_BREAK1;
								if ((m_pMagicConfigList[57]->m_sValue1 <= m_pNpcList[iNpcH]->m_iMana) && (iDice(1, 3) == 2))
									NpcMagicHandler(iNpcH, dX, dY, 57);
								if ((m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_iHP > 0) &&
										  (bCheckResistingIceSuccess(m_pNpcList[iNpcH]->m_cDir, m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_iMagicHitRatio) == false)) {
									if (m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_NPC, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (5 * 1000),
												  m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_NPC, 0, 0, 0, 1, 0, 0);
									}
								}
								break;
						}
					case NpcType::beholder:
						switch (m_pNpcList[iNpcH]->m_cTargetType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex] == 0) goto NBA_BREAK1;
								if ((m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_iHP > 0) &&
										  (bCheckResistingIceSuccess(m_pNpcList[iNpcH]->m_cDir, m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_PLAYER, m_pNpcList[iNpcH]->m_iMagicHitRatio) == false)) {
									if (m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_PLAYER, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (5 * 1000),
												  m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_PLAYER, 0, 0, 0, 1, 0, 0);
										SendNotifyMsg(0, m_pNpcList[iNpcH]->m_iTargetIndex, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
									}
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex] == 0) goto NBA_BREAK1;
								if ((m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_iHP > 0) &&
										  (bCheckResistingIceSuccess(m_pNpcList[iNpcH]->m_cDir, m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_iMagicHitRatio) == false)) {
									if (m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_NPC, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (5 * 1000),
												  m_pNpcList[iNpcH]->m_iTargetIndex, DEF_OWNERTYPE_NPC, 0, 0, 0, 1, 0, 0);
									}
								}
								break;
						}
NBA_BREAK1:
						;
						SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, dX, dY, 20);
						iCalculateAttackEffect(m_pNpcList[iNpcH]->m_iTargetIndex, m_pNpcList[iNpcH]->m_cTargetType, iNpcH, DEF_OWNERTYPE_NPC, dX, dY, 20);
						break;
					default:
						SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, dX, dY, 20);
						iCalculateAttackEffect(m_pNpcList[iNpcH]->m_iTargetIndex, m_pNpcList[iNpcH]->m_cTargetType, iNpcH, DEF_OWNERTYPE_NPC, dX, dY, 20);
						break;
				}
			}
			m_pNpcList[iNpcH]->m_iAttackCount++;
			if ((m_pNpcList[iNpcH]->m_bIsPermAttackMode == false) && (m_pNpcList[iNpcH]->m_cActionLimit == 0)) {
				switch (m_pNpcList[iNpcH]->m_iAttackStrategy) {
					case DEF_ATTACKAI_EXCHANGEATTACK:
						m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
						m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::flee;
						break;
					case DEF_ATTACKAI_TWOBYONEATTACK:
						if (m_pNpcList[iNpcH]->m_iAttackCount >= 2) {
							m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
							m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::flee;
						}
						break;
				}
			}
			return;
		}
NBA_CHASE:
		;
		if (m_pNpcList[iNpcH]->m_cActionLimit != 0) return;
		m_pNpcList[iNpcH]->m_iAttackCount = 0;
		{
			cDir = cGetNextMoveDir(sX, sY, dX, dY, m_pNpcList[iNpcH]->m_cMapIndex, m_pNpcList[iNpcH]->m_cTurn, &m_pNpcList[iNpcH]->m_tmp_iError);
			if (cDir == 0) {
				return;
			}
			dX = m_pNpcList[iNpcH]->m_sX + _tmp_cTmpDirX[cDir];
			dY = m_pNpcList[iNpcH]->m_sY + _tmp_cTmpDirY[cDir];
			m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->ClearOwner(9, iNpcH, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY);
			m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->SetOwner(iNpcH, DEF_OWNERTYPE_NPC, dX, dY);
			m_pNpcList[iNpcH]->m_sX = dX;
			m_pNpcList[iNpcH]->m_sY = dY;
			m_pNpcList[iNpcH]->m_cDir = cDir;
			SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTMOVE, 0, 0, 0);
		}
	}
}

void CGame::RemoveFromTarget(short sTargetH, char cTargetType, int iCode) {
	int i;
	uint32_t dwTime = timeGetTime();
	for (i = 0; i < DEF_MAXNPCS; i++)
		if (m_pNpcList[i] != 0) {
			if ((m_pNpcList[i]->m_iGuildGUID != 0) && (cTargetType == DEF_OWNERTYPE_PLAYER) &&
					  (m_pClientList[sTargetH]->m_iGuildGUID == m_pNpcList[i]->m_iGuildGUID)) {
				if (m_pNpcList[i]->m_cActionLimit == 0) {
					m_pNpcList[i]->m_bIsSummoned = true;
					m_pNpcList[i]->m_dwSummonedTime = dwTime;
				}
			}
			if ((m_pNpcList[i]->m_iTargetIndex == sTargetH) &&
					  (m_pNpcList[i]->m_cTargetType == cTargetType)) {
				switch (iCode) {
					case DEF_MAGICTYPE_INVISIBILITY:
						if (m_pNpcList[i]->m_cSpecialAbility == 1) {
						} else {
							m_pNpcList[i]->m_cBehavior = NpcBehavior::move;
							m_pNpcList[i]->m_iTargetIndex = 0;
							m_pNpcList[i]->m_cTargetType = 0;
						}
						break;
					default:
						m_pNpcList[i]->m_cBehavior = NpcBehavior::move;
						m_pNpcList[i]->m_iTargetIndex = 0;
						m_pNpcList[i]->m_cTargetType = 0;
						break;
				}
			}
		}
}

void CGame::NpcKilledHandler(short sAttackerH, char cAttackerType, int iNpcH, short sDamage) {
	short sAttackerWeapon;
	int i;
	int iQuestIndex;
	int iExp;
	int iConstructionPoint;
	int iWarContribution;
	double dTmp1;
	double dTmp2;
	double dTmp3;
	char cQuestRemain;
	if (m_pNpcList[iNpcH] == 0) return;
	if (m_pNpcList[iNpcH]->m_bIsKilled == true) return;
	m_pNpcList[iNpcH]->m_bIsKilled = true;
	m_pNpcList[iNpcH]->m_iHP = 0;
	m_pNpcList[iNpcH]->m_iLastDamage = sDamage;
	m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_iTotalAliveObject--;
	RemoveFromTarget(iNpcH, DEF_OWNERTYPE_NPC);
	ReleaseFollowMode(iNpcH, DEF_OWNERTYPE_NPC);
	m_pNpcList[iNpcH]->m_iTargetIndex = 0;
	m_pNpcList[iNpcH]->m_cTargetType = 0;
	if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
		sAttackerWeapon = ((m_pClientList[sAttackerH]->m_sAppr2 & 0x0FF0) >> 4);
	} else sAttackerWeapon = 1;
	SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTDYING, sDamage, sAttackerWeapon, 0);
	m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->ClearOwner(10, iNpcH, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY);
	m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->SetDeadOwner(iNpcH, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY);
	m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::dead;
	m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
	m_pNpcList[iNpcH]->m_dwDeadTime = timeGetTime();
	if (m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_cType == DEF_MAPTYPE_NOPENALTY_NOREWARD) return;
	NpcDeadItemGenerator(iNpcH, sAttackerH, cAttackerType);
	if ((m_pNpcList[iNpcH]->m_bIsSummoned != true) && (cAttackerType == DEF_OWNERTYPE_PLAYER) &&
			  (m_pClientList[sAttackerH] != 0)) {
		iExp = (m_pNpcList[iNpcH]->m_iExp);
		if (m_pNpcList[iNpcH]->m_iNoDieRemainExp > 0)
			iExp += m_pNpcList[iNpcH]->m_iNoDieRemainExp;
		if (m_pClientList[sAttackerH]->m_iAddExp != 0) {
			dTmp1 = (double) m_pClientList[sAttackerH]->m_iAddExp;
			dTmp2 = (double) iExp;
			dTmp3 = (dTmp1 / 100.0f) * dTmp2;
			iExp += (int) dTmp3;
		}
		if (m_pNpcList[iNpcH]->m_sType == NpcType::abaddon) {
			for (i = 1; i < DEF_MAXCLIENTS; i++) {
				if (m_pClientList[i] != 0) {
					SendNotifyMsg(sAttackerH, i, DEF_NOTIFY_ABADDONKILLED, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				}
			}
		}
		if (m_bIsCrusadeMode == true) {
			if (iExp > 10) iExp = iExp / 3;
		}
		if (m_pNpcList[iNpcH]->m_cMagicEffectStatus[DEF_MAGICTYPE_BERSERK] == 1) {
			iExp *= 2;
		}
		// New 09/05/2004
		//m_pClientList[sAttackerH]->m_iExpStock += iExp;
		GetExp(sAttackerH, iExp, true);
		iQuestIndex = m_pClientList[sAttackerH]->m_iQuest;
		if (iQuestIndex != 0) {
			if (m_pQuestConfigList[iQuestIndex] != 0) {
				switch (m_pQuestConfigList[iQuestIndex]->m_iType) {
					case DEF_QUESTTYPE_MONSTERHUNT:
						if ((m_pClientList[sAttackerH]->m_bQuestMatchFlag_Loc == true) &&
								  (m_pQuestConfigList[iQuestIndex]->m_iTargetType == m_pNpcList[iNpcH]->m_sType)) {
							m_pClientList[sAttackerH]->m_iCurQuestCount++;
							cQuestRemain = (m_pQuestConfigList[m_pClientList[sAttackerH]->m_iQuest]->m_iMaxCount - m_pClientList[sAttackerH]->m_iCurQuestCount);
							SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_QUESTCOUNTER, cQuestRemain, 0, 0, 0);
							_bCheckIsQuestCompleted(sAttackerH);
						}
						break;
				}
			}
		}
	}
	if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
		switch (m_pNpcList[iNpcH]->m_sType) {
			case NpcType::unicorn:
				m_pClientList[sAttackerH]->m_iRating -= 0;
				m_pClientList[sAttackerH]->m_iRating -= 0;
				if (m_pClientList[sAttackerH]->m_iRating > 10000) m_pClientList[sAttackerH]->m_iRating = 10000;
				if (m_pClientList[sAttackerH]->m_iRating < -10000) m_pClientList[sAttackerH]->m_iRating = -10000;
				break;
			case NpcType::were_wolf:
				break;
			default: break;
		}
	}
	// Crusade
	iConstructionPoint = 0;
	switch (m_pNpcList[iNpcH]->m_sType) {
		case NpcType::xb: iConstructionPoint = 50;
			iWarContribution = 100;
			break;
		case NpcType::xw: iConstructionPoint = 50;
			iWarContribution = 100;
			break;
		case NpcType::xy: iConstructionPoint = 50;
			iWarContribution = 100;
			break;
		case NpcType::yb: iConstructionPoint = 50;
			iWarContribution = 100;
			break;
		case NpcType::yw: iConstructionPoint = 50;
			iWarContribution = 100;
			break;
		case NpcType::yy: iConstructionPoint = 50;
			iWarContribution = 100;
			break;
		case NpcType::agt: iConstructionPoint = 700;
			iWarContribution = 4000;
			break;
		case NpcType::cgt: iConstructionPoint = 700;
			iWarContribution = 4000;
			break;
		case NpcType::ms: iConstructionPoint = 500;
			iWarContribution = 2000;
			break;
		case NpcType::dt: iConstructionPoint = 500;
			iWarContribution = 2000;
			break;
		case NpcType::esg: iConstructionPoint = 1500;
			iWarContribution = 5000;
			break;
		case NpcType::gmg: iConstructionPoint = 5000;
			iWarContribution = 10000;
			break;
		case NpcType::lwb: iConstructionPoint = 500;
			iWarContribution = 1000;
			break;
		case NpcType::ghk: iConstructionPoint = 1000;
			iWarContribution = 2000;
			break;
		case NpcType::ghkabs: iConstructionPoint = 1500;
			iWarContribution = 3000;
			break;
		case NpcType::tk: iConstructionPoint = 1000;
			iWarContribution = 2000;
			break;
		case NpcType::bg: iConstructionPoint = 1500;
			iWarContribution = 3000;
			break;
		case NpcType::crops: m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->bRemoveCropsTotalSum();
			break;
		default: break;
	}
	// Crusade
	if (iConstructionPoint != 0) {
		switch (cAttackerType) {
			case DEF_OWNERTYPE_PLAYER:
				if (m_pClientList[sAttackerH]->m_cSide != m_pNpcList[iNpcH]->m_cSide) {
					m_pClientList[sAttackerH]->m_iConstructionPoint += iConstructionPoint;
					if (m_pClientList[sAttackerH]->m_iConstructionPoint > DEF_MAXCONSTRUCTIONPOINT)
						m_pClientList[sAttackerH]->m_iConstructionPoint = DEF_MAXCONSTRUCTIONPOINT;
					m_pClientList[sAttackerH]->m_iWarContribution += iWarContribution;
					if (m_pClientList[sAttackerH]->m_iWarContribution > DEF_MAXWARCONTRIBUTION)
						m_pClientList[sAttackerH]->m_iWarContribution = DEF_MAXWARCONTRIBUTION;
					//testcode
					wsprintf(G_cTxt, "Enemy Npc Killed by player! Construction: +%d WarContribution: +%d", iConstructionPoint, iWarContribution);
					PutLogList(G_cTxt);
					SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[sAttackerH]->m_iConstructionPoint, m_pClientList[sAttackerH]->m_iWarContribution, 0, 0);
				} else {
					m_pClientList[sAttackerH]->m_iWarContribution -= (iWarContribution * 2);
					if (m_pClientList[sAttackerH]->m_iWarContribution < 0)
						m_pClientList[sAttackerH]->m_iWarContribution = 0;
					//testcode
					wsprintf(G_cTxt, "Friendly Npc Killed by player! WarContribution: -%d", iWarContribution);
					PutLogList(G_cTxt);
					SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[sAttackerH]->m_iConstructionPoint, m_pClientList[sAttackerH]->m_iWarContribution, 0, 0);
				}
				break;
			case DEF_OWNERTYPE_NPC:
				if (m_pNpcList[sAttackerH]->m_iGuildGUID != 0) {
					if (m_pNpcList[sAttackerH]->m_cSide != m_pNpcList[iNpcH]->m_cSide) {
						for (i = 1; i < DEF_MAXCLIENTS; i++)
							if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_iGuildGUID == m_pNpcList[sAttackerH]->m_iGuildGUID) &&
									  (m_pClientList[i]->m_iCrusadeDuty == 3)) {
								m_pClientList[i]->m_iConstructionPoint += iConstructionPoint;
								if (m_pClientList[i]->m_iConstructionPoint > DEF_MAXCONSTRUCTIONPOINT)
									m_pClientList[i]->m_iConstructionPoint = DEF_MAXCONSTRUCTIONPOINT;
								//testcode
								wsprintf(G_cTxt, "Enemy Npc Killed by Npc! Construct point +%d", iConstructionPoint);
								PutLogList(G_cTxt);
								SendNotifyMsg(0, i, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[i]->m_iConstructionPoint, m_pClientList[i]->m_iWarContribution, 0, 0);
								goto NKH_GOTOPOINT1;
							}
					}
				}
				break;
		}
	}
	// new - heldenian
	if ((m_bIsHeldenianMode == true) && (cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH]->m_cSide != m_pNpcList[iNpcH]->m_cSide)) {
		switch (m_pNpcList[iNpcH]->m_sType) {
			case NpcType::sor: iConstructionPoint = 0;
				iWarContribution = 1000;
				break;
			case NpcType::atk: iConstructionPoint = 0;
				iWarContribution = 1000;
				break;
			case NpcType::elf: iConstructionPoint = 0;
				iWarContribution = 1000;
				break;
			case NpcType::dsk: iConstructionPoint = 0;
				iWarContribution = 1000;
				break;
			case NpcType::hbt: iConstructionPoint = 0;
				iWarContribution = 1000;
				break;
			case NpcType::ct: iConstructionPoint = 0;
				iWarContribution = 1000;
				break;
			case NpcType::bar: iConstructionPoint = 0;
				iWarContribution = 1000;
				break;
			case NpcType::agc: iConstructionPoint = 0;
				iWarContribution = 1000;
				break;
			default: break;
		}
		if (iWarContribution > 0) m_pClientList[sAttackerH]->m_iWarContribution += iWarContribution;
		if (m_pClientList[sAttackerH]->m_iWarContribution > DEF_MAXWARCONTRIBUTION) m_pClientList[sAttackerH]->m_iWarContribution = DEF_MAXWARCONTRIBUTION;
		SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[sAttackerH]->m_iConstructionPoint, m_pClientList[sAttackerH]->m_iWarContribution, 1, 0, 0, 0);
	}
NKH_GOTOPOINT1:
	;
	if (m_pNpcList[iNpcH]->m_cSpecialAbility == 7) {
		m_pNpcList[iNpcH]->m_iMana = 100;
		m_pNpcList[iNpcH]->m_iMagicHitRatio = 100;
		NpcMagicHandler(iNpcH, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY, 30);
	} else if (m_pNpcList[iNpcH]->m_cSpecialAbility == 8) {
		m_pNpcList[iNpcH]->m_iMana = 100;
		m_pNpcList[iNpcH]->m_iMagicHitRatio = 100;
		NpcMagicHandler(iNpcH, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY, 61);
	}
	if ((m_bIsHeldenianMode == true) && (m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_bIsHeldenianMap == true) && (m_cHeldenianModeType == 1)) {
		if ((m_pNpcList[iNpcH]->m_sType == NpcType::ct) || (m_pNpcList[iNpcH]->m_sType == NpcType::agc)) {
			if (m_pNpcList[iNpcH]->m_cSide == 1) {
				m_iHeldenianAresdenLeftTower--;
				wsprintf(G_cTxt, "Aresden Tower Broken, Left TOWER %d", m_iHeldenianAresdenLeftTower);
			} else if (m_pNpcList[iNpcH]->m_cSide == 2) {
				m_iHeldenianElvineLeftTower--;
				wsprintf(G_cTxt, "Elvine Tower Broken, Left TOWER %d", m_iHeldenianElvineLeftTower);
			}
			PutLogList(G_cTxt);
			UpdateHeldenianStatus();
		}
		if ((m_iHeldenianElvineLeftTower == 0) || (m_iHeldenianAresdenLeftTower == 0)) {
			GlobalEndHeldenianMode();
		}
	}
}

int CGame::iGetDangerValue(int iNpcH, short dX, short dY) {
	int ix;
	int iy;
	int iDangerValue;
	short sOwner;
	short sDOType;
	char cOwnerType;
	uint32_t dwRegisterTime;
	if (m_pNpcList[iNpcH] == 0) return false;
	iDangerValue = 0;
	for (ix = dX - 2; ix <= dX + 2; ix++)
		for (iy = dY - 2; iy <= dY + 2; iy++) {
			m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwner, &cOwnerType, ix, iy);
			m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->bGetDynamicObject(ix, iy, &sDOType, &dwRegisterTime);
			if (sDOType == 1) iDangerValue++;
			switch (cOwnerType) {
				case 0:
					break;
				case DEF_OWNERTYPE_PLAYER:
					if (m_pClientList[sOwner] == 0) break;
					if (m_pNpcList[iNpcH]->m_cSide != m_pClientList[sOwner]->m_cSide)
						iDangerValue++;
					else iDangerValue--;
					break;
				case DEF_OWNERTYPE_NPC:
					if (m_pNpcList[sOwner] == 0) break;
					if (m_pNpcList[iNpcH]->m_cSide != m_pNpcList[sOwner]->m_cSide)
						iDangerValue++;
					else iDangerValue--;
					break;
			}
		}
	return iDangerValue;
}

void CGame::NpcBehavior_Flee(int iNpcH) {
	char cDir;
	short sX;
	short sY;
	short dX;
	short dY;
	short sTarget;
	char cTargetType;
	if (m_pNpcList[iNpcH] == 0) return;
	if (m_pNpcList[iNpcH]->m_bIsKilled == true) return;
	m_pNpcList[iNpcH]->m_sBehaviorTurnCount++;
	switch (m_pNpcList[iNpcH]->m_iAttackStrategy) {
		case DEF_ATTACKAI_EXCHANGEATTACK:
		case DEF_ATTACKAI_TWOBYONEATTACK:
			if (m_pNpcList[iNpcH]->m_sBehaviorTurnCount >= 2) {
				m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::attack;
				m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
				return;
			}
			break;
		default:
			if (iDice(1, 2) == 1) NpcRequestAssistance(iNpcH);
			break;
	}
	if (m_pNpcList[iNpcH]->m_sBehaviorTurnCount > 10) {
		m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
		m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::move;
		m_pNpcList[iNpcH]->m_tmp_iError = 0;
		if (m_pNpcList[iNpcH]->m_iHP <= 3) {
			m_pNpcList[iNpcH]->m_iHP += iDice(1, m_pNpcList[iNpcH]->m_iHitDice);
			if (m_pNpcList[iNpcH]->m_iHP <= 0) m_pNpcList[iNpcH]->m_iHP = 1;
		}
		return;
	}
	TargetSearch(iNpcH, &sTarget, &cTargetType);
	if (sTarget != 0) {
		m_pNpcList[iNpcH]->m_iTargetIndex = sTarget;
		m_pNpcList[iNpcH]->m_cTargetType = cTargetType;
	}
	sX = m_pNpcList[iNpcH]->m_sX;
	sY = m_pNpcList[iNpcH]->m_sY;
	switch (m_pNpcList[iNpcH]->m_cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			dX = m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_sX;
			dY = m_pClientList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_sY;
			break;
		case DEF_OWNERTYPE_NPC:
			dX = m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_sX;
			dY = m_pNpcList[m_pNpcList[iNpcH]->m_iTargetIndex]->m_sY;
			break;
	}
	dX = sX - (dX - sX);
	dY = sY - (dY - sY);
	cDir = cGetNextMoveDir(sX, sY, dX, dY, m_pNpcList[iNpcH]->m_cMapIndex, m_pNpcList[iNpcH]->m_cTurn, &m_pNpcList[iNpcH]->m_tmp_iError);
	if (cDir == 0) {
	} else {
		dX = m_pNpcList[iNpcH]->m_sX + _tmp_cTmpDirX[cDir];
		dY = m_pNpcList[iNpcH]->m_sY + _tmp_cTmpDirY[cDir];
		m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->ClearOwner(11, iNpcH, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY);
		m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->SetOwner(iNpcH, DEF_OWNERTYPE_NPC, dX, dY);
		m_pNpcList[iNpcH]->m_sX = dX;
		m_pNpcList[iNpcH]->m_sY = dY;
		m_pNpcList[iNpcH]->m_cDir = cDir;
		SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTMOVE, 0, 0, 0);
	}
}

void CGame::MsgProcess() {
	char * pData, cFrom, cKey;
	uint32_t dwMsgSize, * dwpMsgID;
	uint16_t * wpMsgType;
	int i;
	int iClientH;
	char m_msgBuff[1000];
	uint32_t dwTime;
	dwTime = timeGetTime();
	if ((m_bF5pressed == true) && (m_bF1pressed == true)) {
		PutLogList("(XXX) RELOADING CONFIGS MANUALY...");
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
				bSendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATA, i);
			}
		bInit();
	}
	if ((m_bF1pressed == true) && (m_bF4pressed == true) && (m_bOnExitProcess == false)) {
		m_cShutDownCode = 2;
		m_bOnExitProcess = true;
		m_dwExitProcessTime = timeGetTime();
		PutLogList("(!) GAME SERVER SHUTDOWN PROCESS BEGIN(by Local command)!!!");
		bSendMsgToLS(MSGID_GAMESERVERSHUTDOWNED, 0);
		if (m_iMiddlelandMapIndex > 0) {
			// Crusade
			SaveOccupyFlagData();
			//bSendMsgToLS(MSGID_REQUEST_SAVEARESDENOCCUPYFLAGDATA, 0, 0);
			//bSendMsgToLS(MSGID_REQUEST_SAVEELVINEOCCUPYFLAGDATA, 0, 0);
		}
		return;
	}
	ZeroMemory(m_pMsgBuffer, DEF_MSGBUFFERSIZE + 1);
	pData = (char *) m_pMsgBuffer;
	m_iCurMsgs = 0;
	while (bGetMsgQuene(&cFrom, pData, &dwMsgSize, &iClientH, &cKey) == true) {
		m_iCurMsgs++;
		if (m_iCurMsgs > m_iMaxMsgs) m_iMaxMsgs = m_iCurMsgs;
		switch (cFrom) {
			case DEF_MSGFROM_CLIENT:
				/*m_pClientList[iClientH]->m_cConnectionCheck++;
				if (m_pClientList[iClientH]->m_cConnectionCheck > 3) {
					wsprintf(G_cTxt, "Client Hex Edit: (%s) Player: (%s) - has removed 3203203 (check connection handler).", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
					PutHackLogFileList(G_cTxt);
					DeleteClient(iClientH, true, true);
					break;
				}*/
				dwpMsgID = (uint32_t *) (pData + DEF_INDEX4_MSGID);
				switch (*dwpMsgID) { // 84148741
					case DEF_REQUEST_RESURRECTPLAYER_YES:
						RequestResurrectPlayer(iClientH, true);
						break;
					case DEF_REQUEST_RESURRECTPLAYER_NO:
						RequestResurrectPlayer(iClientH, false);
						break;
						//Shorcut para Criticals by
					case DEF_REQUEST_CRITICALSADD:
						PlayerOrder_GetCrits(iClientH);
						break;
						//Shorcut para Criticals by
					case DEF_REQUEST_SHOWBALLPOINTS:
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_IPACCOUNTINFO, 0, 0, 0, 0);
						;
						break;
					case DEF_REQUEST_ANGEL: // Angels by Snoopy...
						GetAngelHandler(iClientH, pData, dwMsgSize);
						break;
					case MSGID_REQUEST_SELLITEMLIST:
						RequestSellItemListHandler(iClientH, pData);
						break;
					case MSGID_REQUEST_RESTART:
						RequestRestartHandler(iClientH);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTYMEMBERSTATUS, 0, 0, 0, 0);
						break;
					case MSGID_REQUEST_PANNING:
						iRequestPanningMapDataRequest(iClientH, pData);
						break;
					case MSGID_REQUEST_NOTICEMENT:
						RequestNoticementHandler(iClientH, pData);
						break;
					case MSGID_BWM_COMMAND_SHUTUP:
						_BWM_Command_Shutup(pData);
						break;
					case MSGID_BWM_INIT:
						_BWM_Init(iClientH, pData);
						break;
					case MSGID_REQUEST_SETITEMPOS:
						_SetItemPos(iClientH, pData);
						break;
					case MSGID_ADMINUSER:
						RequestAdminUserMode(iClientH, pData);
						break;
					case MSGID_REQUEST_FULLOBJECTDATA:
						RequestFullObjectData(iClientH, pData);
						break;
					case MSGID_REQUEST_RETRIEVEITEM:
						RequestRetrieveItemHandler(iClientH, pData);
						break;
					case MSGID_REQUEST_CIVILRIGHT:
						RequestCivilRightHandler(iClientH, pData);
						break;
					case MSGID_REQUEST_TELEPORT:
						RequestTeleportHandler(iClientH, pData);
						break;
					case MSGID_REQUEST_INITPLAYER:
						RequestInitPlayerHandler(iClientH, pData, cKey);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTYMEMBERSTATUS, 0, 0, 0, 0);
						break;
					case MSGID_REQUEST_INITDATA:
						// Anti Bump
						if (m_pClientList[iClientH]->m_bIsClientConnected == true) {
							if (m_pClientList[iClientH] == 0) break;
							wsprintf(G_cTxt, "(!!!) Client (%s) connection closed!. Sniffer suspect!.", m_pClientList[iClientH]->m_cCharName);
							PutLogList(G_cTxt);
							m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->ClearOwner(2, iClientH, DEF_OWNERTYPE_PLAYER, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
							bRemoveFromDelayEventList(iClientH, DEF_OWNERTYPE_PLAYER, 0);
							bSendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATALOGOUT, iClientH, false);
							if ((dwTime - m_dwGameTime2) > 3000) { // 3 segs
								m_pClientList[iClientH]->m_bIsClientConnected = false;
								m_iTotalClients--;
								delete m_pClientList[iClientH];
								m_pClientList[iClientH] = 0;
							}
							break;
						} else {
							m_pClientList[iClientH]->m_bIsClientConnected = true;
							RequestInitDataHandler(iClientH, pData, cKey);
						}
						break;
					case MSGID_COMMAND_COMMON:
						ClientCommonHandler(iClientH, pData);
						break;
					case MSGID_COMMAND_MOTION:
						ClientMotionHandler(iClientH, pData);
						break;
					case MSGID_COMMAND_CHECKCONNECTION:
						CheckConnectionHandler(iClientH, pData);
						break;
					case MSGID_COMMAND_CHATMSG:
						ChatMsgHandler(iClientH, pData, dwMsgSize);
						break;
					case MSGID_REQUEST_CREATENEWGUILD:
						RequestCreateNewGuildHandler(iClientH, pData, dwMsgSize);
						break;
					case MSGID_REQUEST_DISBANDGUILD:
						RequestDisbandGuildHandler(iClientH, pData, dwMsgSize);
						break;
					case MSGID_REQUEST_FIGHTZONE_RESERVE:
						FightzoneReserveHandler(iClientH, pData, dwMsgSize);
						break;
					case MSGID_LEVELUPSETTINGS:
						LevelUpSettingsHandler(iClientH, pData, dwMsgSize);
						break;
					case MSGID_STATECHANGEPOINT:
						StateChangeHandler(iClientH, pData, dwMsgSize);
						break;
					case MSGID_REQUEST_HELDENIANTELEPORT:
						RequestHeldenianTeleport(iClientH, pData, dwMsgSize);
						break;
					case MSGID_REQUEST_NPCSPEAKTELEPORT:
						RequestNpcSpeakTeleport(iClientH, pData, dwMsgSize);
						break;
					case MSGID_REQUEST_HELDENIAN_SCROLL:
						RequestHeldenianScroll(iClientH, pData, dwMsgSize);
						break;
					case MSGID_REQUEST_CITYHALLTELEPORT:
						if (memcmp(m_pClientList[iClientH]->m_cLocation, "aresden", 7) == 0) {
							RequestTeleportHandler(iClientH, "2   ", "elvine", 205, 63);
						} else if (memcmp(m_pClientList[iClientH]->m_cLocation, "elvine", 6) == 0) {
							RequestTeleportHandler(iClientH, "2   ", "aresden", 49, 49);
						}
						break;
					default:
						wsprintf(m_msgBuff, "Unknown message received! (0x%.8X) Delete Client", *dwpMsgID);
						PutLogList(m_msgBuff);
						DeleteClient(iClientH, true, true); // v1.4
						break;
				}
				break;
			case DEF_MSGFROM_LOGSERVER:
				dwpMsgID = (uint32_t *) (pData + DEF_INDEX4_MSGID);
				wpMsgType = (uint16_t *) (pData + DEF_INDEX2_MSGTYPE);
				switch (*dwpMsgID) {
					case MSGID_REQUEST_CHECKACCOUNTPASSWORD:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_REQUEST_CHECKACCOUNTPASSWORD");
						RequestCheckAccountPasswordHandler(pData, dwMsgSize);
						break;
					case MSGID_REQUEST_FORCEDISCONECTACCOUNT:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_REQUEST_FORCEDISCONECTACCOUNT");
						wpMsgType = (uint16_t *) (pData + DEF_INDEX2_MSGTYPE);
						ForceDisconnectAccount((char *) (pData + DEF_INDEX2_MSGTYPE + 2), *wpMsgType);
						break;
					case MSGID_RESPONSE_SAVEPLAYERDATA_REPLY:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_RESPONSE_SAVEPLAYERDATA_REPLY");
						ResponseSavePlayerDataReplyHandler(pData, dwMsgSize);
						break;
					case MSGID_GUILDNOTIFY:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_GUILDNOTIFY");
						GuildNotifyHandler(pData, dwMsgSize);
						break;
					case MSGID_RESPONSE_DISBANDGUILD:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_RESPONSE_DISBANDGUILD");
						ResponseDisbandGuildHandler(pData, dwMsgSize);
						break;
					case MSGID_RESPONSE_CREATENEWGUILD:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_RESPONSE_CREATENEWGUILD");
						ResponseCreateNewGuildHandler(pData, dwMsgSize);
						break;
					case MSGID_RESPONSE_REGISTERGAMESERVER:
						switch (*wpMsgType) {
							case DEF_MSGTYPE_CONFIRM:
								//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_RESPONSE_REGISTERGAMESERVER -> DEF_MSGTYPE_CONFIRM");
								PutLogList("(!) Game Server registration to Log Server - Success!");
								m_bIsLogSockAvailable = true;
								break;
							case DEF_MSGTYPE_REJECT:
								//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_RESPONSE_REGISTERGAMESERVER -> DEF_MSGTYPE_REJECT");
								PutLogList("(!) Game Server registration to Log Server - Fail!");
								break;
						}
						if (m_bIsBuildItemAvailable == false) {
							PutLogList(" ");
							PutLogList("(!!!) STOPPED! Build-Item configuration error.");
						}
						if (m_bIsItemAvailable == false) {
							PutLogList(" ");
							PutLogList("(!!!) STOPPED! Item configuration error.");
						}
						if (m_bIsNpcAvailable == false) {
							PutLogList(" ");
							PutLogList("(!!!) STOPPED! Npc configuration error.");
						}
						if (m_bIsMagicAvailable == false) {
							PutLogList(" ");
							PutLogList("(!!!) STOPPED! MAGIC configuration error.");
						}
						if (m_bIsSkillAvailable == false) {
							PutLogList(" ");
							PutLogList("(!!!) STOPPED! SKILL configuration error.");
						}
						if (m_bIsQuestAvailable == false) {
							PutLogList(" ");
							PutLogList("(!!!) STOPPED! QUEST configuration error.");
						}
						if (m_bIsPortionAvailable == false) {
							PutLogList(" ");
							PutLogList("(!!!) STOPPED! PORTION configuration error.");
						}
						//wsprintf(G_cTxt, "%d %d %d %d %d %d", (int)m_bIsGameStarted, (int)m_bIsItemAvailable, m_bIsNpcAvailable, , (int)m_bIsLogSockAvailable, (int)m_bIsMagicAvailable, (int)m_bIsSkillAvailable);
						//PutLogList(G_cTxt);
						/*
						if ((m_bIsGameStarted == false) && (m_bIsItemAvailable == true) &&
							(m_bIsNpcAvailable == true) && (m_bIsLogSockAvailable == true) &&
							(m_bIsMagicAvailable == true) &&
							(m_bIsSkillAvailable == true) && (m_bIsPortionAvailable == true) &&
							(m_bIsQuestAvailable == true) ) {
							SendMessage(m_hWnd, WM_USER_STARTGAMESIGNAL, 0, 0);
							m_bIsGameStarted = true;
						}
						 */
						break;
					case MSGID_RESPONSE_PLAYERDATA:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_RESPONSE_PLAYERDATA");
						ResponsePlayerDataHandler(pData, dwMsgSize);
						break;
					case MSGID_BUILDITEMCONFIGURATIONCONTENTS:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_BUILDITEMCONFIGURATIONCONTENTS");
						// Build Item contents
						PutLogList("(!) BUILD-ITEM configuration contents received. Now decoding...");
						m_bIsBuildItemAvailable = _bDecodeBuildItemConfigFileContents((char *) (pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize);
						break;
					case MSGID_ITEMCONFIGURATIONCONTENTS:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_ITEMCONFIGURATIONCONTENTS");
						PutLogList("(!) ITEM configuration contents received. Now decoding...");
						m_bIsItemAvailable = _bDecodeItemConfigFileContents((char *) (pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize);
						break;
					case MSGID_NPCCONFIGURATIONCONTENTS:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_NPCCONFIGURATIONCONTENTS");
						PutLogList("(!) NPC configuration contents received. Now decoding...");
						m_bIsNpcAvailable = _bDecodeNpcConfigFileContents((char *) (pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize);
						break;
					case MSGID_MAGICCONFIGURATIONCONTENTS:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_MAGICCONFIGURATIONCONTENTS");
						PutLogList("(!) MAGIC configuration contents received. Now decoding...");
						m_bIsMagicAvailable = _bDecodeMagicConfigFileContents((char *) (pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize);
						break;
					case MSGID_SKILLCONFIGURATIONCONTENTS:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_SKILLCONFIGURATIONCONTENTS");
						PutLogList("(!) SKILL configuration contents received. Now decoding...");
						m_bIsSkillAvailable = _bDecodeSkillConfigFileContents((char *) (pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize);
						break;
					case MSGID_QUESTCONFIGURATIONCONTENTS:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_QUESTCONFIGURATIONCONTENTS");
						PutLogList("(!) QUEST configuration contents received. Now decoding...");
						m_bIsQuestAvailable = _bDecodeQuestConfigFileContents((char *) (pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize);
						break;
					case MSGID_PORTIONCONFIGURATIONCONTENTS:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_PORTIONCONFIGURATIONCONTENTS");
						PutLogList("(!) PORTION configuration contents received. Now decoding...");
						m_bIsPortionAvailable = _bDecodePortionConfigFileContents((char *) (pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize);
						break;
						// Crusade
						//case MSGID_ARESDENOCCUPYFLAGSAVEFILECONTENTS:
						//PutLogList("(!) Aresden OccupyFlag save file contents received. Now decoding...");
						//_bDecodeOccupyFlagSaveFileContents((char *)(pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize, 1);
						//break;
						// Crusade
						//case MSGID_ELVINEOCCUPYFLAGSAVEFILECONTENTS:
						//PutLogList("(!) Elvine OccupyFlag save file contents received. Now decoding...");
						//_bDecodeOccupyFlagSaveFileContents((char *)(pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize, 2);
						//break;
					case MSGID_DUPITEMIDFILECONTENTS:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_DUPITEMIDFILECONTENTS");
						PutLogList("(!) DupItemID file contents received. Now decoding...");
						_bDecodeDupItemIDFileContents((char *) (pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize);
						break;
					case MSGID_NOTICEMENTFILECONTENTS:
						//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_LOGSERVER -> MSGID_NOTICEMENTFILECONTENTS");
						PutLogList("(!) Noticement file contents received. Now decoding...");
						_bDecodeNoticementFileContents((char *) (pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize);
						break;
						// v2.17 2002-8-7 // 2002-09-06 #1
						/*case MSGID_NPCITEMCONFIGCONTENTS:
							PutLogList("(!) NpcItemConfig file contents received. Now decoding...");
							_bDecodeNpcItemConfigFileContents((char *)(pData + DEF_INDEX2_MSGTYPE + 2), dwMsgSize);
							break;*/
				}
				break;
		}
	}
}

bool CGame::bPutMsgQuene(char cFrom, char * pData, uint32_t dwMsgSize, int iIndex, char cKey) {
	/*
	HANDLE hMutex;
	hMutex = OpenMutex(MUTEX_ALL_ACCESS, false, m_cServerName);
	if (hMutex != 0) return false;
	hMutex = CreateMutex(0, false, m_cServerName);
	 */
	if (m_pMsgQuene[m_iQueneTail] != 0) return false;
	m_pMsgQuene[m_iQueneTail] = new CMsg;
	if (m_pMsgQuene[m_iQueneTail] == 0) return false;
	if (m_pMsgQuene[m_iQueneTail]->bPut(cFrom, pData, dwMsgSize, iIndex, cKey) == false) return false;
	m_iQueneTail++;
	if (m_iQueneTail >= DEF_MSGQUENESIZE) m_iQueneTail = 0;
	//ReleaseMutex(hMutex);
	return true;
}

bool CGame::bGetMsgQuene(char * pFrom, char * pData, uint32_t * pMsgSize, int * pIndex, char * pKey) {
	/*
	HANDLE hMutex;
	hMutex = OpenMutex(MUTEX_ALL_ACCESS, false, m_cServerName);
	if (hMutex != 0) return false;
	hMutex = CreateMutex(0, false, m_cServerName);
	 */
	if (m_pMsgQuene[m_iQueneHead] == 0) return false;
	m_pMsgQuene[m_iQueneHead]->Get(pFrom, pData, pMsgSize, pIndex, pKey);
	delete m_pMsgQuene[m_iQueneHead];
	m_pMsgQuene[m_iQueneHead] = 0;
	m_iQueneHead++;
	if (m_iQueneHead >= DEF_MSGQUENESIZE) m_iQueneHead = 0;
	//ReleaseMutex(hMutex);
	return true;
}

void CGame::ClientCommonHandler(int iClientH, char * pData) {
	uint16_t * wp, wCommand;
	short * sp, sX, sY;
	int * ip, iV1, iV2, iV3, iV4;
	char * cp, cDir, * pString;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	wp = (uint16_t *) (pData + DEF_INDEX2_MSGTYPE);
	wCommand = *wp;
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *) cp;
	sX = *sp;
	cp += 2;
	sp = (short *) cp;
	sY = *sp;
	cp += 2;
	cDir = *cp;
	cp++;
	ip = (int *) cp;
	iV1 = *ip;
	cp += 4;
	ip = (int *) cp;
	iV2 = *ip;
	cp += 4;
	ip = (int *) cp;
	iV3 = *ip;
	cp += 4;
	pString = cp;
	cp += 30;
	ip = (int *) cp;
	iV4 = *ip;
	cp += 4;
	switch (wCommand) {
			// New 15/05/2004
		case DEF_COMMONTYPE_REQ_CREATESLATE:
			ReqCreateSlateHandler(iClientH, pData);
			break;
			// 2.06 - by KLKS
		case DEF_COMMONTYPE_REQ_CHANGEPLAYMODE:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> MSGID_REQUEST_CIVILRIGHT");
			RequestChangePlayMode(iClientH);
			break;
		case DEF_COMMONTYPE_SETGUILDTELEPORTLOC:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_SETGUILDTELEPORTLOC");
			RequestSetGuildTeleportLocHandler(iClientH, iV1, iV2, m_pClientList[iClientH]->m_iGuildGUID, "middleland");
			break;
		case DEF_COMMONTYPE_SETGUILDCONSTRUCTLOC:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_SETGUILDCONSTRUCTLOC");
			RequestSetGuildConstructLocHandler(iClientH, iV1, iV2, m_pClientList[iClientH]->m_iGuildGUID, pString);
			break;
		case DEF_COMMONTYPE_GUILDTELEPORT:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_GUILDTELEPORT");
			RequestGuildTeleportHandler(iClientH);
			break;
		case DEF_COMMONTYPE_SUMMONWARUNIT:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_SUMMONWARUNIT");
			RequestSummonWarUnitHandler(iClientH, sX, sY, iV1, iV2, iV3);
			break;
		case DEF_COMMONTYPE_REQUEST_HELP:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQUEST_HELP");
			RequestHelpHandler(iClientH);
			break;
		case DEF_COMMONTYPE_REQUEST_MAPSTATUS:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQUEST_MAPSTATUS");
			MapStatusHandler(iClientH, iV1, pString);
			break;
		case DEF_COMMONTYPE_REQUEST_SELECTCRUSADEDUTY:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQUEST_SELECTCRUSADEDUTY");
			SelectCrusadeDutyHandler(iClientH, iV1);
			break;
		case DEF_COMMONTYPE_REQUEST_CANCELQUEST:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQUEST_CANCELQUEST");
			CancelQuestHandler(iClientH);
			break;
		case DEF_COMMONTYPE_REQUEST_ACTIVATESPECABLTY:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQUEST_ACTIVATESPECABLTY");
			ActivateSpecialAbilityHandler(iClientH);
			break;
		case DEF_COMMONTYPE_REQUEST_JOINPARTY:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQUEST_JOINPARTY");
			JoinPartyHandler(iClientH, iV1, pString);
			break;
		case DEF_COMMONTYPE_GETMAGICABILITY:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_GETMAGICABILITY");
			GetMagicAbilityHandler(iClientH);
			break;
		case DEF_COMMONTYPE_BUILDITEM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_BUILDITEM");
			BuildItemHandler(iClientH, pData);
			break;
		case DEF_COMMONTYPE_QUESTACCEPTED:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_QUESTACCEPTED");
			QuestAcceptedHandler(iClientH);
			break;
		case DEF_COMMONTYPE_CANCELEXCHANGEITEM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_CANCELEXCHANGEITEM");
			CancelExchangeItem(iClientH);
			break;
		case DEF_COMMONTYPE_CONFIRMEXCHANGEITEM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_CONFIRMEXCHANGEITEM");
			ConfirmExchangeItem(iClientH);
			break;
		case DEF_COMMONTYPE_SETEXCHANGEITEM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_SETEXCHANGEITEM");
			SetExchangeItem(iClientH, iV1, iV2);
			break;
		case DEF_COMMONTYPE_REQ_GETHEROMANTLE:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_GETHEROMANTLE");
			GetHeroMantleHandler(iClientH, (ItemId) iV1, pString);
			break;
		case DEF_COMMONTYPE_REQ_GETTRADEEK: // By Luqah
			GetTradeEKMantleHandler(iClientH, iV1, pString);
			break;
		case DEF_COMMONTYPE_REQ_GETOCCUPYFLAG:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_GETOCCUPYFLAG");
			GetOccupyFlagHandler(iClientH);
			break;
		case DEF_COMMONTYPE_REQ_SETDOWNSKILLINDEX:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_SETDOWNSKILLINDEX");
			SetDownSkillIndexHandler(iClientH, iV1);
			break;
		case DEF_COMMONTYPE_TALKTONPC:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_TALKTONPC");
			// works for client, but for npc it returns middleland
			// if ((m_pMapList[m_pNpcList[iV1]->m_cMapIndex]->m_cName) != (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName)) break;
			NpcTalkHandler(iClientH, iV1);
			break;
		case DEF_COMMONTYPE_REQ_CREATEPORTION:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_CREATEPORTION");
			ReqCreatePortionHandler(iClientH, pData);
			break;
		case DEF_COMMONTYPE_REQ_GETFISHTHISTIME:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_GETFISHTHISTIME");
			ReqGetFishThisTimeHandler(iClientH);
			break;
		case DEF_COMMONTYPE_REQ_REPAIRITEMCONFIRM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_REPAIRITEMCONFIRM");
			ReqRepairItemCofirmHandler(iClientH, iV1, pString);
			break;
		case DEF_COMMONTYPE_REQ_REPAIRITEM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_REPAIRITEM");
			ReqRepairItemHandler(iClientH, iV1, iV2, pString);
			break;
		case DEF_COMMONTYPE_REQ_SELLITEMCONFIRM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_SELLITEMCONFIRM");
			ReqSellItemConfirmHandler(iClientH, iV1, iV2, pString);
			break;
		case DEF_COMMONTYPE_REQ_SELLITEM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_SELLITEM");
			ReqSellItemHandler(iClientH, iV1, iV2, iV3, pString);
			break;
		case DEF_COMMONTYPE_REQ_USESKILL:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_USESKILL");
			UseSkillHandler(iClientH, iV1, iV2, iV3);
			break;
		case DEF_COMMONTYPE_REQ_USEITEM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_USEITEM");
			UseItemHandler(iClientH, iV1, iV2, iV3, iV4);
			break;
		case DEF_COMMONTYPE_REQ_GETREWARDMONEY:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_GETREWARDMONEY");
			GetRewardMoneyHandler(iClientH);
			break;
		case DEF_COMMONTYPE_ITEMDROP:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_ITEMDROP");
			DropItemHandler(iClientH, iV1, iV2, pString, true);
			break;
		case DEF_COMMONTYPE_EQUIPITEM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_EQUIPITEM");
			bEquipItemHandler(iClientH, iV1);
			break;
		case DEF_COMMONTYPE_REQ_PURCHASEITEM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_PURCHASEITEM");
			RequestPurchaseItemHandler(iClientH, pString, iV1);
			break;
		case DEF_COMMONTYPE_REQ_STUDYMAGIC:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_STUDYMAGIC");
			RequestStudyMagicHandler(iClientH, pString);
			break;
		case DEF_COMMONTYPE_REQ_TRAINSKILL:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_TRAINSKILL");
			//RequestTrainSkillHandler(iClientH, pString);
			break;
		case DEF_COMMONTYPE_GIVEITEMTOCHAR:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_GIVEITEMTOCHAR");
			GiveItemHandler(iClientH, cDir, iV1, iV2, iV3, iV4, pString);
			break;
		case DEF_COMMONTYPE_EXCHANGEITEMTOCHAR:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_EXCHANGEITEMTOCHAR");
			ExchangeItemHandler(iClientH, cDir, iV1, iV2, iV3, iV4, pString);
			break;
		case DEF_COMMONTYPE_JOINGUILDAPPROVE:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_JOINGUILDAPPROVE");
			JoinGuildApproveHandler(iClientH, pString);
			break;
		case DEF_COMMONTYPE_JOINGUILDREJECT:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_JOINGUILDREJECT");
			JoinGuildRejectHandler(iClientH, pString);
			break;
		case DEF_COMMONTYPE_DISMISSGUILDAPPROVE:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_DISMISSGUILDAPPROVE");
			DismissGuildApproveHandler(iClientH, pString);
			break;
		case DEF_COMMONTYPE_DISMISSGUILDREJECT:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_DISMISSGUILDREJECT");
			DismissGuildRejectHandler(iClientH, pString);
			break;
		case DEF_COMMONTYPE_RELEASEITEM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_RELEASEITEM");
			ReleaseItemHandler(iClientH, iV1, true);
			break;
		case DEF_COMMONTYPE_TOGGLECOMBATMODE:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_TOGGLECOMBATMODE");
			ToggleCombatModeHandler(iClientH);
			break;
		case DEF_COMMONTYPE_MAGIC:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_MAGIC");
			PlayerMagicHandler(iClientH, iV1, iV2, (iV3 - 100));
			break;
		case DEF_COMMONTYPE_TOGGLESAFEATTACKMODE:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_TOGGLESAFEATTACKMODE");
			ToggleSafeAttackModeHandler(iClientH);
			break;
		case DEF_COMMONTYPE_REQ_GETOCCUPYFIGHTZONETICKET:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQ_GETOCCUPYFIGHTZONETICKET");
			GetFightzoneTicketHandler(iClientH);
			break;
			// Upgrade Item
		case DEF_COMMONTYPE_UPGRADEITEM:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_UPGRADEITEM");
			RequestItemUpgradeHandler(iClientH, iV1);
			break;
		case DEF_COMMONTYPE_REQGUILDNAME:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQGUILDNAME");
			RequestGuildNameHandler(iClientH, iV1, iV2);
			break;
		case DEF_COMMONTYPE_REQRANGO: // MORLA 2.2 - Llama al rango del pj
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQGUILDNAME");
			RequestRango(iClientH, iV1);
			break;
		case DEF_COMMONTYPE_REQUEST_ACCEPTJOINPARTY:
			//DbgWnd->AddEventMsg("RECV -> DEF_MSGFROM_CLIENT -> MSGID_COMMAND_COMMON -> DEF_COMMONTYPE_REQUEST_ACCEPTJOINPARTY");
			RequestAcceptJoinPartyHandler(iClientH, iV1);
			break;
			// Crafting
		case DEF_COMMONTYPE_CRAFTITEM:
			ReqCreateCraftingHandler(iClientH, pData);
			break;
		default:
			wsprintf(G_cTxt, "Unknown message received! (0x%.8X)", wCommand);
			PutLogList(G_cTxt);
			break;
	}
}
// New 07/05/2004

void CGame::DropItemHandler(int iClientH, short sItemIndex, int iAmount, char * pItemName, bool bByPlayer) {
	CItem * pItem;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsOnServerChange == true) return;
	if ((m_bAdminSecurity == true) && (m_pClientList[iClientH]->m_iAdminUserLevel > 0)) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((sItemIndex < 0) || (sItemIndex >= DEF_MAXITEMS)) return;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) return;
	if ((iAmount != -1) && (iAmount < 0)) return;
	if (((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::consume) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::arrow)) &&
			  (iAmount == -1))
		iAmount = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwCount;
	if (memcmp(m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cName, pItemName, 20) != 0) return;
	if (((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::consume) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::arrow)) &&
			  (((int) m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwCount - iAmount) > 0)) {
		pItem = new CItem;
		if (_bInitItemAttr(pItem, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cName) == false) {
			delete pItem;
			return;
		} else {
			if (iAmount <= 0) {
				delete pItem;
				return;
			}
			pItem->m_dwCount = (uint32_t) iAmount;
		}
		if ((uint32_t) iAmount > m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwCount) {
			delete pItem;
			return;
		}
		m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwCount -= iAmount;
		// v1.41 !!!
		SetItemCount(iClientH, sItemIndex, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwCount);
		m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
				  m_pClientList[iClientH]->m_sY, pItem);
		if (bByPlayer == true)
			_bItemLog(DEF_ITEMLOG_DROP, iClientH, (int) - 1, pItem);
		else
			_bItemLog(DEF_ITEMLOG_DROP, iClientH, (int) - 1, pItem, true);
		SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
				  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
				  pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); // v1.4 color
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_DROPITEMFIN_COUNTCHANGED, sItemIndex, iAmount, 0, 0);
	} else {
		ReleaseItemHandler(iClientH, sItemIndex, true);
		if (m_pClientList[iClientH]->m_bIsItemEquipped[sItemIndex] == true)
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos, sItemIndex, 0, 0);
		// v1.432
		if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType == ItemEffectType::alteritemdrop) &&
				  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wCurLifeSpan == 0)) {
			delete m_pClientList[iClientH]->m_pItemList[sItemIndex];
			m_pClientList[iClientH]->m_pItemList[sItemIndex] = 0;
		} else {
			m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
					  m_pClientList[iClientH]->m_sY,
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]);
			if (bByPlayer == true)
				_bItemLog(DEF_ITEMLOG_DROP, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[sItemIndex]);
			else
				_bItemLog(DEF_ITEMLOG_DROP, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[sItemIndex], true);
			SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
					  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSprite,
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpriteFrame,
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor); //v1.4 color
		}
		m_pClientList[iClientH]->m_pItemList[sItemIndex] = 0;
		m_pClientList[iClientH]->m_bIsItemEquipped[sItemIndex] = false;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_DROPITEMFIN_ERASEITEM, sItemIndex, iAmount, 0, 0);
		m_pClientList[iClientH]->m_cArrowIndex = _iGetArrowItemIndex(iClientH);
	}
	iCalcTotalWeight(iClientH);
}
//  int CGame::iClientMotion_GetItem_Handler(int iClientH, short sX, short sY, char cDir)
//  description			:: check if player is dropping item or picking up item
//  last updated		:: October 29, 2004; 7:12 PM; Hypnotoad
//	return value		:: int

int CGame::iClientMotion_GetItem_Handler(int iClientH, short sX, short sY, char cDir) {
	uint32_t * dwp;
	uint16_t * wp;
	char * cp;
	short * sp, sRemainItemSprite, sRemainItemSpriteFrame;
	char cRemainItemColor;
	char cData[100];
	int iRet;
	int iEraseReq;
	CItem * pItem;
	if (m_pClientList[iClientH] == 0) return 0;
	if ((cDir <= 0) || (cDir > 8)) return 0;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return 0;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return 0;
	if ((sX != m_pClientList[iClientH]->m_sX) || (sY != m_pClientList[iClientH]->m_sY)) return 2;
	int iStX;
	int iStY;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex] != 0) {
		iStX = m_pClientList[iClientH]->m_sX / 20;
		iStY = m_pClientList[iClientH]->m_sY / 20;
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iPlayerActivity++;
		switch (m_pClientList[iClientH]->m_cSide) {
			case 0: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iNeutralActivity++;
				break;
			case 1: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iAresdenActivity++;
				break;
			case 2: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iElvineActivity++;
				break;
		}
	}
	ClearSkillUsingStatus(iClientH);
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->ClearOwner(0, iClientH, DEF_OWNERTYPE_PLAYER, sX, sY);
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetOwner(iClientH, DEF_OWNERTYPE_PLAYER, sX, sY);
	pItem = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->pGetItem(sX, sY, &sRemainItemSprite, &sRemainItemSpriteFrame, &cRemainItemColor);
	if (pItem != 0) {
		if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
			_bItemLog(DEF_ITEMLOG_GET, iClientH, 0, pItem);
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_ITEMOBTAINED;
			cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
			*cp = 1;
			cp++;
			memcpy(cp, pItem->m_cName, 20);
			cp += 20;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwCount;
			cp += 4;
			*cp = (char) pItem->m_cItemType;
			cp++;
			*cp = (char) pItem->m_cEquipPos;
			cp++;
			*cp = (char) 0;
			cp++;
			sp = (short *) cp;
			*sp = pItem->m_sLevelLimit;
			cp += 2;
			*cp = pItem->m_cGenderLimit;
			cp++;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wCurLifeSpan;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wWeight;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSprite;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSpriteFrame;
			cp += 2;
			*cp = pItem->m_cItemColor;
			cp++;
			*cp = (char) pItem->m_sItemSpecEffectValue2;
			cp++;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwAttribute;
			cp += 4;
			if (iEraseReq == 1) delete pItem;
			SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_SETITEM, m_pClientList[iClientH]->m_cMapIndex,
					  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
					  sRemainItemSprite, sRemainItemSpriteFrame, cRemainItemColor);
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					return 0;
			}
		} else {
			m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bSetItem(sX, sY, pItem);
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					return 0;
			}
		}
	}
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_RESPONSE_MOTION;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = DEF_OBJECTMOTION_CONFIRM;
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			return 0;
	}
	return 1;
}

bool CGame::_bAddClientItemList(int iClientH, CItem * pItem, int * pDelReq) {
	int i;
	if (m_pClientList[iClientH] == 0) return false;
	if (pItem == 0) return false;
	if ((pItem->m_cItemType == ItemType::consume) || (pItem->m_cItemType == ItemType::arrow)) {
		if ((m_pClientList[iClientH]->m_iCurWeightLoad + iGetItemWeight(pItem, pItem->m_dwCount)) > _iCalcMaxLoad(iClientH))
			return false;
	} else {
		if ((m_pClientList[iClientH]->m_iCurWeightLoad + iGetItemWeight(pItem, 1)) > _iCalcMaxLoad(iClientH))
			return false;
	}
	if ((pItem->m_cItemType == ItemType::consume) || (pItem->m_cItemType == ItemType::arrow)) {
		for (i = 0; i < DEF_MAXITEMS; i++)
			if ((m_pClientList[iClientH]->m_pItemList[i] != 0) &&
					  (memcmp(m_pClientList[iClientH]->m_pItemList[i]->m_cName, pItem->m_cName, 20) == 0)) {
				m_pClientList[iClientH]->m_pItemList[i]->m_dwCount += pItem->m_dwCount;
				//delete pItem;
				*pDelReq = 1;
				iCalcTotalWeight(iClientH);
				return true;
			}
	}
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] == 0) {
			m_pClientList[iClientH]->m_pItemList[i] = pItem;
			m_pClientList[iClientH]->m_ItemPosList[i].x = 40;
			m_pClientList[iClientH]->m_ItemPosList[i].y = 30;
			*pDelReq = 0;
			if (pItem->m_cItemType == ItemType::arrow)
				m_pClientList[iClientH]->m_cArrowIndex = _iGetArrowItemIndex(iClientH);
			iCalcTotalWeight(iClientH);
			return true;
		}
	return false;
}

bool CGame::bEquipItemHandler(int iClientH, short sItemIndex, bool bNotify) {
	ItemEquipPos cEquipPos;
	char cHeroArmorType;
	short sSpeed;
	short sTemp;
	int iTemp;
	if (m_pClientList[iClientH] == 0) return false;
	if ((sItemIndex < 0) || (sItemIndex >= DEF_MAXITEMS)) return false;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) return false;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType != ItemType::equip) return false;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wCurLifeSpan == 0) return false;
	if (((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x00000001) == 0) &&
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sLevelLimit > m_pClientList[iClientH]->m_iLevel)) return false;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cGenderLimit != 0) {
		switch (m_pClientList[iClientH]->m_sType) {
			case 1:
			case 2:
			case 3:
				if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cGenderLimit != 1) return false;
				break;
			case 4:
			case 5:
			case 6:
				if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cGenderLimit != 2) return false;
				break;
		}
	}
	if (iGetItemWeight(m_pClientList[iClientH]->m_pItemList[sItemIndex], 1) > (m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iAngelicStr)*100) return false;
	cEquipPos = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos;
	if ((cEquipPos == ItemEquipPos::body) || (cEquipPos == ItemEquipPos::leggings) ||
			  (cEquipPos == ItemEquipPos::arms) || (cEquipPos == ItemEquipPos::head)) {
		switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue4) {
			case 10:
				if ((m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iAngelicStr) < m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue5) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos, sItemIndex, 0, 0);
					ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ], true);
					return false;
				}
				break;
			case 11: // Dex
				if ((m_pClientList[iClientH]->m_iDex + m_pClientList[iClientH]->m_iAngelicDex) < m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue5) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos, sItemIndex, 0, 0);
					ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ], true);
					return false;
				}
				break;
			case 12: // Vit
				if (m_pClientList[iClientH]->m_iVit < m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue5) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos, sItemIndex, 0, 0);
					ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ], true);
					return false;
				}
				break;
			case 13: // Int
				if ((m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iAngelicInt) < m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue5) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos, sItemIndex, 0, 0);
					ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ], true);
					return false;
				}
				break;
			case 14: // Mag
				if ((m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iAngelicMag) < m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue5) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos, sItemIndex, 0, 0);
					ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ], true);
					return false;
				}
				break;
			case 15: // Chr
				if (m_pClientList[iClientH]->m_iCharisma < m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue5) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos, sItemIndex, 0, 0);
					ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ], true);
					return false;
				}
				break;
		}
	}
	if (cEquipPos == ItemEquipPos::twohand) {
		// Stormbringer
		if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::storm_bringer) {
			if ((m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iInt) < 65) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iClientH]->m_iSpecialAbilityEquipPos, sItemIndex, 0, 0);
				ReleaseItemHandler(iClientH, sItemIndex, true);
				return false;
			}
		}
	}
	if (cEquipPos == ItemEquipPos::rhand) {
		// Resurrection wand(MS.10) or Resurrection wand(MS.20)
		if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::resur_wand_ms20) || (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::resur_wand_ms10)) {
			if ((m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iAngelicInt) > 99 && (m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iAngelicMag) > 99 && m_pClientList[iClientH]->m_iSpecialAbilityTime < 1) {
				m_pClientList[iClientH]->m_cMagicMastery[94] = true;
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_SUCCESS, 0, 0, 0, 0);
			}
		}
	}
	if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType == ItemEffectType::attack_specablty) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType == ItemEffectType::defense_specablty)) {
		if ((m_pClientList[iClientH]->m_iSpecialAbilityType != 0)) {
			if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos != m_pClientList[iClientH]->m_iSpecialAbilityEquipPos) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iClientH]->m_iSpecialAbilityEquipPos, m_pClientList[iClientH]->m_sItemEquipmentStatus[ m_pClientList[iClientH]->m_iSpecialAbilityEquipPos ], 0, 0);
				ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ m_pClientList[iClientH]->m_iSpecialAbilityEquipPos ], true);
			}
		}
	}
	if (cEquipPos == ItemEquipPos::none) return false;
	if (cEquipPos == ItemEquipPos::twohand) {
		if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ] != -1)
			ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ], false);
		else {
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ] != -1)
				ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ], false);
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::lhand ] != -1)
				ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::lhand ], false);
		}
	} else {
		if ((cEquipPos == ItemEquipPos::lhand) || (cEquipPos == ItemEquipPos::rhand)) {
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ] != -1)
				ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ], false);
		}
		if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ] != -1)
			ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ], false);
	}
	if (cEquipPos == ItemEquipPos::fullbody) {
		if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ] != -1) {
			ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ], false);
		}
		if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::head ] != -1) {
			ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::head ], false);
		}
		if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::body ] != -1) {
			ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::body ], false);
		}
		if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::arms ] != -1) {
			ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::arms ], false);
		}
		if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::leggings ] != -1) {
			ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::leggings ], false);
		}
		if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::pants ] != -1) {
			ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::pants ], false);
		}
		if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::back ] != -1) {
			ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::back ], false);
		}
	} else {
		if (cEquipPos == ItemEquipPos::head || cEquipPos == ItemEquipPos::body || cEquipPos == ItemEquipPos::arms ||
				  cEquipPos == ItemEquipPos::leggings || cEquipPos == ItemEquipPos::pants || cEquipPos == ItemEquipPos::back) {
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::fullbody ] != -1) {
				ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::fullbody ], false);
			}
		}
		if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ] != -1)
			ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_sItemEquipmentStatus[ cEquipPos ], false);
	}
	m_pClientList[iClientH]->m_sItemEquipmentStatus[cEquipPos] = sItemIndex;
	m_pClientList[iClientH]->m_bIsItemEquipped[sItemIndex] = true;
	switch (cEquipPos) {
		case ItemEquipPos::head:
			sTemp = m_pClientList[iClientH]->m_sAppr3;
			sTemp = sTemp & 0xFF0F;
			sTemp = sTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue) << 4);
			m_pClientList[iClientH]->m_sAppr3 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFFFFFF0;
			iTemp = iTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor));
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::pants:
			sTemp = m_pClientList[iClientH]->m_sAppr3;
			sTemp = sTemp & 0xF0FF;
			sTemp = sTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue) << 8);
			m_pClientList[iClientH]->m_sAppr3 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFFFF0FF;
			iTemp = iTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor) << 8);
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::leggings:
			sTemp = m_pClientList[iClientH]->m_sAppr4;
			sTemp = sTemp & 0x0FFF;
			sTemp = sTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue) << 12);
			m_pClientList[iClientH]->m_sAppr4 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFFFFF0F;
			iTemp = iTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor) << 4);
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::body:
			sTemp = m_pClientList[iClientH]->m_sAppr3;
			sTemp = sTemp & 0x0FFF;
			if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue < 100) {
				sTemp = sTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue) << 12);
				m_pClientList[iClientH]->m_sAppr3 = sTemp;
			} else {
				sTemp = sTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue - 100) << 12);
				m_pClientList[iClientH]->m_sAppr3 = sTemp;
				sTemp = m_pClientList[iClientH]->m_sAppr4;
				sTemp = sTemp | 0x080;
				m_pClientList[iClientH]->m_sAppr4 = sTemp;
			}
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFF0FFFFF;
			iTemp = iTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor) << 20);
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::arms:
			sTemp = m_pClientList[iClientH]->m_sAppr3;
			sTemp = sTemp & 0xFFF0;
			sTemp = sTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue));
			m_pClientList[iClientH]->m_sAppr3 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFFFFFFF;
			iTemp = iTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor) << 12);
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::lhand:
			sTemp = m_pClientList[iClientH]->m_sAppr2;
			sTemp = sTemp & 0xFFF0;
			sTemp = sTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue));
			m_pClientList[iClientH]->m_sAppr2 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xF0FFFFFF;
			iTemp = iTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor) << 24);
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::rhand:
			sTemp = m_pClientList[iClientH]->m_sAppr2;
			sTemp = sTemp & 0xF00F;
			sTemp = sTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue) << 4);
			m_pClientList[iClientH]->m_sAppr2 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFFFFFF;
			iTemp = iTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor) << 28);
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			iTemp = m_pClientList[iClientH]->m_iStatus;
			iTemp = iTemp & 0xFFFFFFF0;
			sSpeed = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cSpeed);
			sSpeed -= ((m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iAngelicStr) / 13);
			if (sSpeed < 0) sSpeed = 0;
			iTemp = iTemp | (int) sSpeed;
			m_pClientList[iClientH]->m_iStatus = iTemp;
			m_pClientList[iClientH]->m_iComboAttackCount = 0;
			break;
		case ItemEquipPos::twohand:
			sTemp = m_pClientList[iClientH]->m_sAppr2;
			sTemp = sTemp & 0xF00F;
			sTemp = sTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue) << 4);
			m_pClientList[iClientH]->m_sAppr2 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFFFFFF;
			iTemp = iTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor) << 28);
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			iTemp = m_pClientList[iClientH]->m_iStatus;
			iTemp = iTemp & 0xFFFFFFF0;
			sSpeed = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cSpeed);
			sSpeed -= ((m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iAngelicStr) / 13);
			if (sSpeed < 0) sSpeed = 0;
			iTemp = iTemp | (int) sSpeed;
			m_pClientList[iClientH]->m_iStatus = iTemp;
			m_pClientList[iClientH]->m_iComboAttackCount = 0;
			break;
		case ItemEquipPos::back:
			sTemp = m_pClientList[iClientH]->m_sAppr4;
			sTemp = sTemp & 0xF0FF;
			sTemp = sTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue) << 8);
			m_pClientList[iClientH]->m_sAppr4 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFF0FFFF;
			iTemp = iTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor) << 16);
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::fullbody:
			sTemp = m_pClientList[iClientH]->m_sAppr3;
			sTemp = sTemp & 0x0FFF;
			sTemp = sTemp | ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cApprValue) << 12);
			m_pClientList[iClientH]->m_sAppr3 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFF0FFFF;
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		default: break;
	}
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType == ItemEffectType::attack_specablty) {
		m_pClientList[iClientH]->m_sAppr4 = m_pClientList[iClientH]->m_sAppr4 & 0xFFF3;
		switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpecialEffect) {
			case 0: break;
			case 1:
				m_pClientList[iClientH]->m_sAppr4 = m_pClientList[iClientH]->m_sAppr4 | 0x0004;
				break;
			case 2:
				m_pClientList[iClientH]->m_sAppr4 = m_pClientList[iClientH]->m_sAppr4 | 0x000C;
				break;
			case 3:
				m_pClientList[iClientH]->m_sAppr4 = m_pClientList[iClientH]->m_sAppr4 | 0x0008;
				break;
		}
	}
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType == ItemEffectType::defense_specablty) {
		m_pClientList[iClientH]->m_sAppr4 = m_pClientList[iClientH]->m_sAppr4 & 0xFFFC;
		switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpecialEffect) {
			case 0:
				break;
			case 50:
			case 51:
			case 52:
				m_pClientList[iClientH]->m_sAppr4 = m_pClientList[iClientH]->m_sAppr4 | 0x0002;
				break;
			default:
				if (m_pClientList[iClientH]->m_iAdminUserLevel > 0)
					m_pClientList[iClientH]->m_sAppr4 = m_pClientList[iClientH]->m_sAppr4 | 0x0001;
				// m_sAppr4
				// 0x0001 GM
				// 0x0002 Green
				// 0x0003 ice element
				// 0x0004 sparkle
				// 0x0005 sparkle green gm
				// 0x0006 sparkle green
				break;
		}
	}
	cHeroArmorType = _cCheckHeroItemEquipped(iClientH);
	if (cHeroArmorType != 0) m_pClientList[iClientH]->m_cHeroArmourBonus = cHeroArmorType;
	SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
	CalcTotalItemEffect(iClientH, sItemIndex, bNotify);
	return true;
}

void CGame::SendEventToNearClient_TypeB(uint32_t dwMsgID, uint16_t wMsgType, char cMapIndex, short sX, short sY, short sV1, short sV2, short sV3, short sV4) {
	int i;
	int iShortCutIndex;
	char * cp, cData[100];
	uint32_t * dwp;
	uint16_t * wp;
	short * sp;
	bool bFlag;
	std::memset(cData, 0, sizeof(cData));
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = dwMsgID;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = wMsgType;
	cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *) cp;
	*sp = sX;
	cp += 2;
	sp = (short *) cp;
	*sp = sY;
	cp += 2;
	sp = (short *) cp;
	*sp = sV1;
	cp += 2;
	sp = (short *) cp;
	*sp = sV2;
	cp += 2;
	sp = (short *) cp;
	*sp = sV3;
	cp += 2;
	sp = (short *) cp;
	*sp = sV4;
	cp += 2;
	//for (i = 1; i < DEF_MAXCLIENTS; i++)
	bFlag = true;
	iShortCutIndex = 0;
	while (bFlag == true) {
		i = m_iClientShortCut[iShortCutIndex];
		iShortCutIndex++;
		if (i == 0) bFlag = false;
		if ((bFlag == true) && (m_pClientList[i] != 0)) {
			if ((m_pClientList[i]->m_cMapIndex == cMapIndex) &&
					  (m_pClientList[i]->m_sX >= sX - 10) &&
					  (m_pClientList[i]->m_sX <= sX + 10) &&
					  (m_pClientList[i]->m_sY >= sY - 8) &&
					  (m_pClientList[i]->m_sY <= sY + 8)) {
				m_pClientList[i]->m_pXSock->iSendMsg(cData, 18);
			}
		}
	}
}
//  int CGame::iClientMotion_Stop_Handler(int iClientH, short sX, short sY, char cDir)
//  description			:: checks if player is stopped
//  last updated		:: October 29, 2004; 6:46 PM; Hypnotoad
//	return value		:: int

int CGame::iClientMotion_Stop_Handler(int iClientH, short sX, short sY, char cDir) {
	char cData[100];
	uint32_t * dwp;
	uint16_t * wp;
	int iRet;
	short sOwnerH;
	char cOwnerType;
	if (m_pClientList[iClientH] == 0) return 0;
	if ((cDir <= 0) || (cDir > 8)) return 0;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return 0;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return 0;
	if ((sX != m_pClientList[iClientH]->m_sX) || (sY != m_pClientList[iClientH]->m_sY)) return 2;
	if (m_pClientList[iClientH]->m_bSkillUsingStatus[19] == true) {
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, sX, sY);
		if (sOwnerH != 0) {
			DeleteClient(iClientH, true, true);
			return 0;
		}
	}
	ClearSkillUsingStatus(iClientH);
	int iStX;
	int iStY;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex] != 0) {
		iStX = m_pClientList[iClientH]->m_sX / 20;
		iStY = m_pClientList[iClientH]->m_sY / 20;
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iPlayerActivity++;
		switch (m_pClientList[iClientH]->m_cSide) {
			case 0: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iNeutralActivity++;
				break;
			case 1: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iAresdenActivity++;
				break;
			case 2: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iElvineActivity++;
				break;
		}
	}
	m_pClientList[iClientH]->m_cDir = cDir;
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->ClearOwner(0, iClientH, DEF_OWNERTYPE_PLAYER, sX, sY);
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetOwner(iClientH, DEF_OWNERTYPE_PLAYER, sX, sY);
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_RESPONSE_MOTION;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = DEF_OBJECTMOTION_CONFIRM;
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			return 0;
	}
	return 1;
}

void CGame::ResponseCreateNewGuildHandler(char * pData, uint32_t /*dwMsgSize*/) {
	int i;
	uint16_t * wp, wResult;
	uint32_t * dwp;
	char * cp, cCharName[11], cData[100], cTxt[120];
	int iRet;
	std::memset(cCharName, 0, sizeof(cCharName));
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cCharName, cp, 10);
	cp += 10;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cCharName, 10) == 0) &&
				  (m_pClientList[i]->m_iLevel >= 20) && (m_pClientList[i]->m_iCharisma >= 20)) {
			wp = (uint16_t *) (pData + DEF_INDEX2_MSGTYPE);
			switch (*wp) {
				case DEF_LOGRESMSGTYPE_CONFIRM:
					wResult = DEF_MSGTYPE_CONFIRM;
					m_pClientList[i]->m_iGuildRank = 0;
					wsprintf(cTxt, "(!) New guild(%s) creation success! : character(%s)", m_pClientList[i]->m_cGuildName, m_pClientList[i]->m_cCharName);
					PutLogList(cTxt);
					break;
				case DEF_LOGRESMSGTYPE_REJECT:
					wResult = DEF_MSGTYPE_REJECT;
					std::memset(m_pClientList[i]->m_cGuildName, 0, sizeof(m_pClientList[i]->m_cGuildName));
					memcpy(m_pClientList[i]->m_cGuildName, "NONE", 4);
					m_pClientList[i]->m_iGuildRank = -1;
					m_pClientList[i]->m_iGuildGUID = -1;
					wsprintf(cTxt, "(!) New guild(%s) creation Fail! : character(%s)", m_pClientList[i]->m_cGuildName, m_pClientList[i]->m_cCharName);
					PutLogList(cTxt);
					break;
			}
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_RESPONSE_CREATENEWGUILD;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = wResult;
			iRet = m_pClientList[i]->m_pXSock->iSendMsg(cData, 6);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(i, true, true);
					return;
			}
			return;
		}
	wsprintf(cTxt, "(!)Non-existing player data received from Log server(2): CharName(%s)", cCharName);
	PutLogList(cTxt);
}

void CGame::RequestCreateNewGuildHandler(int iClientH, char * pData, uint32_t /*dwMsgSize*/) {
	char * cp, cGuildName[21], cTxt[120], cData[100];
	uint32_t * dwp;
	uint16_t * wp;
	int iRet;
	SYSTEMTIME SysTime;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_bIsCrusadeMode == true) return;
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	cp += 10;
	cp += 10;
	cp += 10;
	std::memset(cGuildName, 0, sizeof(cGuildName));
	memcpy(cGuildName, cp, 20);
	cp += 20;
	if (m_pClientList[iClientH]->m_iGuildRank != -1) {
		wsprintf(cTxt, "(!)Cannot create guild! Already guild member.: CharName(%s)", m_pClientList[iClientH]->m_cCharName);
		PutLogList(cTxt);
	} else {
		if ((m_pClientList[iClientH]->m_iLevel < 20) || (m_pClientList[iClientH]->m_iCharisma < 20) ||
				  (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) ||
				  (memcmp(m_pClientList[iClientH]->m_cLocation, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, 10) != 0)) { // v1.4
			std::memset(cData, 0, sizeof(cData));
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_RESPONSE_CREATENEWGUILD;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_REJECT;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					return;
			}
		} else {
			std::memset(m_pClientList[iClientH]->m_cGuildName, 0, sizeof(m_pClientList[iClientH]->m_cGuildName));
			strcpy(m_pClientList[iClientH]->m_cGuildName, cGuildName);
			std::memset(m_pClientList[iClientH]->m_cLocation, 0, sizeof(m_pClientList[iClientH]->m_cLocation));
			strcpy(m_pClientList[iClientH]->m_cLocation, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName);
			GetLocalTime(&SysTime);
			m_pClientList[iClientH]->m_iGuildGUID = (int) (SysTime.wYear + SysTime.wMonth + SysTime.wDay + SysTime.wHour + SysTime.wMinute + timeGetTime());
			bSendMsgToLS(MSGID_REQUEST_CREATENEWGUILD, iClientH);
		}
	}
}

void CGame::RequestDisbandGuildHandler(int iClientH, char * pData, uint32_t /*dwMsgSize*/) {
	char * cp, cGuildName[21], cTxt[120];
	if (m_bIsCrusadeMode == true) return;
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	std::memset(cGuildName, 0, sizeof(cGuildName));
	cp += 10;
	cp += 10;
	cp += 10;
	memcpy(cGuildName, cp, 20);
	cp += 20;
	if ((m_pClientList[iClientH]->m_iGuildRank != 0) || (memcmp(m_pClientList[iClientH]->m_cGuildName, cGuildName, 20) != 0)) {
		wsprintf(cTxt, "(!)Cannot Disband guild! Not guildmaster.: CharName(%s)", m_pClientList[iClientH]->m_cCharName);
		PutLogList(cTxt);
	} else {
		bSendMsgToLS(MSGID_REQUEST_DISBANDGUILD, iClientH);
	}
}

void CGame::ResponseDisbandGuildHandler(char * pData, uint32_t /*dwMsgSize*/) {
	int i;
	uint16_t * wp, wResult;
	uint32_t * dwp;
	char * cp, cCharName[11], cData[100], cTxt[120];
	int iRet;
	std::memset(cCharName, 0, sizeof(cCharName));
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cCharName, cp, 10);
	cp += 10;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cCharName, 10) == 0)) {
			wp = (uint16_t *) (pData + DEF_INDEX2_MSGTYPE);
			switch (*wp) {
				case DEF_LOGRESMSGTYPE_CONFIRM:
					wResult = DEF_MSGTYPE_CONFIRM;
					wsprintf(cTxt, "(!) Disband guild(%s) success! : character(%s)", m_pClientList[i]->m_cGuildName, m_pClientList[i]->m_cCharName);
					PutLogList(cTxt);
					SendGuildMsg(i, DEF_NOTIFY_GUILDDISBANDED, 0, 0, 0);
					std::memset(m_pClientList[i]->m_cGuildName, 0, sizeof(m_pClientList[i]->m_cGuildName));
					memcpy(m_pClientList[i]->m_cGuildName, "NONE", 4);
					m_pClientList[i]->m_iGuildRank = -1;
					m_pClientList[i]->m_iGuildGUID = -1;
					break;
				case DEF_LOGRESMSGTYPE_REJECT:
					wResult = DEF_MSGTYPE_REJECT;
					wsprintf(cTxt, "(!) Disband guild(%s) Fail! : character(%s)", m_pClientList[i]->m_cGuildName, m_pClientList[i]->m_cCharName);
					PutLogList(cTxt);
					break;
			}
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_RESPONSE_DISBANDGUILD;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = wResult;
			iRet = m_pClientList[i]->m_pXSock->iSendMsg(cData, 6);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(i, true, true);
					return;
			}
			return;
		}
	wsprintf(cTxt, "(!)Non-existing player data received from Log server(2): CharName(%s)", cCharName);
	PutLogList(cTxt);
}
// 05/29/2004 - Hypnotoad - Purchase Dicount updated to take charisma into consideration

void CGame::RequestPurchaseItemHandler(int iClientH, char * pItemName, int iNum) {
	CItem * pItem;
	char * cp, cItemName[21], cData[100];
	short * sp;
	uint32_t * dwp, dwGoldCount, dwItemCount;
	uint16_t * wp, wTempPrice;
	int i;
	int iRet;
	int iEraseReq;
	int iCost2;
	int iCost;
	int iDiscountRatio;
	int iDiscountCost;
	double dTmp1;
	double dTmp2;
	double dTmp3;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	//if ( (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) != 0) &&
	//	 (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, m_pClientList[iClientH]->m_cLocation, 10) != 0) ) return;
	if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) != 0) {
		if (memcmp(m_pClientList[iClientH]->m_cLocation, "are", 3) == 0) {
			if ((memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "aresden", 7) == 0) ||
					  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "arefarm", 7) == 0)) {
			} else return;
		}
		if (memcmp(m_pClientList[iClientH]->m_cLocation, "elv", 3) == 0) {
			if ((memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "elvine", 6) == 0) ||
					  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "elvfarm", 7) == 0)) {
			} else return;
		}
	}
	std::memset(cData, 0, sizeof(cData));
	std::memset(cItemName, 0, sizeof(cItemName));
	// New 18/05/2004
	if (m_pClientList[iClientH]->m_pIsProcessingAllowed == false) return;
	if (memcmp(pItemName, "10Arrows", 8) == 0) {
		strcpy(cItemName, "Arrow");
		dwItemCount = 10;
	} else if (memcmp(pItemName, "100Arrows", 9) == 0) {
		strcpy(cItemName, "Arrow");
		dwItemCount = 100;
	} else {
		memcpy(cItemName, pItemName, 20);
		dwItemCount = 1;
	}
	for (i = 1; i <= iNum; i++) {
		pItem = new CItem;
		if (_bInitItemAttr(pItem, cItemName) == false) {
			delete pItem;
		} else {
			if (pItem->m_bIsForSale == false) {
				delete pItem;
				return;
			}
			pItem->m_dwCount = dwItemCount;
			if (m_pClientList[iClientH]->m_cSide == m_iLastCrusadeWinner) {
				iCost = (int) ((float) (pItem->m_wPrice) * 0.9f + 0.5f);
				iCost = iCost * pItem->m_dwCount;
				iCost2 = pItem->m_wPrice * pItem->m_dwCount;
			} else {
				iCost2 = iCost = ((pItem->m_wPrice * pItem->m_dwCount)*2);
			}
			iCost = pItem->m_wPrice * pItem->m_dwCount;
			/* 
			if ((pItem->m_cItemType == ItemType::consume) || (pItem->m_cItemType == ItemType::arrow))
				iItemWeight = (pItem->m_wWeight * pItem->m_dwCount);
			else iItemWeight = pItem->m_wWeight;
			if ( (iItemWeight + m_pClientList[iClientH]->m_iCurWeightLoad) > _iCalcMaxLoad(iClientH)) {
				dwp  = (uint32_t *)(cData + DEF_INDEX4_MSGID);
			 *dwp = MSGID_NOTIFY;
				wp   = (uint16_t *)(cData + DEF_INDEX2_MSGTYPE);
			 *wp  = DEF_NOTIFY_CANNOTCARRYMOREITEM;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
				switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					break;
				}
				delete pItem;
				return;
			}
			 */
			dwGoldCount = dwGetItemCount(iClientH, "Gold");
			iDiscountRatio = ((m_pClientList[iClientH]->m_iCharisma - 10) / 4);
			// 2.03 Discount Method
			// iDiscountRatio = (m_pClientList[iClientH]->m_iCharisma / 4) -1;
			// if (iDiscountRatio == 0) iDiscountRatio = 1;
			dTmp1 = (double) (iDiscountRatio);
			dTmp2 = dTmp1 / 100.0f;
			dTmp1 = (double) iCost;
			dTmp3 = dTmp1 * dTmp2;
			iDiscountCost = (int) dTmp3;
			if (iDiscountCost >= (iCost / 2)) iDiscountCost = (iCost / 2) - 1;
			if ((iCost - iDiscountCost) <= (iCost2 / 2)) {
				iDiscountCost = iCost - (iCost2 / 2) + 1;
			}
			if (dwGoldCount < (uint32_t) (iCost - iDiscountCost)) {
				delete pItem;
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_NOTENOUGHGOLD;
				cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
				*cp = -1;
				cp++;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 7);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						return;
				}
				return;
			}
			if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
				if (m_pClientList[iClientH]->m_iCurWeightLoad < 0) m_pClientList[iClientH]->m_iCurWeightLoad = 0;
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_ITEMPURCHASED;
				cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
				*cp = 1;
				cp++;
				memcpy(cp, pItem->m_cName, 20);
				cp += 20;
				dwp = (uint32_t *) cp;
				*dwp = pItem->m_dwCount;
				cp += 4;
				*cp = (char) pItem->m_cItemType;
				cp++;
				*cp = (char) pItem->m_cEquipPos;
				cp++;
				*cp = (char) 0;
				cp++;
				sp = (short *) cp;
				*sp = pItem->m_sLevelLimit;
				cp += 2;
				*cp = pItem->m_cGenderLimit;
				cp++;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wCurLifeSpan;
				cp += 2;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wWeight;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSprite;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSpriteFrame;
				cp += 2;
				*cp = pItem->m_cItemColor;
				cp++;
				wp = (uint16_t *) cp;
				*wp = (iCost - iDiscountCost);
				wTempPrice = (iCost - iDiscountCost);
				cp += 2;
				if (iEraseReq == 1) delete pItem;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 48);
				SetItemCount(iClientH, "Gold", dwGoldCount - wTempPrice);
				iCalcTotalWeight(iClientH);
				m_stCityStatus[m_pClientList[iClientH]->m_cSide].iFunds += wTempPrice;
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						return;
				}
			} else {
				delete pItem;
				iCalcTotalWeight(iClientH);
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						return;
				}
			}
		}
	}
}

void CGame::GiveItemHandler(int iClientH, short sItemIndex, int iAmount, short dX, short dY, uint16_t wObjectID, char * pItemName) {
	int iRet;
	int iEraseReq;
	short * sp, sOwnerH;
	char * cp, cOwnerType, cData[100], cCharName[21];
	uint32_t * dwp;
	uint16_t * wp;
	CItem * pItem;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsOnServerChange == true) return;
	if ((m_bAdminSecurity == true) && (m_pClientList[iClientH]->m_iAdminUserLevel > 0)) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) return;
	if ((sItemIndex < 0) || (sItemIndex >= DEF_MAXITEMS)) return;
	if (iAmount <= 0) return;
	if (memcmp(m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cName, pItemName, 20) != 0) {
		PutLogList("GiveItemHandler - Not matching Item name");
		return;
	}
	std::memset(cCharName, 0, sizeof(cCharName));
	if (((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::consume) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::arrow)) &&
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwCount > (uint32_t) iAmount)) {
		pItem = new CItem;
		if (_bInitItemAttr(pItem, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cName) == false) {
			delete pItem;
			return;
		} else {
			pItem->m_dwCount = iAmount;
		}
		m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwCount -= iAmount;
		SetItemCount(iClientH, sItemIndex, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwCount);
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
		if (wObjectID != 0) {
			if (wObjectID < 10000) {
				if ((wObjectID > 0) && (wObjectID < DEF_MAXCLIENTS)) {
					if (m_pClientList[wObjectID] != 0) {
						if ((uint16_t) sOwnerH != wObjectID) sOwnerH = 0;
					}
				}
			} else {
				// NPC
				if ((wObjectID - 10000 > 0) && (wObjectID - 10000 < DEF_MAXNPCS)) {
					if (m_pNpcList[wObjectID - 10000] != 0) {
						if ((uint16_t) sOwnerH != (wObjectID - 10000)) sOwnerH = 0;
					}
				}
			}
		}
		if (sOwnerH == 0) {
			m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, pItem);
			// v1.411
			_bItemLog(DEF_ITEMLOG_DROP, iClientH, 0, pItem);
			SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
					  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
					  pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); //v1.4 color
		} else {
			if (cOwnerType == DEF_OWNERTYPE_PLAYER) {
				memcpy(cCharName, m_pClientList[sOwnerH]->m_cCharName, 10);
				if (sOwnerH == iClientH) {
					delete pItem;
					return;
				}
				if (_bAddClientItemList(sOwnerH, pItem, &iEraseReq) == true) {
					dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
					*dwp = MSGID_NOTIFY;
					wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
					*wp = DEF_NOTIFY_ITEMOBTAINED;
					cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
					*cp = 1;
					cp++;
					memcpy(cp, pItem->m_cName, 20);
					cp += 20;
					dwp = (uint32_t *) cp;
					*dwp = pItem->m_dwCount;
					cp += 4;
					*cp = (char) pItem->m_cItemType;
					cp++;
					*cp = (char) pItem->m_cEquipPos;
					cp++;
					*cp = (char) 0;
					cp++;
					sp = (short *) cp;
					*sp = pItem->m_sLevelLimit;
					cp += 2;
					*cp = pItem->m_cGenderLimit;
					cp++;
					wp = (uint16_t *) cp;
					*wp = pItem->m_wCurLifeSpan;
					cp += 2;
					wp = (uint16_t *) cp;
					*wp = pItem->m_wWeight;
					cp += 2;
					sp = (short *) cp;
					*sp = pItem->m_sSprite;
					cp += 2;
					sp = (short *) cp;
					*sp = pItem->m_sSpriteFrame;
					cp += 2;
					*cp = pItem->m_cItemColor;
					cp++;
					*cp = (char) pItem->m_sItemSpecEffectValue2; // v1.41
					cp++;
					dwp = (uint32_t *) cp;
					*dwp = pItem->m_dwAttribute;
					cp += 4;
					/*
					 *cp = (char)(pItem->m_dwAttribute & 0x00000001);
					cp++;
					 */
					if (iEraseReq == 1) delete pItem;
					iRet = m_pClientList[sOwnerH]->m_pXSock->iSendMsg(cData, 53);
					switch (iRet) {
						case DEF_XSOCKEVENT_QUENEFULL:
						case DEF_XSOCKEVENT_SOCKETERROR:
						case DEF_XSOCKEVENT_CRITICALERROR:
						case DEF_XSOCKEVENT_SOCKETCLOSED:
							DeleteClient(sOwnerH, true, true);
							break;
					}
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIVEITEMFIN_COUNTCHANGED, sItemIndex, iAmount, 0, cCharName);
				} else {
					m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
							  m_pClientList[iClientH]->m_sY,
							  pItem);
					// v1.411
					_bItemLog(DEF_ITEMLOG_DROP, iClientH, 0, pItem);
					SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
							  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
							  pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); //v1.4 color
					dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
					*dwp = MSGID_NOTIFY;
					wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
					*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
					iRet = m_pClientList[sOwnerH]->m_pXSock->iSendMsg(cData, 6);
					switch (iRet) {
						case DEF_XSOCKEVENT_QUENEFULL:
						case DEF_XSOCKEVENT_SOCKETERROR:
						case DEF_XSOCKEVENT_CRITICALERROR:
						case DEF_XSOCKEVENT_SOCKETCLOSED:
							DeleteClient(sOwnerH, true, true);
							break;
					}
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTGIVEITEM, sItemIndex, iAmount, 0, cCharName);
				}
			} else {
				memcpy(cCharName, m_pNpcList[sOwnerH]->m_cNpcName, 20);
				if (memcmp(m_pNpcList[sOwnerH]->m_cNpcName, "Howard", 6) == 0) {
					if (bSetItemToBankItem(iClientH, pItem) == false) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTITEMTOBANK, 0, 0, 0, 0);
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, pItem);
						// v1.411
						_bItemLog(DEF_ITEMLOG_DROP, iClientH, 0, pItem);
						SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
								  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
								  pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); // v1.4 color
					}
				} else {
					m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, pItem);
					// v1.411
					_bItemLog(DEF_ITEMLOG_DROP, iClientH, 0, pItem);
					SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
							  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
							  pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); // v1.4 color
				}
			}
		}
	} else {
		ReleaseItemHandler(iClientH, sItemIndex, true);
		if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::arrow)
			m_pClientList[iClientH]->m_cArrowIndex = -1;
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
		if (wObjectID != 0) {
			if (wObjectID < 10000) {
				if ((wObjectID > 0) && (wObjectID < DEF_MAXCLIENTS)) {
					if (m_pClientList[wObjectID] != 0) {
						if ((uint16_t) sOwnerH != wObjectID) sOwnerH = 0;
					}
				}
			} else {
				// NPC
				if ((wObjectID - 10000 > 0) && (wObjectID - 10000 < DEF_MAXNPCS)) {
					if (m_pNpcList[wObjectID - 10000] != 0) {
						if ((uint16_t) sOwnerH != (wObjectID - 10000)) sOwnerH = 0;
					}
				}
			}
		}
		if (sOwnerH == 0) {
			m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
					  m_pClientList[iClientH]->m_sY,
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]);
			// v1.411
			_bItemLog(DEF_ITEMLOG_DROP, iClientH, 0, m_pClientList[iClientH]->m_pItemList[sItemIndex]);
			SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
					  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSprite,
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpriteFrame,
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor); // v1.4 color
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_DROPITEMFIN_ERASEITEM, sItemIndex, iAmount, 0, 0);
		} else {
			if (cOwnerType == DEF_OWNERTYPE_PLAYER) {
				memcpy(cCharName, m_pClientList[sOwnerH]->m_cCharName, 10);
				pItem = m_pClientList[iClientH]->m_pItemList[sItemIndex];
				if (pItem->m_sIDnum == ItemId::guild_admission_ticket) {
					if ((m_pClientList[iClientH]->m_iGuildRank == -1) &&
							  (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) != 0) &&
							  (memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[sOwnerH]->m_cLocation, 10) == 0) &&
							  (m_pClientList[sOwnerH]->m_iGuildRank == 0)) {
						SendNotifyMsg(iClientH, sOwnerH, DEF_NOTIFY_QUERY_JOINGUILDREQPERMISSION, 0, 0, 0, 0);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIVEITEMFIN_ERASEITEM, sItemIndex, 1, 0, cCharName);
						_bItemLog(DEF_ITEMLOG_DEPLETE, iClientH, (int) - 1, pItem);
						goto REMOVE_ITEM_PROCEDURE;
					}
				}
				if ((m_bIsCrusadeMode == false) && (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::guild_secession_ticket)) {
					if ((memcmp(m_pClientList[iClientH]->m_cGuildName, m_pClientList[sOwnerH]->m_cGuildName, 20) == 0) &&
							  (m_pClientList[iClientH]->m_iGuildRank != -1) &&
							  (m_pClientList[sOwnerH]->m_iGuildRank == 0)) {
						SendNotifyMsg(iClientH, sOwnerH, DEF_NOTIFY_QUERY_DISMISSGUILDREQPERMISSION, 0, 0, 0, 0);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIVEITEMFIN_ERASEITEM, sItemIndex, 1, 0, cCharName);
						_bItemLog(DEF_ITEMLOG_DEPLETE, iClientH, (int) - 1, pItem);
						goto REMOVE_ITEM_PROCEDURE;
					}
				}
				if (_bAddClientItemList(sOwnerH, pItem, &iEraseReq) == true) {
					_bItemLog(DEF_ITEMLOG_GIVE, iClientH, sOwnerH, pItem);
					dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
					*dwp = MSGID_NOTIFY;
					wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
					*wp = DEF_NOTIFY_ITEMOBTAINED;
					cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
					*cp = 1;
					cp++;
					memcpy(cp, pItem->m_cName, 20);
					cp += 20;
					dwp = (uint32_t *) cp;
					*dwp = pItem->m_dwCount;
					cp += 4;
					*cp = (char) pItem->m_cItemType;
					cp++;
					*cp = (char) pItem->m_cEquipPos;
					cp++;
					*cp = (char) 0;
					cp++;
					sp = (short *) cp;
					*sp = pItem->m_sLevelLimit;
					cp += 2;
					*cp = pItem->m_cGenderLimit;
					cp++;
					wp = (uint16_t *) cp;
					*wp = pItem->m_wCurLifeSpan;
					cp += 2;
					wp = (uint16_t *) cp;
					*wp = pItem->m_wWeight;
					cp += 2;
					sp = (short *) cp;
					*sp = pItem->m_sSprite;
					cp += 2;
					sp = (short *) cp;
					*sp = pItem->m_sSpriteFrame;
					cp += 2;
					*cp = pItem->m_cItemColor;
					cp++;
					*cp = (char) pItem->m_sItemSpecEffectValue2; // v1.41
					cp++;
					dwp = (uint32_t *) cp;
					*dwp = pItem->m_dwAttribute;
					cp += 4;
					/*
					 *cp = (char)(pItem->m_dwAttribute & 0x00000001);
					cp++;
					 */
					if (iEraseReq == 1) delete pItem;
					iRet = m_pClientList[sOwnerH]->m_pXSock->iSendMsg(cData, 53);
					switch (iRet) {
						case DEF_XSOCKEVENT_QUENEFULL:
						case DEF_XSOCKEVENT_SOCKETERROR:
						case DEF_XSOCKEVENT_CRITICALERROR:
						case DEF_XSOCKEVENT_SOCKETCLOSED:
							DeleteClient(sOwnerH, true, true);
							break;
					}
				} else {
					m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
							  m_pClientList[iClientH]->m_sY,
							  m_pClientList[iClientH]->m_pItemList[sItemIndex]);
					_bItemLog(DEF_ITEMLOG_DROP, iClientH, 0, m_pClientList[iClientH]->m_pItemList[sItemIndex]);
					SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
							  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
							  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSprite,
							  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpriteFrame,
							  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor); // v1.4 color
					dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
					*dwp = MSGID_NOTIFY;
					wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
					*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
					iRet = m_pClientList[sOwnerH]->m_pXSock->iSendMsg(cData, 6);
					switch (iRet) {
						case DEF_XSOCKEVENT_QUENEFULL:
						case DEF_XSOCKEVENT_SOCKETERROR:
						case DEF_XSOCKEVENT_CRITICALERROR:
						case DEF_XSOCKEVENT_SOCKETCLOSED:
							DeleteClient(sOwnerH, true, true);
							break;
					}
					std::memset(cCharName, 0, sizeof(cCharName));
				}
			} else {
				memcpy(cCharName, m_pNpcList[sOwnerH]->m_cNpcName, 20);
				if (memcmp(m_pNpcList[sOwnerH]->m_cNpcName, "Howard", 6) == 0) {
					if (bSetItemToBankItem(iClientH, sItemIndex) == false) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTITEMTOBANK, 0, 0, 0, 0);
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
								  m_pClientList[iClientH]->m_sY,
								  m_pClientList[iClientH]->m_pItemList[sItemIndex]);
						_bItemLog(DEF_ITEMLOG_DROP, iClientH, 0, m_pClientList[iClientH]->m_pItemList[sItemIndex]);
						SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
								  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
								  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor); // v1.4 color
					}
				} else if (memcmp(m_pNpcList[sOwnerH]->m_cNpcName, "Kennedy", 7) == 0) {
					if ((m_bIsCrusadeMode == false) && (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::guild_secession_ticket)) {
						if ((m_pClientList[iClientH]->m_iGuildRank != 0) && (m_pClientList[iClientH]->m_iGuildRank != -1)) {
							SendNotifyMsg(iClientH, iClientH, DEF_COMMONTYPE_DISMISSGUILDAPPROVE, 0, 0, 0, 0);
							std::memset(m_pClientList[iClientH]->m_cGuildName, 0, sizeof(m_pClientList[iClientH]->m_cGuildName));
							memcpy(m_pClientList[iClientH]->m_cGuildName, "NONE", 4);
							m_pClientList[iClientH]->m_iGuildRank = -1;
							m_pClientList[iClientH]->m_iGuildGUID = -1;
							SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
							m_pClientList[iClientH]->m_iExp -= 300;
							if (m_pClientList[iClientH]->m_iExp < 0) m_pClientList[iClientH]->m_iExp = 0;
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_EXP, 0, 0, 0, 0);
						}
						delete m_pClientList[iClientH]->m_pItemList[sItemIndex];
					} else {
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
								  m_pClientList[iClientH]->m_sY,
								  m_pClientList[iClientH]->m_pItemList[sItemIndex]);
						_bItemLog(DEF_ITEMLOG_DROP, iClientH, 0, m_pClientList[iClientH]->m_pItemList[sItemIndex]);
						SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
								  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
								  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor); // v1.4 color
						std::memset(cCharName, 0, sizeof(cCharName));
					}
				} else {
					m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
							  m_pClientList[iClientH]->m_sY,
							  m_pClientList[iClientH]->m_pItemList[sItemIndex]);
					_bItemLog(DEF_ITEMLOG_DROP, iClientH, 0, m_pClientList[iClientH]->m_pItemList[sItemIndex]);
					SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
							  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
							  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSprite,
							  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpriteFrame,
							  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor); // v1.4 color
					std::memset(cCharName, 0, sizeof(cCharName));
				}
			}
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIVEITEMFIN_ERASEITEM, sItemIndex, iAmount, 0, cCharName);
		}
REMOVE_ITEM_PROCEDURE:
		;
		if (m_pClientList[iClientH] == 0) return;
		m_pClientList[iClientH]->m_pItemList[sItemIndex] = 0;
		m_pClientList[iClientH]->m_bIsItemEquipped[sItemIndex] = false;
		m_pClientList[iClientH]->m_cArrowIndex = _iGetArrowItemIndex(iClientH);
	}
	iCalcTotalWeight(iClientH);
}

void CGame::SendNotifyMsg(int iFromH, int iToH, uint16_t wMsgType, uint32_t sV1, uint32_t sV2, uint32_t sV3, const char * pString, uint32_t sV4, uint32_t sV5, uint32_t sV6, uint32_t sV7, uint32_t sV8, uint32_t sV9, char * pString2) {
	char cData[1000];
	uint32_t * dwp;
	uint16_t * wp;
	char * cp;
	short * sp;
	int * ip, iRet, i;
	if (m_pClientList[iToH] == 0) return;
	std::memset(cData, 0, sizeof(cData));
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_NOTIFY;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = wMsgType;
	cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
	switch (wMsgType) {
		case DEF_NOTIFY_HELDENIANCOUNT:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV2;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV3;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV4;
			cp += 2;
			cp += 14;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 14);
			break;
		case DEF_NOTIFY_NOMOREAGRICULTURE:
		case DEF_NOTIFY_AGRICULTURESKILLLIMIT:
		case DEF_NOTIFY_AGRICULTURENOAREA:
		case DEF_NOTIFY_HAPPYHOURSTAR:
		case DEF_NOTIFY_HAPPYHOUREND:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
			// Crafting
		case DEF_NOTIFY_CRAFTING_FAIL: //reversed by Snoopy: 0x0BF1:
			ip = (int *) cp;
			*ip = (int) sV1;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
			// New 18/05/2004
		case DEF_NOTIFY_SPAWNEVENT:
			*cp = (char) sV3;
			cp++;
			sp = (short *) cp;
			*cp = sV1;
			cp += 2;
			sp = (short *) cp;
			*cp = sV2;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 11);
			break;
		case DEF_NOTIFY_QUESTCOUNTER:
			ip = (int *) cp;
			*ip = sV1;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 24);
			break;
		case DEF_NOTIFY_REQRANGO: // Morla2.2 - Notify Rango
			ip = (int *) cp;
			*ip = sV1;
			cp += 4;
			ip = (int *) cp;
			*ip = sV2;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 24);
			break;
		case DEF_NOTIFY_APOCGATECLOSE:
		case DEF_NOTIFY_APOCGATEOPEN:
			ip = (int *) cp;
			*ip = sV1;
			cp += 4;
			ip = (int *) cp;
			*ip = sV2;
			cp += 4;
			memcpy(cp, pString, 10);
			cp += 10;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 24);
			break;
		case DEF_NOTIFY_ABADDONKILLED:
			memcpy(cp, m_pClientList[iFromH]->m_cCharName, 10);
			cp += 10;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 24);
			break;
		case DEF_NOTIFY_APOCFORCERECALLPLAYERS:
		case DEF_NOTIFY_APOCGATESTARTMSG:
		case DEF_NOTIFY_APOCGATEENDMSG:
		case DEF_NOTIFY_NORECALL:
			//50Cent - Capture The Flag
		case DEF_NOTIFY_CAPTURETHEFLAGSTART:
		case DEF_NOTIFY_ARESDENCAPTUREDELVINEFLAG:
		case DEF_NOTIFY_ELVINECAPTUREDARESDENFLAG:
		case DEF_NOTIFY_ELVINEFLAGBACKTOCH:
		case DEF_NOTIFY_ARESDENFLAGBACKTOCH:
		case DEF_NOTIFY_ELVINEWINSROUND:
		case DEF_NOTIFY_ARESDENWINSROUND:
		case DEF_NOTIFY_ELVINEWINCTF:
		case DEF_NOTIFY_ARESDENWINCTF:
		case DEF_NOTIFY_TIECTF:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
		case DEF_NOTIFY_FORCERECALLTIME:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
			// New 16/05/2004
			//0xB4E2, 0xBEB
		case DEF_NOTIFY_MONSTERCOUNT:
		case DEF_NOTIFY_SLATE_STATUS:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
			//0x0BE5, 0x0BE7, 0x0BE8, 0x0BEA
		case DEF_NOTIFY_0BE8:
		case DEF_NOTIFY_HELDENIANTELEPORT:
		case DEF_NOTIFY_HELDENIANEND:
		case DEF_NOTIFY_RESURRECTPLAYER:
		case DEF_NOTIFY_SLATE_EXP:
		case DEF_NOTIFY_SLATE_MANA:
		case DEF_NOTIFY_SLATE_INVINCIBLE:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
		case DEF_NOTIFY_SLATE_CREATEFAIL:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
		case DEF_NOTIFY_SLATE_CREATESUCCESS:
			dwp = (uint32_t *) cp;
			*dwp = sV1;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
			// New 07/05/2004
			// Party Notify Msg's
		case DEF_NOTIFY_PARTY:
			switch (sV1) {
				case 4:
				case 6:
					wp = (uint16_t *) cp;
					*wp = (uint16_t) sV1;
					cp += 2;
					wp = (uint16_t *) cp;
					*wp = (uint16_t) sV2;
					cp += 2;
					wp = (uint16_t *) cp;
					*wp = (uint16_t) sV3;
					cp += 2;
					memcpy(cp, pString, 10);
					cp += 10;
					iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 12 + 10);
					SendNotifyMsg(0, iToH, DEF_NOTIFY_PARTYMEMBERSTATUS, 0, 0, 0, 0);
					break;
				case 5:
					wp = (uint16_t *) cp;
					*wp = (uint16_t) sV1;
					cp += 2;
					wp = (uint16_t *) cp;
					*wp = (uint16_t) sV2;
					cp += 2;
					wp = (uint16_t *) cp;
					*wp = (uint16_t) sV3;
					cp += 2;
					memcpy(cp, pString, sV3 * 11);
					cp += sV3 * 11;
					iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 12 + sV3 * 11);
					SendNotifyMsg(0, iToH, DEF_NOTIFY_PARTYMEMBERSTATUS, 0, 0, 0, 0);
					break;
				default:
					wp = (uint16_t *) cp;
					*wp = (uint16_t) sV1;
					cp += 2;
					wp = (uint16_t *) cp;
					*wp = (uint16_t) sV2;
					cp += 2;
					wp = (uint16_t *) cp;
					*wp = (uint16_t) sV3;
					cp += 2;
					wp = (uint16_t *) cp;
					*wp = (uint16_t) sV4;
					cp += 2;
					iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 14);
					SendNotifyMsg(0, iToH, DEF_NOTIFY_PARTYMEMBERSTATUS, 0, 0, 0, 0);
					break;
			}
			break;
		case DEF_NOTIFY_REQGUILDNAMEANSWER:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV2;
			cp += 2;
			memcpy(cp, pString, 20);
			cp += 20;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 30);
			break;
			// New 06/05/2004
			// Upgrade Notify Msg's
		case DEF_NOTIFY_ITEMUPGRADEFAIL:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
		case DEF_NOTIFY_ITEMATTRIBUTECHANGE:
		case DEF_NOTIFY_GIZONITEMUPGRADELEFT:
			sp = (short *) cp;
			*sp = sV1;
			cp += 2;
			dwp = (uint32_t *) cp;
			*dwp = sV2;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = sV3;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = sV4;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 20);
			break;
		case DEF_NOTIFY_UPGRADEHEROCAPE:
		case DEF_NOTIFY_GIZONITEMCANGE:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			*cp = (char) sV2;
			cp++;
			sp = (short *) cp;
			*sp = (short) sV3;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV4;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV5;
			cp += 2;
			*cp = (char) sV6;
			cp++;
			*cp = (char) sV7;
			cp++;
			dwp = (uint32_t *) cp;
			*dwp = sV8;
			cp += 4;
			memcpy(cp, pString, 20);
			cp += 20;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 41);
			break;
			// 2.06 - by KLKS
		case DEF_NOTIFY_CHANGEPLAYMODE:
			memcpy(cp, pString, 10);
			cp += 10;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 16);
			break;
		case DEF_NOTIFY_TCLOC:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV2;
			cp += 2;
			memcpy(cp, pString, 10);
			cp += 10;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV4;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV5;
			cp += 2;
			memcpy(cp, pString2, 10);
			cp += 10;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 34);
			break;
			//New 11/05/2004
		case DEF_NOTIFY_GRANDMAGICRESULT:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV2;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV3;
			cp += 2;
			memcpy(cp, pString, 10);
			cp += 10;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV4;
			cp += 2;
			if (sV9 > 0) {
				memcpy(cp, pString2, (sV9 * 2) + 2);
				cp += (sV9 * 2) + 2;
			} else {
				sp = (short *) cp;
				*sp = 0;
				cp += 2;
			}
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, (sV9 * 2) + 26);
			break;
		case DEF_NOTIFY_MAPSTATUSNEXT:
			memcpy(cp, pString, sV1);
			cp += sV1;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6 + sV1);
			break;
		case DEF_NOTIFY_MAPSTATUSLAST:
			memcpy(cp, pString, sV1);
			cp += sV1;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6 + sV1);
			break;
		case DEF_NOTIFY_LOCKEDMAP:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			memcpy(cp, pString, 10);
			cp += 10;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 18);
			break;
		case DEF_NOTIFY_BUILDITEMSUCCESS:
		case DEF_NOTIFY_BUILDITEMFAIL:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV2;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_HELP:
		case DEF_NOTIFY_QUESTREWARD:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV2;
			cp += 2;
			ip = (int *) cp;
			*ip = (int) sV3;
			cp += 4;
			memcpy(cp, pString, 20);
			cp += 20;
			ip = (int *) cp;
			*ip = (int) sV4;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 38);
			break;
		case DEF_NOTIFY_CANNOTCONSTRUCT:
		case DEF_NOTIFY_METEORSTRIKECOMING:
		case DEF_NOTIFY_METEORSTRIKEHIT:
		case DEF_NOTIFY_HELPFAILED:
		case DEF_NOTIFY_SPECIALABILITYENABLED:
		case DEF_NOTIFY_FORCEDISCONN:
		case DEF_NOTIFY_OBSERVERMODE:
		case DEF_NOTIFY_QUESTCOMPLETED:
		case DEF_NOTIFY_QUESTABORTED:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
		case DEF_NOTIFY_QUESTCONTENTS:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV2;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV3;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV4;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV5;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV6;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV7;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV8;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV9;
			cp += 2;
			if (pString2 != 0) memcpy(cp, pString2, 20);
			cp += 20;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 44);
			break;
		case DEF_NOTIFY_ENERGYSPHERECREATED:
		case DEF_NOTIFY_ITEMCOLORCHANGE:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV2;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_NOMORECRUSADESTRUCTURE:
		case DEF_NOTIFY_EXCHANGEITEMCOMPLETE:
		case DEF_NOTIFY_CANCELEXCHANGEITEM:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
		case DEF_NOTIFY_SETEXCHANGEITEM:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV2;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV3;
			cp += 2;
			ip = (int *) cp;
			*ip = (int) sV4;
			cp += 4;
			*cp = (char) sV5;
			cp++;
			sp = (short *) cp;
			*sp = (short) sV6;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV7;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV8;
			cp += 2;
			memcpy(cp, pString, 20);
			cp += 20;
			memcpy(cp, m_pClientList[iFromH]->m_cCharName, 10);
			cp += 10;
			// v1.42
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) sV9;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 57);
			break;
		case DEF_NOTIFY_OPENEXCHANGEWINDOW:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV2;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV3;
			cp += 2;
			ip = (int *) cp;
			*ip = (int) sV4;
			cp += 4;
			*cp = (char) sV5;
			cp++;
			sp = (short *) cp;
			*sp = (short) sV6;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV7;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV8;
			cp += 2;
			memcpy(cp, pString, 20);
			cp += 20;
			memcpy(cp, m_pClientList[iFromH]->m_cCharName, 10);
			cp += 10;
			// v1.42
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) sV9;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 57);
			break;
		case DEF_NOTIFY_NOTFLAGSPOT:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
		case DEF_NOTIFY_ITEMPOSLIST:
			for (i = 0; i < DEF_MAXITEMS; i++) {
				sp = (short *) cp;
				*sp = (short) m_pClientList[iToH]->m_ItemPosList[i].x;
				cp += 2;
				sp = (short *) cp;
				*sp = (short) m_pClientList[iToH]->m_ItemPosList[i].y;
				cp += 2;
			}
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6 + DEF_MAXITEMS * 4);
			break;
		case DEF_NOTIFY_ENEMYKILLS:
			ip = (int *) cp;
			*ip = (int) sV1;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_CRUSADE:
			ip = (int *) cp;
			*ip = (int) sV1;
			cp += 4;
			ip = (int *) cp;
			*ip = (int) sV2;
			cp += 4;
			ip = (int *) cp;
			*ip = (int) sV3;
			cp += 4;
			ip = (int *) cp;
			*ip = (int) sV4;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 22);
			break;
		case DEF_NOTIFY_CONSTRUCTIONPOINT:
		case DEF_NOTIFY_SPECIALABILITYSTATUS:
		case DEF_NOTIFY_DAMAGEMOVE:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV2;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV3;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 12);
			break;
		case DEF_NOTIFY_DOWNSKILLINDEXSET:
		case DEF_NOTIFY_RESPONSE_CREATENEWPARTY:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
		case DEF_NOTIFY_ADMINIFO:
			switch (sV1) {
				case 1:
					ip = (int *) cp;
					*ip = m_pNpcList[sV2]->m_iHP;
					cp += 4;
					ip = (int *) cp;
					*ip = m_pNpcList[sV2]->m_iDefenseRatio;
					cp += 4;
					ip = (int *) cp;
					*ip = m_pNpcList[sV2]->m_bIsSummoned;
					cp += 4;
					ip = (int *) cp;
					*ip = m_pNpcList[sV2]->m_cActionLimit;
					cp += 4;
					ip = (int *) cp;
					*ip = m_pNpcList[sV2]->m_iHitDice;
					cp += 4;
					dwp = (uint32_t *) cp; // v1.4
					*dwp = m_pNpcList[sV2]->m_dwDeadTime;
					cp += 4;
					dwp = (uint32_t *) cp;
					*dwp = m_pNpcList[sV2]->m_dwRegenTime;
					cp += 4;
					ip = (int *) cp;
					*ip = (int) m_pNpcList[sV2]->m_bIsKilled;
					cp += 4;
					iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 26 + 12);
					break;
			}
			break;
		case DEF_NOTIFY_HELDENIANSTART:
		case DEF_NOTIFY_NPCTALK:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV2;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV3;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV4;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV5;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV6;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV7;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV8;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV9;
			cp += 2;
			if (pString != 0) memcpy(cp, pString, 20);
			cp += 20;
			if (pString2 != 0) memcpy(cp, pString2, 20);
			cp += 20;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 64);
			break;
		case DEF_NOTIFY_CRAFTING_SUCCESS: //reversed by Snoopy: 0x0BF0
		case DEF_NOTIFY_PORTIONSUCCESS:
		case DEF_NOTIFY_LOWPORTIONSKILL:
		case DEF_NOTIFY_PORTIONFAIL:
		case DEF_NOTIFY_NOMATCHINGPORTION:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
		case DEF_NOTIFY_SUPERATTACKLEFT:
			sp = (short *) cp;
			*sp = m_pClientList[iToH]->m_iSuperAttackLeft;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
		case DEF_NOTIFY_SAFEATTACKMODE:
			*cp = m_pClientList[iToH]->m_bIsSafeAttackMode;
			cp++;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 7);
			break;
		case DEF_NOTIFY_QUERY_JOINPARTY:
		case DEF_NOTIFY_IPACCOUNTINFO:
			strcpy(cp, pString);
			cp += strlen(pString);
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6 + strlen(pString) + 1);
			break;
		case DEF_NOTIFY_REWARDGOLD:
			dwp = (uint32_t *) cp;
			*dwp = m_pClientList[iToH]->m_iRewardGold;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_SERVERSHUTDOWN:
			*cp = (char) sV1;
			cp++;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 7);
			break;
		case DEF_NOTIFY_GLOBALATTACKMODE:
		case DEF_NOTIFY_WHETHERCHANGE:
			*cp = (char) sV1;
			cp++;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 7);
			break;
		case DEF_NOTIFY_FISHCANCELED:
		case DEF_NOTIFY_FISHSUCCESS:
		case DEF_NOTIFY_FISHFAIL:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
		case DEF_NOTIFY_DEBUGMSG:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
		case DEF_NOTIFY_FISHCHANCE:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
		case DEF_NOTIFY_ENERGYSPHEREGOALIN:
		case DEF_NOTIFY_EVENTFISHMODE:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV2;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV3;
			cp += 2;
			memcpy(cp, pString, 20);
			cp += 20;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 32);
			break;
		case DEF_NOTIFY_NOTICEMSG:
			memcpy(cp, pString, strlen(pString));
			cp += strlen(pString);
			*cp = 0;
			cp++;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, strlen(pString) + 7);
			break;
		case DEF_NOTIFY_CANNOTRATING:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
		case DEF_NOTIFY_RATINGPLAYER:
			*cp = (char) sV1;
			cp++;
			memcpy(cp, pString, 10);
			cp += 10;
			ip = (int *) cp;
			*ip = m_pClientList[iToH]->m_iRating;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 22);
			break;
		case DEF_NOTIFY_ADMINUSERLEVELLOW:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
		case DEF_NOTIFY_PLAYERSHUTUP:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			memcpy(cp, pString, 10);
			cp += 10;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 19);
			break;
		case DEF_NOTIFY_TIMECHANGE:
			*cp = (char) sV1;
			cp++;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 7);
			break;
		case DEF_NOTIFY_TOBERECALLED:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
		case DEF_NOTIFY_HUNGER:
			*cp = (char) sV1;
			cp++;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 7);
			break;
		case DEF_NOTIFY_PLAYERPROFILE:
			if (strlen(pString) > 100) {
				memcpy(cp, pString, 100);
				cp += 100;
			} else {
				memcpy(cp, pString, strlen(pString));
				cp += strlen(pString);
			}
			*cp = 0;
			cp++;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 7 + strlen(pString));
			break;
			// New 10/05/2004 Changed
		case DEF_NOTIFY_WHISPERMODEON:
		case DEF_NOTIFY_WHISPERMODEOFF:
		case DEF_NOTIFY_PLAYERNOTONGAME:
			memcpy(cp, pString, 10);
			cp += 10;
			memcpy(cp, "          ", 10);
			cp += 10;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 27);
			break;
			// New 15/05/2004 Changed
		case DEF_NOTIFY_PLAYERONGAME:
			memcpy(cp, pString, 10);
			cp += 10;
			if (pString[0] != 0) {
				memcpy(cp, pString2, 14);
				cp += 14;
			}
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 31);
			break;
			// New 06/05/2004
		case DEF_NOTIFY_ITEMSOLD:
		case DEF_NOTIFY_ITEMREPAIRED:
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) sV1;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) sV2;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 14);
			break;
			// New 06/05/2004
		case DEF_NOTIFY_REPAIRITEMPRICE:
		case DEF_NOTIFY_SELLITEMPRICE:
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) sV1;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) sV2;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) sV3;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) sV4;
			cp += 4;
			memcpy(cp, pString, 20);
			cp += 20;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 42);
			break;
		case DEF_NOTIFY_CANNOTREPAIRITEM:
		case DEF_NOTIFY_CANNOTSELLITEM:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV2;
			cp += 2;
			memcpy(cp, pString, 20);
			cp += 20;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 30);
			break;
		case DEF_NOTIFY_SHOWMAP:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV2;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_SKILLUSINGEND:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
		case DEF_NOTIFY_TOTALUSERS:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) m_iTotalClients; //_iGetTotalClients();
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 8);
			break;
		case DEF_NOTIFY_MAGICEFFECTOFF:
		case DEF_NOTIFY_MAGICEFFECTON:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) sV2;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) sV3;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 16);
			break;
		case DEF_NOTIFY_CANNOTITEMTOBANK:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
		case DEF_NOTIFY_SERVERCHANGE:
			memcpy(cp, m_pClientList[iToH]->m_cMapName, 10);
			cp += 10;
			if (m_iGameServerMode == 1)
				if (memcmp(m_cLogServerAddr, m_cGameServerAddr, 15) == 0)
					memcpy(cp, m_cGameServerAddrExternal, 15);
				else
					memcpy(cp, m_cLogServerAddr, 15);
			else
				memcpy(cp, m_cLogServerAddr, 15);
			cp += 15;
			ip = (int *) cp;
			*ip = m_iLogServerPort;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 16 + 19);
			break;
		case DEF_NOTIFY_SKILL:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV2;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_SETITEMCOUNT:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) sV2;
			cp += 4;
			*cp = (char) sV3;
			cp++;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 13);
			break;
		case DEF_NOTIFY_ITEMDEPLETED_ERASEITEM:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV2;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_DROPITEMFIN_COUNTCHANGED:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			ip = (int *) cp;
			*ip = (int) sV2;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 12);
			break;
		case DEF_NOTIFY_DROPITEMFIN_ERASEITEM:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			ip = (int *) cp;
			*ip = (int) sV2;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 12);
			break;
		case DEF_NOTIFY_CANNOTGIVEITEM:
		case DEF_NOTIFY_GIVEITEMFIN_COUNTCHANGED:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			ip = (int *) cp;
			*ip = (int) sV2;
			cp += 4;
			memcpy(cp, pString, 20);
			cp += 20;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 32);
			break;
		case DEF_NOTIFY_GIVEITEMFIN_ERASEITEM:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			ip = (int *) cp;
			*ip = (int) sV2;
			cp += 4;
			memcpy(cp, pString, 20);
			cp += 20;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 32);
			break;
		case DEF_NOTIFY_ENEMYKILLREWARD:
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iExp;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iEnemyKillCount;
			cp += 4;
			memcpy(cp, m_pClientList[sV1]->m_cCharName, 10);
			cp += 10;
			memcpy(cp, m_pClientList[sV1]->m_cGuildName, 20);
			cp += 20;
			sp = (short *) cp;
			*sp = (short) m_pClientList[sV1]->m_iGuildRank;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) m_pClientList[iToH]->m_iWarContribution;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 48);
			break;
		case DEF_NOTIFY_PKCAPTURED:
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV1;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = (uint16_t) sV2;
			cp += 2;
			memcpy(cp, pString, 10);
			cp += 10;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iRewardGold;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = m_pClientList[iToH]->m_iExp;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 28);
			break;
		case DEF_NOTIFY_PKPENALTY:
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iExp;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iStr;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iVit;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iDex;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iInt;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iMag;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iCharisma;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iPKCount;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 38);
			break;
		case DEF_NOTIFY_TRAVELERLIMITEDLEVEL:
		case DEF_NOTIFY_LIMITEDLEVEL:
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iExp;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_ITEMRELEASED:
		case DEF_NOTIFY_ITEMLIFESPANEND:
			sp = (short *) cp;
			*sp = (short) sV1;
			cp += 2;
			sp = (short *) cp;
			*sp = (short) sV2;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_KILLED:
			memcpy(cp, pString, 20);
			cp += 20;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 26);
			break;
		case DEF_NOTIFY_EXP:
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iExp;
			cp += 4;
			ip = (int *) cp;
			*ip = m_pClientList[iToH]->m_iRating;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 14);
			break;
		case DEF_NOTIFY_HP: // Fixed Party Info by xXx// 50cent
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iHP;
			cp += 4;
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iMP;
			cp += 4;
			for (i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				iH = m_stPartyInfo[m_pClientList[iToH]->m_iPartyID].iIndex[i];
				if (m_pClientList[iH] != 0) {
					SendNotifyMsg(0, iH, DEF_NOTIFY_PARTYMEMBERSTATUS, 0, 0, 0, 0);
				}
			}
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 14);
			break;
		case DEF_NOTIFY_PARTYMEMBERSTATUS:// 50 cent
			for (i = 0; i < m_stPartyInfo[m_pClientList[iToH]->m_iPartyID].iTotalMembers; i++) {
				ip = (int *) cp;
				*ip = (uint32_t) m_pClientList[m_stPartyInfo[m_pClientList[iToH]->m_iPartyID].iIndex[i]]->m_iHP;
				cp += 4;
				ip = (int *) cp;
				*ip = (uint32_t) iGetMaxHP(m_stPartyInfo[m_pClientList[iToH]->m_iPartyID].iIndex[i]);
				cp += 4;
				ip = (int *) cp;
				*ip = (uint32_t) m_pClientList[m_stPartyInfo[m_pClientList[iToH]->m_iPartyID].iIndex[i]]->m_iMP;
				cp += 4;
				ip = (int *) cp;
				*ip = (uint32_t) iGetMaxMP(m_stPartyInfo[m_pClientList[iToH]->m_iPartyID].iIndex[i]);
				cp += 4;
				//screemin fix/update :D -  Poison mode
				ip = (int *) cp;
				*ip = (uint32_t) m_pClientList[m_stPartyInfo[m_pClientList[iToH]->m_iPartyID].iIndex[i]]->m_bIsPoisoned;
				cp += 2;
			}
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6 + (m_stPartyInfo[m_pClientList[iToH]->m_iPartyID].iTotalMembers * 18));
			break;
		case DEF_NOTIFY_MP: // Fixed Party Info by xXx
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iMP;
			cp += 4;
			for (i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				iH = m_stPartyInfo[m_pClientList[iToH]->m_iPartyID].iIndex[i];
				if (m_pClientList[iH] != 0) {
					SendNotifyMsg(0, iH, DEF_NOTIFY_PARTYMEMBERSTATUS, 0, 0, 0, 0);
				}
			}
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_SP: // Fixed Party Info by xXx
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iSP;
			cp += 4;
			for (i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				iH = m_stPartyInfo[m_pClientList[iToH]->m_iPartyID].iIndex[i];
				if (m_pClientList[iH] != 0) {
					SendNotifyMsg(0, iH, DEF_NOTIFY_PARTYMEMBERSTATUS, 0, 0, 0, 0);
				}
			}
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_CHARISMA:
			dwp = (uint32_t *) cp;
			*dwp = (uint32_t) m_pClientList[iToH]->m_iCharisma;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
			//MOG Fixes
		case DEF_NOTIFY_STATECHANGE_FAILED:
		case DEF_NOTIFY_SETTING_FAILED:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
		case DEF_NOTIFY_STATECHANGE_SUCCESS:
		{
			int i;
			for (i = 0; i < DEF_MAXMAGICTYPE; i++) {
				*cp = m_pClientList[iToH]->m_cMagicMastery[i];
				cp++;
			}
			for (i = 0; i < DEF_MAXSKILLTYPE; i++) {
				*cp = m_pClientList[iToH]->m_cSkillMastery[i];
				cp++;
			}
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6 + DEF_MAXMAGICTYPE + DEF_MAXSKILLTYPE);
		}
			break;
		case DEF_NOTIFY_SETTING_SUCCESS:
		case DEF_NOTIFY_LEVELUP:
			ip = (int *) cp;
			*ip = m_pClientList[iToH]->m_iLevel;
			cp += 4;
			ip = (int *) cp;
			*ip = m_pClientList[iToH]->m_iStr;
			cp += 4;
			ip = (int *) cp;
			*ip = m_pClientList[iToH]->m_iVit;
			cp += 4;
			ip = (int *) cp;
			*ip = m_pClientList[iToH]->m_iDex;
			cp += 4;
			ip = (int *) cp;
			*ip = m_pClientList[iToH]->m_iInt;
			cp += 4;
			ip = (int *) cp;
			*ip = m_pClientList[iToH]->m_iMag;
			cp += 4;
			ip = (int *) cp;
			*ip = m_pClientList[iToH]->m_iCharisma;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 34);
			break;
			/*
		case DEF_NOTIFY_LEVELUP:
			ip  = (int *)cp;
			 *ip = m_pClientList[iToH]->m_iLevel;
			cp += 4;
			ip   = (int *)cp;
			 *ip  = m_pClientList[iToH]->m_iStr;
			cp  += 4;
			ip   = (int *)cp;
			 *ip  = m_pClientList[iToH]->m_iDex;
			cp  += 4;
			ip   = (int *)cp;
			 *ip  = m_pClientList[iToH]->m_iInt;
			cp  += 4;
			ip   = (int *)cp;
			 *ip  = m_pClientList[iToH]->m_iMag;
			cp  += 4;
			ip   = (int *)cp;
			 *ip  = m_pClientList[iToH]->m_iCharisma;
			cp  += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 34);
			break;
			 */
		case DEF_NOTIFY_QUERY_DISMISSGUILDREQPERMISSION:
		case DEF_NOTIFY_QUERY_JOINGUILDREQPERMISSION:
		case DEF_NOTIFY_CANNOTJOINMOREGUILDSMAN:
			memcpy(cp, m_pClientList[iFromH]->m_cCharName, 10);
			cp += 10;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 16);
			break;
		case DEF_COMMONTYPE_JOINGUILDAPPROVE:
			if (m_pClientList[iFromH] != 0)
				memcpy(cp, m_pClientList[iFromH]->m_cGuildName, 20);
			else memcpy(cp, "?", 1);
			cp += 20;
			sp = (short *) cp;
			*sp = DEF_GUILDSTARTRANK;
			cp += 2;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 28);
			break;
		case DEF_COMMONTYPE_JOINGUILDREJECT:
		case DEF_COMMONTYPE_DISMISSGUILDAPPROVE:
		case DEF_COMMONTYPE_DISMISSGUILDREJECT:
			if (m_pClientList[iFromH] != 0)
				memcpy(cp, m_pClientList[iFromH]->m_cGuildName, 20);
			else memcpy(cp, "?", 1);
			cp += 20;
			sp = (short *) cp;
			*sp = DEF_GUILDSTARTRANK;
			cp += 2;
			memcpy(cp, m_pClientList[iToH]->m_cLocation, 10);
			cp += 10;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 38);
			break;
		case DEF_NOTIFY_GUILDDISBANDED:
			memcpy(cp, pString, 20);
			cp += 20;
			memcpy(cp, m_pClientList[iToH]->m_cLocation, 10);
			cp += 10;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 36);
			break;
		case DEF_NOTIFY_FIGHTZONERESERVE:
			ip = (int *) cp;
			*ip = (int) sV1;
			cp += 4;
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 10);
			break;
		case DEF_NOTIFY_NOGUILDMASTERLEVEL:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
		case DEF_NOTIFY_CANNOTBANGUILDMAN:
			iRet = m_pClientList[iToH]->m_pXSock->iSendMsg(cData, 6);
			break;
	}
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			//DeleteClient(iToH, true, true);
			return;
	}
}

void CGame::JoinGuildApproveHandler(int iClientH, char * pName) {
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, pName, 10) == 0)) {
			if (memcmp(m_pClientList[i]->m_cLocation, m_pClientList[iClientH]->m_cLocation, 10) != 0) return;
			std::memset(m_pClientList[i]->m_cGuildName, 0, sizeof(m_pClientList[i]->m_cGuildName));
			strcpy(m_pClientList[i]->m_cGuildName, m_pClientList[iClientH]->m_cGuildName);
			m_pClientList[i]->m_iGuildGUID = m_pClientList[iClientH]->m_iGuildGUID;
			std::memset(m_pClientList[i]->m_cLocation, 0, sizeof(m_pClientList[i]->m_cLocation));
			strcpy(m_pClientList[i]->m_cLocation, m_pClientList[iClientH]->m_cLocation);
			m_pClientList[i]->m_iGuildRank = DEF_GUILDSTARTRANK;
			SendNotifyMsg(iClientH, i, DEF_COMMONTYPE_JOINGUILDAPPROVE, 0, 0, 0, 0);
			SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			SendGuildMsg(i, DEF_NOTIFY_NEWGUILDSMAN, 0, 0, 0);
			bSendMsgToLS(MSGID_REQUEST_UPDATEGUILDINFO_NEWGUILDSMAN, i);
			return;
		}
}

void CGame::JoinGuildRejectHandler(int iClientH, char * pName) {
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, pName, 10) == 0)) {
			SendNotifyMsg(iClientH, i, DEF_COMMONTYPE_JOINGUILDREJECT, 0, 0, 0, 0);
			return;
		}
}

void CGame::DismissGuildApproveHandler(int iClientH, char * pName) {
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, pName, 10) == 0)) {
			bSendMsgToLS(MSGID_REQUEST_UPDATEGUILDINFO_DELGUILDSMAN, i);
			//_bItemLog(DEF_ITEMLOG_BANGUILD,i,(char *)0,0) ;
			SendGuildMsg(i, DEF_NOTIFY_DISMISSGUILDSMAN, 0, 0, 0);
			std::memset(m_pClientList[i]->m_cGuildName, 0, sizeof(m_pClientList[i]->m_cGuildName));
			strcpy(m_pClientList[i]->m_cGuildName, "NONE");
			m_pClientList[i]->m_iGuildRank = -1;
			m_pClientList[i]->m_iGuildGUID = -1;
			SendNotifyMsg(iClientH, i, DEF_COMMONTYPE_DISMISSGUILDAPPROVE, 0, 0, 0, 0);
			SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			return;
		}
}

void CGame::DismissGuildRejectHandler(int iClientH, char * pName) {
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, pName, 10) == 0)) {
			SendNotifyMsg(iClientH, i, DEF_COMMONTYPE_DISMISSGUILDREJECT, 0, 0, 0, 0);
			return;
		}
}

uint32_t CGame::dwGetItemCount(int iClientH, const char * pName) {
	int i;
	char cTmpName[21];
	if (m_pClientList[iClientH] == 0) return 0;
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, pName);
	for (i = 0; i < DEF_MAXITEMS; i++)
		if ((m_pClientList[iClientH]->m_pItemList[i] != 0) && (memcmp(m_pClientList[iClientH]->m_pItemList[i]->m_cName, cTmpName, 20) == 0)) {
			return m_pClientList[iClientH]->m_pItemList[i]->m_dwCount;
		}
	return 0;
}

int CGame::SetItemCount(int iClientH, const char * pItemName, uint32_t dwCount) {
	int i;
	char cTmpName[21];
	uint16_t wWeight;
	if (m_pClientList[iClientH] == 0) return -1;
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, pItemName);
	for (i = 0; i < DEF_MAXITEMS; i++)
		if ((m_pClientList[iClientH]->m_pItemList[i] != 0) && (memcmp(m_pClientList[iClientH]->m_pItemList[i]->m_cName, cTmpName, 20) == 0)) {
			wWeight = iGetItemWeight(m_pClientList[iClientH]->m_pItemList[i], 1); // m_pClientList[iClientH]->m_pItemList[i]->m_wWeight;
			if (dwCount == 0) {
				ItemDepleteHandler(iClientH, i, false, true);
			} else {
				m_pClientList[iClientH]->m_pItemList[i]->m_dwCount = dwCount;
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_SETITEMCOUNT, i, dwCount, (char) true, 0);
			}
			return wWeight;
		}
	return -1;
}

int CGame::SetItemCount(int iClientH, int iItemIndex, uint32_t dwCount) {
	uint16_t wWeight;
	if (m_pClientList[iClientH] == 0) return -1;
	if (m_pClientList[iClientH]->m_pItemList[iItemIndex] == 0) return -1;
	wWeight = iGetItemWeight(m_pClientList[iClientH]->m_pItemList[iItemIndex], 1); //m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wWeight;
	if (dwCount == 0) {
		ItemDepleteHandler(iClientH, iItemIndex, false, true);
	} else {
		m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwCount = dwCount;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SETITEMCOUNT, iItemIndex, dwCount, (char) true, 0);
	}
	return wWeight;
}

void CGame::ClientKilledHandler(int iClientH, int iAttackerH, char cAttackerType, short sDamage) {
	char cAttackerName[21], cEKMsg[1000];
	short sAttackerWeapon;
	int i;
	int iExH;
	bool bIsSAattacked = false;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	if (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "fight", 5) == 0) {
		m_pClientList[iClientH]->m_dwFightzoneDeadTime = timeGetTime();
		wsprintf(G_cTxt, "Fightzone Dead Time: %d", m_pClientList[iClientH]->m_dwFightzoneDeadTime);
		PutLogList(G_cTxt);
	}
	m_pClientList[iClientH]->m_bIsKilled = true;
	m_pClientList[iClientH]->m_iHP = 0;
	if (m_pClientList[iClientH]->m_bIsExchangeMode == true) {
		iExH = m_pClientList[iClientH]->m_iExchangeH;
		_ClearExchangeStatus(iExH);
		_ClearExchangeStatus(iClientH);
	}
	RemoveFromTarget(iClientH, DEF_OWNERTYPE_PLAYER);
	std::memset(cAttackerName, 0, sizeof(cAttackerName));
	switch (cAttackerType) {
		case DEF_OWNERTYPE_PLAYER_INDIRECT:
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[iAttackerH] != 0)
				memcpy(cAttackerName, m_pClientList[iAttackerH]->m_cCharName, 10);
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[iAttackerH] != 0)
#ifdef DEF_LOCALNPCNAME
				wsprintf(cAttackerName, "NPCNPCNPC@%d", m_pNpcList[iAttackerH]->m_sType);
#else
				memcpy(cAttackerName, m_pNpcList[iAttackerH]->m_cNpcName, 20);
#endif
			break;
		default:
			break;
	}
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_KILLED, 0, 0, 0, cAttackerName);
	if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
		sAttackerWeapon = ((m_pClientList[iAttackerH]->m_sAppr2 & 0x0FF0) >> 4);
	} else sAttackerWeapon = 1;
	SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDYING, sDamage, sAttackerWeapon, 0);
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->ClearOwner(12, iClientH, DEF_OWNERTYPE_PLAYER, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetDeadOwner(iClientH, DEF_OWNERTYPE_PLAYER, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cType == DEF_MAPTYPE_NOPENALTY_NOREWARD) return;
	if ((m_pMapList[m_pClientList[iClientH]->m_cMapIndex] != 0) &&
			  (m_bIsHeldenianMode == true) &&
			  (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsHeldenianMap == true)) {
		if (m_pClientList[iClientH]->m_cSide == 1) {
			m_iHeldenianAresdenDead++;
		} else if (m_pClientList[iClientH]->m_cSide == 2) {
			m_iHeldenianElvineDead++;
		}
		UpdateHeldenianStatus();
	}
	if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
		// v1.432
		switch (m_pClientList[iAttackerH]->m_iSpecialAbilityType) {
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
				bIsSAattacked = true;
				break;
		}
		if (iAttackerH == iClientH) return;
		if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) {
			if (m_pClientList[iClientH]->m_iPKCount == 0) {
				ApplyPKpenalty(iAttackerH, iClientH);
			} else {
				PK_KillRewardHandler(iAttackerH, iClientH);
			}
		} else {
			if (m_pClientList[iClientH]->m_iGuildRank == -1) {
				if (memcmp(m_pClientList[iAttackerH]->m_cLocation, "NONE", 4) == 0) {
					if (m_pClientList[iClientH]->m_iPKCount == 0) {
						ApplyPKpenalty(iAttackerH, iClientH);
					} else {
					}
				} else {
					if (memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iAttackerH]->m_cLocation, 10) == 0) {
						if (m_pClientList[iClientH]->m_iPKCount == 0) {
							ApplyPKpenalty(iAttackerH, iClientH);
						} else {
							PK_KillRewardHandler(iAttackerH, iClientH);
						}
					} else {
						EnemyKillRewardHandler(iAttackerH, iClientH);
					}
				}
			} else {
				if (memcmp(m_pClientList[iAttackerH]->m_cLocation, "NONE", 4) == 0) {
					if (m_pClientList[iClientH]->m_iPKCount == 0) {
						ApplyPKpenalty(iAttackerH, iClientH);
					} else {
					}
				} else {
					if (memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iAttackerH]->m_cLocation, 10) == 0) {
						if (m_pClientList[iClientH]->m_iPKCount == 0) {
							ApplyPKpenalty(iAttackerH, iClientH);
						} else {
							PK_KillRewardHandler(iAttackerH, iClientH);
						}
					} else {
						EnemyKillRewardHandler(iAttackerH, iClientH);
					}
				}
			}
		}
		if (m_pClientList[iClientH]->m_iPKCount == 0) {
			// Innocent
			if (memcmp(m_pClientList[iAttackerH]->m_cLocation, "NONE", 4) == 0) {
				//m_pClientList[iClientH]->m_iExp -= iDice(1, 100);
				//if (m_pClientList[iClientH]->m_iExp < 0) m_pClientList[iClientH]->m_iExp = 0;
				//SendNotifyMsg(0, iClientH, DEF_NOTIFY_EXP, 0, 0, 0, 0);
			} else {
				if (memcmp(m_pClientList[iAttackerH]->m_cLocation, m_pClientList[iClientH]->m_cLocation, 10) == 0) {
					//m_pClientList[iClientH]->m_iExp -= iDice(1, 100);
					//if (m_pClientList[iClientH]->m_iExp < 0) m_pClientList[iClientH]->m_iExp = 0;
					//SendNotifyMsg(0, iClientH, DEF_NOTIFY_EXP, 0, 0, 0, 0);
				} else {
					ApplyCombatKilledPenalty(iClientH, 2, bIsSAattacked);
				}
			}
		} else if ((m_pClientList[iClientH]->m_iPKCount >= 1) && (m_pClientList[iClientH]->m_iPKCount <= 3)) {
			// Criminal
			ApplyCombatKilledPenalty(iClientH, 3, bIsSAattacked);
		} else if ((m_pClientList[iClientH]->m_iPKCount >= 4) && (m_pClientList[iClientH]->m_iPKCount <= 11)) {
			// Murderer
			ApplyCombatKilledPenalty(iClientH, 6, bIsSAattacked);
		} else if ((m_pClientList[iClientH]->m_iPKCount >= 12)) {
			// Slaughterer
			ApplyCombatKilledPenalty(iClientH, 12, bIsSAattacked);
		}
	} else if (cAttackerType == DEF_OWNERTYPE_NPC) {
		_bPKLog(DEF_PKLOG_BYNPC, iClientH, 0, cAttackerName);
		if (m_pClientList[iClientH]->m_iPKCount == 0) {
			// Innocent
			ApplyCombatKilledPenalty(iClientH, 1, bIsSAattacked);
		} else if ((m_pClientList[iClientH]->m_iPKCount >= 1) && (m_pClientList[iClientH]->m_iPKCount <= 3)) {
			// Criminal
			ApplyCombatKilledPenalty(iClientH, 3, bIsSAattacked);
		} else if ((m_pClientList[iClientH]->m_iPKCount >= 4) && (m_pClientList[iClientH]->m_iPKCount <= 11)) {
			// Murderer
			ApplyCombatKilledPenalty(iClientH, 6, bIsSAattacked);
		} else if ((m_pClientList[iClientH]->m_iPKCount >= 12)) {
			// Slaughterer
			ApplyCombatKilledPenalty(iClientH, 12, bIsSAattacked);
		}
		if (m_pNpcList[iAttackerH]->m_iGuildGUID != 0) {
			if (m_pNpcList[iAttackerH]->m_cSide != m_pClientList[iClientH]->m_cSide) {
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_iGuildGUID == m_pNpcList[iAttackerH]->m_iGuildGUID) &&
							  (m_pClientList[i]->m_iCrusadeDuty == 3)) {
						m_pClientList[i]->m_iConstructionPoint += (m_pClientList[iClientH]->m_iLevel / 2);
						if (m_pClientList[i]->m_iConstructionPoint > DEF_MAXCONSTRUCTIONPOINT)
							m_pClientList[i]->m_iConstructionPoint = DEF_MAXCONSTRUCTIONPOINT;
						//testcode
						wsprintf(G_cTxt, "Enemy Player Killed by Npc! Construction +%d", (m_pClientList[iClientH]->m_iLevel / 2));
						PutLogList(G_cTxt);
						SendNotifyMsg(0, i, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[i]->m_iConstructionPoint, m_pClientList[i]->m_iWarContribution, 0, 0);
						return;
					}
			}
		}
	} else if (cAttackerType == DEF_OWNERTYPE_PLAYER_INDIRECT) {
		_bPKLog(DEF_PKLOG_BYOTHER, iClientH, 0, 0);
		// m_pClientList[iClientH]->m_iExp -= iDice(1, 50);
		// if (m_pClientList[iClientH]->m_iExp < 0) m_pClientList[iClientH]->m_iExp = 0;
		// SendNotifyMsg(0, iClientH, DEF_NOTIFY_EXP, 0, 0, 0, 0);
	}
	//----------------------------EK Announcer-------------------------
	//---- Function: CGame::ClientKilledHandler                    ----
	//---- Description: Announces a message to alert all connected ----
	//---- clients an EK has taken place                           ----
	//---- Version: HBX 2.03 Build                                 ----
	//---- Date: November 07 2005                                  ----
	//---- By: Daxation                                            ----
	//---- Notes: Add char cEKMsg[1000]                            ----
	std::memset(cEKMsg, 0, sizeof(cEKMsg));
	//Multiple EK Messages
	//Note - Remove section '01' and replace with alternative code for a single message
	//Alternative code: wsprintf(cEKMsg, "%s killed %s", cAttackerName, m_pClientList[iClientH]->m_cCharName);
	// 01
	switch (iDice(1, 10))
		//You can add extra messages by creating a new case.
		//Remember to increase iDice
	{
		case 1: // To reverse the order the names appear in the message reverse the last 2 parameters
			wsprintf(cEKMsg, "%s whooped %s's ass!", cAttackerName, m_pClientList[iClientH]->m_cCharName);
			break;
		case 2:
			wsprintf(cEKMsg, "%s smashed %s's face into the ground!", cAttackerName, m_pClientList[iClientH]->m_cCharName);
			break;
		case 3:
			wsprintf(cEKMsg, "%s was sliced to pieces by %s", m_pClientList[iClientH]->m_cCharName, cAttackerName);
			break;
		case 4:
			wsprintf(cEKMsg, "%s says LAG LAG!! but gets PWNED by %s", m_pClientList[iClientH]->m_cCharName, cAttackerName);
			break;
		case 5:
			wsprintf(cEKMsg, "%s sent %s off too pie heaven!", cAttackerName, m_pClientList[iClientH]->m_cCharName);
			break;
		case 6:
			wsprintf(cEKMsg, "%s got beat by %s's ugly stick!", cAttackerName, m_pClientList[iClientH]->m_cCharName);
			break;
		case 7:
			wsprintf(cEKMsg, "%s OwneD! %s", cAttackerName, m_pClientList[iClientH]->m_cCharName);
			break;
		case 8:
			wsprintf(cEKMsg, "%s Sended %s To Revival Zone! Too Bad ;(", cAttackerName, m_pClientList[iClientH]->m_cCharName);
			break;
		case 9:
			wsprintf(cEKMsg, "%s says: I CAN OWN YOU! But gets OWNED by %s", m_pClientList[iClientH]->m_cCharName, cAttackerName);
			break;
		case 10:
			wsprintf(cEKMsg, "%s KilleD %s", cAttackerName, m_pClientList[iClientH]->m_cCharName);
			break;
	}
	// 01
	for (i = 1; i < DEF_MAXCLIENTS; i++) // Check all clients
	{
		if ((m_pClientList[i] != 0)) // Check if client is avtice
		{
			SendNotifyMsg(0, i, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cEKMsg); // Send message to client
			// Log EK
			wsprintf(G_cTxt, "%s killed %s", cAttackerName, m_pClientList[iClientH]->m_cCharName); // Log message
			PutLogFileList(G_cTxt); // Enter into logs
		}
	}
	//----                   End EK Announcer Code                 ----
}

void CGame::ReleaseItemHandler(int iClientH, short sItemIndex, bool bNotice) {
	char cHeroArmorType;
	short sTemp;
	int iTemp;
	if (m_pClientList[iClientH] == 0) return;
	if ((sItemIndex < 0) || (sItemIndex >= DEF_MAXITEMS)) return;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) return;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType != ItemType::equip) return;
	if (m_pClientList[iClientH]->m_bIsItemEquipped[sItemIndex] == false) return;
	cHeroArmorType = _cCheckHeroItemEquipped(iClientH);
	if (cHeroArmorType != 0) m_pClientList[iClientH]->m_cHeroArmourBonus = 0;
	ItemEquipPos cEquipPos = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos;
	if (cEquipPos == ItemEquipPos::rhand) {
		if (m_pClientList[iClientH]->m_pItemList[sItemIndex] != 0) {
			if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::resur_wand_ms20) || (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::resur_wand_ms10)) {
				m_pClientList[iClientH]->m_cMagicMastery[94] = false;
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_SUCCESS, 0, 0, 0, 0);
			}
		}
	}
	switch (cEquipPos) {
		case ItemEquipPos::rhand:
			sTemp = m_pClientList[iClientH]->m_sAppr2;
			sTemp = sTemp & 0xF00F;
			m_pClientList[iClientH]->m_sAppr2 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0x0FFFFFFF;
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			iTemp = m_pClientList[iClientH]->m_iStatus;
			iTemp = iTemp & 0xFFFFFFF0;
			m_pClientList[iClientH]->m_iStatus = iTemp;
			break;
		case ItemEquipPos::lhand:
			sTemp = m_pClientList[iClientH]->m_sAppr2;
			sTemp = sTemp & 0xFFF0;
			m_pClientList[iClientH]->m_sAppr2 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xF0FFFFFF;
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::twohand:
			sTemp = m_pClientList[iClientH]->m_sAppr2;
			sTemp = sTemp & 0xF00F;
			m_pClientList[iClientH]->m_sAppr2 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0x0FFFFFFF;
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::body:
			sTemp = m_pClientList[iClientH]->m_sAppr3;
			sTemp = sTemp & 0x0FFF;
			m_pClientList[iClientH]->m_sAppr3 = sTemp;
			sTemp = m_pClientList[iClientH]->m_sAppr4;
			sTemp = sTemp & 0xFF7F;
			m_pClientList[iClientH]->m_sAppr4 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFF0FFFFF;
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::back:
			sTemp = m_pClientList[iClientH]->m_sAppr4;
			sTemp = sTemp & 0xF0FF;
			m_pClientList[iClientH]->m_sAppr4 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFF0FFFF;
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::arms:
			sTemp = m_pClientList[iClientH]->m_sAppr3;
			sTemp = sTemp & 0xFFF0;
			m_pClientList[iClientH]->m_sAppr3 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFFF0FFF;
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::pants:
			sTemp = m_pClientList[iClientH]->m_sAppr3;
			sTemp = sTemp & 0xF0FF;
			m_pClientList[iClientH]->m_sAppr3 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFFFF0FF;
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::leggings:
			sTemp = m_pClientList[iClientH]->m_sAppr4;
			sTemp = sTemp & 0x0FFF;
			m_pClientList[iClientH]->m_sAppr4 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFFFFF0F;
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::head:
			sTemp = m_pClientList[iClientH]->m_sAppr3;
			sTemp = sTemp & 0xFF0F;
			m_pClientList[iClientH]->m_sAppr3 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFFFFFF0;
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		case ItemEquipPos::fullbody:
			sTemp = m_pClientList[iClientH]->m_sAppr3;
			sTemp = sTemp & 0x0FFF;
			m_pClientList[iClientH]->m_sAppr3 = sTemp;
			iTemp = m_pClientList[iClientH]->m_iApprColor;
			iTemp = iTemp & 0xFFF0FFFF;
			m_pClientList[iClientH]->m_iApprColor = iTemp;
			break;
		default: break;
	}
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType == ItemEffectType::attack_specablty) {
		m_pClientList[iClientH]->m_sAppr4 = m_pClientList[iClientH]->m_sAppr4 & 0xFFF3;
	}
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType == ItemEffectType::defense_specablty) {
		m_pClientList[iClientH]->m_sAppr4 = m_pClientList[iClientH]->m_sAppr4 & 0xFFFC;
	}
	m_pClientList[iClientH]->m_bIsItemEquipped[sItemIndex] = false;
	m_pClientList[iClientH]->m_sItemEquipmentStatus[cEquipPos] = -1;
	if (bNotice == true)
		SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
	CalcTotalItemEffect(iClientH, sItemIndex, true);
}

bool CGame::_bDecodeNpcConfigFileContents(char * pData, uint32_t dwMsgSize) {
	char * pContents, * token, cTxt[120];
	char seps[] = "= \t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int iNpcConfigListIndex = 0;
	CStrTok * pStrTok;
	pContents = new char[dwMsgSize + 1];
	ZeroMemory(pContents, dwMsgSize + 1);
	memcpy(pContents, pData, dwMsgSize);
	pStrTok = new CStrTok(pContents, seps);
	token = pStrTok->pGet();
	//token = strtok(pContents, seps);
	while (token != 0) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							// NPC
							if (strlen(token) > 20) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Too long Npc name.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							std::memset(m_pNpcConfigList[iNpcConfigListIndex]->m_cNpcName, 0, sizeof(m_pNpcConfigList[iNpcConfigListIndex]->m_cNpcName));
							memcpy(m_pNpcConfigList[iNpcConfigListIndex]->m_cNpcName, token, strlen(token));
							cReadModeB = 2;
							break;
						case 2:
							// m_sType
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_sType = (NpcType) atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							// m_iHitDice
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iHitDice = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							// m_iDefenseRatio
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iDefenseRatio = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							// m_iHitRatio
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iHitRatio = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							// m_iMinBravery
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iMinBravery = atoi(token);
							cReadModeB = 7;
							break;
						case 7:
							// m_iExpDiceMin
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iExpDiceMin = atoi(token);
							cReadModeB = 8;
							break;
						case 8:
							// m_iExpDiceMax
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iExpDiceMax = atoi(token);
							cReadModeB = 9;
							break;
						case 9:
							// m_iGoldDiceMin
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iGoldDiceMin = atoi(token);
							cReadModeB = 10;
							break;
						case 10:
							// m_iGoldDiceMax
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iGoldDiceMax = atoi(token);
							cReadModeB = 11;
							break;
						case 11:
							// m_cAttackDiceThrow
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_cAttackDiceThrow = atoi(token);
							cReadModeB = 12;
							break;
						case 12:
							// m_cAttackDiceRange
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_cAttackDiceRange = atoi(token);
							cReadModeB = 13;
							break;
						case 13:
							// m_cSize
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_cSize = atoi(token);
							cReadModeB = 14;
							break;
						case 14:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_cSide = atoi(token);
							cReadModeB = 15;
							break;
						case 15:
							// ActionLimit
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_cActionLimit = atoi(token);
							cReadModeB = 16;
							break;
						case 16:
							// Action Time
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_dwActionTime = atoi(token);
							cReadModeB = 17;
							break;
						case 17:
							// ResistMagic
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_cResistMagic = atoi(token);
							cReadModeB = 18;
							break;
						case 18:
							// cMagicLevel
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_cMagicLevel = atoi(token);
							cReadModeB = 19;
							break;
						case 19:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_cDayOfWeekLimit = atoi(token);
							cReadModeB = 20;
							break;
						case 20:
							// cChatMsgPresence
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_cChatMsgPresence = atoi(token);
							if (m_pNpcConfigList[iNpcConfigListIndex]->m_cChatMsgPresence == 1) {
							}
							cReadModeB = 21;
							break;
						case 21:
							// m_cTargetSearchRange
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_cTargetSearchRange = atoi(token);
							cReadModeB = 22;
							break;
						case 22:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_dwRegenTime = atoi(token);
							cReadModeB = 23;
							break;
						case 23:
							// Attribute
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_cAttribute = atoi(token);
							cReadModeB = 24;
							break;
						case 24:
							// Absorb Magic Damage
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iAbsDamage = atoi(token);
							cReadModeB = 25;
							break;
						case 25:
							// Maximum Mana Point
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iMaxMana = atoi(token);
							cReadModeB = 26;
							break;
						case 26:
							// MagicHitRatio
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iMagicHitRatio = atoi(token);
							cReadModeB = 27;
							break;
						case 27:
							// AttackRange
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! NPC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pNpcConfigList[iNpcConfigListIndex]->m_iAttackRange = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							iNpcConfigListIndex++;
							break;
					}
					break;
				case 2:
					m_iPlayerMaxLevel = atoi(token);
					cReadModeA = 0;
					cReadModeB = 0;
					break;
				default:
					break;
			}
		} else {
			if (memcmp(token, "Npc", 3) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
				m_pNpcConfigList[iNpcConfigListIndex] = new CNpc(" ");
			}
			if (memcmp(token, "world-server-max-level", 22) == 0) {
				cReadModeA = 2;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
		//token = strtok(0, seps);
	}
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		PutLogList("(!!!) CRITICAL ERROR! NPC configuration file contents error!");
		return false;
	}
	wsprintf(cTxt, "(!) NPC(Total:%d) configuration - success!", iNpcConfigListIndex);
	PutLogList(cTxt);
	return true;
}

bool CGame::_bInitNpcAttr(CNpc * pNpc, const char * pNpcName, short sClass, char cSA) {
	int i;
	int iTemp;
	char cTmpName[21];
	int sTemp;
	double dV1;
	double dV2;
	double dV3;
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, pNpcName);
	for (i = 0; i < DEF_MAXNPCTYPES; i++)
		if (m_pNpcConfigList[i] != 0) {
			if (memcmp(cTmpName, m_pNpcConfigList[i]->m_cNpcName, 20) == 0) {
				std::memset(pNpc->m_cNpcName, 0, sizeof(pNpc->m_cNpcName));
				memcpy(pNpc->m_cNpcName, m_pNpcConfigList[i]->m_cNpcName, 20);
				pNpc->m_sType = m_pNpcConfigList[i]->m_sType;
				if (m_pNpcConfigList[i]->m_iHitDice <= 5)
					pNpc->m_iHP = abs(iDice(m_pNpcConfigList[i]->m_iHitDice, 4) + m_pNpcConfigList[i]->m_iHitDice);
				else pNpc->m_iHP = abs((m_pNpcConfigList[i]->m_iHitDice * 4) + m_pNpcConfigList[i]->m_iHitDice + iDice(1, m_pNpcConfigList[i]->m_iHitDice));
				if (pNpc->m_iHP == 0) pNpc->m_iHP = 1;
				pNpc->m_iExpDiceMin = m_pNpcConfigList[i]->m_iExpDiceMin;
				pNpc->m_iExpDiceMax = m_pNpcConfigList[i]->m_iExpDiceMax; //can change exp rate here
				pNpc->m_iGoldDiceMin = m_pNpcConfigList[i]->m_iGoldDiceMin; //gold rate
				pNpc->m_iGoldDiceMax = m_pNpcConfigList[i]->m_iGoldDiceMax; //gold rate
				pNpc->m_iExp = (iDice(1, (m_pNpcConfigList[i]->m_iExpDiceMax - m_pNpcConfigList[i]->m_iExpDiceMin)) + m_pNpcConfigList[i]->m_iExpDiceMin);
				pNpc->m_iHitDice = m_pNpcConfigList[i]->m_iHitDice;
				pNpc->m_iDefenseRatio = m_pNpcConfigList[i]->m_iDefenseRatio;
				pNpc->m_iHitRatio = m_pNpcConfigList[i]->m_iHitRatio;
				pNpc->m_iMinBravery = m_pNpcConfigList[i]->m_iMinBravery;
				pNpc->m_cAttackDiceThrow = m_pNpcConfigList[i]->m_cAttackDiceThrow;
				pNpc->m_cAttackDiceRange = m_pNpcConfigList[i]->m_cAttackDiceRange;
				pNpc->m_cSize = m_pNpcConfigList[i]->m_cSize;
				pNpc->m_cSide = m_pNpcConfigList[i]->m_cSide;
				pNpc->m_cActionLimit = m_pNpcConfigList[i]->m_cActionLimit;
				pNpc->m_dwActionTime = m_pNpcConfigList[i]->m_dwActionTime;
				pNpc->m_dwRegenTime = m_pNpcConfigList[i]->m_dwRegenTime;
				pNpc->m_cResistMagic = m_pNpcConfigList[i]->m_cResistMagic;
				pNpc->m_cMagicLevel = m_pNpcConfigList[i]->m_cMagicLevel;
				pNpc->m_iMaxMana = m_pNpcConfigList[i]->m_iMaxMana; // v1.4
				pNpc->m_iMana = m_pNpcConfigList[i]->m_iMaxMana;
				pNpc->m_cChatMsgPresence = m_pNpcConfigList[i]->m_cChatMsgPresence;
				pNpc->m_cDayOfWeekLimit = m_pNpcConfigList[i]->m_cDayOfWeekLimit;
				pNpc->m_cTargetSearchRange = m_pNpcConfigList[i]->m_cTargetSearchRange;
				switch (sClass) {
					case 43:
					case 44:
					case 45:
					case 46:
					case 47:
						pNpc->m_iAttackStrategy = DEF_ATTACKAI_NORMAL;
						break;
					default:
						pNpc->m_iAttackStrategy = iDice(1, 10);
						break;
				}
				pNpc->m_iAILevel = iDice(1, 3);
				pNpc->m_iAbsDamage = m_pNpcConfigList[i]->m_iAbsDamage;
				pNpc->m_iMagicHitRatio = m_pNpcConfigList[i]->m_iMagicHitRatio;
				pNpc->m_iAttackRange = m_pNpcConfigList[i]->m_iAttackRange;
				pNpc->m_cSpecialAbility = cSA;
				pNpc->m_iBuildCount = m_pNpcConfigList[i]->m_iMinBravery;
				switch (pNpc->m_cSpecialAbility) {
					case 1:
						pNpc->m_iExp *= 1.25f;
						break;
					case 2:
						pNpc->m_iExp *= 1.3f;
						break;
					case 3: // Absorbing Physical Damage
						if (pNpc->m_iAbsDamage > 0) {
							pNpc->m_cSpecialAbility = 0;
							cSA = 0;
						} else {
							iTemp = 20 + iDice(1, 60);
							pNpc->m_iAbsDamage -= iTemp;
							if (pNpc->m_iAbsDamage < -90) pNpc->m_iAbsDamage = -90;
						}
						dV2 = (double) pNpc->m_iExp;
						dV3 = (double) abs(pNpc->m_iAbsDamage) / 100.0f;
						dV1 = dV2 * dV3;
						pNpc->m_iExp += (int) dV1;
						break;
					case 4: // Absorbing Magical Damage
						if (pNpc->m_iAbsDamage < 0) {
							pNpc->m_cSpecialAbility = 0;
							cSA = 0;
						} else {
							iTemp = 20 + iDice(1, 60);
							pNpc->m_iAbsDamage += iTemp;
							if (pNpc->m_iAbsDamage > 90) pNpc->m_iAbsDamage = 90;
						}
						dV2 = (double) pNpc->m_iExp;
						dV3 = (double) (pNpc->m_iAbsDamage) / 100.0f;
						dV1 = dV2 * dV3;
						pNpc->m_iExp += (int) dV1;
						break;
					case 5:
						pNpc->m_iExp *= 1.15f;
						break;
					case 6:
					case 7:
						pNpc->m_iExp *= 1.2f;
						break;
					case 8:
						pNpc->m_iExp *= 1.25f;
						break;
				}
				pNpc->m_iNoDieRemainExp = (pNpc->m_iExp) - (pNpc->m_iExp / 3);
				pNpc->m_iStatus = pNpc->m_iStatus & 0xFFFFF0FF;
				sTemp = cSA;
				sTemp = sTemp << 8;
				pNpc->m_iStatus = pNpc->m_iStatus | sTemp;
				pNpc->m_iStatus = pNpc->m_iStatus & 0xFFFFFFF0;
				pNpc->m_iStatus = pNpc->m_iStatus | (sClass);
				return true;
			}
		}
	return false;
}

/*********************************************************************************************************************
 **  int CGame::iDice(int iThrow, int iRange)																		**
 **  description			:: produces a random number between the throw and range										**
 **  last updated		:: November 20, 2004; 10:24 PM; Hypnotoad													**
 **	return value		:: int																						**
 **********************************************************************************************************************/
int CGame::iDice(int iThrow, int iRange) {
	int i;
	int iRet;
	if (iRange <= 0) return 0;
	iRet = 0;
	for (i = 1; i <= iThrow; i++) {
		iRet += (rand() % iRange) + 1;
	}
	return iRet;
}

/*
void CGame::OnStartGameSignal()
{
 int i;
 char * cp;
 HANDLE hFile;
 FILE * pFile;
 uint32_t  dwFileSize;
	for (i = 0; i < DEF_MAXMAPS; i++)
	if (m_pMapList[i] != 0)
		_bReadMapInfoFiles(i);
	// Crusade
	hFile = CreateFile("GameData\\OccupyFlag.txt", GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen("GameData\\OccupyFlag.txt", "rt");
	if (pFile == 0) {
		PutLogList("(!) Cannot open file: GameData\\OccupyFlag.txt");
	}
	else {
		PutLogList("(!) Occupy Flag save file contents decoding...");
		cp = new char[dwFileSize+2];
		ZeroMemory(cp, dwFileSize+2);
		fread(cp, dwFileSize, 1, pFile);
		_bDecodeOccupyFlagSaveFileContents(cp, dwFileSize);
		delete cp;
	}
	bReadCrusadeStructureConfigFile("Crusade.cfg");
	_LinkStrikePointMapIndex();
	bReadCrusadeGUIDFile("GameData\\CrusadeGUID.txt");
	PutLogList("");
	PutLogList("(!) Game Server Activated.");
}*/
void CGame::CalculateGuildEffect(int iVictimH, char cVictimType, short sAttackerH) {
	int ix;
	int iy;
	int iExp;
	short sOwnerH;
	char cOwnerType;
	return;
	if (m_pClientList[sAttackerH] == 0) return;
	switch (cVictimType) {
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[iVictimH] == 0) return;
			for (ix = m_pNpcList[iVictimH]->m_sX - 2; ix <= m_pNpcList[iVictimH]->m_sX + 2; ix++)
				for (iy = m_pNpcList[iVictimH]->m_sY - 2; iy <= m_pNpcList[iVictimH]->m_sY + 2; iy++) {
					m_pMapList[m_pNpcList[iVictimH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (sOwnerH != 0) && (sOwnerH != sAttackerH) &&
							  (memcmp(m_pClientList[sAttackerH]->m_cGuildName, m_pClientList[sOwnerH]->m_cGuildName, 20) == 0) &&
							  (m_pClientList[sAttackerH]->m_iLevel >= m_pClientList[sOwnerH]->m_iLevel)) {
						if (iDice(1, 3) == 2) {
							iExp = (m_pNpcList[iVictimH]->m_iExp / 3);
							if (m_pClientList[sAttackerH]->m_iLevel >= m_iPlayerMaxLevel) iExp = 0;
							if (iExp > 0) {
								m_pClientList[sOwnerH]->m_iExp += iExp;
								if (bCheckLimitedUser(sOwnerH) == false) {
									SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_EXP, 0, 0, 0, 0);
								}
								bCheckLevelUp(sOwnerH);
							}
						}
					}
				}
			break;
	}
}

void CGame::TimeManaPointsUp(int iClientH) {
	int iMaxMP;
	int iTotal;
	double dV1;
	double dV2;
	double dV3;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_iHungerStatus <= 0) return;
	if (m_pClientList[iClientH]->m_bSkillUsingStatus[19] == true) return;
	iMaxMP = (2 * (m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iAngelicMag)) + (2 * m_pClientList[iClientH]->m_iLevel) + ((m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iAngelicInt) / 2); // v1.4
	if (m_pClientList[iClientH]->m_iMP < iMaxMP) {
		iTotal = iDice(1, ((m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iAngelicMag)));
		if (m_pClientList[iClientH]->m_iAddMP != 0) {
			dV2 = (double) iTotal;
			dV3 = (double) m_pClientList[iClientH]->m_iAddMP;
			dV1 = (dV3 / 100.0f) * dV2;
			iTotal += (int) dV1;
		}
		m_pClientList[iClientH]->m_iMP += iTotal;
		if (m_pClientList[iClientH]->m_iMP > iMaxMP)
			m_pClientList[iClientH]->m_iMP = iMaxMP;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_MP, 0, 0, 0, 0);
	}
}
// 05/29/2004 - Hypnotoad - fixed infinite sp bug

void CGame::TimeStaminarPointsUp(int iClientH) {
	int iMaxSP;
	int iTotal = 0;
	double dV1;
	double dV2;
	double dV3;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_iHungerStatus <= 0) return;
	if (m_pClientList[iClientH]->m_bSkillUsingStatus[19] == true) return;
	iMaxSP = (2 * (m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iAngelicStr)) + (2 * m_pClientList[iClientH]->m_iLevel);
	if (m_pClientList[iClientH]->m_iSP < iMaxSP) {
		iTotal = iDice(1, (m_pClientList[iClientH]->m_iVit / 3));
		if (m_pClientList[iClientH]->m_iAddSP != 0) {
			dV2 = (double) iTotal;
			dV3 = (double) m_pClientList[iClientH]->m_iAddSP;
			dV1 = (dV3 / 100.0f) * dV2;
			iTotal += (int) dV1;
		}
		if (m_pClientList[iClientH]->m_iLevel <= 20) {
			iTotal += 15;
		} else if (m_pClientList[iClientH]->m_iLevel <= 40) {
			iTotal += 10;
		} else if (m_pClientList[iClientH]->m_iLevel <= 60) {
			iTotal += 5;
		}
		m_pClientList[iClientH]->m_iSP += iTotal;
		if (m_pClientList[iClientH]->m_iSP > iMaxSP)
			m_pClientList[iClientH]->m_iSP = iMaxSP;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SP, 0, 0, 0, 0);
	}
}

void CGame::DelayEventProcess() {
}

void CGame::SendGuildMsg(int iClientH, uint16_t wNotifyMsgType, short /*sV1*/, short /*sV2*/, char * pString) {
	char cData[500];
	uint32_t * dwp;
	uint16_t * wp;
	char * cp;
	int i;
	int iRet;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) &&
				  (memcmp(m_pClientList[i]->m_cGuildName, m_pClientList[iClientH]->m_cGuildName, 20) == 0)) {
			std::memset(cData, 0, sizeof(cData));
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = wNotifyMsgType;
			cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
			switch (wNotifyMsgType) {
				case DEF_NOTIFY_GUILDDISBANDED:
					if (i == iClientH) break;
					memcpy(cp, m_pClientList[iClientH]->m_cGuildName, 20);
					cp += 20;
					iRet = m_pClientList[i]->m_pXSock->iSendMsg(cData, 26);
					std::memset(m_pClientList[i]->m_cGuildName, 0, sizeof(m_pClientList[i]->m_cGuildName));
					strcpy(m_pClientList[i]->m_cGuildName, "NONE");
					m_pClientList[i]->m_iGuildRank = -1;
					m_pClientList[i]->m_iGuildGUID = -1;
					break;
				case DEF_NOTIFY_EVENTMSGSTRING:
					strcpy(cp, pString);
					cp += strlen(pString);
					iRet = m_pClientList[i]->m_pXSock->iSendMsg(cData, 6 + strlen(pString) + 1);
					break;
				case DEF_NOTIFY_NEWGUILDSMAN:
					memcpy(cp, m_pClientList[iClientH]->m_cCharName, 10);
					cp += 10;
					iRet = m_pClientList[i]->m_pXSock->iSendMsg(cData, 6 + 10 + 1);
					break;
				case DEF_NOTIFY_DISMISSGUILDSMAN:
					memcpy(cp, m_pClientList[iClientH]->m_cCharName, 10);
					cp += 10;
					iRet = m_pClientList[i]->m_pXSock->iSendMsg(cData, 6 + 10 + 1);
					break;
			}
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(i, true, true);
					return;
			}
		}
}

void CGame::GuildNotifyHandler(char * pData, uint32_t /*dwMsgSize*/) {
	char * cp, cCharName[11], cGuildName[21];
	std::memset(cCharName, 0, sizeof(cCharName));
	std::memset(cGuildName, 0, sizeof(cGuildName));
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cCharName, cp, 10);
	cp += 10;
	memcpy(cGuildName, cp, 20);
	cp += 20;
}

void CGame::ToggleCombatModeHandler(int iClientH) {
	short sAppr2;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	if (m_pClientList[iClientH]->m_bSkillUsingStatus[19] == true) return;
	sAppr2 = (short) ((m_pClientList[iClientH]->m_sAppr2 & 0xF000) >> 12);
	m_pClientList[iClientH]->m_bIsAttackModeChange = true; // v2.172
	if (sAppr2 == 0) {
		m_pClientList[iClientH]->m_sAppr2 = (0xF000 | m_pClientList[iClientH]->m_sAppr2);
	} else {
		m_pClientList[iClientH]->m_sAppr2 = (0x0FFF & m_pClientList[iClientH]->m_sAppr2);
	}
	SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
}
//  int CGame::iClientMotion_Magic_Handler(int iClientH, short sX, short sY, char cDir)
//  description			:: checks if player is casting magic
//  last updated		:: October 29, 2004; 6:51 PM; Hypnotoad
//	return value		:: int

int CGame::iClientMotion_Magic_Handler(int iClientH, short sX, short sY, char cDir) {
	char cData[100];
	uint32_t * dwp;
	uint16_t * wp;
	int iRet;
	if (m_pClientList[iClientH] == 0) return 0;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return 0;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return 0;
	if ((sX != m_pClientList[iClientH]->m_sX) || (sY != m_pClientList[iClientH]->m_sY)) return 2;
	int iStX;
	int iStY;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex] != 0) {
		iStX = m_pClientList[iClientH]->m_sX / 20;
		iStY = m_pClientList[iClientH]->m_sY / 20;
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iPlayerActivity++;
		switch (m_pClientList[iClientH]->m_cSide) {
			case 0: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iNeutralActivity++;
				break;
			case 1: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iAresdenActivity++;
				break;
			case 2: m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stTempSectorInfo[iStX][iStY].iElvineActivity++;
				break;
		}
	}
	ClearSkillUsingStatus(iClientH);
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->ClearOwner(0, iClientH, DEF_OWNERTYPE_PLAYER, sX, sY);
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetOwner(iClientH, DEF_OWNERTYPE_PLAYER, sX, sY);
	if ((m_pClientList[iClientH]->m_iStatus & 0x10) != 0) {
		SetInvisibilityFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
		bRemoveFromDelayEventList(iClientH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_INVISIBILITY);
		m_pClientList[ iClientH ]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = 0;
	}
	m_pClientList[iClientH]->m_cDir = cDir;
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_RESPONSE_MOTION;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = DEF_OBJECTMOTION_CONFIRM;
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			return 0;
	}
	return 1;
}
/*********************************************************************************************************************
 **  void CGame::PlayerMagicHandler(int iClientH, int dX, int dY, short sType, bool bItemEffect, int iV1)			**
 **  description			:: handles all magic related items/spells													**
 **  last updated		:: November 22, 2004; 5:45 PM; Hypnotoad													**
 **	return value		:: void																						**
 **  commentary			::	-	added 3.51 casting detection														**
 **							-	updated it so civilians can only cast certain spells on players and vice versa		**
 **							-	fixed bug causing spell to be cast when mana is below required amount				**
 **********************************************************************************************************************/
int _tmp_iMCProb[] = {0, 300, 250, 200, 150, 100, 80, 70, 60, 50, 40};
int _tmp_iMLevelPenalty[] = {0, 5, 5, 8, 8, 10, 14, 28, 32, 36, 40};

void CGame::PlayerMagicHandler(int iClientH, int dX, int dY, short sType, bool bItemEffect, int iV1) {
	short * sp, sX, sY, sOwnerH, sMagicCircle, rx, ry, sRemainItemSprite, sRemainItemSpriteFrame, sLevelMagic, sTemp;
	char * cp, cData[120], cDir, cOwnerType, cName[11], cItemName[21], cNpcWaypoint[11], cName_Master[11], cNpcName[21], cRemainItemColor, cScanMessage[256];
	double dV1;
	double dV2;
	double dV3;
	double dV4;
	int i;
	int iErr;
	int iRet;
	int ix;
	int iy;
	int iResult;
	int iDiceRes;
	int iNamingValue;
	int iFollowersNum;
	int iEraseReq;
	int iWhetherBonus;
	int tX;
	int tY;
	int iManaCost;
	int iMagicAttr;
	CItem * pItem;
	uint32_t * dwp, dwTime;
	uint16_t * wp, wWeaponType;
	short sEqStatus;
	dwTime = timeGetTime();
	m_pClientList[iClientH]->m_bMagicConfirm = true;
	m_pClientList[iClientH]->m_dwLastActionTime = m_pClientList[iClientH]->m_dwAFKCheckTime = timeGetTime();
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((dX < 0) || (dX >= m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_sSizeX) ||
			  (dY < 0) || (dY >= m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_sSizeY)) return;
	if (((dwTime - m_pClientList[iClientH]->m_dwRecentAttackTime) < 1000) && (bItemEffect == 0)) {
		wsprintf(G_cTxt, "3.51 Detection: (%s) Player: (%s) - Magic casting speed is too fast! Hack?", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
		PutHackLogFileList(G_cTxt);
		DeleteClient(iClientH, true, true);
		return;
	}
	m_pClientList[iClientH]->m_dwRecentAttackTime = dwTime;
	m_pClientList[iClientH]->m_dwLastActionTime = dwTime;
	if (m_pClientList[iClientH]->m_cMapIndex < 0) return;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex] == 0) return;
	if ((sType < 0) || (sType >= 100)) return;
	if (m_pMagicConfigList[sType] == 0) return;
	if ((bItemEffect == false) && (m_pClientList[iClientH]->m_cMagicMastery[sType] != 1)) return;
	if ((m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsAttackEnabled == false) && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) return;
	//if ((var_874 == true) && (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsHeldenianMap == true) && (m_pMagicConfigList[sType]->m_sType != 8)) return;
	if (((m_pClientList[iClientH]->m_iStatus & 0x100000) != 0) && (bItemEffect != true)) {
		SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, 0, -1, 0);
		return;
	}
	if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::rhand] != -1) {
		wWeaponType = ((m_pClientList[iClientH]->m_sAppr2 & 0x0FF0) >> 4);
		if ((wWeaponType >= 34) && (wWeaponType <= 39)) {
		} else return;
	}
	if ((m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::lhand] != -1) ||
			  (m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::twohand] != -1)) return;
	if ((m_pClientList[iClientH]->m_iSpellCount > 1) && (bItemEffect == false)) {
		wsprintf(G_cTxt, "TSearch Spell Hack: (%s) Player: (%s) - casting magic without precasting.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
		PutHackLogFileList(G_cTxt);
		DeleteClient(iClientH, true, true);
		return;
	}
	if (m_pClientList[iClientH]->m_bInhibition == true) {
		SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, 0, -1, 0);
		return;
	}
	/*if (((m_pClientList[iClientH]->m_iUninteruptibleCheck - (iGetMaxHP(iClientH)/10)) > (m_pClientList[iClientH]->m_iHP)) && (m_pClientList[iClientH]->m_bMagicItem == false)) {
		SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_MAGIC, 0,
			0, 0, 0, 0, 0, 0);
		return;
	}*/
	if (m_pMagicConfigList[sType]->m_sType == 32) { // Invisiblity
		sEqStatus = m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::rhand];
		if ((sEqStatus != -1) && (m_pClientList[iClientH]->m_pItemList[sEqStatus] != 0)) {
			if ((m_pClientList[iClientH]->m_pItemList[sEqStatus]->m_sIDnum == ItemId::resur_wand_ms20) || (m_pClientList[iClientH]->m_pItemList[sEqStatus]->m_sIDnum == ItemId::resur_wand_ms10)) {
				bItemEffect = true;
			}
		}
	}
	sX = m_pClientList[iClientH]->m_sX;
	sY = m_pClientList[iClientH]->m_sY;
	sMagicCircle = (sType / 10) + 1;
	if (m_pClientList[iClientH]->m_cSkillMastery[4] == 0)
		dV1 = 1.0f;
	else dV1 = (double) m_pClientList[iClientH]->m_cSkillMastery[4];
	if (bItemEffect == true) dV1 = (double) 100.0f;
	dV2 = (double) (dV1 / 100.0f);
	dV3 = (double) _tmp_iMCProb[sMagicCircle];
	dV1 = dV2 * dV3;
	iResult = (int) dV1;
	if ((m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iAngelicInt) > 50)
		iResult += ((m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iAngelicInt) - 50) / 2;
	sLevelMagic = (m_pClientList[iClientH]->m_iLevel / 10);
	if (sMagicCircle != sLevelMagic) {
		if (sMagicCircle > sLevelMagic) {
			dV1 = (double) (m_pClientList[iClientH]->m_iLevel - sLevelMagic * 10);
			dV2 = (double) abs(sMagicCircle - sLevelMagic) * _tmp_iMLevelPenalty[sMagicCircle];
			dV3 = (double) abs(sMagicCircle - sLevelMagic)*10;
			dV4 = (dV1 / dV3) * dV2;
			iResult -= abs(abs(sMagicCircle - sLevelMagic) * _tmp_iMLevelPenalty[sMagicCircle] - (int) dV4);
		} else {
			iResult += 5 * abs(sMagicCircle - sLevelMagic);
		}
	}
	switch (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cWhetherStatus) {
		case 0: break;
		case 1: iResult = iResult - (iResult / 24);
			break;
		case 2: iResult = iResult - (iResult / 12);
			break;
		case 3: iResult = iResult - (iResult / 5);
			break;
	}
	if (m_pClientList[iClientH]->m_iSpecialWeaponEffectType == 10) {
		dV1 = (double) iResult;
		dV2 = (double) (m_pClientList[iClientH]->m_iSpecialWeaponEffectValue * 3);
		dV3 = dV1 + dV2;
		iResult = (int) dV3;
	}
	if (iResult <= 0) iResult = 1;
	iWhetherBonus = iGetWhetherMagicBonusEffect(sType, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cWhetherStatus);
	iManaCost = m_pMagicConfigList[sType]->m_sValue1;
	if ((m_pClientList[iClientH]->m_bIsSafeAttackMode == true) &&
			  (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsFightZone == false)) {
		iManaCost += (iManaCost / 2) - (iManaCost / 10);
	}
	if (m_pClientList[iClientH]->m_iManaSaveRatio > 0) {
		dV1 = (double) m_pClientList[iClientH]->m_iManaSaveRatio;
		dV2 = (double) (dV1 / 100.0f);
		dV3 = (double) iManaCost;
		dV1 = dV2 * dV3;
		dV2 = dV3 - dV1;
		iManaCost = (int) dV2;
		if (iManaCost <= 0) iManaCost = 1;
	}
	wWeaponType = ((m_pClientList[iClientH]->m_sAppr2 & 0x0FF0) >> 4);
	if (wWeaponType == 34) {
		iManaCost += 20;
	}
	if (iResult < 100) {
		iDiceRes = iDice(1, 100);
		if (iResult < iDiceRes) {
			SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, 0, -1, 0);
			return;
		}
	}
	if (((m_pClientList[iClientH]->m_iHungerStatus <= 10) || (m_pClientList[iClientH]->m_iSP <= 0)) && (iDice(1, 1000) <= 100)) {
		SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, 0, -1, 0);
		return;
	}
	if (m_pClientList[iClientH]->m_iMP < iManaCost) {
		return;
	}
	iResult = m_pClientList[iClientH]->m_cSkillMastery[4];
	if ((m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iAngelicMag) > 50) iResult += ((m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iAngelicMag) - 50);
	sLevelMagic = (m_pClientList[iClientH]->m_iLevel / 10);
	if (sMagicCircle != sLevelMagic) {
		if (sMagicCircle > sLevelMagic) {
			dV1 = (double) (m_pClientList[iClientH]->m_iLevel - sLevelMagic * 10);
			dV2 = (double) abs(sMagicCircle - sLevelMagic) * _tmp_iMLevelPenalty[sMagicCircle];
			dV3 = (double) abs(sMagicCircle - sLevelMagic)*10;
			dV4 = (dV1 / dV3) * dV2;
			iResult -= abs(abs(sMagicCircle - sLevelMagic) * _tmp_iMLevelPenalty[sMagicCircle] - (int) dV4);
		} else {
			iResult += 5 * abs(sMagicCircle - sLevelMagic);
		}
	}
	iResult += m_pClientList[iClientH]->m_iAddAR;
	if (iResult <= 0) iResult = 1;
	if (sType >= 80) iResult += 10000;
	if (m_pMagicConfigList[sType]->m_sType == 28) {
		iResult += 10000;
	}
	if (m_pMagicConfigList[sType]->m_cCategory == 1) {
		if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->iGetAttribute(sX, sY, 0x00000005) != 0) return;
	}
	iMagicAttr = m_pMagicConfigList[sType]->m_iAttribute;
	if ((m_pClientList[iClientH]->m_iStatus & 0x10) != 0) {
		SetInvisibilityFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
		bRemoveFromDelayEventList(iClientH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_INVISIBILITY);
		m_pClientList[iClientH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = 0;
	}
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
	if ((m_bIsCrusadeMode == false) && (cOwnerType == DEF_OWNERTYPE_PLAYER)) {
		if ((m_pClientList[iClientH]->m_bIsPlayerCivil != true) && (m_pClientList[sOwnerH]->m_bIsPlayerCivil == true)) {
			if (m_pClientList[iClientH]->m_cSide != m_pClientList[sOwnerH]->m_cSide) return;
		} else if ((m_pClientList[iClientH]->m_bIsPlayerCivil == true) && (m_pClientList[sOwnerH]->m_bIsPlayerCivil == false)) {
			switch (m_pMagicConfigList[sType]->m_sType) {
				case 1: // DEF_MAGICTYPE_DAMAGE_SPOT
				case 4: // DEF_MAGICTYPE_SPDOWN_SPOT 4
				case 8: // DEF_MAGICTYPE_TELEPORT 8
				case 10: // DEF_MAGICTYPE_CREATE 10
				case 11: // DEF_MAGICTYPE_PROTECT 11
				case 12: // DEF_MAGICTYPE_HOLDOBJECT 12
				case 16: // DEF_MAGICTYPE_CONFUSE
				case 17: // DEF_MAGICTYPE_POISON
				case 24: // DEF_MAGICTYPE_RESURRECTION
					return;
			}
		}
	}
	if (m_pMagicConfigList[sType]->m_dwDelayTime == 0) {
		switch (m_pMagicConfigList[sType]->m_sType) {
			case DEF_MAGICTYPE_DAMAGE_SPOT:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
					Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, dX, dY);
				if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) && (m_pClientList[sOwnerH]->m_iHP > 0)) {
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
				}
				break;
			case DEF_MAGICTYPE_HPUP_SPOT:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				Effect_HpUp_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6);
				break;
			case DEF_MAGICTYPE_PURITYLIFE_SPOT:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				PURITYLIFE(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6);
				break;
			case DEF_MAGICTYPE_DAMAGE_AREA:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
					Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, dX, dY);
				if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) && (m_pClientList[sOwnerH]->m_iHP > 0)) {
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
				}
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) && (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
					}
				break;
			case DEF_MAGICTYPE_SPDOWN_SPOT:
				break;
			case DEF_MAGICTYPE_SPDOWN_AREA:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
					Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6);
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
					}
				break;
			case DEF_MAGICTYPE_POLYMORPH:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (1) { // bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
					switch (cOwnerType) {
						case DEF_OWNERTYPE_PLAYER:
							if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_POLYMORPH ] != 0) goto MAGIC_NOEFFECT;
							m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_POLYMORPH ] = (char) m_pMagicConfigList[sType]->m_sValue4;
							m_pClientList[sOwnerH]->m_sOriginalType = m_pClientList[sOwnerH]->m_sType;
							m_pClientList[sOwnerH]->m_sType = 18;
							SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
							break;
						case DEF_OWNERTYPE_NPC:
							if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_POLYMORPH ] != 0) goto MAGIC_NOEFFECT;
							m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_POLYMORPH ] = (char) m_pMagicConfigList[sType]->m_sValue4;
							m_pNpcList[sOwnerH]->m_sOriginalType = m_pNpcList[sOwnerH]->m_sType;
							m_pNpcList[sOwnerH]->m_sType = NpcType::zombie;
							SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
							break;
					}
					bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_POLYMORPH, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime * 1000),
							  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
					if (cOwnerType == DEF_OWNERTYPE_PLAYER)
						SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_POLYMORPH, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
				}
				break;
				// 05/20/2004 - Hypnotoad - Cancellation
			case DEF_MAGICTYPE_CANCELLATION:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) && (m_pClientList[sOwnerH]->m_iHP > 0) && (m_pClientList[sOwnerH]->m_iAdminUserLevel == 0)) {
					// Removes Invisibility Flag 0x0010
					SetInvisibilityFlag(sOwnerH, cOwnerType, false);
					// Removes Illusion Flag 0x01000000
					SetIllusionFlag(sOwnerH, cOwnerType, false);
					// Removes Defense Shield Flag 0x02000000
					// Removes Great Defense Shield Flag 0x02000000
					SetDefenseShieldFlag(sOwnerH, cOwnerType, false);
					// Removes Absolute Magic Protection Flag 0x04000000
					// Removes Protection From Magic Flag 0x04000000
					SetMagicProtectionFlag(sOwnerH, cOwnerType, false);
					// Removes Protection From Arrow Flag 0x08000000
					SetProtectionFromArrowFlag(sOwnerH, cOwnerType, false);
					// Removes Illusion Movement Flag 0x00200000
					SetIllusionMovementFlag(sOwnerH, cOwnerType, false);
					// Removes Berserk Flag 0x0020
					SetBerserkFlag(sOwnerH, cOwnerType, false);
					if (m_pClientList[iClientH]->m_bInhibition == true)
						bRemoveFromDelayEventList(sOwnerH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_INHIBITION);
					bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_INHIBITION, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime),
							  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
					if (m_pClientList[iClientH]->m_iStatus & 0x0010)
						bRemoveFromDelayEventList(sOwnerH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_INVISIBILITY);
					bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_INVISIBILITY, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime),
							  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
					if (m_pClientList[iClientH]->m_iStatus & 0x0020)
						bRemoveFromDelayEventList(sOwnerH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_BERSERK);
					bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_BERSERK, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime),
							  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
					if ((m_pClientList[iClientH]->m_iStatus & 0x08000000) || (m_pClientList[iClientH]->m_iStatus & 0x04000000) || (m_pClientList[iClientH]->m_iStatus & 0x02000000))
						bRemoveFromDelayEventList(sOwnerH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_PROTECT);
					bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_PROTECT, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime),
							  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
					if ((m_pClientList[iClientH]->m_iStatus & 0x01000000) || (m_pClientList[iClientH]->m_iStatus & 0x00200000))
						bRemoveFromDelayEventList(sOwnerH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_CONFUSE);
					bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_CONFUSE, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime),
							  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
					// Update Client
					SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
				}
				break;
			case DEF_MAGICTYPE_DAMAGE_AREA_NOSPOT_SPDOWN:
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, false, iMagicAttr);
							Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
						}
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
								Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, false, iMagicAttr);
								Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
							}
						}
					}
				break;
			case DEF_MAGICTYPE_DAMAGE_LINEAR:
				sX = m_pClientList[iClientH]->m_sX;
				sY = m_pClientList[iClientH]->m_sY;
				for (i = 2; i < 10; i++) {
					iErr = 0;
					m_Misc.GetPoint2(sX, sY, dX, dY, &tX, &tY, &iErr, i);
					// tx, ty
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					}
					// tx-1, ty
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX - 1, tY);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX - 1, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					}
					// tx+1, ty
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX + 1, tY);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX + 1, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					}
					// tx, ty-1
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY - 1);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY - 1);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					}
					// tx, ty+1
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY + 1);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY + 1);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					}
					if ((abs(tX - dX) <= 1) && (abs(tY - dY) <= 1)) break;
				}
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
					}
				// dX, dY
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
					Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr); // v1.41 false
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, dX, dY);
				if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
						  (m_pClientList[sOwnerH]->m_iHP > 0)) {
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr); // v1.41 false
				}
				break;
			case DEF_MAGICTYPE_ICE_LINEAR:
				sX = m_pClientList[iClientH]->m_sX;
				sY = m_pClientList[iClientH]->m_sY;
				for (i = 2; i < 10; i++) {
					iErr = 0;
					m_Misc.GetPoint2(sX, sY, dX, dY, &tX, &tY, &iErr, i);
					// tx, ty
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (m_pClientList[sOwnerH]->m_iHP < 0) goto MAGIC_NOEFFECT;
								if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
									}
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
									}
								}
								break;
						}
					}
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
											SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
										}
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										}
									}
									break;
							}
							//
						}
					}
					// tx-1, ty
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX - 1, tY);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
									}
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
									}
								}
								break;
						}
						//
					}
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX - 1, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
											SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
										}
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										}
									}
									break;
							}
							//
						}
					}
					// tx+1, ty
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX + 1, tY);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
									}
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
									}
								}
								break;
						}
						//
					}
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX + 1, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
											SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
										}
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										}
									}
									break;
							}
							//
						}
					}
					// tx, ty-1
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY - 1);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
									}
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
									}
								}
								break;
						}
						//
					}
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY - 1);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
											SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
										}
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										}
									}
									break;
							}
							//
						}
					}
					// tx, ty+1
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY + 1);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
									}
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
									}
								}
								break;
						}
						//
					}
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY + 1);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
											SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
										}
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										}
									}
									break;
							}
							//
						}
					}
					if ((abs(tX - dX) <= 1) && (abs(tY - dY) <= 1)) break;
				}
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
											SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
										}
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										}
									}
									break;
							}
							//
						}
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
								Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
								switch (cOwnerType) {
									case DEF_OWNERTYPE_PLAYER:
										if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
										if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
											if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
												m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
												SetIceFlag(sOwnerH, cOwnerType, true);
												bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
														  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
												SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
											}
										}
										break;
									case DEF_OWNERTYPE_NPC:
										if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
										if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
											if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
												m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
												SetIceFlag(sOwnerH, cOwnerType, true);
												bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
														  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
											}
										}
										break;
								}
								//
							}
						}
					}
				// dX, dY
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
					Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr); // v1.41 false
					switch (cOwnerType) {
						case DEF_OWNERTYPE_PLAYER:
							if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
								if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
									m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
									SetIceFlag(sOwnerH, cOwnerType, true);
									bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
											  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
									SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
								}
							}
							break;
						case DEF_OWNERTYPE_NPC:
							if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
								if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
									m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
									SetIceFlag(sOwnerH, cOwnerType, true);
									bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
											  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
								}
							}
							break;
					}
					//
				}
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, dX, dY);
				if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
						  (m_pClientList[sOwnerH]->m_iHP > 0)) {
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr); // v1.41 false
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
									}
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
									}
								}
								break;
						}
						//
					}
				}
				break;
			case DEF_MAGICTYPE_INHIBITION:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				switch (cOwnerType) {
					case DEF_OWNERTYPE_PLAYER:
						if ((m_pClientList[sOwnerH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] == 5) || (m_pClientList[sOwnerH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] == 2)) goto MAGIC_NOEFFECT; // juan - ic fix para que no pegue si tiene AMP o PFM .
						if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
						if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INHIBITION ] != 0) goto MAGIC_NOEFFECT;
						if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) goto MAGIC_NOEFFECT;
						//if (m_pClientList[sOwnerH]->m_iAdminUserLevel != 0) goto MAGIC_NOEFFECT;
						m_pClientList[sOwnerH]->m_bInhibition = true;
						bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_INHIBITION, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime * 1000),
								  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
						break;
				}
				break;
			case DEF_MAGICTYPE_TREMOR:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
					Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, dX, dY);
				if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
						  (m_pClientList[sOwnerH]->m_iHP > 0)) {
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
				}
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
					}
				break;
			case DEF_MAGICTYPE_DAMAGE_AREA_NOSPOT:
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
					}
				break;
			case DEF_MAGICTYPE_SPUP_AREA:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				Effect_SpUp_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6);
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						Effect_SpUp_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
					}
				break;
			case DEF_MAGICTYPE_DAMAGE_LINEAR_SPDOWN:
				sX = m_pClientList[iClientH]->m_sX;
				sY = m_pClientList[iClientH]->m_sY;
				for (i = 2; i < 10; i++) {
					iErr = 0;
					m_Misc.GetPoint2(sX, sY, dX, dY, &tX, &tY, &iErr, i);
					// tx, ty
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
						}
					}
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
							}
							//
						}
					}
					// tx-1, ty
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX - 1, tY);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
						}
						//
					}
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX - 1, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
							}
							//
						}
					}
					// tx+1, ty
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX + 1, tY);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
						}
						//
					}
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX + 1, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
							}
							//
						}
					}
					// tx, ty-1
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY - 1);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
						}
						//
					}
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY - 1);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
							}
							//
						}
					}
					// tx, ty+1
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY + 1);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, sX, sY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
						}
						//
					}
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY + 1);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
							}
							//
						}
					}
					if ((abs(tX - dX) <= 1) && (abs(tY - dY) <= 1)) break;
				}
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
										Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
									}
									break;
							}
							//
						}
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
								Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
								switch (cOwnerType) {
									case DEF_OWNERTYPE_PLAYER:
										if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
										if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
											Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
											Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
										}
										break;
									case DEF_OWNERTYPE_NPC:
										if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
										if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
											Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
											Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
										}
										break;
								}
								//
							}
						}
					}
				// dX, dY
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
					Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr); // v1.41 false
					switch (cOwnerType) {
						case DEF_OWNERTYPE_PLAYER:
							if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
								Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
								Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
							}
							break;
						case DEF_OWNERTYPE_NPC:
							if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
								Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
								Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
							}
							break;
					}
					//
				}
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, dX, dY);
				if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
						  (m_pClientList[sOwnerH]->m_iHP > 0)) {
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
						Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr); // v1.41 false
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
									Effect_SpDown_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
								}
								break;
						}
						//
					}
				}
				break;
			case DEF_MAGICTYPE_TELEPORT:
				//50Cent - Capture The Flag
				if (bCheckIfIsFlagCarrier(iClientH)) {
					ShowClientMsg(iClientH, "You can not use that magic being a flag carrier.");
					goto MAGIC_NOEFFECT;
				}
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				switch (m_pMagicConfigList[sType]->m_sValue4) {
					case 1:
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (sOwnerH == iClientH)) {
							if ((dwTime - m_pClientList[iClientH]->m_dwLogoutHackCheck) > 10000) {
								RequestTeleportHandler(iClientH, "1 ");
							} else {
								char cCannotRecall[256];
								wsprintf(cCannotRecall, "Wait 10 seconds after get DMG to Recall.");
								ShowClientMsg(iClientH, cCannotRecall);
								goto MAGIC_NOEFFECT;
							}
						}
						break;
				}
				break;
			case DEF_MAGICTYPE_SUMMON:
				if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsFightZone == true) return;
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if ((sOwnerH != 0) && (cOwnerType == DEF_OWNERTYPE_PLAYER)) {
					iFollowersNum = iGetFollowerNumber(sOwnerH, cOwnerType);
					if (iFollowersNum >= (m_pClientList[iClientH]->m_cSkillMastery[4] / 20)) break;
					iNamingValue = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->iGetEmptyNamingValue();
					if (iNamingValue == -1) {
					} else {
						std::memset(cName, 0, sizeof(cName));
						wsprintf(cName, "XX%d", iNamingValue);
						cName[0] = '_';
						cName[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
						std::memset(cNpcName, 0, sizeof(cNpcName));
						switch (iV1) {
							case 0:
								iResult = iDice(1, m_pClientList[iClientH]->m_cSkillMastery[4] / 10);
								if (iResult < m_pClientList[iClientH]->m_cSkillMastery[4] / 20)
									iResult = m_pClientList[iClientH]->m_cSkillMastery[4] / 20;
								switch (iResult) {
									case 1: strcpy(cNpcName, "Slime");
										break;
									case 2: strcpy(cNpcName, "Giant-Ant");
										break;
									case 3: strcpy(cNpcName, "Amphis");
										break;
									case 4: strcpy(cNpcName, "Orc");
										break;
									case 5: strcpy(cNpcName, "Skeleton");
										break;
									case 6: strcpy(cNpcName, "Clay-Golem");
										break;
									case 7: strcpy(cNpcName, "Stone-Golem");
										break;
									case 8: strcpy(cNpcName, "Orc-Mage");
										break;
									case 9: strcpy(cNpcName, "Hellbound");
										break;
									case 10:strcpy(cNpcName, "Cyclops");
										break;
								}
								break;
							case 1: strcpy(cNpcName, "Orc");
								break;
							case 2: strcpy(cNpcName, "Skeleton");
								break;
							case 3: strcpy(cNpcName, "Clay-Golem");
								break;
							case 4: strcpy(cNpcName, "Stone-Golem");
								break;
							case 5: strcpy(cNpcName, "Hellbound");
								break;
							case 6: strcpy(cNpcName, "Cyclops");
								break;
							case 7: strcpy(cNpcName, "Troll");
								break;
							case 8: strcpy(cNpcName, "Orge");
								break;
							case 9: strcpy(cNpcName, "Sor-Aresden");
								break;
							case 10: strcpy(cNpcName, "ATK-Elvine");
								break;
							case 11: strcpy(cNpcName, "Elf-Aresden");
								break;
							case 12: strcpy(cNpcName, "DSK-Elvine");
								break;
							case 13: strcpy(cNpcName, "HBT-Aresden");
								break;
							case 14: strcpy(cNpcName, "Bar-Elvine");
								break;
						}
						if (bCreateNewNpc(cNpcName, cName, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, 0, 0, NpcMoveType::random, &dX, &dY, cNpcWaypoint, 0, 0, m_pClientList[iClientH]->m_cSide, false, true) == false) {
							m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetNamingValueEmpty(iNamingValue);
						} else {
							std::memset(cName_Master, 0, sizeof(cName_Master));
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									memcpy(cName_Master, m_pClientList[sOwnerH]->m_cCharName, 10);
									break;
								case DEF_OWNERTYPE_NPC:
									memcpy(cName_Master, m_pNpcList[sOwnerH]->m_cName, 5);
									break;
							}
							bSetNpcFollowMode(cName, cName_Master, cOwnerType);
						}
					}
				}
				break;
			case DEF_MAGICTYPE_CREATE:
				if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bGetIsMoveAllowedTile(dX, dY) == false)
					goto MAGIC_NOEFFECT;
				pItem = new CItem;
				switch (m_pMagicConfigList[sType]->m_sValue4) {
					case 1:
						// Food
						if (iDice(1, 2) == 1)
							wsprintf(cItemName, "Meat");
						else wsprintf(cItemName, "Baguette");
						break;
				}
				_bInitItemAttr(pItem, cItemName);
				pItem->m_sTouchEffectType = DEF_ITET_ID;
				pItem->m_sTouchEffectValue1 = iDice(1, 100000);
				pItem->m_sTouchEffectValue2 = iDice(1, 100000);
				pItem->m_sTouchEffectValue3 = (short) timeGetTime();
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bSetItem(dX, dY, pItem);
				_bItemLog(DEF_ITEMLOG_DROP, iClientH, (int) - 1, pItem);
				SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
						  dX, dY, pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); // v1.4 color
				break;
			case DEF_MAGICTYPE_PROTECT:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				switch (cOwnerType) {
					case DEF_OWNERTYPE_PLAYER:
						if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
						if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] != 0) goto MAGIC_NOEFFECT;
						if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) goto MAGIC_NOEFFECT;
						m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] = (char) m_pMagicConfigList[sType]->m_sValue4;
						switch (m_pMagicConfigList[sType]->m_sValue4) {
							case 1:
								SetProtectionFromArrowFlag(sOwnerH, DEF_OWNERTYPE_PLAYER, true);
								break;
							case 2:
							case 5:
								SetMagicProtectionFlag(sOwnerH, DEF_OWNERTYPE_PLAYER, true);
								break;
							case 3:
							case 4:
								SetDefenseShieldFlag(sOwnerH, DEF_OWNERTYPE_PLAYER, true);
								break;
						}
						break;
					case DEF_OWNERTYPE_NPC:
						if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
						if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] != 0) goto MAGIC_NOEFFECT;
						if (m_pNpcList[sOwnerH]->m_cActionLimit != 0) goto MAGIC_NOEFFECT;
						m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] = (char) m_pMagicConfigList[sType]->m_sValue4;
						switch (m_pMagicConfigList[sType]->m_sValue4) {
							case 1:
								SetProtectionFromArrowFlag(sOwnerH, DEF_OWNERTYPE_NPC, true);
								break;
							case 2:
							case 5:
								SetMagicProtectionFlag(sOwnerH, DEF_OWNERTYPE_NPC, true);
								break;
							case 3:
							case 4:
								SetDefenseShieldFlag(sOwnerH, DEF_OWNERTYPE_NPC, true);
								break;
						}
						break;
				}
				bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_PROTECT, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime * 1000),
						  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
				if (cOwnerType == DEF_OWNERTYPE_PLAYER)
					SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_PROTECT, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
				break;
				/*					// Magictype:	Protection from Magic, Protection from Arrow, Defense Shield
						//				Absolue Magic Protection, Great Defense Shield
						case DEF_MAGICTYPE_PROTECT:
							// iClientH (the caster) gets the spell targets (sOwnerH) type (npc/pc) and coords (x,y)
							m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
							// switch cases for the owner type (DEF_OWNERTYPE_PLAYER, DEF_OWNERTYPE_NPC)
							switch (cOwnerType) {
							// if the owners is a player
							case DEF_OWNERTYPE_PLAYER:
								// DISABLED: if the caster side isnt the same as the targets side, no effect occurs
								// DISABLED: if (m_pClientList[iClientH]->m_cSide != m_pClientList[sOwnerH]->m_cSide) goto MAGIC_NOEFFECT;
								// if the player target doesnt exist no magic effect
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								// if the player target already has a protect magic on, no magic effect occurs
								if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] != false) goto MAGIC_NOEFFECT;
								// if the caster is neutral go to no magic effect
								if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) goto MAGIC_NOEFFECT;
								// switch cases for the effect4 of the spell
								switch (m_pMagicConfigList[sType]->m_sValue4){
									// Protection From Arrow
									case 1:
										// triggers the spell target's protection from arrow flag on
										SetProtectionFromArrowFlag(sOwnerH, DEF_OWNERTYPE_PLAYER, true);
										break; // end case 1
									// Protection From Magic
									// Absolue Magic Protection
									case 2:
									case 5:
										// triggers the spell target's protection from magic flag on
										SetMagicProtectionFlag(sOwnerH, DEF_OWNERTYPE_PLAYER, true);
										break; // end case 2, case 5
									// Defense Shield
									// Great Defense Shield
									case 3:
									case 4:
										// triggers the spells target's defense shield flag on
										SetDefenseShieldFlag(sOwnerH, DEF_OWNERTYPE_PLAYER, true);
										break; // end case 3, case 4
								} // end switch (m_pMagicConfigList[sType]->m_sValue4){
								// the target's magic effect is set to the effect4 value of the spell cast on him
								m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] = (char)m_pMagicConfigList[sType]->m_sValue4;
								break; // break; DEF_OWNERTYPE_PLAYER
							case DEF_OWNERTYPE_NPC:
								// if the npc target doesnt exist no magic effect
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								// if the npc target already has a protect magic on, no magic effect occurs
								if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] != 0) goto MAGIC_NOEFFECT;
								// if the npc's action limit is not 0, no magic effect occurs
								if (m_pNpcList[sOwnerH]->m_cActionLimit != 0) goto MAGIC_NOEFFECT;
								// switch cases for the effect4 of the spell
								switch (m_pMagicConfigList[sType]->m_sValue4){
									// Protection From Arrow
									case 1:
										// triggers the spell target's protection from arrow flag on
										SetProtectionFromArrowFlag(sOwnerH, DEF_OWNERTYPE_NPC, true);
										break; // end case 1
									// Protection From Magic
									// Absolue Magic Protection
									case 2:
									case 5:
										// triggers the spell target's protection from magic flag on
										SetMagicProtectionFlag(sOwnerH, DEF_OWNERTYPE_NPC, true);
										break; // end case 2, case 5
									// Defense Shield
									// Great Defense Shield
									case 3:
									case 4:
										// triggers the spells target's defense shield flag on
										SetDefenseShieldFlag(sOwnerH, DEF_OWNERTYPE_NPC, true);
										break; // end case 3, case 4
								} // end switch (m_pMagicConfigList[sType]->m_sValue4){
								// the npc's magic effect is set to the effect4 value of the spell cast on it
									m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] = (char)m_pMagicConfigList[sType]->m_sValue4;
								break;
							} // end switch (cOwnerType) {
							// the DEF_MAGICTYPE_PROTECT effect leaves after the magic effects "Last" time (in seconds)
							bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_PROTECT, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime*1000),
													 sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
							// if the owner is a player send a message
							if (cOwnerType == DEF_OWNERTYPE_PLAYER)
								SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_PROTECT, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
							break; // end case DEF_MAGICTYPE_PROTECT:*/
			case DEF_MAGICTYPE_SCAN:
				std::memset(cScanMessage, 0, sizeof(cScanMessage));
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
					switch (cOwnerType) {
						case DEF_OWNERTYPE_PLAYER:
							if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							wsprintf(cScanMessage, " Player: %s || Health: %d || Mana: %d || Stamina: %d || Criticals: %d", m_pClientList[sOwnerH]->m_cCharName, m_pClientList[sOwnerH]->m_iHP, m_pClientList[sOwnerH]->m_iMP, m_pClientList[sOwnerH]->m_iSP, m_pClientList[sOwnerH]->m_iSuperAttackLeft);
							//ShowClientMsg(iClientH, cScanMessage);
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cScanMessage);
							break;
						case DEF_OWNERTYPE_NPC:
							if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							wsprintf(cScanMessage, " Monster: %s || Health: %d || Mana: %d", m_pNpcList[sOwnerH]->m_cNpcName, m_pNpcList[sOwnerH]->m_iHP, m_pNpcList[sOwnerH]->m_iMana);
							//   ShowClientMsg(iClientH, cScanMessage);
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cScanMessage);
							break;
					}
					SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_MAGIC, m_pClientList[iClientH]->m_cMapIndex,
							  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, dX, dY, 10, 10);
				}
				break;
			case DEF_MAGICTYPE_HOLDOBJECT:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
					switch (cOwnerType) {
						case DEF_OWNERTYPE_PLAYER:
							if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) goto MAGIC_NOEFFECT;
							if (m_pClientList[sOwnerH]->m_iAddPR >= 500) goto MAGIC_NOEFFECT;
							if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) goto MAGIC_NOEFFECT;
							if (cOwnerType == DEF_OWNERTYPE_PLAYER) {
								if (m_pMapList[m_pClientList[sOwnerH]->m_cMapIndex]->iGetAttribute(sX, sY, 0x00000006) != 0) goto MAGIC_NOEFFECT;
								if (m_pMapList[m_pClientList[sOwnerH]->m_cMapIndex]->iGetAttribute(dX, dY, 0x00000006) != 0) goto MAGIC_NOEFFECT;
							}
							if (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "middleland") != 0 &&
									  m_bIsCrusadeMode == false &&
									  m_pClientList[iClientH]->m_cSide == m_pClientList[sOwnerH]->m_cSide)
								goto MAGIC_NOEFFECT;
							m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = (char) m_pMagicConfigList[sType]->m_sValue4;
							break;
						case DEF_OWNERTYPE_NPC:
							if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							if (m_pNpcList[sOwnerH]->m_cMagicLevel >= 6) goto MAGIC_NOEFFECT;
							if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) goto MAGIC_NOEFFECT;
							m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = (char) m_pMagicConfigList[sType]->m_sValue4;
							break;
					}
					bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_HOLDOBJECT, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime * 1000),
							  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
					if (cOwnerType == DEF_OWNERTYPE_PLAYER)
						SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_HOLDOBJECT, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
				}
				break;
			case DEF_MAGICTYPE_INVISIBILITY:
				//50Cent - Capture The flag
				if (bCheckIfIsFlagCarrier(iClientH)) {
					ShowClientMsg(iClientH, "You can not use that magic being a flag carrier.");
					goto MAGIC_NOEFFECT;
				}
				switch (m_pMagicConfigList[sType]->m_sValue4) {
					case 1:
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] != 0) goto MAGIC_NOEFFECT;
								if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) goto MAGIC_NOEFFECT;
								m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = (char) m_pMagicConfigList[sType]->m_sValue4;
								SetInvisibilityFlag(sOwnerH, cOwnerType, true);
								RemoveFromTarget(sOwnerH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_INVISIBILITY);
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] != 0) goto MAGIC_NOEFFECT;
								if (m_pNpcList[sOwnerH]->m_cActionLimit == 0) {
									m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = (char) m_pMagicConfigList[sType]->m_sValue4;
									SetInvisibilityFlag(sOwnerH, cOwnerType, true);
									RemoveFromTarget(sOwnerH, DEF_OWNERTYPE_NPC, DEF_MAGICTYPE_INVISIBILITY);
								}
								break;
						}
						bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_INVISIBILITY, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime * 1000),
								  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
						if (cOwnerType == DEF_OWNERTYPE_PLAYER)
							SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_INVISIBILITY, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
						break;
					case 2:
						if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) goto MAGIC_NOEFFECT;
						for (ix = dX - 8; ix <= dX + 8; ix++)
							for (iy = dY - 8; iy <= dY + 8; iy++) {
								m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
								if (sOwnerH != 0) {
									switch (cOwnerType) {
										case DEF_OWNERTYPE_PLAYER:
											if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
											if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] != 0) {
												m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = 0;
												SetInvisibilityFlag(sOwnerH, cOwnerType, false);
												bRemoveFromDelayEventList(sOwnerH, cOwnerType, DEF_MAGICTYPE_INVISIBILITY);
											}
											break;
										case DEF_OWNERTYPE_NPC:
											if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
											if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] != 0) {
												m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = 0;
												SetInvisibilityFlag(sOwnerH, cOwnerType, false);
												bRemoveFromDelayEventList(sOwnerH, cOwnerType, DEF_MAGICTYPE_INVISIBILITY);
											}
											break;
									}
								}
							}
						break;
				}
				break;
			case DEF_MAGICTYPE_CREATE_DYNAMIC:
				if (m_bIsCrusadeMode == false) {
					if (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "aresden") == 0) return;
					if (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "elvine") == 0) return;
					// v2.14
					if (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "aresden") == 0) return;
					if (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "elvine") == 0) return;
				}
				switch (m_pMagicConfigList[sType]->m_sValue10) {
					case DEF_DYNAMICOBJECT_PCLOUD_BEGIN:
					case DEF_DYNAMICOBJECT_FIRE:
					case DEF_DYNAMICOBJECT_SPIKE: // Spike
#ifdef DEF_TAIWANLOG
						short sTemp_X;
						short sTemp_Y;
						sTemp_X = m_pClientList[iClientH]->m_sX;
						sTemp_Y = m_pClientList[iClientH]->m_sY;
						m_pClientList[iClientH]->m_sX = dX;
						m_pClientList[iClientH]->m_sY = dY;
						_bItemLog(DEF_ITEMLOG_SPELLFIELD, iClientH, m_pMagicConfigList[sType]->m_cName, 0);
						m_pClientList[iClientH]->m_sX = sTemp_X;
						m_pClientList[iClientH]->m_sY = sTemp_Y;
#endif
						switch (m_pMagicConfigList[sType]->m_sValue11) {
							case 1:
								// wall - type
								cDir = m_Misc.cGetNextMoveDir(m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, dX, dY);
								switch (cDir) {
									case 1: rx = 1;
										ry = 0;
										break;
									case 2: rx = 1;
										ry = 1;
										break;
									case 3: rx = 0;
										ry = 1;
										break;
									case 4: rx = -1;
										ry = 1;
										break;
									case 5: rx = 1;
										ry = 0;
										break;
									case 6: rx = -1;
										ry = -1;
										break;
									case 7: rx = 0;
										ry = -1;
										break;
									case 8: rx = 1;
										ry = -1;
										break;
								}
								iAddDynamicObjectList(iClientH, DEF_OWNERTYPE_PLAYER_INDIRECT, m_pMagicConfigList[sType]->m_sValue10, m_pClientList[iClientH]->m_cMapIndex,
										  dX, dY, m_pMagicConfigList[sType]->m_dwLastTime * 1000);
								bAnalyzeCriminalAction(iClientH, dX, dY);
								for (i = 1; i <= m_pMagicConfigList[sType]->m_sValue12; i++) {
									iAddDynamicObjectList(iClientH, DEF_OWNERTYPE_PLAYER_INDIRECT, m_pMagicConfigList[sType]->m_sValue10, m_pClientList[iClientH]->m_cMapIndex,
											  dX + i*rx, dY + i*ry, m_pMagicConfigList[sType]->m_dwLastTime * 1000);
									bAnalyzeCriminalAction(iClientH, dX + i*rx, dY + i * ry);
									iAddDynamicObjectList(iClientH, DEF_OWNERTYPE_PLAYER_INDIRECT, m_pMagicConfigList[sType]->m_sValue10, m_pClientList[iClientH]->m_cMapIndex,
											  dX - i*rx, dY - i*ry, m_pMagicConfigList[sType]->m_dwLastTime * 1000);
									bAnalyzeCriminalAction(iClientH, dX - i*rx, dY - i * ry);
								}
								break;
							case 2:
								// Field - Type
								bool bFlag = false;
								int cx;
								int cy;
								for (ix = dX - m_pMagicConfigList[sType]->m_sValue12; ix <= dX + m_pMagicConfigList[sType]->m_sValue12; ix++)
									for (iy = dY - m_pMagicConfigList[sType]->m_sValue12; iy <= dY + m_pMagicConfigList[sType]->m_sValue12; iy++) {
										iAddDynamicObjectList(iClientH, DEF_OWNERTYPE_PLAYER_INDIRECT, m_pMagicConfigList[sType]->m_sValue10, m_pClientList[iClientH]->m_cMapIndex,
												  ix, iy, m_pMagicConfigList[sType]->m_dwLastTime * 1000, m_pMagicConfigList[sType]->m_sValue5);
										if (bAnalyzeCriminalAction(iClientH, ix, iy, true) == true) {
											bFlag = true;
											cx = ix;
											cy = iy;
										}
									}
								if (bFlag == true) bAnalyzeCriminalAction(iClientH, cx, cy);
								break;
						}
						//
						break;
					case DEF_DYNAMICOBJECT_ICESTORM:
						// Ice-Storm Dynamic Object
						iAddDynamicObjectList(iClientH, DEF_OWNERTYPE_PLAYER_INDIRECT, m_pMagicConfigList[sType]->m_sValue10, m_pClientList[iClientH]->m_cMapIndex,
								  dX, dY, m_pMagicConfigList[sType]->m_dwLastTime * 1000,
								  m_pClientList[iClientH]->m_cSkillMastery[4]);
						break;
					default:
						break;
				}
				break;
			case DEF_MAGICTYPE_POSSESSION:
				if (m_pClientList[iClientH]->m_cSide == 0) goto MAGIC_NOEFFECT;
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (sOwnerH != 0) break;
				pItem = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->pGetItem(dX, dY, &sRemainItemSprite, &sRemainItemSpriteFrame, &cRemainItemColor);
				if (pItem != 0) {
					if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
						_bItemLog(DEF_ITEMLOG_GET, iClientH, (int) - 1, pItem);
						dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
						*dwp = MSGID_NOTIFY;
						wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
						*wp = DEF_NOTIFY_ITEMOBTAINED;
						cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
						*cp = 1;
						cp++;
						memcpy(cp, pItem->m_cName, 20);
						cp += 20;
						dwp = (uint32_t *) cp;
						*dwp = pItem->m_dwCount;
						cp += 4;
						*cp = (char) pItem->m_cItemType;
						cp++;
						*cp = (char) pItem->m_cEquipPos;
						cp++;
						*cp = (char) 0;
						cp++;
						sp = (short *) cp;
						*sp = pItem->m_sLevelLimit;
						cp += 2;
						*cp = pItem->m_cGenderLimit;
						cp++;
						wp = (uint16_t *) cp;
						*wp = pItem->m_wCurLifeSpan;
						cp += 2;
						wp = (uint16_t *) cp;
						*wp = pItem->m_wWeight;
						cp += 2;
						sp = (short *) cp;
						*sp = pItem->m_sSprite;
						cp += 2;
						sp = (short *) cp;
						*sp = pItem->m_sSpriteFrame;
						cp += 2;
						*cp = pItem->m_cItemColor;
						cp++;
						*cp = (char) pItem->m_sItemSpecEffectValue2; // v1.41
						cp++;
						dwp = (uint32_t *) cp;
						*dwp = pItem->m_dwAttribute;
						cp += 4;
						/*
						 *cp = (char)(pItem->m_dwAttribute & 0x00000001);
						cp++;
						 */
						if (iEraseReq == 1) delete pItem;
						SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_SETITEM, m_pClientList[iClientH]->m_cMapIndex,
								  dX, dY, sRemainItemSprite, sRemainItemSpriteFrame, cRemainItemColor); // v1.4
						iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
						switch (iRet) {
							case DEF_XSOCKEVENT_QUENEFULL:
							case DEF_XSOCKEVENT_SOCKETERROR:
							case DEF_XSOCKEVENT_CRITICALERROR:
							case DEF_XSOCKEVENT_SOCKETCLOSED:
								DeleteClient(iClientH, true, true);
								return;
						}
					} else {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bSetItem(dX, dY, pItem);
						dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
						*dwp = MSGID_NOTIFY;
						wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
						*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
						iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
						switch (iRet) {
							case DEF_XSOCKEVENT_QUENEFULL:
							case DEF_XSOCKEVENT_SOCKETERROR:
							case DEF_XSOCKEVENT_CRITICALERROR:
							case DEF_XSOCKEVENT_SOCKETCLOSED:
								DeleteClient(iClientH, true, true);
								return;
						}
					}
				}
				//
				break;
			case DEF_MAGICTYPE_CONFUSE:
				// if the caster side is the same as the targets side, no effect occurs
				switch (m_pMagicConfigList[sType]->m_sValue4) {
					case 1:
					case 2: // Confusion, Mass Confusion
						for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
							for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
								m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
								if (cOwnerType == DEF_OWNERTYPE_PLAYER) {
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_CONFUSE ] != 0) break;
										m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_CONFUSE ] = (char) m_pMagicConfigList[sType]->m_sValue4;
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_CONFUSE, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_CONFUSE, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
									}
								}
							}
						break;
					case 3: // Ilusion, Mass-Ilusion
						for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
							for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
								m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
								if (cOwnerType == DEF_OWNERTYPE_PLAYER) {
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_CONFUSE ] != 0) break;
										m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_CONFUSE ] = (char) m_pMagicConfigList[sType]->m_sValue4;
										switch (m_pMagicConfigList[sType]->m_sValue4) {
											case 3:
												SetIllusionFlag(sOwnerH, DEF_OWNERTYPE_PLAYER, true);
												break;
										}
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_CONFUSE, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_CONFUSE, m_pMagicConfigList[sType]->m_sValue4, iClientH, 0);
									}
								}
							}
						break;
					case 4: // Ilusion Movement
						if (m_pClientList[iClientH]->m_cMagicEffectStatus[DEF_MAGICTYPE_INVISIBILITY] != 0) break;
						for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
							for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
								m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
								if (cOwnerType == DEF_OWNERTYPE_PLAYER) {
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
										if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_CONFUSE ] != 0) break;
										m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_CONFUSE ] = (char) m_pMagicConfigList[sType]->m_sValue4;
										switch (m_pMagicConfigList[sType]->m_sValue4) {
											case 4:
												//para que los del mismo pueblo no se den con illusion movement by KahBur
												if ((strcmp(m_pClientList[sOwnerH]->m_cLocation, m_pClientList[iClientH]->m_cLocation)) == 0) goto MAGIC_NOEFFECT;
												if ((m_pClientList[iClientH]->m_bIsPlayerCivil == false) && (m_pClientList[sOwnerH]->m_bIsPlayerCivil == true)) goto MAGIC_NOEFFECT;
												SetIllusionMovementFlag(sOwnerH, DEF_OWNERTYPE_PLAYER, true);
												break;
										}
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_CONFUSE, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_CONFUSE, m_pMagicConfigList[sType]->m_sValue4, iClientH, 0);
									}
								}
							}
						break;
				}
				break;
			case DEF_MAGICTYPE_POISON:
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (m_pMagicConfigList[sType]->m_sValue4 == 1) {
					switch (cOwnerType) {
						case DEF_OWNERTYPE_PLAYER:
							if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) goto MAGIC_NOEFFECT;
							bAnalyzeCriminalAction(iClientH, dX, dY);
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
								if (bCheckResistingPoisonSuccess(sOwnerH, cOwnerType) == false) {
									m_pClientList[sOwnerH]->m_bIsPoisoned = true;
									m_pClientList[sOwnerH]->m_iPoisonLevel = m_pMagicConfigList[sType]->m_sValue5;
									m_pClientList[sOwnerH]->m_dwPoisonTime = dwTime;
									// 05/06/2004 - Hypnotoad - poison aura appears when cast Poison
									SetPoisonFlag(sOwnerH, cOwnerType, true);
									SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_POISON, m_pMagicConfigList[sType]->m_sValue5, 0, 0);
#ifdef DEF_TAIWANLOG
									_bItemLog(DEF_ITEMLOG_POISONED, sOwnerH, (char *) 0, 0);
#endif
								}
							}
							break;
						case DEF_OWNERTYPE_NPC:
							if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							if (m_pNpcList[sOwnerH]->m_iHP > 0) goto MAGIC_NOEFFECT;
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
								if (bCheckResistingPoisonSuccess(sOwnerH, cOwnerType) == false) {
								}
							}
							break;
					}
				} else if (m_pMagicConfigList[sType]->m_sValue4 == 0) {
					switch (cOwnerType) {
						case DEF_OWNERTYPE_PLAYER:
							if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							if (m_pClientList[sOwnerH]->m_bIsPoisoned == true) {
								m_pClientList[sOwnerH]->m_bIsPoisoned = false;
								// 05/06/2004 - Hypnotoad - poison aura removed when cure cast
								SetPoisonFlag(sOwnerH, cOwnerType, false);
								SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_POISON, 0, 0, 0);
							}
							break;
						case DEF_OWNERTYPE_NPC:
							if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
							break;
					}
				}
				break;
			case DEF_MAGICTYPE_BERSERK:
				switch (m_pMagicConfigList[sType]->m_sValue4) {
					case 1:
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_BERSERK ] != 0) goto MAGIC_NOEFFECT;
								m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_BERSERK ] = (char) m_pMagicConfigList[sType]->m_sValue4;
								SetBerserkFlag(sOwnerH, cOwnerType, true);
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
								if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_BERSERK ] != 0) goto MAGIC_NOEFFECT;
								if (m_pNpcList[sOwnerH]->m_cActionLimit != 0) goto MAGIC_NOEFFECT;
								if (m_pClientList[iClientH]->m_cSide != m_pNpcList[sOwnerH]->m_cSide) goto MAGIC_NOEFFECT;
								m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_BERSERK ] = (char) m_pMagicConfigList[sType]->m_sValue4;
								SetBerserkFlag(sOwnerH, cOwnerType, true);
								break;
						}
						bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_BERSERK, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime * 1000),
								  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
						if (cOwnerType == DEF_OWNERTYPE_PLAYER)
							SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_BERSERK, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
						break;
				}
				break;
			case DEF_MAGICTYPE_DAMAGE_AREA_ARMOR_BREAK:
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							ArmorLifeDecrement(iClientH, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue10);
						}
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
								Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
								ArmorLifeDecrement(iClientH, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue10);
							}
						}
					}
				break;
				/*						// Resurrection Magic.
								case DEF_MAGICTYPE_RESURRECTION:
									// 10 Mins once
									if (m_pClientList[iClientH]->m_iSpecialAbilityTime != 0) goto MAGIC_NOEFFECT;
									m_pClientList[iClientH]->m_iSpecialAbilityTime = DEF_SPECABLTYTIMESEC/2;
									// Get the ID of the dead Player/NPC on coords dX, dY.
									m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, dX, dY);
									switch (cOwnerType) {
												// For Player.
										case DEF_OWNERTYPE_PLAYER:
											// The Player has to exist.
											if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
											// Resurrection is not for alive Players.
											if (m_pClientList[sOwnerH]->m_bIsKilled == false) goto MAGIC_NOEFFECT;
											// Set Deadflag to Alive.
											m_pClientList[sOwnerH]->m_bIsKilled = false;
											// Player's HP becomes half of the Max HP.
											m_pClientList[sOwnerH]->m_iHP = ((m_pClientList[sOwnerH]->m_iLevel * 2) + (m_pClientList[sOwnerH]->m_iVit * 3) + (m_pClientList[sOwnerH]->m_iStr / 2)) / 2;
											// Send new HP to Player.
											SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_HP, 0, 0, 0, 0);
											// Make Player stand up. (Currently, by a fake damage).
											m_pMapList[m_pClientList[sOwnerH]->m_cMapIndex]->ClearDeadOwner(dX, dY);
											m_pMapList[m_pClientList[sOwnerH]->m_cMapIndex]->SetOwner(sOwnerH, DEF_OWNERTYPE_PLAYER, dX, dY);
											SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, 0, 0, 0);
											SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_HP, 0, 0, 0, 0);
											break;
											// Resurrection is not for NPC's.
										case DEF_OWNERTYPE_NPC:
											goto MAGIC_NOEFFECT;
											break;
									}
									break;*/
			case DEF_MAGICTYPE_ICE:
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
							//Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
							Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
							switch (cOwnerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
											SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
										}
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sOwnerH] == 0) goto MAGIC_NOEFFECT;
									if ((m_pNpcList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
										if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
											m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
											SetIceFlag(sOwnerH, cOwnerType, true);
											bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
													  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										}
									}
									break;
							}
						}
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
								//Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
								Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
								if ((m_pClientList[sOwnerH]->m_iHP > 0) && (bCheckResistingIceSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)) {
									if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
										m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
										SetIceFlag(sOwnerH, cOwnerType, true);
										bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (m_pMagicConfigList[sType]->m_sValue10 * 1000),
												  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
									}
								}
							}
						}
					}
				break;
			default:
				break;
		}
	} else {
		// Resurrection wand(MS.10) or Resurrection wand(MS.20)
		if (m_pMagicConfigList[sType]->m_sType == DEF_MAGICTYPE_RESURRECTION) {
			//Check if player has resurrection wand
			if (m_pClientList[iClientH] != 0 && m_pClientList[iClientH]->m_iSpecialAbilityTime == 0 &&
					  m_pClientList[iClientH]->m_bIsSpecialAbilityEnabled == false) {
				m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->GetDeadOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (m_pClientList[sOwnerH] != 0) {
					// GM's can ressurect ne1, and players must be on same side to ressurect
					/*if ((m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::rhand]]->m_sIDnum != 865) ||
						(m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::rhand]]->m_sIDnum != 866)) {
						wsprintf(G_cTxt, "(!!!) Hack: Player(%s) cast resurrect without wand!", m_pClientList[iClientH]->m_cCharName);
						PutLogList(G_cTxt);
						DeleteClient(iClientH, true, true, true, true);
						return;
					}*/
					if ((m_pClientList[iClientH]->m_iAdminUserLevel < 1) &&
							  (m_pClientList[sOwnerH]->m_cSide != m_pClientList[iClientH]->m_cSide)) {
						return;
					}
					if (cOwnerType == DEF_OWNERTYPE_PLAYER && m_pClientList[sOwnerH] != 0 &&
							  m_pClientList[sOwnerH]->m_iHP <= 0) {
						m_pClientList[sOwnerH]->m_bIsBeingResurrected = true;
						SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_RESURRECTPLAYER, 0, 0, 0, 0);
						if (m_pClientList[iClientH]->m_iAdminUserLevel < 2) {
							m_pClientList[iClientH]->m_bIsSpecialAbilityEnabled = true;
							m_pClientList[iClientH]->m_dwSpecialAbilityStartTime = dwTime;
							m_pClientList[iClientH]->m_iSpecialAbilityLastSec = 0;
							m_pClientList[iClientH]->m_iSpecialAbilityTime = m_pMagicConfigList[sType]->m_dwDelayTime;
							sTemp = m_pClientList[iClientH]->m_sAppr4;
							sTemp = 0xFF0F & sTemp;
							sTemp = sTemp | 0x40;
							m_pClientList[iClientH]->m_sAppr4 = sTemp;
						}
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_SPECIALABILITYSTATUS, 1, m_pClientList[iClientH]->m_iSpecialAbilityType, m_pClientList[iClientH]->m_iSpecialAbilityLastSec, 0);
						SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
					}
				}
			}
		}
	}
MAGIC_NOEFFECT:
	;
	if (m_pClientList[iClientH] == 0) return;
	//Mana Slate
	if ((m_pClientList[iClientH]->m_iStatus & 0x800000) != 0) {
		iManaCost = 0;
	}
	m_pClientList[iClientH]->m_iMP -= iManaCost;
	if (m_pClientList[iClientH]->m_iMP < 0)
		m_pClientList[iClientH]->m_iMP = 0;
	CalculateSSN_SkillIndex(iClientH, 4, 1);
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_MP, 0, 0, 0, 0);
	SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_MAGIC, m_pClientList[iClientH]->m_cMapIndex,
			  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, dX, dY, (sType + 100), m_pClientList[iClientH]->m_sType);
}

void CGame::NpcMagicHandler(int iNpcH, short dX, short dY, short sType) {
	short sOwnerH;
	char cOwnerType;
	int i;
	int iErr;
	int ix;
	int iy;
	int sX;
	int sY;
	int tX;
	int tY;
	int iResult;
	int iWhetherBonus;
	int iMagicAttr;
	uint32_t dwTime = timeGetTime();
	if (m_pNpcList[iNpcH] == 0) return;
	if ((dX < 0) || (dX >= m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_sSizeX) ||
			  (dY < 0) || (dY >= m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_sSizeY)) return;
	if ((sType < 0) || (sType >= 100)) return;
	if (m_pMagicConfigList[sType] == 0) return;
	if (m_pMapList[ m_pNpcList[iNpcH]->m_cMapIndex ]->m_bIsAttackEnabled == false) return;
	iResult = m_pNpcList[iNpcH]->m_iMagicHitRatio;
	iWhetherBonus = iGetWhetherMagicBonusEffect(sType, m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_cWhetherStatus);
	iMagicAttr = m_pMagicConfigList[sType]->m_iAttribute;
	if (m_pMagicConfigList[sType]->m_dwDelayTime == 0) {
		switch (m_pMagicConfigList[sType]->m_sType) {
			case DEF_MAGICTYPE_INVISIBILITY:
				switch (m_pMagicConfigList[sType]->m_sValue4) {
					case 1:
						m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
						switch (cOwnerType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[sOwnerH] == 0) goto NMH_NOEFFECT;
								if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] != 0) goto NMH_NOEFFECT;
								m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = (char) m_pMagicConfigList[sType]->m_sValue4;
								SetInvisibilityFlag(sOwnerH, cOwnerType, true);
								RemoveFromTarget(sOwnerH, DEF_OWNERTYPE_PLAYER);
								break;
							case DEF_OWNERTYPE_NPC:
								if (m_pNpcList[sOwnerH] == 0) goto NMH_NOEFFECT;
								if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] != 0) goto NMH_NOEFFECT;
								m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = (char) m_pMagicConfigList[sType]->m_sValue4;
								SetInvisibilityFlag(sOwnerH, cOwnerType, true);
								RemoveFromTarget(sOwnerH, DEF_OWNERTYPE_NPC);
								break;
						}
						bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_INVISIBILITY, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime * 1000),
								  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
						if (cOwnerType == DEF_OWNERTYPE_PLAYER)
							SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_INVISIBILITY, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
						break;
					case 2:
						for (ix = dX - 8; ix <= dX + 8; ix++)
							for (iy = dY - 8; iy <= dY + 8; iy++) {
								m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
								if (sOwnerH != 0) {
									switch (cOwnerType) {
										case DEF_OWNERTYPE_PLAYER:
											if (m_pClientList[sOwnerH] == 0) goto NMH_NOEFFECT;
											if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] != 0) {
												if (m_pClientList[sOwnerH]->m_sType != 66) {
													m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = 0;
													SetInvisibilityFlag(sOwnerH, cOwnerType, false);
													bRemoveFromDelayEventList(sOwnerH, cOwnerType, DEF_MAGICTYPE_INVISIBILITY);
												}
											}
											break;
										case DEF_OWNERTYPE_NPC:
											if (m_pNpcList[sOwnerH] == 0) goto NMH_NOEFFECT;
											if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] != 0) {
												if (m_pClientList[sOwnerH]->m_sType != 66) {
													m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = 0;
													SetInvisibilityFlag(sOwnerH, cOwnerType, false);
													bRemoveFromDelayEventList(sOwnerH, cOwnerType, DEF_MAGICTYPE_INVISIBILITY);
												}
											}
											break;
									}
								}
							}
						break;
				}
				break;
			case DEF_MAGICTYPE_HOLDOBJECT:
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false) {
					switch (cOwnerType) {
						case DEF_OWNERTYPE_PLAYER:
							if (m_pClientList[sOwnerH] == 0) goto NMH_NOEFFECT;
							if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) goto NMH_NOEFFECT;
							if (m_pClientList[sOwnerH]->m_iAddPR >= 500) goto NMH_NOEFFECT;
							m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = (char) m_pMagicConfigList[sType]->m_sValue4;
							break;
						case DEF_OWNERTYPE_NPC:
							if (m_pNpcList[sOwnerH] == 0) goto NMH_NOEFFECT;
							if (m_pNpcList[sOwnerH]->m_cMagicLevel >= 6) goto NMH_NOEFFECT;
							if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) goto NMH_NOEFFECT;
							m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = (char) m_pMagicConfigList[sType]->m_sValue4;
							break;
					}
					bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_HOLDOBJECT, dwTime + (m_pMagicConfigList[sType]->m_dwLastTime * 1000),
							  sOwnerH, cOwnerType, 0, 0, 0, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
					if (cOwnerType == DEF_OWNERTYPE_PLAYER)
						SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_HOLDOBJECT, m_pMagicConfigList[sType]->m_sValue4, 0, 0);
				}
				break;
			case DEF_MAGICTYPE_DAMAGE_LINEAR:
				sX = m_pNpcList[iNpcH]->m_sX;
				sY = m_pNpcList[iNpcH]->m_sY;
				for (i = 2; i < 10; i++) {
					iErr = 0;
					m_Misc.GetPoint2(sX, sY, dX, dY, &tX, &tY, &iErr, i);
					// tx, ty
					m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY);
					if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					}
					// tx-1, ty
					m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX - 1, tY);
					if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX - 1, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					}
					// tx+1, ty
					m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX + 1, tY);
					if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX + 1, tY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					}
					// tx, ty-1
					m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY - 1);
					if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY - 1);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					}
					// tx, ty+1
					m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY + 1);
					if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY + 1);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
					}
					if ((abs(tX - dX) <= 1) && (abs(tY - dY) <= 1)) break;
				}
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
					}
				// dX, dY
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
					Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, false, iMagicAttr);
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, dX, dY);
				if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
						  (m_pClientList[sOwnerH]->m_iHP > 0)) {
					if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, false, iMagicAttr);
				}
				break;
			case DEF_MAGICTYPE_DAMAGE_SPOT:
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
					Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, dX, dY);
				if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
						  (m_pClientList[sOwnerH]->m_iHP > 0)) {
					if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
				}
				break;
			case DEF_MAGICTYPE_HPUP_SPOT:
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				Effect_HpUp_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6);
				break;
			case DEF_MAGICTYPE_PURITYLIFE_SPOT:
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				PURITYLIFE(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6);
				break;
			case DEF_MAGICTYPE_DAMAGE_AREA:
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
					Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, dX, dY);
				if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
						  (m_pClientList[sOwnerH]->m_iHP > 0)) {
					if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, true, iMagicAttr);
				}
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot_DamageMove(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot_DamageMove(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
					}
				break;
			case DEF_MAGICTYPE_DAMAGE_AREA_NOSPOT:
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot_DamageMove(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot_DamageMove(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, dX, dY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
					}
				break;
			case DEF_MAGICTYPE_SPDOWN_AREA:
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
					Effect_SpDown_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6);
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						if (bCheckResistingMagicSuccess(m_pNpcList[iNpcH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_SpDown_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
					}
				break;
			case DEF_MAGICTYPE_SPUP_AREA:
				m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
				Effect_SpUp_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6);
				for (iy = dY - m_pMagicConfigList[sType]->m_sValue3; iy <= dY + m_pMagicConfigList[sType]->m_sValue3; iy++)
					for (ix = dX - m_pMagicConfigList[sType]->m_sValue2; ix <= dX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
						m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
						Effect_SpUp_Spot(iNpcH, DEF_OWNERTYPE_NPC, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9);
					}
				break;
		}
	} else {
	}
NMH_NOEFFECT:
	;
	m_pNpcList[iNpcH]->m_iMana -= m_pMagicConfigList[sType]->m_sValue1;
	if (m_pNpcList[iNpcH]->m_iMana < 0)
		m_pNpcList[iNpcH]->m_iMana = 0;
	SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_MAGIC, m_pNpcList[iNpcH]->m_cMapIndex,
			  m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY, dX, dY, (sType + 100), (int) m_pNpcList[iNpcH]->m_sType);
}

void CGame::RequestTeleportHandler(int iClientH, const char * pData, const char * cMapName, int dX, int dY) {
	char * pBuffer, cTempMapName[21];
	uint32_t * dwp;
	uint16_t * wp;
	char * cp, cDestMapName[11], cDir, cMapIndex, cQuestRemain;
	short * sp, sX, sY, sSummonPoints;
	int * ip, i, iRet, iSize, iDestX, iDestY, iExH, iMapSide;
	bool bRet;
	bool bIsLockedMapNotify;
	SYSTEMTIME SysTime;
	m_pClientList[iClientH]->m_dwLastActionTime = m_pClientList[iClientH]->m_dwAFKCheckTime = timeGetTime();
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	if (m_pClientList[iClientH]->m_bIsOnWaitingProcess == true) return;
	if ((m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsRecallImpossible == true) && (m_pClientList[iClientH]->m_iAdminUserLevel == 0) &&
			  (m_pClientList[iClientH]->m_bIsKilled == false) && (m_pClientList[iClientH]->m_iHP > 0)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NORECALL, 0, 0, 0, 0);
		return;
	}
	if ((memcmp(m_pClientList[iClientH]->m_cLocation, "elvine", 6) == 0)
			  && (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall > 0)
			  && (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "aresden", 7) == 0)
			  && ((pData[0] == '1') || (pData[0] == '3'))
			  && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)
			  && (m_bIsCrusadeMode == false)) return;
	if ((memcmp(m_pClientList[iClientH]->m_cLocation, "aresden", 7) == 0)
			  && (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall > 0)
			  && (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "elvine", 6) == 0)
			  && ((pData[0] == '1') || (pData[0] == '3'))
			  && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)
			  && (m_bIsCrusadeMode == false)) return;
	bIsLockedMapNotify = false;
	if (m_pClientList[iClientH]->m_bIsExchangeMode == true) {
		iExH = m_pClientList[iClientH]->m_iExchangeH;
		_ClearExchangeStatus(iExH);
		_ClearExchangeStatus(iClientH);
	}
	if ((memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) && (pData[0] == '1'))
		return;
	RemoveFromTarget(iClientH, DEF_OWNERTYPE_PLAYER);
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->ClearOwner(13, iClientH, DEF_OWNERTYPE_PLAYER,
			  m_pClientList[iClientH]->m_sX,
			  m_pClientList[iClientH]->m_sY);
	SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_LOG, DEF_MSGTYPE_REJECT, 0, 0, 0);
	sX = m_pClientList[iClientH]->m_sX;
	sY = m_pClientList[iClientH]->m_sY;
	std::memset(cDestMapName, 0, sizeof(cDestMapName));
	bRet = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bSearchTeleportDest(sX, sY, cDestMapName, &iDestX, &iDestY, &cDir);
	// Crusade
	if ((strcmp(m_pClientList[iClientH]->m_cLockedMapName, "NONE") != 0) && (m_pClientList[iClientH]->m_iLockedMapTime > 0)) {
		iMapSide = iGetMapLocationSide(cDestMapName);
		if (iMapSide > 3) iMapSide -= 2; // New 18/05/2004
		if ((iMapSide != 0) && (m_pClientList[iClientH]->m_cSide == iMapSide)) {
		} else {
			iDestX = -1;
			iDestY = -1;
			bIsLockedMapNotify = true;
			std::memset(cDestMapName, 0, sizeof(cDestMapName));
			strcpy(cDestMapName, m_pClientList[iClientH]->m_cLockedMapName);
		}
	}
	if ((bRet == true) && (cMapName == 0)) {
		for (i = 0; i < DEF_MAXMAPS; i++)
			if (m_pMapList[i] != 0) {
				if (memcmp(m_pMapList[i]->m_cName, cDestMapName, 10) == 0) {
					m_pClientList[iClientH]->m_sX = iDestX;
					m_pClientList[iClientH]->m_sY = iDestY;
					m_pClientList[iClientH]->m_cDir = cDir;
					m_pClientList[iClientH]->m_cMapIndex = i;
					std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
					memcpy(m_pClientList[iClientH]->m_cMapName, m_pMapList[i]->m_cName, 10);
					goto RTH_NEXTSTEP;
				}
			}
		m_pClientList[iClientH]->m_sX = iDestX;
		m_pClientList[iClientH]->m_sY = iDestY;
		m_pClientList[iClientH]->m_cDir = cDir;
		std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
		memcpy(m_pClientList[iClientH]->m_cMapName, cDestMapName, 10);
		// New 18/05/2004
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_CONFUSE,
				  m_pClientList[iClientH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_CONFUSE ], 0, 0);
		SetSlateFlag(iClientH, DEF_NOTIFY_SLATECLEAR, false);
		bSendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATA_REPLY, iClientH, false);
		m_pClientList[iClientH]->m_bIsOnServerChange = true;
		m_pClientList[iClientH]->m_bIsOnWaitingProcess = true;
		return;
	} else {
		switch (pData[0]) {
			case '0':
				// Forced Recall.
				std::memset(cTempMapName, 0, sizeof(cTempMapName));
				if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) {
					strcpy(cTempMapName, "default");
				} else if (memcmp(m_pClientList[iClientH]->m_cLocation, "arehunter", 9) == 0) {
					strcpy(cTempMapName, "arefarm");
				} else if (memcmp(m_pClientList[iClientH]->m_cLocation, "elvhunter", 9) == 0) {
					strcpy(cTempMapName, "elvfarm");
				} else strcpy(cTempMapName, m_pClientList[iClientH]->m_cLocation);
				// Crusade
				if ((strcmp(m_pClientList[iClientH]->m_cLockedMapName, "NONE") != 0) && (m_pClientList[iClientH]->m_iLockedMapTime > 0)) {
					bIsLockedMapNotify = true;
					std::memset(cTempMapName, 0, sizeof(cTempMapName));
					strcpy(cTempMapName, m_pClientList[iClientH]->m_cLockedMapName);
				}
				for (i = 0; i < DEF_MAXMAPS; i++)
					if (m_pMapList[i] != 0) {
						if (memcmp(m_pMapList[i]->m_cName, cTempMapName, 10) == 0) {
							GetMapInitialPoint(i, &m_pClientList[iClientH]->m_sX, &m_pClientList[iClientH]->m_sY, m_pClientList[iClientH]->m_cLocation);
							m_pClientList[iClientH]->m_cMapIndex = i;
							std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
							memcpy(m_pClientList[iClientH]->m_cMapName, cTempMapName, 10);
							goto RTH_NEXTSTEP;
						}
					}
				m_pClientList[iClientH]->m_sX = -1;
				m_pClientList[iClientH]->m_sY = -1;
				std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
				memcpy(m_pClientList[iClientH]->m_cMapName, cTempMapName, 10);
				// New 18/05/2004
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_CONFUSE,
						  m_pClientList[iClientH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_CONFUSE ], 0, 0);
				SetSlateFlag(iClientH, DEF_NOTIFY_SLATECLEAR, false);
				bSendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATA_REPLY, iClientH, false);
				m_pClientList[iClientH]->m_bIsOnServerChange = true;
				m_pClientList[iClientH]->m_bIsOnWaitingProcess = true;
				return;
			case '1':
				// if (memcmp(m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_cName, "resurr", 6) == 0) return;
				std::memset(cTempMapName, 0, sizeof(cTempMapName));
				if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) {
					strcpy(cTempMapName, "default");
				} else {
					if (m_pClientList[iClientH]->m_iLevel > 80)
						if (memcmp(m_pClientList[iClientH]->m_cLocation, "are", 3) == 0)
							strcpy(cTempMapName, "aresden");
						else strcpy(cTempMapName, "elvine");
					else {
						if (memcmp(m_pClientList[iClientH]->m_cLocation, "are", 3) == 0)
							strcpy(cTempMapName, "aresden");
						else strcpy(cTempMapName, "elvine");
					}
				}
				// Crusade
				if ((strcmp(m_pClientList[iClientH]->m_cLockedMapName, "NONE") != 0) && (m_pClientList[iClientH]->m_iLockedMapTime > 0)) {
					bIsLockedMapNotify = true;
					std::memset(cTempMapName, 0, sizeof(cTempMapName));
					strcpy(cTempMapName, m_pClientList[iClientH]->m_cLockedMapName);
				}
				for (i = 0; i < DEF_MAXMAPS; i++)
					if (m_pMapList[i] != 0) {
						if (memcmp(m_pMapList[i]->m_cName, cTempMapName, 10) == 0) {
							GetMapInitialPoint(i, &m_pClientList[iClientH]->m_sX, &m_pClientList[iClientH]->m_sY, m_pClientList[iClientH]->m_cLocation);
							m_pClientList[iClientH]->m_cMapIndex = i;
							std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
							memcpy(m_pClientList[iClientH]->m_cMapName, m_pMapList[i]->m_cName, 10);
							goto RTH_NEXTSTEP;
						}
					}
				m_pClientList[iClientH]->m_sX = -1;
				m_pClientList[iClientH]->m_sY = -1;
				std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
				memcpy(m_pClientList[iClientH]->m_cMapName, cTempMapName, 10);
				// New 18/05/2004
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_CONFUSE,
						  m_pClientList[iClientH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_CONFUSE ], 0, 0);
				SetSlateFlag(iClientH, DEF_NOTIFY_SLATECLEAR, false);
				bSendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATA_REPLY, iClientH, false);
				m_pClientList[iClientH]->m_bIsOnServerChange = true;
				m_pClientList[iClientH]->m_bIsOnWaitingProcess = true;
				return;
			case '2':
				// Crusade
				if ((strcmp(m_pClientList[iClientH]->m_cLockedMapName, "NONE") != 0) && (m_pClientList[iClientH]->m_iLockedMapTime > 0)) {
					dX = -1;
					dY = -1;
					bIsLockedMapNotify = true;
					std::memset(cTempMapName, 0, sizeof(cTempMapName));
					strcpy(cTempMapName, m_pClientList[iClientH]->m_cLockedMapName);
				} else {
					std::memset(cTempMapName, 0, sizeof(cTempMapName));
					strcpy(cTempMapName, cMapName);
				}
				cMapIndex = iGetMapIndex(cTempMapName);
				if (cMapIndex == -1) {
					m_pClientList[iClientH]->m_sX = dX;
					m_pClientList[iClientH]->m_sY = dY;
					std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
					memcpy(m_pClientList[iClientH]->m_cMapName, cTempMapName, 10);
					// New 18/05/2004
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_CONFUSE,
							  m_pClientList[iClientH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_CONFUSE ], 0, 0);
					SetSlateFlag(iClientH, DEF_NOTIFY_SLATECLEAR, false);
					bSendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATA_REPLY, iClientH, false);
					m_pClientList[iClientH]->m_bIsOnServerChange = true;
					m_pClientList[iClientH]->m_bIsOnWaitingProcess = true;
					return;
				}
				m_pClientList[iClientH]->m_sX = dX;
				m_pClientList[iClientH]->m_sY = dY;
				m_pClientList[iClientH]->m_cMapIndex = cMapIndex;
				std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
				memcpy(m_pClientList[iClientH]->m_cMapName, m_pMapList[cMapIndex]->m_cName, 10);
				break;
		}
	}
RTH_NEXTSTEP:
	;
	// New 17/05/2004
	SetPlayingStatus(iClientH);
	int iTemp;
	int iTemp2;
	iTemp = m_pClientList[iClientH]->m_iStatus;
	iTemp = 0x0FFFFFFF & iTemp;
	iTemp2 = iGetPlayerABSStatus(iClientH);
	iTemp = iTemp | (iTemp2 << 28);
	m_pClientList[iClientH]->m_iStatus = iTemp;
	// Crusade
	if (bIsLockedMapNotify == true) SendNotifyMsg(0, iClientH, DEF_NOTIFY_LOCKEDMAP, m_pClientList[iClientH]->m_iLockedMapTime, 0, 0, m_pClientList[iClientH]->m_cLockedMapName);
	pBuffer = new char [DEF_MSGBUFFERSIZE + 1];
	ZeroMemory(pBuffer, DEF_MSGBUFFERSIZE + 1);
	dwp = (uint32_t *) (pBuffer + DEF_INDEX4_MSGID);
	*dwp = MSGID_RESPONSE_INITDATA;
	wp = (uint16_t *) (pBuffer + DEF_INDEX2_MSGTYPE);
	*wp = DEF_MSGTYPE_CONFIRM;
	cp = (char *) (pBuffer + DEF_INDEX2_MSGTYPE + 2);
	if (m_pClientList[iClientH]->m_bIsObserverMode == false)
		bGetEmptyPosition(&m_pClientList[iClientH]->m_sX, &m_pClientList[iClientH]->m_sY, m_pClientList[iClientH]->m_cMapIndex);
	else GetMapInitialPoint(m_pClientList[iClientH]->m_cMapIndex, &m_pClientList[iClientH]->m_sX, &m_pClientList[iClientH]->m_sY);
	sp = (short *) cp;
	*sp = iClientH; // Player ObjectID
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sX - 14 - 5;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sY - 12 - 5;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sType;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sAppr1;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sAppr2;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sAppr3;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sAppr4;
	cp += 2;
	// v1.4 ApprColor
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iApprColor;
	cp += 4;
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iStatus;
	cp += 4; //Original 2
	memcpy(cp, m_pClientList[iClientH]->m_cMapName, 10);
	cp += 10;
	memcpy(cp, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, 10);
	cp += 10;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsFixedDayMode == true)
		*cp = 1;
	else *cp = m_cDayOrNight;
	cp++;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsFixedDayMode == true)
		*cp = 0;
	else *cp = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cWhetherStatus;
	cp++;
	// v1.4 Contribution
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iContribution;
	cp += 4;
	if (m_pClientList[iClientH]->m_bIsObserverMode == false) {
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetOwner(iClientH,
				  DEF_OWNERTYPE_PLAYER,
				  m_pClientList[iClientH]->m_sX,
				  m_pClientList[iClientH]->m_sY);
	}
	// v1.41
	*cp = (char) m_pClientList[iClientH]->m_bIsObserverMode;
	cp++;
	// v1.41
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iRating;
	cp += 4;
	// v1.44
	ip = (int *) cp;
	*ip = m_pClientList[iClientH]->m_iHP;
	cp += 4;
	//Unknown variable
	*cp = 0;
	cp++;
	iSize = iComposeInitMapData(m_pClientList[iClientH]->m_sX - 10, m_pClientList[iClientH]->m_sY - 7, iClientH, cp);
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(pBuffer, 46 + iSize + 4 + 4 + 1 + 4 + 4 + 3); //Zabuza fix
	//iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(pBuffer, 46 + iSize +4 +4 +1 +4 +4); // v1.41
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			delete pBuffer;
			return;
	}
	delete pBuffer;
	SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_LOG, DEF_MSGTYPE_CONFIRM, 0, 0, 0);
	if ((memcmp(m_pClientList[iClientH]->m_cLocation, "are", 3) == 0) &&
			  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "elvine", 6) == 0) &&
			  (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) {
		m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
		m_pClientList[iClientH]->m_bIsWarLocation = true;
		// New 17/05/2004
		CheckForceRecallTime(iClientH);
	} else if ((memcmp(m_pClientList[iClientH]->m_cLocation, "elv", 3) == 0) &&
			  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, "aresden", 7) == 0) &&
			  (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) {
		m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
		m_pClientList[iClientH]->m_bIsWarLocation = true;
		// New 17/05/2004
		CheckForceRecallTime(iClientH);
	} else if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsFightZone == true) {
		m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
		m_pClientList[iClientH]->m_bIsWarLocation = true;
		SetForceRecallTime(iClientH);
		GetLocalTime(&SysTime);
		m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 2 * 20 * 60 - ((SysTime.wHour % 2)*20 * 60 + SysTime.wMinute * 20) - 2 * 20;
	} else {
		m_pClientList[iClientH]->m_bIsWarLocation = false;
		m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 0;
		SetForceRecallTime(iClientH);
	}
	// No entering enemy shops
	int iMapside;
	int iMapside2;
	iMapside = iGetMapLocationSide(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName);
	if (iMapside > 3) iMapside2 = iMapside - 2;
	else iMapside2 = iMapside;
	m_pClientList[iClientH]->m_bIsInsideOwnTown = false;
	if ((m_pClientList[iClientH]->m_cSide != iMapside2) && (iMapside != 0)) {
		if ((iMapside <= 2) && (m_pClientList[iClientH]->m_iAdminUserLevel < 1)) {
			if (m_pClientList[iClientH]->m_cSide != 0) {
				m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
				m_pClientList[iClientH]->m_bIsWarLocation = true;
				m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 1;
				m_pClientList[iClientH]->m_bIsInsideOwnTown = true;
			}
		}
	} else {
		if (m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_bIsFightZone == true &&
				  m_iFightzoneNoForceRecall == false &&
				  m_pClientList[iClientH]->m_iAdminUserLevel == 0) {
			m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
			m_pClientList[iClientH]->m_bIsWarLocation = true;
			GetLocalTime(&SysTime);
			m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 2 * 60 * 20 - ((SysTime.wHour % 2)*20 * 60 + SysTime.wMinute * 20) - 2 * 20;
		} else {
			if (memcmp(m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_cLocationName, "arejail", 7) == 0 ||
					  memcmp(m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_cLocationName, "elvjail", 7) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel == 0) {
					m_pClientList[iClientH]->m_bIsWarLocation = true;
					m_pClientList[iClientH]->m_dwWarBeginTime = timeGetTime();
					if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall == 0)
						m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 100;
					else if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall > 100)
						m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 100;
				}
			}
		}
	}
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_SAFEATTACKMODE, 0, 0, 0, 0);
	// v1.3
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_DOWNSKILLINDEXSET, m_pClientList[iClientH]->m_iDownSkillIndex, 0, 0, 0);
	// V1.3
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMPOSLIST, 0, 0, 0, 0);
	// v1.4
	_SendQuestContents(iClientH);
	_CheckQuestEnvironment(iClientH);
	// v1.432
	if (m_pClientList[iClientH]->m_iSpecialAbilityTime == 0)
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SPECIALABILITYENABLED, 0, 0, 0, 0);
	if (m_bIsCrusadeMode == true) {
		if (m_pClientList[iClientH]->m_dwCrusadeGUID == 0) {
			m_pClientList[iClientH]->m_iCrusadeDuty = 0;
			m_pClientList[iClientH]->m_iConstructionPoint = 0;
			m_pClientList[iClientH]->m_dwCrusadeGUID = m_dwCrusadeGUID;
		} else if (m_pClientList[iClientH]->m_dwCrusadeGUID != m_dwCrusadeGUID) {
			m_pClientList[iClientH]->m_iCrusadeDuty = 0;
			m_pClientList[iClientH]->m_iConstructionPoint = 0;
			m_pClientList[iClientH]->m_iWarContribution = 0;
			m_pClientList[iClientH]->m_dwCrusadeGUID = m_dwCrusadeGUID;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, 0, 0, 0, -1);
		}
		m_pClientList[iClientH]->m_cVar = 1;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, m_pClientList[iClientH]->m_iCrusadeDuty, 0, 0);
	} else if (m_bIsHeldenianMode == true) {
		sSummonPoints = m_pClientList[iClientH]->m_iCharisma * 300;
		if (sSummonPoints > DEF_MAXSUMMONPOINTS) sSummonPoints = DEF_MAXSUMMONPOINTS;
		if (m_pClientList[iClientH]->m_dwHeldenianGUID == 0) {
			m_pClientList[iClientH]->m_dwHeldenianGUID = m_dwHeldenianGUID;
			m_pClientList[iClientH]->m_iConstructionPoint = sSummonPoints;
		} else if (m_pClientList[iClientH]->m_dwHeldenianGUID != m_dwHeldenianGUID) {
			m_pClientList[iClientH]->m_iConstructionPoint = sSummonPoints;
			m_pClientList[iClientH]->m_iWarContribution = 0;
			m_pClientList[iClientH]->m_dwHeldenianGUID = m_dwHeldenianGUID;
		}
		m_pClientList[iClientH]->m_cVar = 2;
		if (m_bIsHeldenianMode == true) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_HELDENIANTELEPORT, 0, 0, 0, 0);
		}
		if (m_bHeldenianInitiated == true) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_HELDENIANSTART, 0, 0, 0, 0);
		}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[iClientH]->m_iConstructionPoint, m_pClientList[iClientH]->m_iWarContribution, 0, 0);
		UpdateHeldenianStatus();
	} else if ((m_pClientList[iClientH]->m_cVar == 1) && (m_pClientList[iClientH]->m_dwCrusadeGUID == m_dwCrusadeGUID)) {
		m_pClientList[iClientH]->m_iCrusadeDuty = 0;
		m_pClientList[iClientH]->m_iConstructionPoint = 0;
	} else {
		if (m_pClientList[iClientH]->m_dwCrusadeGUID == m_dwCrusadeGUID) {
			if (m_pClientList[iClientH]->m_cVar == 1) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, 0, 0, 0, -1);
			}
		} else {
			m_pClientList[iClientH]->m_dwCrusadeGUID = 0;
			m_pClientList[iClientH]->m_iWarContribution = 0;
			m_pClientList[iClientH]->m_dwCrusadeGUID = 0;
		}
	}
	/*
	if (m_bIsCrusadeMode == true) {
		if (m_pClientList[iClientH]->m_dwCrusadeGUID == 0) {
			m_pClientList[iClientH]->m_iCrusadeDuty = 0;
			m_pClientList[iClientH]->m_iConstructionPoint = 0;
			m_pClientList[iClientH]->m_dwCrusadeGUID = m_dwCrusadeGUID;
		}
		else if (m_pClientList[iClientH]->m_dwCrusadeGUID != m_dwCrusadeGUID) {
			m_pClientList[iClientH]->m_iCrusadeDuty       = 0;
			m_pClientList[iClientH]->m_iConstructionPoint = 0;
			m_pClientList[iClientH]->m_iWarContribution   = 0;
			m_pClientList[iClientH]->m_dwCrusadeGUID = m_dwCrusadeGUID;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t)m_bIsCrusadeMode, 0, 0, 0, -1);
		}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t)m_bIsCrusadeMode, m_pClientList[iClientH]->m_iCrusadeDuty, 0, 0);
	}
	else {
		if (m_pClientList[iClientH]->m_dwCrusadeGUID == m_dwCrusadeGUID) {
			m_pClientList[iClientH]->m_iCrusadeDuty = 0;
			m_pClientList[iClientH]->m_iConstructionPoint = 0;
		}
		else if ((m_pClientList[iClientH]->m_dwCrusadeGUID != 0) && (m_pClientList[iClientH]->m_dwCrusadeGUID != m_dwCrusadeGUID)) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t)m_bIsCrusadeMode, 0, 0, 0, -1);
			m_pClientList[iClientH]->m_iWarContribution   = 0;
			m_pClientList[iClientH]->m_dwCrusadeGUID = 0;
		}
	}*/
	// v1.42
	if (memcmp(m_pClientList[iClientH]->m_cMapName, "fight", 5) == 0) {
		wsprintf(G_cTxt, "Char(%s)-Enter(%s) Observer(%d)", m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_bIsObserverMode);
		PutLogEventFileList(G_cTxt);
	}
	// Crusade
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[iClientH]->m_iConstructionPoint, m_pClientList[iClientH]->m_iWarContribution, 1, 0);
	// v2.15
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMUPGRADELEFT, m_pClientList[iClientH]->m_iGizonItemUpgradeLeft, 0, 0, 0);
	if (m_bIsHeldenianMode == true) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_HELDENIANTELEPORT, 0, 0, 0, 0);
		if (m_bHeldenianInitiated == true) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_HELDENIANSTART, 0, 0, 0, 0);
		} else {
			UpdateHeldenianStatus();
		}
	}
	if (m_pClientList[iClientH]->m_iQuest != 0) {
		cQuestRemain = (m_pQuestConfigList[m_pClientList[iClientH]->m_iQuest]->m_iMaxCount - m_pClientList[iClientH]->m_iCurQuestCount);
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTCOUNTER, cQuestRemain, 0, 0, 0);
		_bCheckIsQuestCompleted(iClientH);
	}
}

void CGame::ReleaseFollowMode(short sOwnerH, char cOwnerType) {
	int i;
	for (i = 0; i < DEF_MAXNPCS; i++)
		if ((i != sOwnerH) && (m_pNpcList[i] != 0)) {
			if ((m_pNpcList[i]->m_cMoveType == NpcMoveType::follow) &&
					  (m_pNpcList[i]->m_iFollowOwnerIndex == sOwnerH) &&
					  (m_pNpcList[i]->m_cFollowOwnerType == cOwnerType)) {
				m_pNpcList[i]->m_cMoveType = NpcMoveType::randomwaypoint;
			}
		}
}

bool CGame::_bDecodeMagicConfigFileContents(char * pData, uint32_t dwMsgSize) {
	char * pContents, * token, cTxt[120];
	char seps[] = "= \t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int iMagicConfigListIndex = 0;
	CStrTok * pStrTok;
	pContents = new char[dwMsgSize + 1];
	ZeroMemory(pContents, dwMsgSize + 1);
	memcpy(pContents, pData, dwMsgSize);
	pStrTok = new CStrTok(pContents, seps);
	token = pStrTok->pGet();
	//token = strtok(pContents, seps);
	while (token != 0) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							if (m_pMagicConfigList[atoi(token)] != 0) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Duplicate magic number.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[atoi(token)] = new CMagic;
							iMagicConfigListIndex = atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							std::memset(m_pMagicConfigList[iMagicConfigListIndex]->m_cName, 0, sizeof(m_pMagicConfigList[iMagicConfigListIndex]->m_cName));
							memcpy(m_pMagicConfigList[iMagicConfigListIndex]->m_cName, token, strlen(token));
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sType = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_dwDelayTime = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_dwLastTime = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							// m_sValue1
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue1 = atoi(token);
							cReadModeB = 7;
							break;
						case 7:
							// m_sValue2
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue2 = atoi(token);
							cReadModeB = 8;
							break;
						case 8:
							// m_sValue3
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue3 = atoi(token);
							cReadModeB = 9;
							break;
						case 9:
							// m_sValue4
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue4 = atoi(token);
							cReadModeB = 10;
							break;
						case 10:
							// m_sValue5
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue5 = atoi(token);
							cReadModeB = 11;
							break;
						case 11:
							// m_sValue6
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue6 = atoi(token);
							cReadModeB = 12;
							break;
						case 12:
							// m_sValue7
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue7 = atoi(token);
							cReadModeB = 13;
							break;
						case 13:
							// m_sValue8
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue8 = atoi(token);
							cReadModeB = 14;
							break;
						case 14:
							// m_sValue9
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue9 = atoi(token);
							cReadModeB = 15;
							break;
						case 15:
							// m_sValue10
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue10 = atoi(token);
							cReadModeB = 16;
							break;
						case 16:
							// m_sValue11
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue11 = atoi(token);
							cReadModeB = 17;
							break;
						case 17:
							// m_sValue12
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sValue12 = atoi(token);
							cReadModeB = 18;
							break;
						case 18:
							// m_sIntLimit
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_sIntLimit = atoi(token);
							cReadModeB = 19;
							break;
						case 19:
							// m_iGoldCost
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_iGoldCost = atoi(token);
							cReadModeB = 20;
							break;
						case 20:
							// m_cCategory
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_cCategory = atoi(token);
							cReadModeB = 21;
							break;
						case 21:
							// m_iAttribute
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMagicConfigList[iMagicConfigListIndex]->m_iAttribute = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				default:
					break;
			}
		} else {
			if (memcmp(token, "magic", 5) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
		//token = strtok(0, seps);
	}
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		PutLogList("(!!!) CRITICAL ERROR! MAGIC configuration file contents error!");
		return false;
	}
	wsprintf(cTxt, "(!) MAGIC(Total:%d) configuration - success!", iMagicConfigListIndex);
	PutLogList(cTxt);
	return true;
}

bool CGame::_bDecodeSkillConfigFileContents(char * pData, uint32_t dwMsgSize) {
	char * pContents, * token, cTxt[120];
	char seps[] = "= \t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int iSkillConfigListIndex = 0;
	CStrTok * pStrTok;
	pContents = new char[dwMsgSize + 1];
	ZeroMemory(pContents, dwMsgSize + 1);
	memcpy(pContents, pData, dwMsgSize);
	pStrTok = new CStrTok(pContents, seps);
	token = pStrTok->pGet();
	//token = strtok(pContents, seps);
	while (token != 0) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! SKILL configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							if (m_pSkillConfigList[atoi(token)] != 0) {
								PutLogList("(!!!) CRITICAL ERROR! SKILL configuration file error - Duplicate magic number.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pSkillConfigList[atoi(token)] = new CSkill;
							iSkillConfigListIndex = atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							std::memset(m_pSkillConfigList[iSkillConfigListIndex]->m_cName, 0, sizeof(m_pSkillConfigList[iSkillConfigListIndex]->m_cName));
							memcpy(m_pSkillConfigList[iSkillConfigListIndex]->m_cName, token, strlen(token));
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! SKILL configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pSkillConfigList[iSkillConfigListIndex]->m_sType = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							// m_sValue1
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! SKILL configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pSkillConfigList[iSkillConfigListIndex]->m_sValue1 = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							// m_sValue2
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! SKILL configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pSkillConfigList[iSkillConfigListIndex]->m_sValue2 = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							// m_sValue3
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! SKILL configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pSkillConfigList[iSkillConfigListIndex]->m_sValue3 = atoi(token);
							cReadModeB = 7;
							break;
						case 7:
							// m_sValue4
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! SKILL configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pSkillConfigList[iSkillConfigListIndex]->m_sValue4 = atoi(token);
							cReadModeB = 8;
							break;
						case 8:
							// m_sValue5
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! SKILL configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pSkillConfigList[iSkillConfigListIndex]->m_sValue5 = atoi(token);
							cReadModeB = 9;
							break;
						case 9:
							// m_sValue6
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! SKILL configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pSkillConfigList[iSkillConfigListIndex]->m_sValue6 = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				default:
					break;
			}
		} else {
			if (memcmp(token, "skill", 5) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
		//token = strtok(0, seps);
	}
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		PutLogList("(!!!) CRITICAL ERROR! SKILL configuration file contents error!");
		return false;
	}
	wsprintf(cTxt, "(!) SKILL(Total:%d) configuration - success!", iSkillConfigListIndex);
	PutLogList(cTxt);
	return true;
}

void CGame::RequestStudyMagicHandler(int iClientH, char * pName, bool bIsPurchase) {
	char * cp, cMagicName[31], cData[100];
	uint32_t * dwp, dwGoldCount;
	uint16_t * wp;
	int * ip, iReqInt, iCost, iRet;
	bool bMagic = true;
	int iTempInt;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	std::memset(cData, 0, sizeof(cData));
	std::memset(cMagicName, 0, sizeof(cMagicName));
	memcpy(cMagicName, pName, 30);
	iRet = _iGetMagicNumber(cMagicName, &iReqInt, &iCost);
	if (iRet == -1) {
	} else {
		if (bIsPurchase == true) {
			if (m_pMagicConfigList[iRet]->m_iGoldCost < 0) bMagic = false;
			dwGoldCount = dwGetItemCount(iClientH, "Gold");
			if ((uint32_t) iCost > dwGoldCount) bMagic = false;
		}
		if (m_pClientList[iClientH]->m_cMagicMastery[iRet] != 0) return;
		iTempInt = m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iAngelicInt;
		if ((iReqInt <= iTempInt) && (bMagic == true)) {
			if (bIsPurchase == true) SetItemCount(iClientH, "Gold", dwGoldCount - iCost);
			iCalcTotalWeight(iClientH);
			m_pClientList[iClientH]->m_cMagicMastery[iRet] = 1;
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_MAGICSTUDYSUCCESS;
			cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
			*cp = iRet;
			cp++;
			memcpy(cp, cMagicName, 30);
			cp += 30;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 37);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					return;
			}
		} else {
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_MAGICSTUDYFAIL;
			cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
			*cp = 1;
			cp++;
			*cp = iRet;
			cp++;
			memcpy(cp, cMagicName, 30);
			cp += 30;
			ip = (int *) cp;
			*ip = iCost;
			cp += 4;
			ip = (int *) cp;
			*ip = iReqInt;
			cp += 4;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 46);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					return;
			}
		}
	}
}

int CGame::_iGetMagicNumber(char * pMagicName, int * pReqInt, int * pCost) {
	int i;
	char cTmpName[31];
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, pMagicName);
	for (i = 0; i < DEF_MAXMAGICTYPE; i++)
		if (m_pMagicConfigList[i] != 0) {
			if (memcmp(cTmpName, m_pMagicConfigList[i]->m_cName, 30) == 0) {
				*pReqInt = (int) m_pMagicConfigList[i]->m_sIntLimit;
				*pCost = (int) m_pMagicConfigList[i]->m_iGoldCost;
				return i;
			}
		}
	return -1;
}

void CGame::TrainSkillResponse(bool bSuccess, int iClientH, int iSkillNum, int iSkillLevel) {
	char * cp, cData[100];
	uint32_t * dwp;
	uint16_t * wp;
	int iRet;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((iSkillNum < 0) || (iSkillNum > 100)) return;
	if ((iSkillLevel < 0) || (iSkillLevel > 100)) return;
	if (bSuccess == true) {
		if (m_pClientList[iClientH]->m_cSkillMastery[iSkillNum] != 0) return;
		m_pClientList[iClientH]->m_cSkillMastery[iSkillNum] = iSkillLevel;
		bCheckTotalSkillMasteryPoints(iClientH, iSkillNum);
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_NOTIFY;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_NOTIFY_SKILLTRAINSUCCESS;
		cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
		*cp = iSkillNum;
		cp++;
		*cp = iSkillLevel;
		cp++;
		//wsprintf(G_cTxt, "Skill Improve: (%s) increased (%s) at %s (%d,%d).", m_pClientList[iClientH]->m_cCharName, m_pSkillConfigList[iSkillNum]->m_cName, m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
		//PutLogFileList(G_cTxt);
		if (m_pSkillConfigList[iSkillNum]->m_cName != 0)
			_bItemLog(DEF_ITEMLOG_SKILLLEARN, iClientH, m_pSkillConfigList[iSkillNum]->m_cName, 0);
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 8);
		switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
			case DEF_XSOCKEVENT_SOCKETCLOSED:
				DeleteClient(iClientH, true, true);
				return;
		}
	} else {
	}
	/*
	std::memset(cData, 0, sizeof(cData));
	std::memset(cSkillName, 0, sizeof(cSkillName));
	memcpy(cSkillName, pName, 20);
	iRet = _iGetSkillNumber(cSkillName);
	if (iRet == 0) {
	}
	else {
		if (1) {
			m_pClientList[iClientH]->m_cSkillMastery[iRet]++;
			dwp  = (uint32_t *)(cData + DEF_INDEX4_MSGID);
	 *dwp = MSGID_NOTIFY;
			wp   = (uint16_t *)(cData + DEF_INDEX2_MSGTYPE);
	 *wp  = DEF_NOTIFY_SKILLTRAINSUCCESS;
			cp = (char *)(cData + DEF_INDEX2_MSGTYPE + 2);
	 *cp = m_pClientList[iClientH]->m_cSkillMastery[iRet];
			cp++;
	 *cp = iRet;
			cp++;
			memcpy(cp, cSkillName, 20);
			cp += 20;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 28);
			switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
			case DEF_XSOCKEVENT_SOCKETCLOSED:
				DeleteClient(iClientH, true, true);
				return;
			}
		}
		else {
			dwp  = (uint32_t *)(cData + DEF_INDEX4_MSGID);
	 *dwp = MSGID_NOTIFY;
			wp   = (uint16_t *)(cData + DEF_INDEX2_MSGTYPE);
	 *wp  = DEF_NOTIFY_SKILLTRAINFAIL;
			cp = (char *)(cData + DEF_INDEX2_MSGTYPE + 2);
	 *cp = 1;
			cp++;
	 *cp = iRet;
			cp++;
			memcpy(cp, cSkillName, 20);
			cp += 20;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 28);
			switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
			case DEF_XSOCKEVENT_SOCKETCLOSED:
				DeleteClient(iClientH, true, true);
				return;
			}
		}
	}
	 */
}

int CGame::_iGetSkillNumber(char * pSkillName) {
	int i;
	char cTmpName[21];
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, pSkillName);
	for (i = 1; i < DEF_MAXSKILLTYPE; i++)
		if (m_pSkillConfigList[i] != 0) {
			if (memcmp(cTmpName, m_pSkillConfigList[i]->m_cName, 20) == 0) {
				return i;
			}
		}
	return 0;
}

bool CGame::bPlayerItemToBank(int iClientH, short sItemIndex) {
	int i;
	int iIndex;
	if (m_pClientList[iClientH] == 0) return false;
	for (i = 0; i < DEF_MAXBANKITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemInBankList[i] == 0) {
			iIndex = i;
			goto NEXT_STEP_PLTB;
		}
	return false;
NEXT_STEP_PLTB:
	;
	ReleaseItemHandler(iClientH, sItemIndex, true);
	m_pClientList[iClientH]->m_pItemInBankList[iIndex] = m_pClientList[iClientH]->m_pItemList[sItemIndex];
	m_pClientList[iClientH]->m_pItemList[sItemIndex] = 0;
	m_pClientList[iClientH]->m_bIsItemEquipped[sItemIndex] = false;
	for (i = 1; i < DEF_MAXITEMS; i++)
		if ((m_pClientList[iClientH]->m_pItemList[i - 1] == 0) && (m_pClientList[iClientH]->m_pItemList[i] != 0)) {
			m_pClientList[iClientH]->m_pItemList[i - 1] = m_pClientList[iClientH]->m_pItemList[i];
			m_pClientList[iClientH]->m_bIsItemEquipped[i - 1] = m_pClientList[iClientH]->m_bIsItemEquipped[i];
			m_pClientList[iClientH]->m_pItemList[i] = 0;
			m_pClientList[iClientH]->m_bIsItemEquipped[i] = false;
		}
	return true;
}

bool CGame::bBankItemToPlayer(int iClientH, short sItemIndex) {
	int i;
	int iIndex;
	if (m_pClientList[iClientH] == 0) return false;
	if (m_pClientList[iClientH]->m_pItemInBankList[sItemIndex] == 0) return false;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] == 0) {
			iIndex = i;
			goto NEXT_STEP_PLTB;
		}
	return false;
NEXT_STEP_PLTB:
	;
	m_pClientList[iClientH]->m_pItemList[iIndex] = m_pClientList[iClientH]->m_pItemInBankList[sItemIndex];
	m_pClientList[iClientH]->m_pItemInBankList[sItemIndex] = 0;
	return true;
}

bool CGame::__bReadMapInfo(int iMapIndex) {
	char * pContents, * token, * pTile, cTxt[250], cFn[255];
	char seps[] = "= \t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int iTeleportLocIndex = 0;
	int iWayPointCfgIndex = 0;
	int iTotalNpcSetting = 0;
	int iMGARCfgIndex = 0;
	int iSMGRCfgIndex = 0;
	int iNMRCfgIndex = 0;
	int iFishPointIndex = 0;
	int iMineralPointIndex = 0;
	int iStrategicPointIndex = 0;
	int iIndex = 0;
	int iNamingValue;
	CStrTok * pStrTok;
	HANDLE hFile;
	uint32_t dwFileSize;
	FILE * pFile;
	char cName[6], cNpcName[21], cNpcWaypointIndex[10], cNamePrefix;
	NpcMoveType cNpcMoveType;
	short sIPindex;
	short dX;
	short dY;
	if (memcmp(m_pMapList[iMapIndex]->m_cName, "fightzone", 9) == 0)
		m_pMapList[iMapIndex]->m_bIsFightZone = true;
	if (memcmp(m_pMapList[iMapIndex]->m_cName, "icebound", 8) == 0)
		m_pMapList[iMapIndex]->m_bIsSnowEnabled = true;
	std::memset(cFn, 0, sizeof(cFn));
	strcat(cFn, "mapdata\\");
	strcat(cFn, m_pMapList[iMapIndex]->m_cName);
	strcat(cFn, ".txt");
	hFile = CreateFile(cFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	if (hFile == INVALID_HANDLE_VALUE) return false;
	dwFileSize = GetFileSize(hFile, 0);
	CloseHandle(hFile);
	pContents = new char[dwFileSize + 1];
	ZeroMemory(pContents, dwFileSize + 1);
	pFile = fopen(cFn, "rt");
	if (pFile == 0) {
		wsprintf(cTxt, "(!) Cannot open file : %s", cFn);
		PutLogList(cTxt);
		return false;
	} else {
		wsprintf(cTxt, "(!) Reading Map info file : %s", cFn);
		PutLogList(cTxt);
		fread(pContents, dwFileSize, 1, pFile);
		fclose(pFile);
	}
	pStrTok = new CStrTok(pContents, seps);
	token = pStrTok->pGet();
	//token = strtok(pContents, seps);
	while (token != 0) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 1 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pTeleportLoc[iTeleportLocIndex]->m_sSrcX = atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 2 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pTeleportLoc[iTeleportLocIndex]->m_sSrcY = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							ZeroMemory(m_pMapList[iMapIndex]->m_pTeleportLoc[iTeleportLocIndex]->m_cDestMapName,
									  sizeof (m_pMapList[iMapIndex]->m_pTeleportLoc[iTeleportLocIndex]->m_cDestMapName));
							strcpy(m_pMapList[iMapIndex]->m_pTeleportLoc[iTeleportLocIndex]->m_cDestMapName, token);
							cReadModeB = 4;
							break;
						case 4:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 3 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pTeleportLoc[iTeleportLocIndex]->m_sDestX = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 4 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pTeleportLoc[iTeleportLocIndex]->m_sDestY = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 5 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pTeleportLoc[iTeleportLocIndex]->m_cDir = atoi(token);
							iTeleportLocIndex++;
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 2:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 6 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iWayPointCfgIndex = atoi(token);
							if (m_pMapList[iMapIndex]->m_WaypointList[iWayPointCfgIndex].x != -1) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 7 - Duplicated waypoint");
								delete pContents;
								delete pStrTok;
								return false;
							}
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 8 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_WaypointList[iWayPointCfgIndex].x = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 9 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_WaypointList[iWayPointCfgIndex].y = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 3:
					switch (cReadModeB) {
						case 1:
							std::memset(cNpcName, 0, sizeof(cNpcName));
							strcpy(cNpcName, token);
							cReadModeB = 2;
							break;
						case 2:
							// NpcMoveType
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 10 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							cNpcMoveType = (NpcMoveType) atoi(token);
							cReadModeB = 3;
							break;
						default:
							// WayPoint0~waypoint9
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 11 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							cNpcWaypointIndex[cReadModeB - 3] = atoi(token);
							cReadModeB++;
							break;
						case 13:
							// cNamePrefix
							cNamePrefix = token[0];
							iNamingValue = m_pMapList[iMapIndex]->iGetEmptyNamingValue();
							if (iNamingValue == -1) {
							} else {
								std::memset(cName, 0, sizeof(cName));
								wsprintf(cName, "XX%d", iNamingValue);
								cName[0] = cNamePrefix;
								cName[1] = iMapIndex + 65;
								if (bCreateNewNpc(cNpcName, cName, m_pMapList[iMapIndex]->m_cName, 0, 0, cNpcMoveType, 0, 0, cNpcWaypointIndex, 0, 0, -1, false) == false) {
									m_pMapList[iMapIndex]->SetNamingValueEmpty(iNamingValue);
								}
							}
							cReadModeA = 0;
							cReadModeB = 0;
							iTotalNpcSetting++;
							break;
					}
					break;
				case 4:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 12 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_bRandomMobGenerator = (bool) atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							// Mob- Level
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 13 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_cRandomMobGeneratorLevel = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 5:
					// Maximum object
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error 14 - Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_iMaximumObject = atoi(token);
					cReadModeA = 0;
					cReadModeB = 0;
					break;
				case 6:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 15 - Wrong Data format(MGAR num).");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iMGARCfgIndex = atoi(token);
							if (m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[iMGARCfgIndex].left != -1) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 16 - Duplicated Mob Gen Rect Number!");
								delete pContents;
								delete pStrTok;
								return false;
							}
							cReadModeB = 2;
							break;
						case 2:
							// left
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 17 - Wrong Data format(MGAR num).");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[iMGARCfgIndex].left = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							// top
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 18 - Wrong Data format(MGAR num).");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[iMGARCfgIndex].top = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							// right
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 19 - Wrong Data format(MGAR num).");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[iMGARCfgIndex].right = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							// bottom
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 20 - Wrong Data format(MGAR num).");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[iMGARCfgIndex].bottom = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 7:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 21 - Wrong Data format(MGAR num).");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iSMGRCfgIndex = atoi(token);
							if (m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].bDefined == true) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error - ");
								delete pContents;
								delete pStrTok;
								return false;
							}
							cReadModeB = 2;
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].bDefined = true;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 22 - Wrong Data format(SMGAR num).");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].cType = atoi(token);
							if (m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].cType == 1)
								cReadModeB = 3;
							else if (m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].cType == 2)
								cReadModeB = 9;
							break;
						case 3:
							// left
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 23 - Wrong Data format(SMGAR num).");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].rcRect.left = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							// top
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 24 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].rcRect.top = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							// right
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 25 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].rcRect.right = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							// bottom
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 26 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].rcRect.bottom = atoi(token);
							cReadModeB = 7;
							break;
						case 7:
							// spot mob type
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 27 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].iMobType = atoi(token);
							cReadModeB = 8;
							break;
						case 8:
							// Max Mobs
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 28 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].iMaxMobs = atoi(token);
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].iCurMobs = 0;
							cReadModeA = 0;
							cReadModeB = 0;
							break;
						default:
							// WayPoint0~waypoint9
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 29 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].cWaypoint[cReadModeB - 9] = atoi(token);
							cReadModeB++;
							break;
						case 19:
							// spot mob type
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 30 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].iMobType = atoi(token);
							cReadModeB = 20;
							break;
						case 20:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 31 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].iMaxMobs = atoi(token);
							m_pMapList[iMapIndex]->m_stSpotMobGenerator[iSMGRCfgIndex].iCurMobs = 0;
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 8:
					std::memset(m_pMapList[iMapIndex]->m_cLocationName, 0, sizeof(m_pMapList[iMapIndex]->m_cLocationName));
					memcpy(m_pMapList[iMapIndex]->m_cLocationName, token, 10);
					cReadModeA = 0;
					cReadModeB = 0;
					break;
				case 9:
					switch (cReadModeB) {
						case 1:
							// Initial-Point Index
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 32:1 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							sIPindex = atoi(token);
							if (m_pMapList[iMapIndex]->m_pInitialPoint[sIPindex].x != -1) {
								PutLogList("(!!!) CRITICAL ERROR! Duplicate Initial Point Index!");
								delete pContents;
								delete pStrTok;
								return false;
							}
							cReadModeB = 2;
							break;
						case 2:
							// Initial-Point X
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 32 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pInitialPoint[sIPindex].x = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							// Initial-Point Y
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 33 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pInitialPoint[sIPindex].y = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 10:
					switch (cReadModeB) {
						case 1:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 34 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iNMRCfgIndex = atoi(token);
							if (m_pMapList[iMapIndex]->m_rcNoAttackRect[iNMRCfgIndex].top != -1) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 35 - Duplicate No-Magic-Rect number");
								delete pContents;
								delete pStrTok;
								return false;
							}
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 36 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_rcNoAttackRect[iNMRCfgIndex].left = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 37 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_rcNoAttackRect[iNMRCfgIndex].top = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 38 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_rcNoAttackRect[iNMRCfgIndex].right = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 39 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_rcNoAttackRect[iNMRCfgIndex].bottom = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 11:
					m_pMapList[iMapIndex]->m_bIsFixedDayMode = (bool) atoi(token);
					if (m_pMapList[iMapIndex]->m_bIsFixedDayMode == true)
						m_pMapList[iMapIndex]->m_bIsSnowEnabled = false;
					cReadModeA = 0;
					break;
				case 12:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 40 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iFishPointIndex = atoi(token);
							if (m_pMapList[iMapIndex]->m_FishPointList[iFishPointIndex].x != -1) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 41 - Duplicate FishPoint number");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_iTotalFishPoint++;
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 42 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_FishPointList[iFishPointIndex].x = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 43 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_FishPointList[iFishPointIndex].y = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 13:
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error 44 - Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_iMaxFish = atoi(token);
					cReadModeA = 0;
					break;
				case 14:
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error 45 - Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_cType = atoi(token);
					cReadModeA = 0;
					break;
				case 15:
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error 46 - Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_iLevelLimit = atoi(token);
					cReadModeA = 0;
					break;
				case 16:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 47 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_bMineralGenerator = (bool) atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 48 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_cMineralGeneratorLevel = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 17:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 49 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iMineralPointIndex = atoi(token);
							if (m_pMapList[iMapIndex]->m_MineralPointList[iMineralPointIndex].x != -1) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 50 - Duplicate MineralPoint number");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_iTotalMineralPoint++;
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 51 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_MineralPointList[iMineralPointIndex].x = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 52 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_MineralPointList[iMineralPointIndex].y = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 18:
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error 53 - Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_iMaxMineral = atoi(token);
					cReadModeA = 0;
					break;
				case 19:
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error 54 - Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_iUpperLevelLimit = atoi(token);
					cReadModeA = 0;
					break;
				case 20:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 55 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iStrategicPointIndex = atoi(token);
							if (m_pMapList[iMapIndex]->m_pStrategicPointList[iStrategicPointIndex] != 0) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 56 - Duplicate Strategic Point number");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pStrategicPointList[iStrategicPointIndex] = new CStrategicPoint;
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 57 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pStrategicPointList[iStrategicPointIndex]->m_iSide = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 58 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pStrategicPointList[iStrategicPointIndex]->m_iValue = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 59 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pStrategicPointList[iStrategicPointIndex]->m_iX = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 60 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_pStrategicPointList[iStrategicPointIndex]->m_iY = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 21:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 61 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iIndex = atoi(token);
							if (m_pMapList[iMapIndex]->m_stEnergySphereCreationList[iIndex].cType != 0) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 62 - Duplicate EnergySphereCreation number");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_iTotalEnergySphereCreationPoint++;
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 63 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stEnergySphereCreationList[iIndex].cType = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 64 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stEnergySphereCreationList[iIndex].sX = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 65 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stEnergySphereCreationList[iIndex].sY = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 22:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 66 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iIndex = atoi(token);
							if (m_pMapList[iMapIndex]->m_stEnergySphereGoalList[iIndex].cResult != 0) {
								wsprintf(G_cTxt, "(!!!) CRITICAL ERROR! Map Info file error 67 - Duplicate EnergySphereGoal number(%d:%d)", iIndex, m_pMapList[iMapIndex]->m_stEnergySphereGoalList[iIndex].cResult);
								PutLogList(G_cTxt);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_iTotalEnergySphereGoalPoint++;
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 68 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stEnergySphereGoalList[iIndex].cResult = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 69 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stEnergySphereGoalList[iIndex].aresdenX = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 70 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stEnergySphereGoalList[iIndex].aresdenY = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 71 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stEnergySphereGoalList[iIndex].elvineX = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 72 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stEnergySphereGoalList[iIndex].elvineY = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 23:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 73 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iIndex = atoi(token);
							if (strlen(m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].cRelatedMapName) != 0) {
								wsprintf(G_cTxt, "(!!!) CRITICAL ERROR! Map Info file error 74 - Duplicate Strike Point number(%d)", iIndex);
								PutLogList(G_cTxt);
								delete pContents;
								delete pStrTok;
								return false;
							}
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 75 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].dX = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 76 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].dY = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 77 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iHP = atoi(token);
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iInitHP = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 77 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iEffectX[0] = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 77 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iEffectY[0] = atoi(token);
							cReadModeB = 7;
							break;
						case 7:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 77 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iEffectX[1] = atoi(token);
							cReadModeB = 8;
							break;
						case 8:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 77 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iEffectY[1] = atoi(token);
							cReadModeB = 9;
							break;
						case 9:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 77 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iEffectX[2] = atoi(token);
							cReadModeB = 10;
							break;
						case 10:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 77 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iEffectY[2] = atoi(token);
							cReadModeB = 11;
							break;
						case 11:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 77 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iEffectX[3] = atoi(token);
							cReadModeB = 12;
							break;
						case 12:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 77 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iEffectY[3] = atoi(token);
							cReadModeB = 13;
							break;
						case 13:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 77 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iEffectX[4] = atoi(token);
							cReadModeB = 14;
							break;
						case 14:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 77 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].iEffectY[4] = atoi(token);
							cReadModeB = 15;
							break;
						case 15:
							std::memset(m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].cRelatedMapName, 0, sizeof(m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].cRelatedMapName));
							strcpy(m_pMapList[iMapIndex]->m_stStrikePoint[iIndex].cRelatedMapName, token);
							m_pMapList[iMapIndex]->m_iTotalStrikePoints++;
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break; // end 23
				case 24:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 78 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iIndex = atoi(token);
							if (strlen(m_pMapList[iMapIndex]->m_stItemEventList[iIndex].cItemName) != 0) {
								wsprintf(G_cTxt, "(!!!) CRITICAL ERROR! Map Info file error 79 - Duplicate Item-Event number(%d:%s)", iIndex, m_pMapList[iMapIndex]->m_stItemEventList[iIndex].cItemName);
								PutLogList(G_cTxt);
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_iTotalItemEvents++;
							cReadModeB = 2;
							break;
						case 2:
							strcpy(m_pMapList[iMapIndex]->m_stItemEventList[iIndex].cItemName, token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 81 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stItemEventList[iIndex].iAmount = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 82 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stItemEventList[iIndex].iTotalNum = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 83 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stItemEventList[iIndex].iMonth = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 83 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stItemEventList[iIndex].iDay = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 25: //mobevent-amount
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error 78 - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->sMobEventAmount = atoi(token);
							cReadModeB = 0;
							break;
					}
					break;
				case 26: //ApocalypseMobGenType
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseMobGenType - Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_iApocalypseMobGenType = atoi(token);
					cReadModeA = 0;
					cReadModeB = 0;
					break;
				case 27: // ApocalypseBossMob
					switch (cReadModeB) {
						case 1: // 3CB6Ch m_pMapList[]->m_ApocalypseBossMobNpcID
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseBossMob - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_iApocalypseBossMobNpcID = atoi(token);
							cReadModeB = 2;
							break;
						case 2: // 3CB70h m_pMapList[]->ApocalypseBossMobRectX1
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseBossMob - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_sApocalypseBossMobRectX1 = atoi(token);
							cReadModeB = 3;
							break;
						case 3: // 3CB74h m_pMapList[]->ApocalypseBossMobRectY1
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseBossMob - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_sApocalypseBossMobRectY1 = atoi(token);
							cReadModeB = 4;
							break;
						case 4: // 3CB78h m_pMapList[]->ApocalypseBossMobRectX2
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseBossMob - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_sApocalypseBossMobRectX2 = atoi(token);
							cReadModeB = 5;
							break;
						case 5: // 3CB7Ch m_pMapList[]->ApocalypseBossMobRectY2
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseBossMob - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_sApocalypseBossMobRectY2 = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 28: //DynamicGateType // 28
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error DynamicGateType - Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_cDynamicGateType = atoi(token);
					cReadModeA = 0;
					cReadModeB = 0;
					break;
				case 29: //DynamicGateCoord // 29
					// DynamicGateCoord	= 59 196 60 197        abaddon	   -1  -1
					switch (cReadModeB) {
						case 1: // 3CA20h
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseBossMob - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_sDynamicGateCoordRectX1 = atoi(token);
							cReadModeB = 2;
							break;
						case 2: // 3CA24h
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseBossMob - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_sDynamicGateCoordRectY1 = atoi(token);
							cReadModeB = 3;
							break;
						case 3: // 3CA28h
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseBossMob - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_sDynamicGateCoordRectX2 = atoi(token);
							cReadModeB = 4;
							break;
						case 4: // 3CA2Ch
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseBossMob - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_sDynamicGateCoordRectY2 = atoi(token);
							cReadModeB = 5;
							break;
						case 5: // 3CA30h
							memcpy(m_pMapList[iMapIndex]->m_cDynamicGateCoordDestMap, token, strlen(token));
							cReadModeB = 6;
							break;
						case 6: // 3CA3Ch
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseBossMob - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_sDynamicGateCoordTgtX = atoi(token);
							cReadModeB = 7;
							break;
						case 7: // (ty = 3CB60h) unknown (3CA3Eh)
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseBossMob - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_sDynamicGateCoordTgtY = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 30: // RecallImpossible // 30
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error RecallImpossible -  Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_bIsRecallImpossible = atoi(token);
					cReadModeA = 0;
					cReadModeB = 0;
					break;
				case 31: // ApocalypseMap // 31
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error ApocalypseMap -  Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_bIsApocalypseMap = atoi(token);
					cReadModeA = 0;
					cReadModeB = 0;
					break;
				case 32: // CitizenLimit // 32
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error CitizenLimit -  Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_bIsCitizenLimit = atoi(token);
					cReadModeA = 0;
					cReadModeB = 0;
					break;
				case 33: // HeldenianMap
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error CitizenLimit -  Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_bIsHeldenianMap = atoi(token);
					cReadModeA = 0;
					cReadModeB = 0;
					break;
				case 34: // HeldenianTower
					switch (cReadModeB) {
						case 1: // NpcID
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error Hedenian tower type id - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stHeldenianTower[iIndex].sTypeID = (NpcType) atoi(token);
							cReadModeB = 2;
							break;
						case 2: // side
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error Hedenian Tower Side - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stHeldenianTower[iIndex].cSide = atoi(token);
							cReadModeB = 3;
							break;
						case 3: // sX
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error Hedenian Tower X pos - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stHeldenianTower[iIndex].dX = atoi(token);
							cReadModeB = 4;
							break;
						case 4: // sY
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error Hedenian Tower Y pos - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iIndex++;
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 35: // HeldenianModeMap
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! Map Info file error Hedenian Map Mode - Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pMapList[iMapIndex]->m_cHeldenianModeMap = atoi(token);
					cReadModeA = 0;
					cReadModeB = 0;
					break;
				case 36: // HeldenianWinningZone
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error Hedenian Map Mode - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							dX = atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error Hedenian Map Mode - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							dY = atoi(token);
							pTile = 0;
							pTile = (char *) (m_pMapList[iMapIndex]->m_pTile + dX + dY * m_pMapList[iMapIndex]->m_sSizeY);
							if (pTile == 0) {
								wsprintf(cTxt, "(!!!) CRITICAL ERROR! Map Info file error HeldenianWinningZone - pTile is Null dx(%d), dy(%d).", dX, dY);
								PutLogList(cTxt);
								delete pContents;
								delete pStrTok;
								return false;
							}
							//pTile->m_iAttribute = 1;
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 37: // HeldenianGateDoor // 37
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error Heldenian Door Direction - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stHeldenianGateDoor[iIndex].cDir = atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error Heldenian Door X pos - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stHeldenianGateDoor[iIndex].dX = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! Map Info file error Heldenian Door Y pos - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pMapList[iMapIndex]->m_stHeldenianGateDoor[iIndex].dY = atoi(token);
							iIndex++;
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				default:
					break;
			}
		} else {
			if (memcmp(token, "teleport-loc", 12) == 0) {
				m_pMapList[iMapIndex]->m_pTeleportLoc[iTeleportLocIndex] = new CTeleportLoc;
				cReadModeA = 1;
				cReadModeB = 1;
			}
			if (memcmp(token, "waypoint", 8) == 0) {
				cReadModeA = 2;
				cReadModeB = 1;
			}
			if (memcmp(token, "npc", 3) == 0) {
				cReadModeA = 3;
				cReadModeB = 1;
			}
			if (memcmp(token, "random-mob-generator", 20) == 0) {
				cReadModeA = 4;
				cReadModeB = 1;
			}
			if (memcmp(token, "maximum-object", 14) == 0)
				cReadModeA = 5;
			if (memcmp(token, "npc-avoidrect", 13) == 0) {
				cReadModeA = 6;
				cReadModeB = 1;
			}
			if (memcmp(token, "spot-mob-generator", 18) == 0) {
				cReadModeA = 7;
				cReadModeB = 1;
			}
			if (memcmp(token, "map-location", 12) == 0)
				cReadModeA = 8;
			if (memcmp(token, "initial-point", 13) == 0) {
				cReadModeA = 9;
				cReadModeB = 1;
			}
			if (memcmp(token, "no-attack-area", 14) == 0) {
				cReadModeA = 10;
				cReadModeB = 1;
			}
			if (memcmp(token, "fixed-dayornight-mode", 21) == 0) cReadModeA = 11;
			if (memcmp(token, "fish-point", 10) == 0) {
				cReadModeA = 12;
				cReadModeB = 1;
			}
			if (memcmp(token, "max-fish", 8) == 0) cReadModeA = 13;
			if (memcmp(token, "type", 4) == 0) cReadModeA = 14;
			if (memcmp(token, "level-limit", 11) == 0) cReadModeA = 15;
			if (memcmp(token, "mineral-generator", 17) == 0) {
				cReadModeA = 16;
				cReadModeB = 1;
			}
			if (memcmp(token, "mineral-point", 13) == 0) {
				cReadModeA = 17;
				cReadModeB = 1;
			}
			if (memcmp(token, "max-mineral", 11) == 0) cReadModeA = 18;
			if (memcmp(token, "upper-level-limit", 17) == 0) cReadModeA = 19; // v1.4
			if (memcmp(token, "strategic-point", 15) == 0) { // v1.41
				cReadModeA = 20;
				cReadModeB = 1;
			}
			if (memcmp(token, "energy-sphere-creation-point", 28) == 0) {
				cReadModeA = 21;
				cReadModeB = 1;
			}
			if (memcmp(token, "energy-sphere-goal-point", 24) == 0) {
				cReadModeA = 22;
				cReadModeB = 1;
			}
			if (memcmp(token, "strike-point", 12) == 0) {
				cReadModeA = 23;
				cReadModeB = 1;
			}
			if (memcmp(token, "item-event", 10) == 0) {
				cReadModeA = 24;
				cReadModeB = 1;
			}
			if (memcmp(token, "energy-sphere-auto-creation", 27) == 0) {
				cReadModeA = 0;
				cReadModeB = 0;
				m_pMapList[iMapIndex]->m_bIsEnergySphereAutoCreation = true;
			}
			if (memcmp(token, "mobevent-amount", 15) == 0) {
				cReadModeA = 25;
				cReadModeB = 1;
			}
			if (memcmp(token, "ApocalypseMobGenType", 20) == 0) {
				cReadModeA = 26;
				cReadModeB = 1;
			}
			if (memcmp(token, "ApocalypseBossMob", 17) == 0) {
				cReadModeA = 27;
				cReadModeB = 1;
			}
			if (memcmp(token, "DynamicGateType", 15) == 0) {
				cReadModeA = 28;
				cReadModeB = 1;
			}
			if (memcmp(token, "DynamicGateCoord", 16) == 0) {
				cReadModeA = 29;
				cReadModeB = 1;
			}
			if (memcmp(token, "RecallImpossible", 16) == 0) {
				cReadModeA = 30;
				cReadModeB = 1;
			}
			if (memcmp(token, "ApocalypseMap", 13) == 0) {
				cReadModeA = 31;
				cReadModeB = 1;
			}
			if (memcmp(token, "CitizenLimit", 12) == 0) {
				cReadModeA = 32;
				cReadModeB = 1;
			}
			if (memcmp(token, "HeldenianMap", 12) == 0) {
				cReadModeA = 33;
				cReadModeB = 1;
			}
			if (memcmp(token, "HeldenianTower", 14) == 0) {
				cReadModeA = 34;
				cReadModeB = 1;
			}
			if (memcmp(token, "HeldenianModeMap", 16) == 0) {
				cReadModeA = 35;
				cReadModeB = 1;
			}
			if (memcmp(token, "HeldenianWinningZone", 20) == 0) {
				cReadModeA = 36;
				cReadModeB = 1;
			}
			if (memcmp(token, "HeldenianGateDoor", 17) == 0) {
				cReadModeA = 37;
				cReadModeB = 1;
			}
			if (memcmp(token, "[END-MAP-INFO]", 14) == 0) {
				cReadModeA = 0;
				cReadModeB = 0;
				goto RMI_SKIPDECODING;
			}
		}
		token = pStrTok->pGet();
	}
RMI_SKIPDECODING:
	;
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		PutLogList("(!!!) CRITICAL ERROR! map info file contents error!");
		return false;
	}
	wsprintf(cTxt, "(!) Map info file decoding(%s) - success! TL(%d) WP(%d) LNPC(%d) MXO(%d) RMG(%d / %d)", cFn, iTeleportLocIndex, iWayPointCfgIndex, iTotalNpcSetting, m_pMapList[iMapIndex]->m_iMaximumObject, m_pMapList[iMapIndex]->m_bRandomMobGenerator, m_pMapList[iMapIndex]->m_cRandomMobGeneratorLevel);
	PutLogList(cTxt);
	m_pMapList[iMapIndex]->_SetupNoAttackArea();
	//Heldenian 3.00 Source
	if (strncmp(m_cHeldenianMapName, m_pMapList[iMapIndex]->m_cName, 11) == 0) {
		m_bIsHeldenianReady = true;
	}
	return true;
}

void CGame::Quit() {
	int i;
	G_bIsThread = false;
	Sleep(300);
	delete m_pMainLogSock;
	for (i = 0; i < DEF_MAXSUBLOGSOCK; i++)
		delete m_pSubLogSock[i];
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		delete m_pClientList[i];
	for (i = 0; i < DEF_MAXNPCS; i++)
		delete m_pNpcList[i];
	for (i = 0; i < DEF_MAXMAPS; i++)
		delete m_pMapList[i];
	for (i = 0; i < DEF_MAXITEMTYPES; i++)
		delete m_pItemConfigList[i];
	for (i = 0; i < DEF_MAXNPCTYPES; i++)
		delete m_pNpcConfigList[i];
	for (i = 0; i < DEF_MAXMAGICTYPE; i++)
		delete m_pMagicConfigList[i];
	for (i = 0; i < DEF_MAXSKILLTYPE; i++)
		delete m_pSkillConfigList[i];
	for (i = 0; i < DEF_MAXQUESTTYPE; i++)
		delete m_pQuestConfigList[i];
	for (i = 0; i < DEF_MAXDYNAMICOBJECTS; i++)
		delete m_pDynamicObjectList[i];
	for (i = 0; i < DEF_MAXDELAYEVENTS; i++)
		delete m_pDelayEventList[i];
	for (i = 0; i < DEF_MAXNOTIFYMSGS; i++)
		delete m_pNoticeMsgList[i];
	for (i = 0; i < DEF_MAXFISHS; i++)
		delete m_pFish[i];
	for (i = 0; i < DEF_MAXMINERALS; i++)
		delete m_pMineral[i];
	for (i = 0; i < DEF_MAXPORTIONTYPES; i++) {
		delete m_pPortionConfigList[i];
		delete m_pCraftingConfigList[i]; // Crafting
	}
	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		delete m_pBuildItemList[i];
	for (i = 0; i < DEF_MAXDUPITEMID; i++)
		delete m_pDupItemIDList[i];
	delete m_pNoticementData;
}

int CGame::iGetLevelExp(int iLevel) {
	int iRet;
	if (iLevel == 0) return 0;
	iRet = iGetLevelExp(iLevel - 1) + iLevel * (50 + (iLevel * (iLevel / 17) * (iLevel / 17)));
	return iRet;
}

int CGame::_iCalcSkillSSNpoint(int iLevel) {
	int iRet;
	if (iLevel < 1) return 1;
	if (iLevel <= 50)
		iRet = iLevel;
	else if (iLevel > 50) {
		iRet = (iLevel * iLevel) / 10;
	}
	return iRet;
}

bool CGame::bCheckLevelUp(int iClientH) // Sobrepaso de lvl fix.
{
	if (m_pClientList[iClientH] == 0) return false;
	if (m_pClientList[iClientH]->m_iLevel >= m_iPlayerMaxLevel) {
		if (m_pClientList[iClientH]->m_iExp >= m_iLevelExpTable[m_iPlayerMaxLevel + 1]) {
			m_pClientList[iClientH]->m_iExp = m_iLevelExpTable[m_iPlayerMaxLevel];
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_EXP, 0, 0, 0, 0);
			m_pClientList[iClientH]->m_iGizonItemUpgradeLeft++;
			if (m_pClientList[iClientH]->m_iGizonItemUpgradeLeft > DEF_MAXGIZONPOINT) m_pClientList[iClientH]->m_iGizonItemUpgradeLeft = DEF_MAXGIZONPOINT; // adamas
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMUPGRADELEFT, m_pClientList[iClientH]->m_iGizonItemUpgradeLeft, 1, 0, 0);
		}
		return false;
	}
	if ((m_pClientList[iClientH]->m_iLevel >= DEF_LIMITHUNTERLEVEL) && (m_pClientList[iClientH]->m_bIsPlayerCivil)) {
		ForceChangePlayMode(iClientH, true);
	}
	if (m_pClientList[iClientH]->m_iExp < m_pClientList[iClientH]->m_iNextLevelExp) return false;
	while (m_pClientList[iClientH]->m_iExp > m_pClientList[iClientH]->m_iNextLevelExp
			  && m_pClientList[iClientH]->m_iLevel < m_iPlayerMaxLevel) {
		if (m_pClientList[iClientH]->m_iExp >= m_pClientList[iClientH]->m_iNextLevelExp) {
			m_pClientList[iClientH]->m_iLevel++;
			m_pClientList[iClientH]->m_iLU_Pool += 3; // v2.23
			if (m_pClientList[iClientH]->m_iStr > DEF_CHARPOINTLIMIT) m_pClientList[iClientH]->m_iStr = DEF_CHARPOINTLIMIT;
			if (m_pClientList[iClientH]->m_iDex > DEF_CHARPOINTLIMIT) m_pClientList[iClientH]->m_iDex = DEF_CHARPOINTLIMIT;
			if (m_pClientList[iClientH]->m_iVit > DEF_CHARPOINTLIMIT) m_pClientList[iClientH]->m_iVit = DEF_CHARPOINTLIMIT;
			if (m_pClientList[iClientH]->m_iInt > DEF_CHARPOINTLIMIT) m_pClientList[iClientH]->m_iInt = DEF_CHARPOINTLIMIT;
			if (m_pClientList[iClientH]->m_iMag > DEF_CHARPOINTLIMIT) m_pClientList[iClientH]->m_iMag = DEF_CHARPOINTLIMIT;
			if (m_pClientList[iClientH]->m_iCharisma > DEF_CHARPOINTLIMIT) m_pClientList[iClientH]->m_iCharisma = DEF_CHARPOINTLIMIT;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_LEVELUP, 0, 0, 0, 0);
			m_pClientList[iClientH]->m_iNextLevelExp = m_iLevelExpTable[m_pClientList[iClientH]->m_iLevel + 1]; //iGetLevelExp(m_pClientList[iClientH]->m_iLevel + 1);
			CalcTotalItemEffect(iClientH, -1, false);
			if (m_pClientList[iClientH]->m_iLevel >= DEF_PLAYERMAXLEVEL) {
				wsprintf(G_cTxt, "(!) Character (%s) is over max level", m_pClientList[iClientH]->m_cCharName);
				PutLogFileList(G_cTxt);
			}
		} else return true;
	}
	return false;
}

void CGame::StateChangeHandler(int iClientH, char * pData, uint32_t /*dwMsgSize*/) {
	char * cp, cStateChange1, cStateChange2, cStateChange3;
	char cStr;
	char cVit;
	char cDex;
	char cInt;
	char cMag;
	char cChar;
	int iOldStr;
	int iOldVit;
	int iOldDex;
	int iOldInt;
	int iOldMag;
	int iOldChar;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_iGizonItemUpgradeLeft <= 0) return;
	cStr = cVit = cDex = cInt = cMag = cChar = 0;
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	cStateChange1 = *cp;
	cp++;
	cStateChange2 = *cp;
	cp++;
	cStateChange3 = *cp;
	cp++;
	iOldStr = m_pClientList[iClientH]->m_iStr;
	iOldVit = m_pClientList[iClientH]->m_iVit;
	iOldDex = m_pClientList[iClientH]->m_iDex;
	iOldInt = m_pClientList[iClientH]->m_iInt;
	iOldMag = m_pClientList[iClientH]->m_iMag;
	iOldChar = m_pClientList[iClientH]->m_iCharisma;
	if (!bChangeState(cStateChange1, &cStr, &cVit, &cDex, &cInt, &cMag, &cChar)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_FAILED, 0, 0, 0, 0);
		return;
	}
	if (!bChangeState(cStateChange2, &cStr, &cVit, &cDex, &cInt, &cMag, &cChar)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_FAILED, 0, 0, 0, 0);
		return;
	}
	if (!bChangeState(cStateChange3, &cStr, &cVit, &cDex, &cInt, &cMag, &cChar)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_FAILED, 0, 0, 0, 0);
		return;
	}
	if (m_pClientList[iClientH]->m_iGuildRank == 0) {
		if (m_pClientList[iClientH]->m_iCharisma - cChar < 20) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_FAILED, 0, 0, 0, 0);
			return;
		}
	}
	if (iOldStr + iOldVit + iOldDex + iOldInt + iOldMag + iOldChar != (179 * 3 + 70)) {
		return;
	}
	if ((cStr < 0 || cVit < 0 || cDex < 0 || cInt < 0 || cMag < 0 || cChar < 0) ||
			  (cStr + cVit + cDex + cInt + cMag + cChar != 3)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_FAILED, 0, 0, 0, 0);
		return;
	}
	if ((m_pClientList[iClientH]->m_iStr - cStr > DEF_CHARPOINTLIMIT)
			  || (m_pClientList[iClientH]->m_iStr - cStr < 10)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_FAILED, 0, 0, 0, 0);
		return;
	}
	if ((m_pClientList[iClientH]->m_iDex - cDex > DEF_CHARPOINTLIMIT)
			  || (m_pClientList[iClientH]->m_iDex - cDex < 10)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_FAILED, 0, 0, 0, 0);
		return;
	}
	if ((m_pClientList[iClientH]->m_iInt - cInt > DEF_CHARPOINTLIMIT)
			  || (m_pClientList[iClientH]->m_iInt - cInt < 10)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_FAILED, 0, 0, 0, 0);
		return;
	}
	if ((m_pClientList[iClientH]->m_iVit - cVit > DEF_CHARPOINTLIMIT)
			  || (m_pClientList[iClientH]->m_iVit - cVit < 10)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_FAILED, 0, 0, 0, 0);
		return;
	}
	if ((m_pClientList[iClientH]->m_iMag - cMag > DEF_CHARPOINTLIMIT)
			  || (m_pClientList[iClientH]->m_iMag - cMag < 10)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_FAILED, 0, 0, 0, 0);
		return;
	}
	if ((m_pClientList[iClientH]->m_iCharisma - cChar > DEF_CHARPOINTLIMIT)
			  || (m_pClientList[iClientH]->m_iCharisma - cChar < 10)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_FAILED, 0, 0, 0, 0);
		return;
	}
	if (m_pClientList[iClientH]->m_iLU_Pool < 3) m_pClientList[iClientH]->m_iLU_Pool = 3;
	m_pClientList[iClientH]->m_iGizonItemUpgradeLeft--;
	m_pClientList[iClientH]->m_iStr -= cStr;
	m_pClientList[iClientH]->m_iVit -= cVit;
	m_pClientList[iClientH]->m_iDex -= cDex;
	m_pClientList[iClientH]->m_iInt -= cInt;
	m_pClientList[iClientH]->m_iMag -= cMag;
	m_pClientList[iClientH]->m_iCharisma -= cChar;
	if (cInt > 0) {
		bCheckMagicInt(iClientH);
	}
	//Re-Calculate HP,MP,SP
	if (m_pClientList[iClientH]->m_iHP > iGetMaxHP(iClientH)) m_pClientList[iClientH]->m_iHP = iGetMaxHP(iClientH);
	if (m_pClientList[iClientH]->m_iMP > iGetMaxMP(iClientH)) m_pClientList[iClientH]->m_iMP = iGetMaxMP(iClientH);
	if (m_pClientList[iClientH]->m_iSP > iGetMaxSP(iClientH)) m_pClientList[iClientH]->m_iSP = iGetMaxSP(iClientH);
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_STATECHANGE_SUCCESS, 0, 0, 0, 0);
}
//  bool CGame::bCheckMagicInt(int iClientH)  //another retarded korean function
//  date		 :: 2003-04-21

bool CGame::bCheckMagicInt(int iClientH) {
	for (int i = 0; i < DEF_MAXMAGICTYPE; i++) {
		if (m_pMagicConfigList[i] != 0)
			if (m_pMagicConfigList[i]->m_sIntLimit > (m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iAngelicInt)) {
				m_pClientList[iClientH]->m_cMagicMastery[i] = 0;
			}
	}
	return true;
}
//  bChangeState(char cStateChange
//  		  ,char* cStr, char *cVit,char *cDex,char *cInt,char *cMag,char *cChar)
//  date		 :: [2003-04-14]

bool CGame::bChangeState(char cStateChange, char *cStr, char *cVit, char *cDex, char *cInt, char *cMag, char *cChar) {
	if (cStateChange == DEF_STR) {
		*cStr += 1;
	} else if (cStateChange == DEF_VIT) {
		*cVit += 1;
	} else if (cStateChange == DEF_DEX) {
		*cDex += 1;
	} else if (cStateChange == DEF_INT) {
		*cInt += 1;
	} else if (cStateChange == DEF_MAG) {
		*cMag += 1;
	} else if (cStateChange == DEF_CHR) {
		*cChar += 1;
	} else {
		return 0;
	}
	return cStateChange;
}
//50Cent - LU Fix

void CGame::LevelUpSettingsHandler(int iClientH, char * pData, uint32_t /*dwMsgSize*/) {
	char * cp;
	int * ip;
	int iStr;
	int iVit;
	int iDex;
	int iInt;
	int iMag;
	int iChar;
	int iTotalSetting = 0;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_iLU_Pool <= 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SETTING_FAILED, 0, 0, 0, 0);
		return;
	}
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	ip = (int *) cp;
	iStr = (int) *ip;
	cp += 4;
	ip = (int *) cp;
	iVit = (int) *ip;
	cp += 4;
	ip = (int *) cp;
	iDex = (int) *ip;
	cp += 4;
	ip = (int *) cp;
	iInt = (int) *ip;
	cp += 4;
	ip = (int *) cp;
	iMag = (int) *ip;
	cp += 4;
	ip = (int *) cp;
	iChar = (int) *ip;
	cp += 4;
	if ((iStr + iVit + iDex + iInt + iMag + iChar) > m_pClientList[iClientH]->m_iLU_Pool) { // -3
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SETTING_FAILED, 0, 0, 0, 0);
		return;
	}
	if ((m_pClientList[iClientH]->m_iStr + iStr > DEF_CHARPOINTLIMIT) || (iStr < 0))
		return;
	if ((m_pClientList[iClientH]->m_iDex + iDex > DEF_CHARPOINTLIMIT) || (iDex < 0))
		return;
	if ((m_pClientList[iClientH]->m_iInt + iInt > DEF_CHARPOINTLIMIT) || (iInt < 0))
		return;
	if ((m_pClientList[iClientH]->m_iVit + iVit > DEF_CHARPOINTLIMIT) || (iVit < 0))
		return;
	if ((m_pClientList[iClientH]->m_iMag + iMag > DEF_CHARPOINTLIMIT) || (iMag < 0))
		return;
	if ((m_pClientList[iClientH]->m_iCharisma + iChar > DEF_CHARPOINTLIMIT) || (iChar < 0))
		return;
	iTotalSetting = m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iDex + m_pClientList[iClientH]->m_iVit +
			  m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iCharisma;
	if (iTotalSetting + m_pClientList[iClientH]->m_iLU_Pool - 3 > ((m_pClientList[iClientH]->m_iLevel - 1)*3 + 70)) {
		m_pClientList[iClientH]->m_iLU_Pool = 3 + (m_pClientList[iClientH]->m_iLevel - 1)*3 + 70 - iTotalSetting;
		if (m_pClientList[iClientH]->m_iLU_Pool < 3)
			m_pClientList[iClientH]->m_iLU_Pool = 3;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SETTING_FAILED, 0, 0, 0, 0);
		return;
	}
	if (iTotalSetting + (iStr + iVit + iDex + iInt + iMag + iChar)
			  > ((m_pClientList[iClientH]->m_iLevel - 1)*3 + 70)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SETTING_FAILED, 0, 0, 0, 0);
		return;
	}
	m_pClientList[iClientH]->m_iLU_Pool = m_pClientList[iClientH]->m_iLU_Pool - (iStr + iVit + iDex + iInt + iMag + iChar);
	m_pClientList[iClientH]->m_iStr += iStr;
	m_pClientList[iClientH]->m_iVit += iVit;
	m_pClientList[iClientH]->m_iDex += iDex;
	m_pClientList[iClientH]->m_iInt += iInt;
	m_pClientList[iClientH]->m_iMag += iMag;
	m_pClientList[iClientH]->m_iCharisma += iChar;
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_SETTING_SUCCESS, 0, 0, 0, 0);
}

void CGame::FightzoneReserveHandler(int iClientH, char * pData, uint32_t /*dwMsgSize*/) {
	char cData[100];
	int iFightzoneNum, * ip, iEnableReserveTime;
	uint32_t * dwp, dwGoldCount;
	uint16_t * wp, wResult;
	int iRet;
	int iResult = 1, iCannotReserveDay;
	SYSTEMTIME SysTime;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	GetLocalTime(&SysTime);
	iEnableReserveTime = 2 * 20 * 60 - ((SysTime.wHour % 2)*20 * 60 + SysTime.wMinute * 20) - 5 * 20;
	dwGoldCount = dwGetItemCount(iClientH, "Gold");
	ip = (int *) (pData + DEF_INDEX2_MSGTYPE + 2);
	iFightzoneNum = *ip;
	if ((iFightzoneNum < 1) || (iFightzoneNum > DEF_MAXFIGHTZONE)) return;
	iCannotReserveDay = (SysTime.wDay + m_pClientList[iClientH]->m_cSide + iFightzoneNum) % 2;
	if (iEnableReserveTime <= 0) {
		wResult = DEF_MSGTYPE_REJECT;
		iResult = 0;
	} else if (m_iFightZoneReserve[iFightzoneNum - 1] != 0) {
		wResult = DEF_MSGTYPE_REJECT;
		iResult = -1;
	} else if (dwGoldCount < 1500) {
		wResult = DEF_MSGTYPE_REJECT;
		iResult = -2;
	} else if (iCannotReserveDay) {
		wResult = DEF_MSGTYPE_REJECT;
		iResult = -3;
	} else if (m_pClientList[iClientH]-> m_iFightzoneNumber != 0) {
		wResult = DEF_MSGTYPE_REJECT;
		iResult = -4;
	} else {
		wResult = DEF_MSGTYPE_CONFIRM;
		SetItemCount(iClientH, "Gold", dwGoldCount - 1500);
		iCalcTotalWeight(iClientH);
		m_iFightZoneReserve[iFightzoneNum - 1] = iClientH;
		m_pClientList[iClientH]->m_iFightzoneNumber = iFightzoneNum;
		m_pClientList[iClientH]->m_iReserveTime = SysTime.wMonth * 10000 + SysTime.wDay * 100 + SysTime.wHour;
		if (SysTime.wHour % 2) m_pClientList[iClientH]->m_iReserveTime += 1;
		else m_pClientList[iClientH]->m_iReserveTime += 2;
		wsprintf(G_cTxt, "(*) Reserve FIGHTZONETICKET : Char(%s) TICKENUMBER (%d)", m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_iReserveTime);
		PutLogFileList(G_cTxt);
		PutLogList(G_cTxt);
		m_pClientList[iClientH]->m_iFightZoneTicketNumber = 50;
		iResult = 1;
	}
	std::memset(cData, 0, sizeof(cData));
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_RESPONSE_FIGHTZONE_RESERVE;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = wResult;
	ip = (int *) (cData + DEF_INDEX2_MSGTYPE + 2);
	*ip = iResult;
	ip += 4;
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 10);
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			return;
	}
}

bool CGame::bCheckLimitedUser(int iClientH) {
	if (m_pClientList[iClientH] == 0) return false;
	if ((memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) &&
			  (m_pClientList[iClientH]->m_iExp >= m_iLevelExp20)) {
		m_pClientList[iClientH]->m_iExp = m_iLevelExp20 - 1;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_TRAVELERLIMITEDLEVEL, 0, 0, 0, 0);
		return true;
	}
	return false;
}

void CGame::RequestCivilRightHandler(int iClientH, char */*pData*/) {
	char * cp, cData[100];
	uint32_t * dwp;
	uint16_t * wp, wResult;
	int iRet;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((m_bAdminSecurity == true) && (m_pClientList[iClientH]->m_iAdminUserLevel > 0)) return;
	if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) != 0) wResult = 0;
	else wResult = 1;
	//if (m_pClientList[iClientH]->m_iLevel < 19) wResult = 0;
	if (wResult == 1) {
		std::memset(m_pClientList[iClientH]->m_cLocation, 0, sizeof(m_pClientList[iClientH]->m_cLocation));
		strcpy(m_pClientList[iClientH]->m_cLocation, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName);
	}
	if (memcmp(m_pClientList[iClientH]->m_cLocation, "are", 3) == 0)
		m_pClientList[iClientH]->m_cSide = 1;
	if (memcmp(m_pClientList[iClientH]->m_cLocation, "elv", 3) == 0)
		m_pClientList[iClientH]->m_cSide = 2;
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_RESPONSE_CIVILRIGHT;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = wResult;
	cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cp, m_pClientList[iClientH]->m_cLocation, 10);
	cp += 10;
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 16);
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			return;
	}
	SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
	RequestChangePlayMode(iClientH);
}

void CGame::RequestRetrieveItemHandler(int iClientH, char *pData) {
	char * cp, cBankItemIndex, cMsg[100];
	int i;
	int j;
	int iRet;
	int iItemWeight;
	uint32_t * dwp;
	uint16_t * wp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	cBankItemIndex = *cp;
	if ((cBankItemIndex < 0) || (cBankItemIndex >= DEF_MAXBANKITEMS)) return;
	if (m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex] == 0) {
		std::memset(cMsg, 0, sizeof(cMsg));
		dwp = (uint32_t *) (cMsg + DEF_INDEX4_MSGID);
		*dwp = MSGID_RESPONSE_RETRIEVEITEM;
		wp = (uint16_t *) (cMsg + DEF_INDEX2_MSGTYPE);
		*wp = DEF_MSGTYPE_REJECT;
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cMsg, 8);
	} else {
		/*
		if ( (m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_cItemType == ItemType::consume) ||
			 (m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_cItemType == ItemType::arrow) ) {
			//iItemWeight = m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_wWeight * m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_dwCount;
			iItemWeight = iGetItemWeight(m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex], m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_dwCount);
		}
		else iItemWeight = iGetItemWeight(m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex], 1); //m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_wWeight;
		 */
		// v1.432
		iItemWeight = iGetItemWeight(m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex], m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_dwCount);
		if ((iItemWeight + m_pClientList[iClientH]->m_iCurWeightLoad) > _iCalcMaxLoad(iClientH)) {
			std::memset(cMsg, 0, sizeof(cMsg));
			dwp = (uint32_t *) (cMsg + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cMsg + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cMsg, 6);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					break;
			}
			return;
		}
		if ((m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_cItemType == ItemType::consume) ||
				  (m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_cItemType == ItemType::arrow)) {
			for (i = 0; i < DEF_MAXITEMS; i++)
				if ((m_pClientList[iClientH]->m_pItemList[i] != 0) &&
						  (m_pClientList[iClientH]->m_pItemList[i]->m_cItemType == m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_cItemType) &&
						  (memcmp(m_pClientList[iClientH]->m_pItemList[i]->m_cName, m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_cName, 20) == 0)) {
					// v1.41 !!!
					SetItemCount(iClientH, i, m_pClientList[iClientH]->m_pItemList[i]->m_dwCount + m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex]->m_dwCount);
					delete m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex];
					m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex] = 0;
					for (j = 0; j <= DEF_MAXBANKITEMS - 2; j++) {
						if ((m_pClientList[iClientH]->m_pItemInBankList[j + 1] != 0) && (m_pClientList[iClientH]->m_pItemInBankList[j] == 0)) {
							m_pClientList[iClientH]->m_pItemInBankList[j] = m_pClientList[iClientH]->m_pItemInBankList[j + 1];
							m_pClientList[iClientH]->m_pItemInBankList[j + 1] = 0;
						}
					}
					std::memset(cMsg, 0, sizeof(cMsg));
					dwp = (uint32_t *) (cMsg + DEF_INDEX4_MSGID);
					*dwp = MSGID_RESPONSE_RETRIEVEITEM;
					wp = (uint16_t *) (cMsg + DEF_INDEX2_MSGTYPE);
					*wp = DEF_MSGTYPE_CONFIRM;
					cp = (char *) (cMsg + DEF_INDEX2_MSGTYPE + 2);
					*cp = cBankItemIndex;
					cp++;
					*cp = i;
					cp++;
					iCalcTotalWeight(iClientH);
					m_pClientList[iClientH]->m_cArrowIndex = _iGetArrowItemIndex(iClientH);
					iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cMsg, 8);
					switch (iRet) {
						case DEF_XSOCKEVENT_QUENEFULL:
						case DEF_XSOCKEVENT_SOCKETERROR:
						case DEF_XSOCKEVENT_CRITICALERROR:
						case DEF_XSOCKEVENT_SOCKETCLOSED:
							DeleteClient(iClientH, true, true);
							return;
					}
					return;
				}
			goto RRIH_NOQUANTITY;
		} else {
RRIH_NOQUANTITY:
			;
			for (i = 0; i < DEF_MAXITEMS; i++)
				if (m_pClientList[iClientH]->m_pItemList[i] == 0) {
					m_pClientList[iClientH]->m_pItemList[i] = m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex];
					// v1.3 1-27 12:22
					m_pClientList[iClientH]->m_ItemPosList[i].x = 40;
					m_pClientList[iClientH]->m_ItemPosList[i].y = 30;
					m_pClientList[iClientH]->m_bIsItemEquipped[i] = false;
					m_pClientList[iClientH]->m_pItemInBankList[cBankItemIndex] = 0;
					for (j = 0; j <= DEF_MAXBANKITEMS - 2; j++) {
						if ((m_pClientList[iClientH]->m_pItemInBankList[j + 1] != 0) && (m_pClientList[iClientH]->m_pItemInBankList[j] == 0)) {
							m_pClientList[iClientH]->m_pItemInBankList[j] = m_pClientList[iClientH]->m_pItemInBankList[j + 1];
							m_pClientList[iClientH]->m_pItemInBankList[j + 1] = 0;
						}
					}
					std::memset(cMsg, 0, sizeof(cMsg));
					dwp = (uint32_t *) (cMsg + DEF_INDEX4_MSGID);
					*dwp = MSGID_RESPONSE_RETRIEVEITEM;
					wp = (uint16_t *) (cMsg + DEF_INDEX2_MSGTYPE);
					*wp = DEF_MSGTYPE_CONFIRM;
					cp = (char *) (cMsg + DEF_INDEX2_MSGTYPE + 2);
					*cp = cBankItemIndex;
					cp++;
					*cp = i;
					cp++;
					iCalcTotalWeight(iClientH);
					m_pClientList[iClientH]->m_cArrowIndex = _iGetArrowItemIndex(iClientH);
					iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cMsg, 8);
					switch (iRet) {
						case DEF_XSOCKEVENT_QUENEFULL:
						case DEF_XSOCKEVENT_SOCKETERROR:
						case DEF_XSOCKEVENT_CRITICALERROR:
						case DEF_XSOCKEVENT_SOCKETCLOSED:
							DeleteClient(iClientH, true, true);
							return;
					}
					return;
				}
			std::memset(cMsg, 0, sizeof(cMsg));
			dwp = (uint32_t *) (cMsg + DEF_INDEX4_MSGID);
			*dwp = MSGID_RESPONSE_RETRIEVEITEM;
			wp = (uint16_t *) (cMsg + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_REJECT;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cMsg, 8);
		}
	}
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			return;
	}
}

bool CGame::bSetItemToBankItem(int iClientH, short sItemIndex) {
	int i;
	int iRet;
	uint32_t * dwp;
	uint16_t * wp;
	char * cp;
	short * sp;
	char cData[100];
	CItem * pItem;
	if (m_pClientList[iClientH] == 0) return false;
	if ((sItemIndex < 0) || (sItemIndex >= DEF_MAXITEMS)) return false;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) return false;
	for (i = 0; i < DEF_MAXBANKITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemInBankList[i] == 0) {
			m_pClientList[iClientH]->m_pItemInBankList[i] = m_pClientList[iClientH]->m_pItemList[sItemIndex];
			pItem = m_pClientList[iClientH]->m_pItemInBankList[i];
			m_pClientList[iClientH]->m_pItemList[sItemIndex] = 0;
			iCalcTotalWeight(iClientH);
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_ITEMTOBANK;
			cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
			*cp = i;
			cp++;
			*cp = 1;
			cp++;
			memcpy(cp, pItem->m_cName, 20);
			cp += 20;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwCount;
			cp += 4;
			*cp = (char) pItem->m_cItemType;
			cp++;
			*cp = (char) pItem->m_cEquipPos;
			cp++;
			*cp = (char) 0;
			cp++;
			sp = (short *) cp;
			*sp = pItem->m_sLevelLimit;
			cp += 2;
			*cp = pItem->m_cGenderLimit;
			cp++;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wCurLifeSpan;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wWeight;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSprite;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSpriteFrame;
			cp += 2;
			*cp = pItem->m_cItemColor;
			cp++;
			// v1.432
			sp = (short *) cp;
			*sp = pItem->m_sItemEffectValue2;
			cp += 2;
			// v1.42
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwAttribute;
			cp += 4;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 55);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					// DeleteClient(iClientH, true, true);
					return true;
			}
			return true;
		}
	return false;
}
// 05/21/2004 - Hypnotoad - send player to jail

void CGame::ApplyPKpenalty(short sAttackerH, short sVictumH) {
	int iV1;
	int iV2;
	if (m_pClientList[sAttackerH] == 0) return;
	if (m_pClientList[sVictumH] == 0) return;
	if ((m_pClientList[sAttackerH]->m_bIsSafeAttackMode == true) && (m_pClientList[sAttackerH]->m_iPKCount == 0)) return;
	m_pClientList[sAttackerH]->m_iPKCount++;
	_bPKLog(DEF_PKLOG_BYPK, sAttackerH, sVictumH, 0);
	iV1 = iDice((m_pClientList[sVictumH]->m_iLevel / 2) + 1, 50);
	iV2 = iDice((m_pClientList[sAttackerH]->m_iLevel / 2) + 1, 50);
	m_pClientList[sAttackerH]->m_iExp -= iV1;
	m_pClientList[sAttackerH]->m_iExp -= iV2;
	if (m_pClientList[sAttackerH]->m_iExp < 0) m_pClientList[sAttackerH]->m_iExp = 0;
	SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_PKPENALTY, 0, 0, 0, 0);
	SendEventToNearClient_TypeA(sAttackerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
	//PutLogFileList(G_cTxt);
	m_stCityStatus[m_pClientList[sAttackerH]->m_cSide].iCrimes++;
	m_pClientList[sAttackerH]->m_iRating -= 10;
	if (m_pClientList[sAttackerH]->m_iRating > 10000) m_pClientList[sAttackerH]->m_iRating = 10000;
	if (m_pClientList[sAttackerH]->m_iRating < -10000) m_pClientList[sAttackerH]->m_iRating = -10000;
	if (strcmp(m_pClientList[sAttackerH]->m_cLocation, "aresden") == 0) {
		if ((strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "arebrk11") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "arebrk12") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "arebrk21") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "arebrk22") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "aresden") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "huntzone2") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "areuni") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "arefarm") == 0)) {
			std::memset(m_pClientList[sAttackerH]->m_cLockedMapName, 0, sizeof(m_pClientList[sAttackerH]->m_cLockedMapName));
			strcpy(m_pClientList[sAttackerH]->m_cLockedMapName, "arejail");
			m_pClientList[sAttackerH]->m_iLockedMapTime = 5 * 2;
			RequestTeleportHandler(sAttackerH, "2   ", "arejail", -1, -1);
			return;
		}
	}
	if (strcmp(m_pClientList[sAttackerH]->m_cLocation, "elvine") == 0) {
		if ((strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "elvbrk11") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "elvbrk12") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "elvbrk21") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "elvbrk22") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "elvine") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "huntzone1") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "elvuni") == 0) ||
				  (strcmp(m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cName, "elvfarm") == 0)) {
			std::memset(m_pClientList[sAttackerH]->m_cLockedMapName, 0, sizeof(m_pClientList[sAttackerH]->m_cLockedMapName));
			strcpy(m_pClientList[sAttackerH]->m_cLockedMapName, "elvjail");
			m_pClientList[sAttackerH]->m_iLockedMapTime = 5 * 2;
			RequestTeleportHandler(sAttackerH, "2   ", "elvjail", -1, -1);
			return;
		}
	}
}

void CGame::PK_KillRewardHandler(short sAttackerH, short sVictumH) {
	if (m_pClientList[sAttackerH] == 0) return;
	if (m_pClientList[sVictumH] == 0) return;
	_bPKLog(DEF_PKLOG_BYPLAYER, sAttackerH, sVictumH, 0);
	if (m_pClientList[sAttackerH]->m_iPKCount != 0) {
	} else {
		m_pClientList[sAttackerH]->m_iRewardGold += iGetExpLevel(m_pClientList[sVictumH]->m_iExp) * 3;
		if (m_pClientList[sAttackerH]->m_iRewardGold > DEF_MAXREWARDGOLD)
			m_pClientList[sAttackerH]->m_iRewardGold = DEF_MAXREWARDGOLD;
		if (m_pClientList[sAttackerH]->m_iRewardGold < 0)
			m_pClientList[sAttackerH]->m_iRewardGold = 0;
		SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_PKCAPTURED, m_pClientList[sVictumH]->m_iPKCount, m_pClientList[sVictumH]->m_iLevel, 0, m_pClientList[sVictumH]->m_cCharName);
	}
}

void CGame::EnemyKillRewardHandler(int iAttackerH, int iClientH) {
	// enemy-kill-mode = 1 | 0
	// if m_bEnemyKillMode is true than death match mode
	// DEATHMATCH MODE:
	// Aresden kills Elvine in Aresden and gets EK
	// Elvine kills Aresden in Aresden and gets an EK
	// Elvine kills Aresden in Elvine and gets an EK
	// Aresden kills Elvine in Elvine and gets an EK
	// CLASSIC MODE:
	// Aresden kills Elvine in Aresden and gets EK
	// Elvine kills Aresden in Aresden and doesnt get an EK
	// Elvine kills Aresden in Elvine and gets an EK
	// Aresden kills Elvine in Elvine and doesnt get an EK
	int iRewardExp;
	int iEK_Level;
	// if the attacker doesnt exist no result
	if (m_pClientList[iAttackerH] == 0) return;
	// if the target doesnt exist no result
	if (m_pClientList[iClientH] == 0) return;
	// Log the EK (killed by enemy)
	_bPKLog(DEF_PKLOG_BYENERMY, iAttackerH, iClientH, 0);
	// set EK level to 30
	iEK_Level = 30;
	// if attacker's level is greater than 80, set ek level to 80
	if (m_pClientList[iAttackerH]->m_iLevel >= 80) iEK_Level = 80;
	// check if attacker level is less than or equal to max level
	if (m_pClientList[iAttackerH]->m_iLevel >= m_iPlayerMaxLevel) {
		// if the
		if (iGetExpLevel(m_pClientList[iClientH]->m_iExp) >= iEK_Level) {
			if ((memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iClientH]->m_cMapName, 10) != 0)
					  && (m_bEnemyKillMode == false)) {
				//Happy Hour para vos
				if (m_bHappyHour == true) {
					m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust * 2;
				} else {
					m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust;
				}
			}
			if (m_bEnemyKillMode == true) {
				//Happy Hour para vos
				if (m_bHappyHour == true) {
					m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust * 2;
				} else {
					m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust;
				}
			}
		}
		m_pClientList[iAttackerH]->m_iRewardGold += iDice(1, (iGetExpLevel(m_pClientList[iClientH]->m_iExp)));
		if (m_pClientList[iAttackerH]->m_iRewardGold > DEF_MAXREWARDGOLD)
			m_pClientList[iAttackerH]->m_iRewardGold = DEF_MAXREWARDGOLD;
		if (m_pClientList[iAttackerH]->m_iRewardGold < 0)
			m_pClientList[iAttackerH]->m_iRewardGold = 0;
		SendNotifyMsg(0, iAttackerH, DEF_NOTIFY_ENEMYKILLREWARD, iClientH, 0, 0, 0);
		return;
	}
	if (m_pClientList[iAttackerH]->m_iPKCount != 0) {
	} else {
		if (m_pClientList[iClientH]->m_iGuildRank == -1) {
			iRewardExp = (iDice(3, (3 * iGetExpLevel(m_pClientList[iClientH]->m_iExp))) + iGetExpLevel(m_pClientList[iClientH]->m_iExp)) / 3;
			if (m_bIsCrusadeMode == true) {
				m_pClientList[iAttackerH]->m_iExp += (iRewardExp / 3)*4;
				m_pClientList[iAttackerH]->m_iWarContribution += (iRewardExp - (iRewardExp / 3))*12;
				if (m_pClientList[iAttackerH]->m_iWarContribution > DEF_MAXWARCONTRIBUTION)
					m_pClientList[iAttackerH]->m_iWarContribution = DEF_MAXWARCONTRIBUTION;
				m_pClientList[iAttackerH]->m_iConstructionPoint += m_pClientList[iClientH]->m_iLevel / 2;
				if (m_pClientList[iAttackerH]->m_iConstructionPoint > DEF_MAXCONSTRUCTIONPOINT)
					m_pClientList[iAttackerH]->m_iConstructionPoint = DEF_MAXCONSTRUCTIONPOINT;
				//testcode
				wsprintf(G_cTxt, "Enemy Player Killed by Player! Construction: +%d WarContribution +%d", m_pClientList[iClientH]->m_iLevel / 2, (iRewardExp - (iRewardExp / 3))*6);
				PutLogList(G_cTxt);
				SendNotifyMsg(0, iAttackerH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[iAttackerH]->m_iConstructionPoint, m_pClientList[iAttackerH]->m_iWarContribution, 0, 0);
				if (iGetExpLevel(m_pClientList[iClientH]->m_iExp) >= iEK_Level) {
					if (memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iClientH]->m_cMapName, 10) != 0) {
						//Happy Hour para vos
						if (m_bHappyHour == true) {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust * 2;
						} else {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust;
						}
					}
					if (m_bEnemyKillMode == true) {
						//Happy Hour para vos
						if (m_bHappyHour == true) {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust * 2;
						} else {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust;
						}
					}
				}
				m_pClientList[iAttackerH]->m_iRewardGold += iDice(1, (iGetExpLevel(m_pClientList[iClientH]->m_iExp)));
				if (m_pClientList[iAttackerH]->m_iRewardGold > DEF_MAXREWARDGOLD)
					m_pClientList[iAttackerH]->m_iRewardGold = DEF_MAXREWARDGOLD;
				if (m_pClientList[iAttackerH]->m_iRewardGold < 0)
					m_pClientList[iAttackerH]->m_iRewardGold = 0;
			} else {
				m_pClientList[iAttackerH]->m_iExp += iRewardExp;
				if (iGetExpLevel(m_pClientList[iClientH]->m_iExp) >= iEK_Level) {
					if ((memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iClientH]->m_cMapName, 10) != 0)
							  && (m_bEnemyKillMode == false)) {
						//Happy Hour para vos
						if (m_bHappyHour == true) {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust * 2;
						} else {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust;
						}
					}
					if (m_bEnemyKillMode == true) {
						//Happy Hour para vos
						if (m_bHappyHour == true) {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust * 2;
						} else {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust;
						}
					}
				}
				m_pClientList[iAttackerH]->m_iRewardGold += iDice(1, (iGetExpLevel(m_pClientList[iClientH]->m_iExp)));
				if (m_pClientList[iAttackerH]->m_iRewardGold > DEF_MAXREWARDGOLD)
					m_pClientList[iAttackerH]->m_iRewardGold = DEF_MAXREWARDGOLD;
				if (m_pClientList[iAttackerH]->m_iRewardGold < 0)
					m_pClientList[iAttackerH]->m_iRewardGold = 0;
			}
		} else {
			iRewardExp = (iDice(3, (3 * iGetExpLevel(m_pClientList[iClientH]->m_iExp))) + iGetExpLevel(m_pClientList[iClientH]->m_iExp)) / 3;
			if (m_bIsCrusadeMode == true) {
				m_pClientList[iAttackerH]->m_iExp += (iRewardExp / 3)*4;
				m_pClientList[iAttackerH]->m_iWarContribution += (iRewardExp - (iRewardExp / 3))*12;
				if (m_pClientList[iAttackerH]->m_iWarContribution > DEF_MAXWARCONTRIBUTION)
					m_pClientList[iAttackerH]->m_iWarContribution = DEF_MAXWARCONTRIBUTION;
				m_pClientList[iAttackerH]->m_iConstructionPoint += m_pClientList[iClientH]->m_iLevel / 2;
				if (m_pClientList[iAttackerH]->m_iConstructionPoint > DEF_MAXCONSTRUCTIONPOINT)
					m_pClientList[iAttackerH]->m_iConstructionPoint = DEF_MAXCONSTRUCTIONPOINT;
				//testcode
				wsprintf(G_cTxt, "Enemy Player Killed by Player! Construction: +%d WarContribution +%d", m_pClientList[iClientH]->m_iLevel / 2, (iRewardExp - (iRewardExp / 3))*6);
				PutLogList(G_cTxt);
				SendNotifyMsg(0, iAttackerH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[iAttackerH]->m_iConstructionPoint, m_pClientList[iAttackerH]->m_iWarContribution, 0, 0);
				if (iGetExpLevel(m_pClientList[iClientH]->m_iExp) >= iEK_Level) {
					if ((memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iClientH]->m_cMapName, 10) != 0)
							  && (m_bEnemyKillMode == false)) {
						//Happy Hour para vos
						if (m_bHappyHour == true) {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust * 2;
						} else {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust;
						}
					}
					if (m_bEnemyKillMode == true) {
						//Happy Hour para vos
						if (m_bHappyHour == true) {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust * 2;
						} else {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust;
						}
					}
				}
				m_pClientList[iAttackerH]->m_iRewardGold += iDice(1, (iGetExpLevel(m_pClientList[iClientH]->m_iExp)));
				if (m_pClientList[iAttackerH]->m_iRewardGold > DEF_MAXREWARDGOLD)
					m_pClientList[iAttackerH]->m_iRewardGold = DEF_MAXREWARDGOLD;
				if (m_pClientList[iAttackerH]->m_iRewardGold < 0)
					m_pClientList[iAttackerH]->m_iRewardGold = 0;
			} else {
				m_pClientList[iAttackerH]->m_iExp += iRewardExp;
				if (iGetExpLevel(m_pClientList[iClientH]->m_iExp) >= iEK_Level) {
					if ((memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iClientH]->m_cMapName, 10) != 0)
							  && (m_bEnemyKillMode == false)) {
						//Happy Hour para vos
						if (m_bHappyHour == true) {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust * 2;
						} else {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust;
						}
					}
					if (m_bEnemyKillMode == true) {
						//Happy Hour para vos
						if (m_bHappyHour == true) {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust * 2;
						} else {
							m_pClientList[iAttackerH]->m_iEnemyKillCount += m_iEnemyKillAdjust;
						}
					}
				}
				m_pClientList[iAttackerH]->m_iRewardGold += iDice(1, (iGetExpLevel(m_pClientList[iClientH]->m_iExp)));
				if (m_pClientList[iAttackerH]->m_iRewardGold > DEF_MAXREWARDGOLD)
					m_pClientList[iAttackerH]->m_iRewardGold = DEF_MAXREWARDGOLD;
				if (m_pClientList[iAttackerH]->m_iRewardGold < 0)
					m_pClientList[iAttackerH]->m_iRewardGold = 0;
			}
		}
		SendNotifyMsg(0, iAttackerH, DEF_NOTIFY_ENEMYKILLREWARD, iClientH, 0, 0, 0);
		if (bCheckLimitedUser(iAttackerH) == false) {
			SendNotifyMsg(0, iAttackerH, DEF_NOTIFY_EXP, 0, 0, 0, 0);
		}
		bCheckLevelUp(iAttackerH);
		m_stCityStatus[m_pClientList[iAttackerH]->m_cSide].iWins++;
	}
}

void CGame::ApplyCombatKilledPenalty(int iClientH, int cPenaltyLevel, bool bIsSAattacked) {
	int iExp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	// Crusade
	if (m_bIsCrusadeMode == true) {
		if (m_pClientList[iClientH]->m_iPKCount > 0) {
			m_pClientList[iClientH]->m_iPKCount--;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_PKPENALTY, 0, 0, 0, 0);
			// v2.15
			_bPKLog(DEF_PKLOG_REDUCECRIMINAL, 0, iClientH, 0);
		}
		return;
	} else {
		if (m_pClientList[iClientH]->m_iPKCount > 0) {
			m_pClientList[iClientH]->m_iPKCount--;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_PKPENALTY, 0, 0, 0, 0);
			// v2.15
			_bPKLog(DEF_PKLOG_REDUCECRIMINAL, 0, iClientH, 0);
		}
		iExp = iDice(1, (5 * cPenaltyLevel * m_pClientList[iClientH]->m_iLevel));
		if (m_pClientList[iClientH]->m_bIsNeutral == true) iExp = iExp / 3;
		// if (m_pClientList[iClientH]->m_iLevel == DEF_PLAYERMAXLEVEL) iExp = 0;
		m_pClientList[iClientH]->m_iExp -= iExp;
		if (m_pClientList[iClientH]->m_iExp < 0) m_pClientList[iClientH]->m_iExp = 0;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_EXP, 0, 0, 0, 0);
		if (m_pClientList[iClientH]->m_bIsNeutral != true) {
			if (m_pClientList[iClientH]->m_iLevel < 80) {
				// v2.03 60 -> 80
				cPenaltyLevel--;
				if (cPenaltyLevel <= 0) cPenaltyLevel = 1;
				_PenaltyItemDrop(iClientH, cPenaltyLevel, bIsSAattacked);
			} else _PenaltyItemDrop(iClientH, cPenaltyLevel, bIsSAattacked);
		}
	}
}
// 05/29/2004 - Hypnotoad - Limits some items from not dropping

void CGame::_PenaltyItemDrop(int iClientH, int iTotal, bool bIsSAattacked) {
	int i;
	int j;
	int iRemainItem;
	char cItemIndexList[DEF_MAXITEMS], cItemIndex;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((m_pClientList[iClientH]->m_iAlterItemDropIndex != -1) && (m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_iAlterItemDropIndex] != 0)) {
		// Testcode
		if (m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_iAlterItemDropIndex]->m_sItemEffectType == ItemEffectType::alteritemdrop) {
			if (m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_iAlterItemDropIndex]->m_wCurLifeSpan > 0)
				m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_iAlterItemDropIndex]->m_wCurLifeSpan--;
			DropItemHandler(iClientH, m_pClientList[iClientH]->m_iAlterItemDropIndex, -1, m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_iAlterItemDropIndex]->m_cName);
			m_pClientList[iClientH]->m_iAlterItemDropIndex = -1;
		} else {
			// v2.04 testcode
			PutLogFileList("Alter Drop Item Index Error1");
			for (i = 0; i < DEF_MAXITEMS; i++)
				if ((m_pClientList[iClientH]->m_pItemList[i] != 0) && (m_pClientList[iClientH]->m_pItemList[i]->m_sItemEffectType == ItemEffectType::alteritemdrop)) {
					m_pClientList[iClientH]->m_iAlterItemDropIndex = i;
					if (m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_iAlterItemDropIndex]->m_wCurLifeSpan > 0)
						m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_iAlterItemDropIndex]->m_wCurLifeSpan--;
					DropItemHandler(iClientH, m_pClientList[iClientH]->m_iAlterItemDropIndex, -1, m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_iAlterItemDropIndex]->m_cName);
					m_pClientList[iClientH]->m_iAlterItemDropIndex = -1;
					return;
				}
			goto PID_DROP;
		}
		return;
	}
PID_DROP:
	;
	for (i = 1; i <= iTotal; i++) {
		iRemainItem = 0;
		std::memset(cItemIndexList, 0, sizeof(cItemIndexList));
		for (j = 0; j < DEF_MAXITEMS; j++)
			if (m_pClientList[iClientH]->m_pItemList[j] != 0) {
				cItemIndexList[iRemainItem] = j;
				iRemainItem++;
			}
		if (iRemainItem == 0) return;
		cItemIndex = cItemIndexList[ iDice(1, iRemainItem) - 1 ];
		if ((m_pClientList[iClientH]->m_pItemList[cItemIndex]->m_sTouchEffectType != 0) &&
				  (m_pClientList[iClientH]->m_pItemList[cItemIndex]->m_sTouchEffectValue1 == m_pClientList[iClientH]->m_sCharIDnum1) &&
				  (m_pClientList[iClientH]->m_pItemList[cItemIndex]->m_sTouchEffectValue2 == m_pClientList[iClientH]->m_sCharIDnum2) &&
				  (m_pClientList[iClientH]->m_pItemList[cItemIndex]->m_sTouchEffectValue3 == m_pClientList[iClientH]->m_sCharIDnum3)) {
		} else if (
				  (m_pClientList[iClientH]->m_pItemList[cItemIndex]->m_sIDnum >= ItemId::aresden_hero_cape) &&
				  (m_pClientList[iClientH]->m_pItemList[cItemIndex]->m_sIDnum != ItemId::cape) &&
				  (m_pClientList[iClientH]->m_pItemList[cItemIndex]->m_sIDnum <= ItemId::elvine_hero_cape_plus_1)) {
		} else if (((m_pClientList[iClientH]->m_pItemList[cItemIndex]->m_sItemEffectType == ItemEffectType::attack_specablty) ||
				  (m_pClientList[iClientH]->m_pItemList[cItemIndex]->m_sItemEffectType == ItemEffectType::defense_specablty)) &&
				  (bIsSAattacked == false)) {
		} else if ((m_pClientList[iClientH]->m_bIsLuckyEffect == true) && (iDice(1, 10) == 5)) {
		} else DropItemHandler(iClientH, cItemIndex, -1, m_pClientList[iClientH]->m_pItemList[cItemIndex]->m_cName);
	}
}

void CGame::GetRewardMoneyHandler(int iClientH) {
	int iRet;
	int iEraseReq;
	int iWeightLeft;
	int iRewardGoldLeft;
	uint32_t * dwp;
	uint16_t * wp;
	char * cp, cData[100], cItemName[21];
	CItem * pItem;
	short * sp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	iWeightLeft = _iCalcMaxLoad(iClientH) - iCalcTotalWeight(iClientH);
	if (iWeightLeft <= 0) return;
	iWeightLeft = iWeightLeft / 2;
	if (iWeightLeft <= 0) return;
	pItem = new CItem;
	std::memset(cItemName, 0, sizeof(cItemName));
	wsprintf(cItemName, "Gold");
	_bInitItemAttr(pItem, cItemName);
	//pItem->m_dwCount = m_pClientList[iClientH]->m_iRewardGold;
	if ((iWeightLeft / iGetItemWeight(pItem, 1)) >= m_pClientList[iClientH]->m_iRewardGold) {
		pItem->m_dwCount = m_pClientList[iClientH]->m_iRewardGold;
		iRewardGoldLeft = 0;
	} else {
		pItem->m_dwCount = (iWeightLeft / iGetItemWeight(pItem, 1));
		iRewardGoldLeft = m_pClientList[iClientH]->m_iRewardGold - (iWeightLeft / iGetItemWeight(pItem, 1));
	}
	if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
		m_pClientList[iClientH]->m_iRewardGold = iRewardGoldLeft;
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_NOTIFY;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_NOTIFY_ITEMOBTAINED;
		cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
		*cp = 1;
		cp++;
		memcpy(cp, pItem->m_cName, 20);
		cp += 20;
		dwp = (uint32_t *) cp;
		*dwp = pItem->m_dwCount;
		cp += 4;
		*cp = (char) pItem->m_cItemType;
		cp++;
		*cp = (char) pItem->m_cEquipPos;
		cp++;
		*cp = (char) 0;
		cp++;
		sp = (short *) cp;
		*sp = pItem->m_sLevelLimit;
		cp += 2;
		*cp = pItem->m_cGenderLimit;
		cp++;
		wp = (uint16_t *) cp;
		*wp = pItem->m_wCurLifeSpan;
		cp += 2;
		wp = (uint16_t *) cp;
		*wp = pItem->m_wWeight;
		cp += 2;
		sp = (short *) cp;
		*sp = pItem->m_sSprite;
		cp += 2;
		sp = (short *) cp;
		*sp = pItem->m_sSpriteFrame;
		cp += 2;
		*cp = pItem->m_cItemColor;
		cp++;
		*cp = (char) pItem->m_sItemSpecEffectValue2; // v1.41
		cp++;
		dwp = (uint32_t *) cp;
		*dwp = pItem->m_dwAttribute;
		cp += 4;
		/*
		 *cp = (char)(pItem->m_dwAttribute & 0x00000001);
		cp++;
		 */
		if (iEraseReq == 1) delete pItem;
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
		switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
				DeleteClient(iClientH, true, true);
				return;
		}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_REWARDGOLD, 0, 0, 0, 0);
	} else {
	}
}

int CGame::_iCalcMaxLoad(int iClientH) {
	if (m_pClientList[iClientH] == 0) return 0;
	return ((m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iAngelicStr) * 500 + m_pClientList[iClientH]->m_iLevel * 500);
}

int CGame::iAddDynamicObjectList(short sOwner, char cOwnerType, short sType, char cMapIndex, short sX, short sY, uint32_t dwLastTime, int iV1) {
	int i;
	short sPreType;
	uint32_t dwTime;
	uint32_t dwRegisterTime;
	m_pMapList[cMapIndex]->bGetDynamicObject(sX, sY, &sPreType, &dwRegisterTime);
	if (sPreType != 0) return 0;
	switch (sType) {
		case DEF_DYNAMICOBJECT_FIRE3:
		case DEF_DYNAMICOBJECT_FIRE:
			if (m_pMapList[cMapIndex]->bGetIsMoveAllowedTile(sX, sY) == false)
				return 0;
			if (dwLastTime != 0) {
				switch (m_pMapList[cMapIndex]->m_cWhetherStatus) {
					case 1: dwLastTime = dwLastTime - (dwLastTime / 2);
						break;
					case 2: dwLastTime = (dwLastTime / 2) - (dwLastTime / 3);
						break;
					case 3: dwLastTime = (dwLastTime / 3) - (dwLastTime / 4);
						break;
				}
				if (dwLastTime == 0) dwLastTime = 1000;
			}
			break;
		case DEF_DYNAMICOBJECT_FISHOBJECT:
		case DEF_DYNAMICOBJECT_FISH:
			if (m_pMapList[cMapIndex]->bGetIsWater(sX, sY) == false)
				return 0;
			break;
		case DEF_DYNAMICOBJECT_ARESDENFLAG1:
		case DEF_DYNAMICOBJECT_ELVINEFLAG1:
		case DEF_DYNAMICOBJECT_MINERAL1:
		case DEF_DYNAMICOBJECT_MINERAL2:
			if (m_pMapList[cMapIndex]->bGetMoveable(sX, sY) == false)
				return 0;
			m_pMapList[cMapIndex]->SetTempMoveAllowedFlag(sX, sY, false);
			break;
	}
	for (i = 1; i < DEF_MAXDYNAMICOBJECTS; i++)
		if (m_pDynamicObjectList[i] == 0) {
			dwTime = timeGetTime();
			if (dwLastTime != 0)
				dwLastTime += (iDice(1, 4)*1000);
			m_pDynamicObjectList[i] = new CDynamicObject(sOwner, cOwnerType, sType, cMapIndex, sX, sY, dwTime, dwLastTime, iV1);
			m_pMapList[cMapIndex]->SetDynamicObject(i, sType, sX, sY, dwTime);
			SendEventToNearClient_TypeB(MSGID_DYNAMICOBJECT, DEF_MSGTYPE_CONFIRM, cMapIndex, sX, sY, sType, i, 0);
			return i;
		}
	return 0;
}

void CGame::CheckDynamicObjectList() {
	int i;
	uint32_t dwTime = timeGetTime(), dwRegisterTime;
	short sType;
	for (i = 1; i < DEF_MAXDYNAMICOBJECTS; i++) {
		if ((m_pDynamicObjectList[i] != 0) && (m_pDynamicObjectList[i]->m_dwLastTime != 0)) {
			switch (m_pDynamicObjectList[i]->m_sType) {
				case DEF_DYNAMICOBJECT_FIRE3:
				case DEF_DYNAMICOBJECT_FIRE:
					switch (m_pMapList[m_pDynamicObjectList[i]->m_cMapIndex]->m_cWhetherStatus) {
						case 0: break;
						case 1:
						case 2:
						case 3:
							m_pDynamicObjectList[i]->m_dwLastTime = m_pDynamicObjectList[i]->m_dwLastTime -
									  (m_pDynamicObjectList[i]->m_dwLastTime / 10) * m_pMapList[m_pDynamicObjectList[i]->m_cMapIndex]->m_cWhetherStatus;
							break;
					}
					break;
			}
		}
	}
	for (i = 1; i < DEF_MAXDYNAMICOBJECTS; i++) {
		if ((m_pDynamicObjectList[i] != 0) && (m_pDynamicObjectList[i]->m_dwLastTime != 0) &&
				  ((dwTime - m_pDynamicObjectList[i]->m_dwRegisterTime) >= m_pDynamicObjectList[i]->m_dwLastTime)) {
			m_pMapList[ m_pDynamicObjectList[i]->m_cMapIndex ]->bGetDynamicObject(m_pDynamicObjectList[i]->m_sX, m_pDynamicObjectList[i]->m_sY, &sType, &dwRegisterTime);
			if (dwRegisterTime == m_pDynamicObjectList[i]->m_dwRegisterTime) {
				SendEventToNearClient_TypeB(MSGID_DYNAMICOBJECT, DEF_MSGTYPE_REJECT, m_pDynamicObjectList[i]->m_cMapIndex, m_pDynamicObjectList[i]->m_sX, m_pDynamicObjectList[i]->m_sY, m_pDynamicObjectList[i]->m_sType, i, 0);
				m_pMapList[m_pDynamicObjectList[i]->m_cMapIndex]->SetDynamicObject(0, 0, m_pDynamicObjectList[i]->m_sX, m_pDynamicObjectList[i]->m_sY, dwTime);
			}
			switch (sType) {
				case DEF_DYNAMICOBJECT_FISHOBJECT:
				case DEF_DYNAMICOBJECT_FISH:
					bDeleteFish(m_pDynamicObjectList[i]->m_sOwner, 2);
					break;
			}
			delete m_pDynamicObjectList[i];
			m_pDynamicObjectList[i] = 0;
		}
	}
}

void CGame::CalculateSSN_ItemIndex(int iClientH, short sWeaponIndex, int iValue) {
	short sSkillIndex;
	int iOldSSN;
	int iSSNpoint;
	int iWeaponIndex;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_pItemList[sWeaponIndex] == 0) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	sSkillIndex = m_pClientList[iClientH]->m_pItemList[sWeaponIndex]->m_sRelatedSkill;
	if ((sSkillIndex < 0) || (sSkillIndex >= DEF_MAXSKILLTYPE)) return;
	if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] == 0) return;
	iOldSSN = m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex];
	m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] += iValue;
	iSSNpoint = m_iSkillSSNpoint[ m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] + 1 ];
	if ((m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] < 100) &&
			  (m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] > iSSNpoint)) {
		m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]++;
		switch (sSkillIndex) {
			case 0: // Mining
			case 5: // Hand-Attack
			case 13: // Manufacturing
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > ((m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iAngelicStr) * 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			case 3: // Magic-Resistance
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > (m_pClientList[iClientH]->m_iLevel * 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			case 4: // Magic
			case 21: // Staff-Attack
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > ((m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iAngelicMag)* 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			case 1: // Fishing
			case 6: // Archery
			case 7: // Short-Sword
			case 8: // Long-Sword
			case 9: // Fencing
			case 10: // Axe-Attack
			case 11: // Shield
			case 14: // Hammer
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > ((m_pClientList[iClientH]->m_iDex + m_pClientList[iClientH]->m_iAngelicDex) * 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			case 2: // Farming
			case 12: // Alchemy
			case 15:
			case 19: // Pretend-Corpse
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > ((m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iAngelicInt) * 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			case 23: // Poison-Resistance
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > (m_pClientList[iClientH]->m_iVit * 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			default:
				m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
		}
		if (m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] == 0) {
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ] != -1) {
				iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ];
				if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sSkillIndex) {
					m_pClientList[iClientH]->m_iHitRatio++;
				}
			}
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ] != -1) {
				iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ];
				if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sSkillIndex) {
					m_pClientList[iClientH]->m_iHitRatio++;
				}
			}
		}
		if (m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] == 0) {
			bCheckTotalSkillMasteryPoints(iClientH, sSkillIndex);
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILL, sSkillIndex, m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex], 0, 0);
		}
	}
}

/*void CGame::CalculateSSN_ItemIndex(int iClientH, short sWeaponIndex, int iValue)
{
 short sSkillIndex;
 int iOldSSN;
 int iSSNpoint;
 int iWeaponIndex;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_pItemList[sWeaponIndex] == 0) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	sSkillIndex = m_pClientList[iClientH]->m_pItemList[sWeaponIndex]->m_sRelatedSkill;
	if ((sSkillIndex < 0) || (sSkillIndex >= DEF_MAXSKILLTYPE)) return;
	if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] == 0) return;
#ifdef DEF_TESTSERVER
	iValue = iValue * 100;
#endif
	iOldSSN = m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex];
	m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] += iValue;
	iSSNpoint = m_iSkillSSNpoint[ m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]+1 ];
	if ( (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] < 100) &&
		 (m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] > iSSNpoint) ) {
		m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]++;
		switch (sSkillIndex) {
		case 0:
		case 2:
		case 5:
		case 13:
			if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > (m_pClientList[iClientH]->m_iStr * 2)) {
				m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
				m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
			}
			else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
			break;
		case 3:
			if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > (m_pClientList[iClientH]->m_iLevel * 2)) {
				m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
				m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
			}
			else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
			break;
		case 4:
		case 21:
			if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > (m_pClientList[iClientH]->m_iMag * 2)) {
				m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
				m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
			}
			else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
			break;
		case 1:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 14:
			if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > (m_pClientList[iClientH]->m_iDex * 2)) {
				m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
				m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
			}
			else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
			break;
		case 12:
		case 14:
		case 15:
		case 19:
			if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > (m_pClientList[iClientH]->m_iInt * 2)) {
				m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
				m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
			}
			else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
			break;
		case 23:
			if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > (m_pClientList[iClientH]->m_iVit * 2)) {
				m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
				m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
			}
			else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
			break;
		default:
			m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
			break;
		}
		if (m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] == 0) {
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ] != -1) {
				iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ];
				if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sSkillIndex) {
					m_pClientList[iClientH]->m_iHitRatio++;
				}
			}
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ] != -1) {
				iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ];
				if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sSkillIndex) {
					m_pClientList[iClientH]->m_iHitRatio++;
				}
			}
		}
		if (m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] == 0) {
			bCheckTotalSkillMasteryPoints(iClientH, sSkillIndex);
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILL, sSkillIndex, m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex], 0, 0);
		}
	}
}*/
void CGame::CalculateSSN_SkillIndex(int iClientH, short sSkillIndex, int iValue) {
	int iOldSSN;
	int iSSNpoint;
	int iWeaponIndex;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((sSkillIndex < 0) || (sSkillIndex >= DEF_MAXSKILLTYPE)) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] == 0) return;
#ifdef DEF_TESTSERVER
	iValue = iValue * 100;
#endif
	iOldSSN = m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex];
	m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] += iValue;
	iSSNpoint = m_iSkillSSNpoint[ m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] + 1 ];
	if ((m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] < 100) &&
			  (m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] > iSSNpoint)) {
		m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]++;
		switch (sSkillIndex) {
			case 0:
			case 5:
			case 13:
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > ((m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iAngelicStr) * 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			case 3:
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > (m_pClientList[iClientH]->m_iLevel * 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			case 4:
			case 21:
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > ((m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iAngelicMag)* 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			case 1:
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
			case 11:
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > ((m_pClientList[iClientH]->m_iDex + m_pClientList[iClientH]->m_iDex) * 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			case 2:
			case 12:
			case 14:
			case 15:
			case 19:
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > ((m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iAngelicInt)* 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			case 23:
				if (m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex] > (m_pClientList[iClientH]->m_iVit * 2)) {
					m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex]--;
					m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = iOldSSN;
				} else m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
			default:
				m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] = 0;
				break;
		}
		if (m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] == 0) {
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ] != -1) {
				iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ];
				if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sSkillIndex) {
					m_pClientList[iClientH]->m_iHitRatio++;
				}
			}
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ] != -1) {
				iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ];
				if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sSkillIndex) {
					m_pClientList[iClientH]->m_iHitRatio++;
				}
			}
		}
		if (m_pClientList[iClientH]->m_iSkillSSN[sSkillIndex] == 0) {
			bCheckTotalSkillMasteryPoints(iClientH, sSkillIndex);
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILL, sSkillIndex, m_pClientList[iClientH]->m_cSkillMastery[sSkillIndex], 0, 0);
		}
	}
}

void CGame::MobGenerator() {
	int i;
	int x;
	int j;
	int iNamingValue;
	int iResult;
	int iTotalMob;
	char cNpcName[21], cName_Master[11], cName_Slave[11], cWaypoint[11];
	char cSA;
	int pX;
	int pY;
	int iMapLevel;
	int iProbSA;
	int iKindSA;
	int iResultNum;
	int iNpcID;
	bool bMaster;
	bool bFirmBerserk;
	bool bIsSpecialEvent;
	if (m_bOnExitProcess == true) return;
	for (i = 0; i < DEF_MAXMAPS; i++) {
		// Random Mob Generator
		/*
		iResultNum = 0;
		// v1.432 ??? ??????????????? ?????? ??? ?????? ??? ??????. 1000???????? 100%  ??? 50%
		if ((m_pMapList[i] != 0) && (m_pMapList[i]->m_bRandomMobGenerator == true)) {
		if (m_iTotalClients >= 1000) {
		iResultNum = (m_pMapList[i]->m_iMaximumObject - 30);
		}
		else {
		dV2 = (double)m_iTotalClients;
		dV3 = (m_pMapList[i]->m_iMaximumObject - 30);
		dV1 = (dV2 / 1000.0f)*dV3;
		iResultNum = (int)dV1;
		}
			if ((m_pMapList[i]->m_bIsHeldenianMap == true) && (m_bIsHeldenianMode == true)) break;
			else if ((m_pMapList[i]->m_bIsHeldenianMap == true) && (m_bHeldenianInitiated == true)) break;
		// v1.432 ??? ???
		iMin = (m_pMapList[i]->m_iMaximumObject - 30) - ((m_pMapList[i]->m_iMaximumObject - 30)/3);
		if (iResultNum > (m_pMapList[i]->m_iMaximumObject - 30)) iResultNum = (m_pMapList[i]->m_iMaximumObject - 30);
		if (iResultNum < iMin) iResultNum = iMin;
		}
		 */
		//if ( (m_pMapList[i] != 0) && (m_pMapList[i]->m_bRandomMobGenerator == true) &&
		//	 ((m_pMapList[i]->m_iMaximumObject - 30) > m_pMapList[i]->m_iTotalActiveObject) ) {
		if (m_pMapList[i] != 0) {
			//if (m_bIsCrusadeMode == true)
			//	 iResultNum = (m_pMapList[i]->m_iMaximumObject - 30) / 3;
			//else iResultNum = (m_pMapList[i]->m_iMaximumObject - 30);
			iResultNum = (m_pMapList[i]->m_iMaximumObject - 30);
		}
		if ((m_pMapList[i] != 0) && (m_pMapList[i]->m_bRandomMobGenerator == true) && (iResultNum > m_pMapList[i]->m_iTotalActiveObject)) {
			if ((m_iMiddlelandMapIndex != -1) && (m_iMiddlelandMapIndex == i) && (m_bIsCrusadeMode == true)) break;
			iNamingValue = m_pMapList[i]->iGetEmptyNamingValue();
			if (iNamingValue != -1) {
				// Master Mob????????.
				std::memset(cName_Master, 0, sizeof(cName_Master));
				wsprintf(cName_Master, "XX%d", iNamingValue);
				cName_Master[0] = '_';
				cName_Master[1] = i + 65;
				std::memset(cNpcName, 0, sizeof(cNpcName));
				bFirmBerserk = false;
				iResult = iDice(1, 100);
				switch (m_pMapList[i]->m_cRandomMobGeneratorLevel) {
					case 1: // arefarm, elvfarm, aresden, elvine
						if ((iResult >= 1) && (iResult < 20)) {
							iResult = 1; // Slime
						} else if ((iResult >= 20) && (iResult < 40)) {
							iResult = 2; // Giant-Ant
						} else if ((iResult >= 40) && (iResult < 85)) {
							iResult = 24; // Rabbit
						} else if ((iResult >= 85) && (iResult < 95)) {
							iResult = 25; // Cat
						} else if ((iResult >= 95) && (iResult <= 100)) {
							iResult = 3; // Orc
						}
						iMapLevel = 1;
						break;
					case 2:
						if ((iResult >= 1) && (iResult < 40)) {
							iResult = 1;
						} else if ((iResult >= 40) && (iResult < 80)) {
							iResult = 2;
						} else iResult = 10;
						iMapLevel = 1;
						break;
					case 3: // v1.4334 ????????? ????
						if ((iResult >= 1) && (iResult < 20)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 3;
									break;
								case 2: iResult = 4;
									break;
							}
						} else if ((iResult >= 20) && (iResult < 25)) {
							iResult = 30;
						} else if ((iResult >= 25) && (iResult < 50)) {
							switch (iDice(1, 3)) {
								case 1: iResult = 5;
									break;
								case 2: iResult = 6;
									break;
								case 3: iResult = 7;
									break;
							}
						} else if ((iResult >= 50) && (iResult < 75)) {
							switch (iDice(1, 7)) {
								case 1:
								case 2: iResult = 8;
									break;
								case 3: iResult = 11;
									break;
								case 4: iResult = 12;
									break;
								case 5: iResult = 18;
									break;
								case 6: iResult = 26;
									break;
								case 7: iResult = 28;
									break;
							}
						} else if ((iResult >= 75) && (iResult <= 100)) {
							switch (iDice(1, 5)) {
								case 1:
								case 2: iResult = 9;
									break;
								case 3: iResult = 13;
									break;
								case 4: iResult = 14;
									break;
								case 5: iResult = 27;
									break;
							}
						}
						iMapLevel = 3;
						break;
					case 4:
						if ((iResult >= 1) && (iResult < 50)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 2;
									break;
								case 2: iResult = 10;
									break;
							}
						} else if ((iResult >= 50) && (iResult < 80)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 8;
									break;
								case 2: iResult = 11;
									break;
							}
						} else if ((iResult >= 80) && (iResult <= 100)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 14;
									break;
								case 2: iResult = 9;
									break;
							}
						}
						iMapLevel = 2;
						break;
					case 5:
						if ((iResult >= 1) && (iResult < 30)) {
							switch (iDice(1, 5)) {
								case 1:
								case 2:
								case 3:
								case 4:
								case 5: iResult = 2;
									break;
							}
						} else if ((iResult >= 30) && (iResult < 60)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 3;
									break;
								case 2: iResult = 4;
									break;
							}
						} else if ((iResult >= 60) && (iResult < 80)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 5;
									break;
								case 2: iResult = 7;
									break;
							}
						} else if ((iResult >= 80) && (iResult < 95)) {
							switch (iDice(1, 3)) {
								case 1:
								case 2: iResult = 8;
									break;
								case 3: iResult = 11;
									break;
							}
						} else if ((iResult >= 95) && (iResult <= 100)) {
							switch (iDice(1, 3)) {
								case 1: iResult = 11;
									break;
								case 2: iResult = 14;
									break;
								case 3: iResult = 9;
									break;
							}
						}
						iMapLevel = 3;
						break;
					case 6: // huntzone3, huntzone4
						if ((iResult >= 1) && (iResult < 60)) {
							switch (iDice(1, 4)) {
								case 1: iResult = 5;
									break; // Skeleton
								case 2: iResult = 6;
									break; // Orc-Mage
								case 3: iResult = 12;
									break; // Cyclops
								case 4: iResult = 11;
									break; // Troll
							}
						} else if ((iResult >= 60) && (iResult < 90)) {
							switch (iDice(1, 5)) {
								case 1:
								case 2: iResult = 8;
									break; // Stone-Golem
								case 3: iResult = 11;
									break; // Troll
								case 4: iResult = 12;
									break; // Cyclops
								case 5: iResult = 43;
									break; // Tentocle
							}
						} else if ((iResult >= 90) && (iResult <= 100)) {
							switch (iDice(1, 9)) {
								case 1: iResult = 26;
									break;
								case 2: iResult = 9;
									break;
								case 3: iResult = 13;
									break;
								case 4: iResult = 14;
									break;
								case 5: iResult = 18;
									break;
								case 6: iResult = 28;
									break;
								case 7: iResult = 27;
									break;
								case 8: iResult = 29;
									break;
							}
						}
						iMapLevel = 4;
						break;
					case 7: // areuni, elvuni
						if ((iResult >= 1) && (iResult < 50)) {
							switch (iDice(1, 5)) {
								case 1: iResult = 3;
									break; // Orc
								case 2: iResult = 6;
									break; // Orc-Mage
								case 3: iResult = 10;
									break; // Amphis
								case 4: iResult = 3;
									break; // Orc
								case 5: iResult = 50;
									break; // Giant-Tree
							}
						} else if ((iResult >= 50) && (iResult < 60)) {
							iResult = 29; // Rudolph
						} else if ((iResult >= 60) && (iResult < 85)) {
							switch (iDice(1, 4)) {
								case 1: iResult = 50;
									break; // Giant-Tree
								case 2:
								case 3: iResult = 6;
									break; // Orc-Mage
								case 4: iResult = 12;
									break; // Troll
							}
						} else if ((iResult >= 85) && (iResult <= 100)) {
							switch (iDice(1, 4)) {
								case 1: iResult = 12;
									break; // Troll
								case 2:
								case 3:
									if (iDice(1, 100) < 3)
										iResult = 17; // Unicorn
									else iResult = 12; // Troll
									break;
								case 4: iResult = 29;
									break; // Cannibal-Plant
							}
						}
						iMapLevel = 4;
						break;
					case 8:
						if ((iResult >= 1) && (iResult < 70)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 4;
									break;
								case 2: iResult = 5;
									break;
							}
						} else if ((iResult >= 70) && (iResult < 95)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 8;
									break;
								case 2: iResult = 11;
									break;
							}
						} else if ((iResult >= 95) && (iResult <= 100)) {
							iResult = 14;
							break;
						}
						iMapLevel = 4;
						break;
					case 9:
						if ((iResult >= 1) && (iResult < 70)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 4;
									break;
								case 2: iResult = 5;
									break;
							}
						} else if ((iResult >= 70) && (iResult < 95)) {
							switch (iDice(1, 3)) {
								case 1: iResult = 8;
									break;
								case 2: iResult = 9;
									break;
								case 3: iResult = 13;
									break;
							}
						} else if ((iResult >= 95) && (iResult <= 100)) {
							switch (iDice(1, 6)) {
								case 1:
								case 2:
								case 3: iResult = 9;
									break;
								case 4:
								case 5: iResult = 14;
									break;
								case 6: iResult = 15;
									break;
							}
						}
						if ((iDice(1, 3) == 1) && (iResult != 16)) bFirmBerserk = true;
						iMapLevel = 5;
						break;
					case 10:
						if ((iResult >= 1) && (iResult < 70)) {
							switch (iDice(1, 3)) {
								case 1: iResult = 9;
									break;
								case 2: iResult = 5;
									break;
								case 3: iResult = 8;
									break;
							}
						} else if ((iResult >= 70) && (iResult < 95)) {
							switch (iDice(1, 3)) {
								case 1:
								case 2: iResult = 13;
									break;
								case 3: iResult = 14;
									break;
							}
						} else if ((iResult >= 95) && (iResult <= 100)) {
							switch (iDice(1, 3)) {
								case 1:
								case 2: iResult = 14;
									break;
								case 3: iResult = 15;
									break;
							}
						}
						// Demon?? Berserk ????? ??? ?????
						if ((iDice(1, 3) == 1) && (iResult != 16)) bFirmBerserk = true;
						iMapLevel = 5;
						break;
					case 11:
						if ((iResult >= 1) && (iResult < 30)) {
							switch (iDice(1, 5)) {
								case 1:
								case 2:
								case 3:
								case 4:
								case 5: iResult = 2;
									break;
							}
						} else if ((iResult >= 30) && (iResult < 60)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 3;
									break;
								case 2: iResult = 4;
									break;
							}
						} else if ((iResult >= 60) && (iResult < 80)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 5;
									break;
								case 2: iResult = 7;
									break;
							}
						} else if ((iResult >= 80) && (iResult < 95)) {
							switch (iDice(1, 3)) {
								case 1:
								case 2: iResult = 10;
									break;
								case 3: iResult = 11;
									break;
							}
						} else if ((iResult >= 95) && (iResult <= 100)) {
							switch (iDice(1, 3)) {
								case 1: iResult = 11;
									break;
								case 2: iResult = 7;
									break;
								case 3: iResult = 8;
									break;
							}
						}
						iMapLevel = 4;
						break;
					case 12:
						if ((iResult >= 1) && (iResult < 50)) {
							switch (iDice(1, 3)) {
								case 1: iResult = 1;
									break;
								case 2: iResult = 2;
									break;
								case 3: iResult = 10;
									break;
							}
						} else if ((iResult >= 50) && (iResult < 85)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 5;
									break;
								case 2: iResult = 4;
									break;
							}
						} else if ((iResult >= 85) && (iResult <= 100)) {
							switch (iDice(1, 3)) {
								case 1: iResult = 8;
									break;
								case 2: iResult = 11;
									break;
								case 3: iResult = 26;
									break;
							}
						}
						iMapLevel = 4;
						break;
					case 13:
						if ((iResult >= 1) && (iResult < 15)) {
							iResult = 4;
							bFirmBerserk = true;
							iTotalMob = 4 - (iDice(1, 2) - 1);
							break;
						} else if ((iResult >= 15) && (iResult < 40)) {
							iResult = 14;
							bFirmBerserk = true;
							iTotalMob = 4 - (iDice(1, 2) - 1);
							break;
						} else if ((iResult >= 40) && (iResult < 60)) {
							iResult = 9;
							bFirmBerserk = true;
							iTotalMob = 4 - (iDice(1, 2) - 1);
							break;
						} else if ((iResult >= 60) && (iResult < 75)) {
							iResult = 13;
							bFirmBerserk = true;
							iTotalMob = 4 - (iDice(1, 2) - 1);
							break;
						} else if ((iResult >= 75) && (iResult < 95)) {
							iResult = 23;
						} else if ((iResult >= 95) && (iResult <= 100)) {
							iResult = 22;
						}
						iMapLevel = 5;
						break;
					case 14: // icebound
						if ((iResult >= 1) && (iResult < 30)) {
							iResult = 23; // Dark-Elf
						} else if ((iResult >= 30) && (iResult < 50)) {
							iResult = 31; // Ice-Golem
						} else if ((iResult >= 50) && (iResult < 70)) {
							iResult = 22; // Beholder
							bFirmBerserk = true;
							iTotalMob = 4 - (iDice(1, 2) - 1);
						} else if ((iResult >= 70) && (iResult < 90)) {
							iResult = 32; // DireBoar
						} else if ((iResult >= 90) && (iResult <= 100)) {
							iResult = 33; // Frost
						}
						iMapLevel = 5;
						break;
					case 15:
						if ((iResult >= 1) && (iResult < 35)) {
							iResult = 23;
							bFirmBerserk = true;
						} else if ((iResult >= 35) && (iResult < 50)) {
							iResult = 22;
							bFirmBerserk = true;
						} else if ((iResult >= 50) && (iResult < 80)) {
							iResult = 15;
						} else if ((iResult >= 80) && (iResult <= 100)) {
							iResult = 21;
						}
						iMapLevel = 4;
						break;
					case 16: // 2ndmiddle, huntzone1, huntzone2,
						if ((iResult >= 1) && (iResult < 40)) {
							switch (iDice(1, 3)) {
								case 1: iResult = 7;
									break; // Scorpion
								case 2: iResult = 2;
									break; // Giant-Ant
								case 3: iResult = 10;
									break; // Amphis
							}
						} else if ((iResult >= 40) && (iResult < 50)) {
							iResult = 30; // Rudolph
						} else if ((iResult >= 50) && (iResult < 85)) {
							switch (iDice(1, 2)) {
								case 1: iResult = 5;
									break; // Skeleton
								case 2: iResult = 4;
									break; // Zombie
							}
						} else if ((iResult >= 85) && (iResult <= 100)) {
							switch (iDice(1, 3)) {
								case 1: iResult = 8;
									break; // Stone-Golem
								case 2: iResult = 11;
									break; // Clay-Golem
								case 3: iResult = 7;
									break; // Scorpion
							}
						}
						iMapLevel = 1;
						break;
					case 17:
						if ((iResult >= 1) && (iResult < 30)) {
							switch (iDice(1, 4)) {
								case 1: iResult = 22;
									break; // Giant-Frog
								case 2: iResult = 8;
									break; // Stone-Golem
								case 3: iResult = 24;
									break; // Rabbit
								case 4: iResult = 5;
									break;
							}
						} else if ((iResult >= 30) && (iResult < 40)) {
							iResult = 30;
						} else if ((iResult >= 40) && (iResult < 70)) {
							iResult = 32;
						} else if ((iResult >= 70) && (iResult < 90)) {
							iResult = 31;
							if (iDice(1, 5) == 1) {
								bFirmBerserk = true;
							}
						} else if ((iResult >= 90) && (iResult <= 100)) {
							iResult = 33;
						}
						iMapLevel = 1;
						break;
					case 18: // druncncity
						if ((iResult >= 1) && (iResult < 2)) {
							iResult = 39; // Tentocle
						} else if ((iResult >= 2) && (iResult < 12)) {
							iResult = 44; // ClawTurtle
						} else if ((iResult >= 12) && (iResult < 50)) {
							iResult = 48; // Nizie
						} else if ((iResult >= 50) && (iResult < 80)) {
							iResult = 45; // Giant-Crayfish
						} else if ((iResult >= 80) && (iResult < 90)) {
							iResult = 34; // Stalker
						} else if ((iResult >= 90) && (iResult <= 100)) {
							iResult = 26; // Giant-Frog
						}
						iMapLevel = 4;
						break;
					case 19:
						if ((iResult >= 1) && (iResult < 15)) {
							iResult = 44;
						} else if ((iResult >= 15) && (iResult < 25)) {
							iResult = 46;
						} else if ((iResult >= 25) && (iResult < 35)) {
							iResult = 21;
						} else if ((iResult >= 35) && (iResult < 60)) {
							iResult = 43;
						} else if ((iResult >= 60) && (iResult < 85)) {
							iResult = 23;
						} else if ((iResult >= 85) && (iResult <= 100)) {
							iResult = 22;
						}
						iMapLevel = 4;
						break;
					case 20:
						if ((iResult >= 1) && (iResult < 2)) {
							iResult = 41;
						} else if ((iResult >= 2) && (iResult < 3)) {
							iResult = 40;
						} else if ((iResult >= 3) && (iResult < 8)) {
							iResult = 53;
						} else if ((iResult >= 8) && (iResult < 9)) {
							iResult = 39;
						} else if ((iResult >= 9) && (iResult < 20)) {
							iResult = 21;
						} else if ((iResult >= 20) && (iResult < 35)) {
							iResult = 16;
						} else if ((iResult >= 35) && (iResult < 45)) {
							iResult = 44;
						} else if ((iResult >= 45) && (iResult < 55)) {
							iResult = 45;
						} else if ((iResult >= 55) && (iResult < 75)) {
							iResult = 28;
						} else if ((iResult >= 75) && (iResult < 95)) {
							iResult = 43;
						} else if ((iResult >= 95) && (iResult < 100)) {
							iResult = 22;
						}
						iMapLevel = 4;
						break;
					case 21:
						if ((iResult >= 1) && (iResult < 94)) {
							iResult = 17; // Unicorn
							bFirmBerserk = true;
						} else if ((iResult >= 94) && (iResult < 95)) {
							iResult = 36; // Wyvern
						} else if ((iResult >= 95) && (iResult < 96)) {
							iResult = 37; // Fire-Wyvern
						} else if ((iResult >= 96) && (iResult < 97)) {
							iResult = 47; // MasterMage-Orc
						} else if ((iResult >= 97) && (iResult < 98)) {
							iResult = 35; // Hellclaw
						} else if ((iResult >= 98) && (iResult < 99)) {
							iResult = 49; // Tigerworm
						} else if ((iResult >= 99) && (iResult <= 100)) {
							iResult = 51; // Abaddon
						}
						iMapLevel = 4;
						break;
				}
				pX = 0;
				pY = 0;
				//				bIsSpecialEvent = true;
				if ((m_bIsSpecialEventTime == true) && (iDice(1, 10) == 3)) bIsSpecialEvent = true;
				if (bIsSpecialEvent == true) {
					switch (m_cSpecialEventType) {
						case 1:
							if (m_pMapList[i]->m_iMaxPx != 0) {
								pX = m_pMapList[i]->m_iMaxPx * 20 + 10;
								pY = m_pMapList[i]->m_iMaxPy * 20 + 10;
								if (pX < 0) pX = 0;
								if (pY < 0) pY = 0;
								if (m_bIsCrusadeMode == true) {
									if (strcmp(m_pMapList[i]->m_cName, "aresden") == 0)
										switch (iDice(1, 6)) {
											case 1: iResult = 20;
												break;
											case 2: iResult = 53;
												break;
											case 3: iResult = 55;
												break;
											case 4: iResult = 57;
												break;
											case 5: iResult = 59;
												break;
											case 6: iResult = 61;
												break;
										} else if (strcmp(m_pMapList[i]->m_cName, "elvine") == 0)
										switch (iDice(1, 6)) {
											case 1: iResult = 19;
												break;
											case 2: iResult = 52;
												break;
											case 3: iResult = 54;
												break;
											case 4: iResult = 56;
												break;
											case 5: iResult = 58;
												break;
											case 6: iResult = 60;
												break;
										}
								}
								wsprintf(G_cTxt, "(!) Mob-Event Map(%s)[%d (%d,%d)]", m_pMapList[i]->m_cName, iResult, pX, pY);
							}
							break;
						case 2:
							if (iDice(1, 3) == 2) {
								if ((memcmp(m_pMapList[i]->m_cLocationName, "aresden", 7) == 0) ||
										  (memcmp(m_pMapList[i]->m_cLocationName, "middled1n", 9) == 0) ||
										  (memcmp(m_pMapList[i]->m_cLocationName, "arefarm", 7) == 0) ||
										  (memcmp(m_pMapList[i]->m_cLocationName, "elvfarm", 7) == 0) ||
										  (memcmp(m_pMapList[i]->m_cLocationName, "elvine", 6) == 0)) {
									if (iDice(1, 30) == 5)
										iResult = 16;
									else iResult = 5;
								} else iResult = 16;
							} else iResult = 17;
							m_bIsSpecialEventTime = false;
							break;
					}
				}
				std::memset(cNpcName, 0, sizeof(cNpcName));
				//Random Monster Spawns
				switch (iResult) {
					case 1: strcpy(cNpcName, "Slime");
						iNpcID = 10;
						iProbSA = 5;
						iKindSA = 1;
						break;
					case 2: strcpy(cNpcName, "Giant-Ant");
						iNpcID = 16;
						iProbSA = 10;
						iKindSA = 2;
						break;
					case 3: strcpy(cNpcName, "Orc");
						iNpcID = 14;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 4: strcpy(cNpcName, "Zombie");
						iNpcID = 18;
						iProbSA = 15;
						iKindSA = 3;
						break;
					case 5: strcpy(cNpcName, "Skeleton");
						iNpcID = 11;
						iProbSA = 35;
						iKindSA = 8;
						break;
					case 6: strcpy(cNpcName, "Orc-Mage");
						iNpcID = 14;
						iProbSA = 30;
						iKindSA = 7;
						break;
					case 7: strcpy(cNpcName, "Scorpion");
						iNpcID = 17;
						iProbSA = 15;
						iKindSA = 3;
						break;
					case 8: strcpy(cNpcName, "Stone-Golem");
						iNpcID = 12;
						iProbSA = 25;
						iKindSA = 5;
						break;
					case 9: strcpy(cNpcName, "Cyclops");
						iNpcID = 13;
						iProbSA = 35;
						iKindSA = 8;
						break;
					case 10: strcpy(cNpcName, "Amphis");
						iNpcID = 22;
						iProbSA = 20;
						iKindSA = 3;
						break;
					case 11: strcpy(cNpcName, "Clay-Golem");
						iNpcID = 23;
						iProbSA = 20;
						iKindSA = 5;
						break;
					case 12: strcpy(cNpcName, "Troll");
						iNpcID = 28;
						iProbSA = 25;
						iKindSA = 3;
						break;
					case 13: strcpy(cNpcName, "Orge");
						iNpcID = 29;
						iProbSA = 25;
						iKindSA = 1;
						break;
					case 14: strcpy(cNpcName, "Hellbound");
						iNpcID = 27;
						iProbSA = 25;
						iKindSA = 8;
						break;
					case 15: strcpy(cNpcName, "Liche");
						iNpcID = 30;
						iProbSA = 30;
						iKindSA = 8;
						break;
					case 16: strcpy(cNpcName, "Demon");
						iNpcID = 31;
						iProbSA = 20;
						iKindSA = 8;
						break;
					case 17: strcpy(cNpcName, "Unicorn");
						iNpcID = 32;
						iProbSA = 35;
						iKindSA = 7;
						break;
					case 18: strcpy(cNpcName, "WereWolf");
						iNpcID = 33;
						iProbSA = 25;
						iKindSA = 1;
						break;
					case 19: strcpy(cNpcName, "YB-Aresden");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 20: strcpy(cNpcName, "YB-Elvine");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 21: strcpy(cNpcName, "Gagoyle");
						iNpcID = 52;
						iProbSA = 20;
						iKindSA = 8;
						break;
					case 22: strcpy(cNpcName, "Beholder");
						iNpcID = 53;
						iProbSA = 20;
						iKindSA = 5;
						break;
					case 23: strcpy(cNpcName, "Dark-Elf");
						iNpcID = 54;
						iProbSA = 20;
						iKindSA = 3;
						break;
					case 24: strcpy(cNpcName, "Rabbit");
						iNpcID = -1;
						iProbSA = 5;
						iKindSA = 1;
						break;
					case 25: strcpy(cNpcName, "Cat");
						iNpcID = -1;
						iProbSA = 10;
						iKindSA = 2;
						break;
					case 26: strcpy(cNpcName, "Giant-Frog");
						iNpcID = 57;
						iProbSA = 10;
						iKindSA = 2;
						break;
					case 27: strcpy(cNpcName, "Mountain-Giant");
						iNpcID = 58;
						iProbSA = 25;
						iKindSA = 1;
						break;
					case 28: strcpy(cNpcName, "Ettin");
						iNpcID = 59;
						iProbSA = 20;
						iKindSA = 8;
						break;
					case 29: strcpy(cNpcName, "Cannibal-Plant");
						iNpcID = 60;
						iProbSA = 20;
						iKindSA = 5;
						break;
					case 30: strcpy(cNpcName, "Rudolph");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 5;
						break;
					case 31: strcpy(cNpcName, "Ice-Golem");
						iNpcID = 65;
						iProbSA = 35;
						iKindSA = 8;
						break;
					case 32: strcpy(cNpcName, "DireBoar");
						iNpcID = 62;
						iProbSA = 20;
						iKindSA = 5;
						break;
					case 33: strcpy(cNpcName, "Frost");
						iNpcID = 63;
						iProbSA = 30;
						iKindSA = 8;
						break;
					case 34: strcpy(cNpcName, "Stalker");
						iNpcID = 48;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 35: strcpy(cNpcName, "Hellclaw");
						iNpcID = 49;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 36: strcpy(cNpcName, "Wyvern");
						iNpcID = 66;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 37: strcpy(cNpcName, "Fire-Wyvern");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 38: strcpy(cNpcName, "Barlog");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 39: strcpy(cNpcName, "Tentocle");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 40: strcpy(cNpcName, "Centaurus");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 41: strcpy(cNpcName, "Giant-Lizard");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 42: strcpy(cNpcName, "Minotaurs");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 43: strcpy(cNpcName, "Tentocle");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 44: strcpy(cNpcName, "Claw-Turtle");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 45: strcpy(cNpcName, "Giant-Crayfish");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 46: strcpy(cNpcName, "Giant-Plant");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 47: strcpy(cNpcName, "MasterMage-Orc");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 48: strcpy(cNpcName, "Nizie");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 49: strcpy(cNpcName, "Tigerworm");
						iNpcID = 50;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 50: strcpy(cNpcName, "Giant-Plant");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 51: strcpy(cNpcName, "Abaddon");
						iNpcID = -1;
						iProbSA = 20;
						iKindSA = 1;
						break;
					case 52: strcpy(cNpcName, "YW-Aresden");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 53: strcpy(cNpcName, "YW-Elvine");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 54: strcpy(cNpcName, "YY-Aresden");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 55: strcpy(cNpcName, "YY-Elvine");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 56: strcpy(cNpcName, "XB-Aresden");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 57: strcpy(cNpcName, "XB-Elvine");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 58: strcpy(cNpcName, "XW-Aresden");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 59: strcpy(cNpcName, "XW-Elvine");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 60: strcpy(cNpcName, "XY-Aresden");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					case 61: strcpy(cNpcName, "XY-Elvine");
						iNpcID = -1;
						iProbSA = 15;
						iKindSA = 1;
						break;
					default: strcpy(cNpcName, "Orc");
						iNpcID = 14;
						iProbSA = 15;
						iKindSA = 1;
						break;
				}
				cSA = 0;
				if (iDice(1, 100) <= iProbSA) {
					cSA = _cGetSpecialAbility(iKindSA);
				}
				if ((bMaster = bCreateNewNpc(cNpcName, cName_Master, m_pMapList[i]->m_cName, (rand() % 3), cSA, NpcMoveType::random, &pX, &pY, cWaypoint, 0, 0, -1, false, false, bFirmBerserk, true)) == false) {
					m_pMapList[i]->SetNamingValueEmpty(iNamingValue);
				} else {
				}
			}
			switch (iResult) {
				case 1: iTotalMob = iDice(1, 5) - 1;
					break;
				case 2: iTotalMob = iDice(1, 5) - 1;
					break;
				case 3: iTotalMob = iDice(1, 5) - 1;
					break;
				case 4: iTotalMob = iDice(1, 3) - 1;
					break;
				case 5: iTotalMob = iDice(1, 3) - 1;
					break;
				case 6: iTotalMob = iDice(1, 3) - 1;
					break;
				case 7: iTotalMob = iDice(1, 3) - 1;
					break;
				case 8: iTotalMob = iDice(1, 2) - 1;
					break;
				case 9: iTotalMob = iDice(1, 2) - 1;
					break;
				case 10: iTotalMob = iDice(1, 5) - 1;
					break;
				case 11: iTotalMob = iDice(1, 3) - 1;
					break;
				case 12: iTotalMob = iDice(1, 5) - 1;
					break;
				case 13: iTotalMob = iDice(1, 3) - 1;
					break;
				case 14: iTotalMob = iDice(1, 2) - 1;
					break;
				case 15: iTotalMob = iDice(1, 3) - 1;
					break;
				case 16: iTotalMob = iDice(1, 2) - 1;
					break;
				case 17: iTotalMob = iDice(1, 2) - 1;
					break;
				case 18: iTotalMob = iDice(1, 5) - 1;
					break;
				case 19: iTotalMob = iDice(1, 2) - 1;
					break;
				case 20: iTotalMob = iDice(1, 2) - 1;
					break;
				case 21: iTotalMob = iDice(1, 5) - 1;
					break;
				case 22: iTotalMob = iDice(1, 2) - 1;
					break;
				case 23: iTotalMob = iDice(1, 2) - 1;
					break;
				case 24: iTotalMob = iDice(1, 4) - 1;
					break;
				case 25: iTotalMob = iDice(1, 2) - 1;
					break;
				case 26: iTotalMob = iDice(1, 3) - 1;
					break;
				case 27: iTotalMob = iDice(1, 3) - 1;
					break;
				case 28: iTotalMob = iDice(1, 3) - 1;
					break;
				case 29: iTotalMob = iDice(1, 5) - 1;
					break;
				case 30: iTotalMob = iDice(1, 3) - 1;
					break;
				case 31: iTotalMob = iDice(1, 3) - 1;
					break;
				case 32: iTotalMob = 1;
					break;
				case 33: iTotalMob = 1;
					break;
				case 34: iTotalMob = 1;
					break;
				case 35: iTotalMob = 1;
					break;
				case 36: iTotalMob = 1;
					break;
				case 37: iTotalMob = 1;
					break;
				case 38: iTotalMob = 1;
					break;
				case 39: iTotalMob = 1;
					break;
				case 40: iTotalMob = 1;
					break;
				case 41: iTotalMob = 1;
					break;
				case 42: iTotalMob = iDice(1, 3) - 1;
					break;
				case 43: iTotalMob = 1;
					break;
				case 44: iTotalMob = iDice(1, 3) - 1;
					break;
				case 45: iTotalMob = 1;
					break;
				default: iTotalMob = 0;
					break;
			}
			if (bMaster == false) iTotalMob = 0;
			if (iTotalMob > 2) {
				switch (iResult) {
					case 1: // Slime
					case 2: // Giant-Ant
					case 3: // Orc
					case 4: // Zombie
					case 5: // Skeleton
					case 6: // Orc-Mage
					case 7: // Scorpion
					case 8: // Stone-Golem
					case 9: // Cyclops
					case 10: // Amphis
					case 11: // Clay-Golem
					case 12: // Troll
					case 13: // Orge
					case 14: // Hellbound
					case 15: // Liche
					case 16: // Demon
					case 17: // Unicorn
					case 18: // WereWolf
					case 19:
					case 20:
					case 21:
					case 22:
					case 23:
					case 24:
					case 25:
					case 26:
					case 27:
					case 28:
					case 29:
					case 30:
					case 31:
					case 32:
						if (iDice(1, 5) == 1) iTotalMob = 0; // 75% ???????? ???.
						break;
					case 33:
					case 34:
					case 35:
					case 36:
					case 37:
					case 38:
					case 39:
					case 40:
					case 41:
					case 42:
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
						if (iDice(1, 5) != 1) iTotalMob = 0; // 75% ???????????????
						break;
				}
			}
			if (bIsSpecialEvent == true) {
				switch (m_cSpecialEventType) {
					case 1:
						if ((iResult != 35) && (iResult != 36) && (iResult != 37) && (iResult != 49)
								  && (iResult != 51) && (iResult != 15) && (iResult != 16) && (iResult != 21)) iTotalMob = 12;
						for (x = 1; x < DEF_MAXCLIENTS; x++)
							if ((iNpcID != -1) && (m_pClientList[x] != 0) && (m_pClientList[x]->m_bIsInitComplete == true) &&
									  m_pClientList[x]->m_cMapIndex == i) {
								SendNotifyMsg(0, x, DEF_NOTIFY_SPAWNEVENT, pX, pY, iNpcID, 0, 0, 0);
							}
						break;
					case 2:
						if ((memcmp(m_pMapList[i]->m_cLocationName, "aresden", 7) == 0) ||
								  (memcmp(m_pMapList[i]->m_cLocationName, "elvine", 6) == 0) ||
								  (memcmp(m_pMapList[i]->m_cLocationName, "elvfarm", 7) == 0) ||
								  (memcmp(m_pMapList[i]->m_cLocationName, "arefarm", 7) == 0)) {
							iTotalMob = 0;
						}
						break;
				}
				m_bIsSpecialEventTime = false;
			}
			for (j = 0; j < iTotalMob; j++) {
				iNamingValue = m_pMapList[i]->iGetEmptyNamingValue();
				if (iNamingValue != -1) {
					std::memset(cName_Slave, 0, sizeof(cName_Slave));
					wsprintf(cName_Slave, "XX%d", iNamingValue);
					cName_Slave[0] = 95; // original '_';
					cName_Slave[1] = i + 65;
					cSA = 0;
					if (iDice(1, 100) <= iProbSA) {
						cSA = _cGetSpecialAbility(iKindSA);
					}
					if (bCreateNewNpc(cNpcName, cName_Slave, m_pMapList[i]->m_cName, (rand() % 3), cSA, NpcMoveType::random, &pX, &pY, cWaypoint, 0, 0, -1, false, false, bFirmBerserk) == false) {
						m_pMapList[i]->SetNamingValueEmpty(iNamingValue);
					} else {
						bSetNpcFollowMode(cName_Slave, cName_Master, DEF_OWNERTYPE_NPC);
					}
				}
			}
		}
		if ((m_pMapList[i] != 0) && ((m_pMapList[i]->m_iMaximumObject) > m_pMapList[i]->m_iTotalActiveObject)) {
			for (j = 1; j < DEF_MAXSPOTMOBGENERATOR; j++)
				if ((iDice(1, 3) == 2) && (m_pMapList[i]->m_stSpotMobGenerator[j].bDefined == true) &&
						  (m_pMapList[i]->m_stSpotMobGenerator[j].iMaxMobs > m_pMapList[i]->m_stSpotMobGenerator[j].iCurMobs)) {
					iNamingValue = m_pMapList[i]->iGetEmptyNamingValue();
					if (iNamingValue != -1) {
						std::memset(cNpcName, 0, sizeof(cNpcName));
						switch (m_pMapList[i]->m_stSpotMobGenerator[j].iMobType) {
								// spot-mob-generator
							case 10: strcpy(cNpcName, "Slime");
								iProbSA = 5;
								iKindSA = 1;
								break;
							case 16: strcpy(cNpcName, "Giant-Ant");
								iProbSA = 10;
								iKindSA = 2;
								break;
							case 14: strcpy(cNpcName, "Orc");
								iProbSA = 15;
								iKindSA = 1;
								break;
							case 18: strcpy(cNpcName, "Zombie");
								iProbSA = 15;
								iKindSA = 3;
								break;
							case 11: strcpy(cNpcName, "Skeleton");
								iProbSA = 35;
								iKindSA = 8;
								break;
							case 6: strcpy(cNpcName, "Orc-Mage");
								iProbSA = 30;
								iKindSA = 7;
								break;
							case 17: strcpy(cNpcName, "Scorpion");
								iProbSA = 15;
								iKindSA = 3;
								break;
							case 12: strcpy(cNpcName, "Stone-Golem");
								iProbSA = 25;
								iKindSA = 5;
								break;
							case 13: strcpy(cNpcName, "Cyclops");
								iProbSA = 35;
								iKindSA = 8;
								break;
							case 22: strcpy(cNpcName, "Amphis");
								iProbSA = 20;
								iKindSA = 3;
								break;
							case 23: strcpy(cNpcName, "Clay-Golem");
								iProbSA = 20;
								iKindSA = 5;
								break;
							case 24: strcpy(cNpcName, "Guard-Aresden");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 25: strcpy(cNpcName, "Guard-Elvine");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 26: strcpy(cNpcName, "Guard-Neutral");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 27: strcpy(cNpcName, "Hellbound");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 29: strcpy(cNpcName, "Orge");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 30: strcpy(cNpcName, "Liche");
								iProbSA = 30;
								iKindSA = 8;
								break;
							case 31: strcpy(cNpcName, "Demon");
								iProbSA = 20;
								iKindSA = 8;
								break;
							case 32: strcpy(cNpcName, "Unicorn");
								iProbSA = 35;
								iKindSA = 7;
								break;
							case 33: strcpy(cNpcName, "WereWolf");
								iProbSA = 25;
								iKindSA = 1;
								break;
							case 34: strcpy(cNpcName, "Dummy");
								iProbSA = 5;
								iKindSA = 1;
								break;
							case 35: strcpy(cNpcName, "Attack-Dummy");
								iProbSA = 5;
								iKindSA = 1;
								break;
							case 48: strcpy(cNpcName, "Stalker");
								iProbSA = 20;
								iKindSA = 3;
								break;
								/*									case 49:
								if (iDice(1,144000) == 13) {
								strcpy(cNpcName,"Hellclaw");
								iProbSA = 20;
								iKindSA = 8;
								}
								break;
								case 50:
								if (iDice(1, 3606) == 135) {
								strcpy(cNpcName,"Tigerworm");
								iProbSA = 20;
								iKindSA = 8;
								}
								else {
								strcpy(cNpcName, "Stalker");
								iProbSA = 15;
								iKindSA = 1;
								}
								break;*/
							case 49: strcpy(cNpcName, "Hellclaw");
								iProbSA = 20;
								iKindSA = 8;
								break;
							case 50: strcpy(cNpcName, "Tigerworm");
								iProbSA = 20;
								iKindSA = 8;
								break;
							case 54: strcpy(cNpcName, "Dark-Elf");
								iProbSA = 20;
								iKindSA = 8;
								break;
							case 53: strcpy(cNpcName, "Beholder");
								iProbSA = 20;
								iKindSA = 8;
								break;
							case 52: strcpy(cNpcName, "Gagoyle");
								iProbSA = 20;
								iKindSA = 8;
								break;
								/*									case 40:
								if (iDice(1, 3606) == 135) {
								strcpy(cNpcName,"Hellclaw");
								iProbSA = 20;
								iKindSA = 8;
								}
								break;*/
							case 57: strcpy(cNpcName, "Giant-Frog");
								iProbSA = 10;
								iKindSA = 2;
								break;
							case 58: strcpy(cNpcName, "Mountain-Giant");
								iProbSA = 25;
								iKindSA = 1;
								break;
							case 59: strcpy(cNpcName, "Ettin");
								iProbSA = 20;
								iKindSA = 8;
								break;
							case 60: strcpy(cNpcName, "Cannibal-Plant");
								iProbSA = 20;
								iKindSA = 5;
								break;
							case 61: strcpy(cNpcName, "Rudolph");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 62: strcpy(cNpcName, "DireBoar");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 63: strcpy(cNpcName, "Frost");
								iProbSA = 20;
								iKindSA = 8;
								break;
							case 65: strcpy(cNpcName, "Ice-Golem");
								iProbSA = 20;
								iKindSA = 8;
								break;
							case 66: strcpy(cNpcName, "Wyvern");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 55: strcpy(cNpcName, "Rabbit");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 67: strcpy(cNpcName, "McGaffin");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 68: strcpy(cNpcName, "Perry");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 69: strcpy(cNpcName, "Devlin");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 73: strcpy(cNpcName, "Fire-Wyvern");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 70: strcpy(cNpcName, "Barlog");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 80: strcpy(cNpcName, "Tentocle");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 71: strcpy(cNpcName, "Centaurus");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 75: strcpy(cNpcName, "Giant-Lizard");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 78: strcpy(cNpcName, "Minotaurs");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 81: strcpy(cNpcName, "Abaddon");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 72: strcpy(cNpcName, "Claw-Turtle");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 74: strcpy(cNpcName, "Giant-Crayfish");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 76: strcpy(cNpcName, "Giant-Plant");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 77: strcpy(cNpcName, "MasterMage-Orc");
								iProbSA = 20;
								iKindSA = 1;
								break;
							case 79: strcpy(cNpcName, "Nizie");
								iProbSA = 20;
								iKindSA = 1;
								break;
							default:
								strcpy(cNpcName, "Orc");
								iProbSA = 15;
								iKindSA = 1;
								break;
						}
						/* NPCs not spawning in pits:
						case 56:  strcpy(cNpcName,"Cat");				iProbSA = 15; iKindSA = 6;  break;
						case 28:  strcpy(cNpcName, "Troll");			iProbSA = 25; iKindSA = 3; break;
						// 15 ShopKeeper-W
						// 19 Gandlf
						// 20 Howard
						// 36 Arrow Gaurd Tower Kit - Aresden, Elvine
						// 37 Cannon Gaurd Tower Kit - Aresden, Elvine
						// 38 Mana Collector Kit - Aresden, Elvine
						// 39 Detector Constructor Kit - Aresden, Elvine
						// 40 Energy Shield Generator - Aresden, Elvine
						// 41 Grand Master Generator - Aresden Elvine
						// 43 Light War Beetle - Aresden, Elvine
						// 44 God's Hand Knight
						// 45 Mounted God's Hand Knight
						// 46 Temple Knight
						// 47 Battle Golem
						// 51 Catapult
						// 64 Crops
						 */
						bFirmBerserk = false;
						if ((iMapLevel == 5) && (iDice(1, 3) == 1)) bFirmBerserk = true;
						std::memset(cName_Master, 0, sizeof(cName_Master));
						wsprintf(cName_Master, "XX%d", iNamingValue);
						cName_Master[0] = 95; // original '_';
						cName_Master[1] = i + 65;
						cSA = 0;
						if ((m_pMapList[i]->m_stSpotMobGenerator[j].iMobType != 34) && (iDice(1, 100) <= iProbSA)) {
							cSA = _cGetSpecialAbility(iKindSA);
						}
						switch (m_pMapList[i]->m_stSpotMobGenerator[j].cType) {
							case 1:
								if (bCreateNewNpc(cNpcName, cName_Master, m_pMapList[i]->m_cName, (rand() % 3), cSA, NpcMoveType::randomarea, &pX, &pY, cWaypoint, &m_pMapList[i]->m_stSpotMobGenerator[j].rcRect, j, -1, false, false, bFirmBerserk) == false) {
									m_pMapList[i]->SetNamingValueEmpty(iNamingValue);
								} else {
									m_pMapList[i]->m_stSpotMobGenerator[j].iCurMobs++;
								}
								break;
							case 2:
								if (bCreateNewNpc(cNpcName, cName_Master, m_pMapList[i]->m_cName, (rand() % 3), cSA, NpcMoveType::randomwaypoint, 0, 0, m_pMapList[i]->m_stSpotMobGenerator[j].cWaypoint, 0, j, -1, false, false, bFirmBerserk) == false) {
									m_pMapList[i]->SetNamingValueEmpty(iNamingValue);
								} else {
									m_pMapList[i]->m_stSpotMobGenerator[j].iCurMobs++;
								}
								break;
						}
					}
				}
		}
	}
}

void CGame::CalcNextWayPointDestination(int iNpcH) {
	short sRange;
	short sX;
	short sY;
	int i;
	int j;
	int iMapIndex;
	bool bFlag;
	switch (m_pNpcList[iNpcH]->m_cMoveType) {
		case NpcMoveType::guard:
			break;
		case NpcMoveType::seqwaypoint:
			m_pNpcList[iNpcH]->m_cCurWaypoint++;
			if (m_pNpcList[iNpcH]->m_cCurWaypoint >= m_pNpcList[iNpcH]->m_cTotalWaypoint)
				m_pNpcList[iNpcH]->m_cCurWaypoint = 1;
			m_pNpcList[iNpcH]->m_dX = (short) (m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_WaypointList[ m_pNpcList[iNpcH]->m_iWayPointIndex[ m_pNpcList[iNpcH]->m_cCurWaypoint ] ].x);
			m_pNpcList[iNpcH]->m_dY = (short) (m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_WaypointList[ m_pNpcList[iNpcH]->m_iWayPointIndex[ m_pNpcList[iNpcH]->m_cCurWaypoint ] ].y);
			break;
		case NpcMoveType::randomwaypoint:
			m_pNpcList[iNpcH]->m_cCurWaypoint = (short) ((rand() % (m_pNpcList[iNpcH]->m_cTotalWaypoint - 1)) + 1);
			m_pNpcList[iNpcH]->m_dX = (short) (m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_WaypointList[ m_pNpcList[iNpcH]->m_iWayPointIndex[ m_pNpcList[iNpcH]->m_cCurWaypoint ] ].x);
			m_pNpcList[iNpcH]->m_dY = (short) (m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_WaypointList[ m_pNpcList[iNpcH]->m_iWayPointIndex[ m_pNpcList[iNpcH]->m_cCurWaypoint ] ].y);
			break;
		case NpcMoveType::randomarea:
			sRange = (short) (m_pNpcList[iNpcH]->m_rcRandomArea.right - m_pNpcList[iNpcH]->m_rcRandomArea.left);
			m_pNpcList[iNpcH]->m_dX = (short) ((rand() % sRange) + m_pNpcList[iNpcH]->m_rcRandomArea.left);
			sRange = (short) (m_pNpcList[iNpcH]->m_rcRandomArea.bottom - m_pNpcList[iNpcH]->m_rcRandomArea.top);
			m_pNpcList[iNpcH]->m_dY = (short) ((rand() % sRange) + m_pNpcList[iNpcH]->m_rcRandomArea.top);
			break;
		case NpcMoveType::random:
			//m_pNpcList[iNpcH]->m_dX = (rand() % (m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_sSizeX - 50)) + 15;
			//m_pNpcList[iNpcH]->m_dY = (rand() % (m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_sSizeY - 50)) + 15;
			iMapIndex = m_pNpcList[iNpcH]->m_cMapIndex;
			for (i = 0; i <= 30; i++) {
				sX = (rand() % (m_pMapList[iMapIndex]->m_sSizeX - 50)) + 15;
				sY = (rand() % (m_pMapList[iMapIndex]->m_sSizeY - 50)) + 15;
				bFlag = true;
				for (j = 0; j < DEF_MAXMGAR; j++)
					if (m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[j].left != -1) {
						if ((sX >= m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[j].left) &&
								  (sX <= m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[j].right) &&
								  (sY >= m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[j].top) &&
								  (sY <= m_pMapList[iMapIndex]->m_rcMobGenAvoidRect[j].bottom)) {
							bFlag = false;
						}
					}
				if (bFlag == true) goto CNW_GET_VALIDLOC_SUCCESS;
			}
			// Fail!
			m_pNpcList[iNpcH]->m_tmp_iError = 0;
			return;
CNW_GET_VALIDLOC_SUCCESS:
			;
			m_pNpcList[iNpcH]->m_dX = sX;
			m_pNpcList[iNpcH]->m_dY = sY;
			break;
		case NpcMoveType::stop: break;
		case NpcMoveType::follow: break;
	}
	m_pNpcList[iNpcH]->m_tmp_iError = 0;
}

void CGame::DeleteNpc(int iNpcH) {
	int i;
	int iNamingValue;
	int iNumItem;
	ItemId iSlateID;
	ItemId iItemID = ItemId::none; // No current item
	ItemId iItemIDs[MAX_NPCITEMDROP];
	char cTmp[21], cItemName[21];
	CItem * pItem, * pItem2;
	uint32_t dwCount;
	uint32_t dwTime;
	POINT ItemPositions[MAX_NPCITEMDROP];
	char cTemp[256];
	SYSTEMTIME SysTime;
	if (m_pNpcList[iNpcH] == 0) return;
	dwTime = timeGetTime();
	//Init number of items to 1 unless its a multidrop;
	iNumItem = 0;
	SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_LOG, DEF_MSGTYPE_REJECT, 0, 0, 0);
	m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->ClearOwner(11, iNpcH, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY);
	std::memset(cTmp, 0, sizeof(cTmp));
	strcpy(cTmp, (char *) (m_pNpcList[iNpcH]->m_cName + 2));
	iNamingValue = atoi(cTmp);
	m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->SetNamingValueEmpty(iNamingValue);
	m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_iTotalActiveObject--;
	if (m_pNpcList[iNpcH]->m_iSpotMobIndex != 0)
		m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_stSpotMobGenerator[m_pNpcList[iNpcH]->m_iSpotMobIndex].iCurMobs--;
	RemoveFromTarget(iNpcH, DEF_OWNERTYPE_NPC);
	switch (m_pNpcList[iNpcH]->m_sType) {
		case NpcType::agt:
		case NpcType::cgt:
		case NpcType::ms:
		case NpcType::dt:
		case NpcType::mana_stone:
			m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->bRemoveCrusadeStructureInfo(m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY);
			for (i = 0; i < DEF_MAXGUILDS; i++)
				if (m_pGuildTeleportLoc[i].m_iV1 == m_pNpcList[iNpcH]->m_iGuildGUID) {
					m_pGuildTeleportLoc[i].m_dwTime = dwTime;
					m_pGuildTeleportLoc[i].m_iV2--;
					if (m_pGuildTeleportLoc[i].m_iV2 < 0) m_pGuildTeleportLoc[i].m_iV2 = 0;
					break;
				}
			break;
		case NpcType::crops: m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->bRemoveCropsTotalSum();
			break;
		default: break;
	}
	bRemoveFromDelayEventList(iNpcH, DEF_OWNERTYPE_NPC, 0);
	if ((m_pNpcList[iNpcH]->m_bIsSummoned == false) && (m_pNpcList[iNpcH]->m_bIsUnsummoned == false)) {
		pItem = new CItem;
		std::memset(cItemName, 0, sizeof(cItemName));
		switch (m_pNpcList[iNpcH]->m_sType) {
			case NpcType::slime: // Slime
				if (iDice(1, 25) == 1) iItemID = ItemId::slime_jelly;
				break; // SlimeJelly
				break;
			case NpcType::skeleton: // Skeleton
				switch (iDice(1, 2)) {
					case 1:if (iDice(1, 20) == 1) iItemID = ItemId::skeleton_bones;
						break; // SkeletonBones
					case 2: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::stone_golem: // Stone-Golem
				switch (iDice(1, 2)) {
					case 1: if (iDice(1, 30) == 1) iItemID = ItemId::stone_golem_piece;
						break; // StoneGolemPiece
					case 2: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::cyclops: // Cyclops
				switch (iDice(1, 6)) {
					case 1: if (iDice(1, 36) == 1) iItemID = ItemId::cyclops_eye;
						break; // CyclopsEye
					case 2: if (iDice(1, 40) == 1) iItemID = ItemId::cyclops_hand_edge;
						break; // CyclopsHandEdge
					case 3: if (iDice(1, 30) == 1) iItemID = ItemId::cyclops_heart;
						break; // CyclopsHeart
					case 4: if (iDice(1, 22) == 1) iItemID = ItemId::cyclops_meat;
						break; // CyclopsMeat
					case 5: if (iDice(1, 40) == 1) iItemID = ItemId::cyclops_leather;
						break; // CyclopsLeather
					case 6: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::orc: // Orc, Orc-Mage
				switch (iDice(1, 4)) {
					case 1: if (iDice(1, 11) == 1) iItemID = ItemId::orc_meat;
						break; // OrcMeat
					case 2: if (iDice(1, 20) == 1) iItemID = ItemId::orc_leather;
						break; // OrcLeather
					case 3: if (iDice(1, 21) == 1) iItemID = ItemId::orc_teeth;
						break; // OrcTeeth
					case 4: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::giant_ant: //Giant-Ant
				switch (iDice(1, 3)) {
					case 1: if (iDice(1, 9) == 1) iItemID = ItemId::ant_leg;
						break; // AntLeg
					case 2: if (iDice(1, 10) == 1) iItemID = ItemId::ant_feeler;
						break; // AntFeeler
					case 3: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::scorpion: //Scorpion
				switch (iDice(1, 5)) {
					case 1: if (iDice(1, 50) == 1) iItemID = ItemId::scorpion_pincers;
						break; // ScorpionPincers
					case 2: if (iDice(1, 20) == 1) iItemID = ItemId::scorpion_meat;
						break; // ScorpionMeat
					case 3: if (iDice(1, 50) == 1) iItemID = ItemId::scorpion_sting;
						break; // ScorpionSting
					case 4: if (iDice(1, 40) == 1) iItemID = ItemId::scorpion_skin;
						break; // ScorpionSkin
					case 5: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::zombie: //Zombie
				bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
				break;
				break;
			case NpcType::amphis: //Amphis
				switch (iDice(1, 5)) {
					case 1: if (iDice(1, 15) == 1) iItemID = ItemId::snake_meat;
						break; // SnakeMeat
					case 2: if (iDice(1, 16) == 1) iItemID = ItemId::snake_skin;
						break; // SnakeSkin
					case 3: if (iDice(1, 16) == 1) iItemID = ItemId::snake_teeth;
						break; // SnakeTeeth
					case 4: if (iDice(1, 17) == 1) iItemID = ItemId::snake_tongue;
						break; // SnakeTongue
					case 5: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::clay_golem: //Clay-Golem
				switch (iDice(1, 2)) {
					case 1: if (iDice(1, 30) == 1) iItemID = ItemId::lumpof_clay;
						break; // LumpofClay
					case 2: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::hellbound: //Hellbound
				switch (iDice(1, 7)) {
					case 1: if (iDice(1, 40) == 1) iItemID = ItemId::helbound_heart;
						break; // HelboundHeart
					case 2: if (iDice(1, 38) == 1) iItemID = ItemId::helbound_leather;
						break; // HelboundLeather
					case 3: if (iDice(1, 38) == 1) iItemID = ItemId::helbound_tail;
						break; // HelboundTail
					case 4: if (iDice(1, 36) == 1) iItemID = ItemId::helbound_teeth;
						break; // HelboundTeeth
					case 5: if (iDice(1, 36) == 1) iItemID = ItemId::helbound_claw;
						break; // HelboundClaw
					case 6: if (iDice(1, 50) == 1) iItemID = ItemId::helbound_tongue;
						break; // HelboundTongue
					case 7: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::troll: //Troll
				switch (iDice(1, 5)) {
					case 1: if (iDice(1, 35) == 1) iItemID = ItemId::troll_heart;
						break; // TrollHeart
					case 2: if (iDice(1, 23) == 1) iItemID = ItemId::troll_meat;
						break; // TrollMeat
					case 3: if (iDice(1, 25) == 1) iItemID = ItemId::troll_leather;
						break; // TrollLeather
					case 4: if (iDice(1, 27) == 1) iItemID = ItemId::troll_claw;
						break; // TrollClaw
					case 5: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::orge: //Orge
				switch (iDice(1, 7)) {
					case 1: if (iDice(1, 20) == 1) iItemID = ItemId::ogre_hair;
						break; // OgreHair
					case 2: if (iDice(1, 22) == 1) iItemID = ItemId::ogre_heart;
						break; // OgreHeart
					case 3: if (iDice(1, 25) == 1) iItemID = ItemId::ogre_meat;
						break; // OgreMeat
					case 4: if (iDice(1, 25) == 1) iItemID = ItemId::ogre_leather;
						break; // OgreLeather
					case 5: if (iDice(1, 28) == 1) iItemID = ItemId::ogre_teeth;
						break; // OgreTeeth
					case 6: if (iDice(1, 28) == 1) iItemID = ItemId::ogre_claw;
						break; // OgreClaw
					case 7: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::liche: //Liche
				bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
				break;
				break;
			case NpcType::demon: //Demon
				switch (iDice(1, 5)) {
					case 1: if (iDice(1, 400) == 123) iItemID = ItemId::demon_heart;
						break; // DemonHeart
					case 2: if (iDice(1, 1000) == 123) iItemID = ItemId::demon_meat;
						break; // DemonMeat
					case 3: if (iDice(1, 200) == 123) iItemID = ItemId::demon_leather;
						break; // DemonLeather
					case 4: if (iDice(1, 300) == 123) iItemID = ItemId::demon_eye;
						break; // DemonEye
					case 5: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::unicorn: //Unicorn
				switch (iDice(1, 5)) {
					case 1: if (iDice(1, 3000) == 396) iItemID = ItemId::unicorn_heart;
						break; // UnicornHeart
					case 2: if (iDice(1, 500) == 3) iItemID = ItemId::unicorn_horn;
						break; // UnicornHorn
					case 3: if (iDice(1, 100) == 3) iItemID = ItemId::unicorn_meat;
						break; // UnicornMeat
					case 4: if (iDice(1, 200) == 3) iItemID = ItemId::unicorn_leather;
						break; // UnicornLeather
					case 5: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::were_wolf: //WereWolf
				switch (iDice(1, 8)) {
					case 1: if (iDice(1, 30) == 3) iItemID = ItemId::werewolf_tail;
						break; // WerewolfTail
					case 2: if (iDice(1, 28) == 3) iItemID = ItemId::werewolf_heart;
						break; // WerewolfHeart
					case 3: if (iDice(1, 25) == 3) iItemID = ItemId::werewolf_meat;
						break; // WerewolfMeat
					case 4: if (iDice(1, 35) == 3) iItemID = ItemId::werewolf_leather;
						break; // WerewolfLeather
					case 5: if (iDice(1, 28) == 3) iItemID = ItemId::werewolf_teeth;
						break; // WerewolfTeeth
					case 6: if (iDice(1, 28) == 3) iItemID = ItemId::werewolf_claw;
						break; // WerewolfClaw
					case 7: if (iDice(1, 38) == 3) iItemID = ItemId::werewolf_nail;
						break; // WerewolfNail
					case 8: bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
						break;
					default: break;
				}
				break;
			case NpcType::stalker: //Stalker
			case NpcType::hellclaw: //Hellclaw
			case NpcType::tigerworm: //Tigerworm
			case NpcType::gagoyle: //Gagoyle
			case NpcType::beholder: //Beholder
			case NpcType::dark_elf: //Dark-Elf
			case NpcType::rabbit: //Rabbit
			case NpcType::cat: //Cat
			case NpcType::giant_frog: //Giant-Frog
			case NpcType::mountain_giant: //Mountain-Giant
			case NpcType::ettin: //Ettin
			case NpcType::cannibal_plant: //Cannibal-Plant
			case NpcType::rudolph: //Rudolph
			case NpcType::dire_boar: //DireBoar
			case NpcType::frost: //Frost
			case NpcType::ice_golem: //Ice
				bGetItemNameWhenDeleteNpc(iItemID, m_pNpcList[iNpcH]->m_sType);
				break;
				// new 05/10/2004
			case NpcType::wyvern: // Wyvern
				bGetMultipleItemNamesWhenDeleteNpc(m_pNpcList[iNpcH]->m_sType, // NPC Type
						  50,
						  5,
						  15,
						  m_pNpcList[iNpcH]->m_sX,
						  m_pNpcList[iNpcH]->m_sY,
						  DEF_ITEMSPREAD_FIXED,
						  4,
						  iItemIDs,
						  ItemPositions,
						  &iNumItem);
				break;
			case NpcType::fire_wyvern: // Fire-Wyvern
				bGetMultipleItemNamesWhenDeleteNpc(m_pNpcList[iNpcH]->m_sType, // NPC Type
						  50,
						  5,
						  15,
						  m_pNpcList[iNpcH]->m_sX,
						  m_pNpcList[iNpcH]->m_sY,
						  2,
						  4,
						  iItemIDs,
						  ItemPositions,
						  &iNumItem);
				break;
			case NpcType::abaddon:
				bGetMultipleItemNamesWhenDeleteNpc(m_pNpcList[iNpcH]->m_sType, // NPC Type
						  50,
						  12,
						  20,
						  m_pNpcList[iNpcH]->m_sX,
						  m_pNpcList[iNpcH]->m_sY,
						  DEF_ITEMSPREAD_FIXED,
						  65,
						  iItemIDs,
						  ItemPositions,
						  &iNumItem);
				break;
			default: break;
		}
		dwCount = 1;
		if (iNumItem > 0) {
			GetLocalTime(&SysTime);
			wsprintf(cTemp, "%d%02d%", SysTime.wMonth, SysTime.wDay);
			for (int j = 0; j < iNumItem; j++) {
				if (pItem == 0) {
					pItem = new CItem;
				}
				if (_bInitItemAttr(pItem, iItemIDs[j]) == false ||
						  m_pMapList[ m_pNpcList[iNpcH]->m_cMapIndex ]->bGetIsMoveAllowedTile(ItemPositions[j].x, ItemPositions[j].y) == false) {
					delete pItem;
					pItem = 0;
				} else {
					if (iItemIDs[j] == ItemId::gold) // Gold
						pItem->m_dwCount = iDice(10, 15000);
					else
						pItem->m_dwCount = dwCount;
					pItem->m_sTouchEffectType = DEF_ITET_ID;
					pItem->m_sTouchEffectValue1 = iDice(1, 100000);
					pItem->m_sTouchEffectValue2 = iDice(1, 100000);
					pItem->m_sTouchEffectValue3 = (short) timeGetTime();
					m_pMapList[ m_pNpcList[iNpcH]->m_cMapIndex ]->bSetItem(ItemPositions[j].x, ItemPositions[j].y, pItem);
					SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pNpcList[iNpcH]->m_cMapIndex,
							  ItemPositions[j].x, ItemPositions[j].y, pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor);
					_bItemLog(DEF_ITEMLOG_NEWGENDROP, 0, m_pNpcList[iNpcH]->m_cNpcName, pItem);
					pItem = 0;
				}
			}
		} else {
			if (_bInitItemAttr(pItem, iItemID) == false) {
				delete pItem;
				pItem = 0;
			} else {
				pItem->m_dwCount = dwCount;
				pItem->m_sTouchEffectType = DEF_ITET_ID;
				pItem->m_sTouchEffectValue1 = iDice(1, 100000);
				pItem->m_sTouchEffectValue2 = iDice(1, 100000);
				pItem->m_sTouchEffectValue3 = (short) timeGetTime();
				m_pMapList[ m_pNpcList[iNpcH]->m_cMapIndex ]->bSetItem(m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY, pItem);
				SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pNpcList[iNpcH]->m_cMapIndex,
						  m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY, pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor);
				_bItemLog(DEF_ITEMLOG_NEWGENDROP, 0, m_pNpcList[iNpcH]->m_cNpcName, pItem);
			}
		}
		if (iDice(1, 100000) < 10) {
			pItem2 = new CItem;
			switch (iDice(1, 4)) {
				case 1: iSlateID = ItemId::ancient_tablet_lu;
					break;
				case 2: iSlateID = ItemId::ancient_tablet_ld;
					break;
				case 3: iSlateID = ItemId::ancient_tablet_ru;
					break;
				case 4: iSlateID = ItemId::ancient_tablet_rd;
					break;
			}
			if (_bInitItemAttr(pItem2, iSlateID) == false) {
				delete pItem2;
				pItem2 = 0;
			} else {
				pItem2->m_dwCount = 1;
				pItem2->m_sTouchEffectType = DEF_ITET_ID;
				pItem2->m_sTouchEffectValue1 = iDice(1, 100000);
				pItem2->m_sTouchEffectValue2 = iDice(1, 100000);
				pItem2->m_sTouchEffectValue3 = (short) timeGetTime();
				m_pMapList[ m_pNpcList[iNpcH]->m_cMapIndex ]->bSetItem(m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY, pItem2);
				SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pNpcList[iNpcH]->m_cMapIndex,
						  m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY, pItem2->m_sSprite, pItem2->m_sSpriteFrame, pItem2->m_cItemColor);
				_bItemLog(DEF_ITEMLOG_NEWGENDROP, 0, m_pNpcList[iNpcH]->m_cNpcName, pItem2);
			}
		}
	}
	delete m_pNpcList[iNpcH];
	m_pNpcList[iNpcH] = 0;
}

void CGame::RequestFullObjectData(int iClientH, char *pData) {
	uint32_t * dwp;
	uint16_t * wp, wObjectID;
	char * cp, cData[100];
	short * sp, sX, sY;
	int sTemp;
	int sTemp2;
	int * ip, iRet;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	wp = (uint16_t *) (pData + DEF_INDEX2_MSGTYPE);
	wObjectID = *wp;
	std::memset(cData, 0, sizeof(cData));
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_EVENT_MOTION;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = DEF_OBJECTSTOP;
	cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
	if (wObjectID < 10000) {
		if ((wObjectID == 0) || (wObjectID >= DEF_MAXCLIENTS)) return;
		if (m_pClientList[wObjectID] == 0) return;
		wp = (uint16_t *) cp;
		*wp = wObjectID; // ObjectID
		cp += 2;
		sp = (short *) cp;
		sX = m_pClientList[wObjectID]->m_sX;
		*sp = sX;
		cp += 2;
		sp = (short *) cp;
		sY = m_pClientList[wObjectID]->m_sY;
		*sp = sY;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[wObjectID]->m_sType;
		cp += 2;
		*cp = m_pClientList[wObjectID]->m_cDir;
		cp++;
		memcpy(cp, m_pClientList[wObjectID]->m_cCharName, 10);
		cp += 10;
		sp = (short *) cp;
		*sp = m_pClientList[wObjectID]->m_sAppr1;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[wObjectID]->m_sAppr2;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[wObjectID]->m_sAppr3;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[wObjectID]->m_sAppr4;
		cp += 2;
		//v1.4 ApprColor
		ip = (int *) cp;
		*ip = m_pClientList[wObjectID]->m_iApprColor;
		cp += 4;
		ip = (int *) cp;
		sTemp = m_pClientList[wObjectID]->m_iStatus;
		sTemp = 0x0FFFFFFF & sTemp;
		sTemp2 = iGetPlayerABSStatus(wObjectID, iClientH); //(short)iGetPlayerRelationship(iClientH, wObjectID);
		sTemp = (sTemp | (sTemp2 << 28)); //Original : 12
		*ip = sTemp;
		//*sp = DEF_TEST;
		cp += 4; //Original 2
		if (m_pClientList[wObjectID]->m_bIsKilled == true) // v1.4
			*cp = 1;
		else *cp = 0;
		cp++;
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 41); // v1.4
	} else {
		if (((wObjectID - 10000) == 0) || ((wObjectID - 10000) >= DEF_MAXNPCS)) return;
		if (m_pNpcList[wObjectID - 10000] == 0) return;
		wp = (uint16_t *) cp;
		*wp = wObjectID;
		cp += 2;
		wObjectID -= 10000;
		sp = (short *) cp;
		sX = m_pNpcList[wObjectID]->m_sX;
		*sp = sX;
		cp += 2;
		sp = (short *) cp;
		sY = m_pNpcList[wObjectID]->m_sY;
		*sp = sY;
		cp += 2;
		sp = (short *) cp;
		*sp = (short) m_pNpcList[wObjectID]->m_sType;
		cp += 2;
		*cp = m_pNpcList[wObjectID]->m_cDir;
		cp++;
		memcpy(cp, m_pNpcList[wObjectID]->m_cName, 5);
		cp += 5;
		sp = (short *) cp;
		*sp = m_pNpcList[wObjectID]->m_sAppr2;
		cp += 2;
		ip = (int *) cp;
		sTemp = m_pNpcList[wObjectID]->m_iStatus;
		sTemp = 0x0FFFFFFF & sTemp;
		sTemp2 = iGetNpcRelationship(wObjectID, iClientH);
		sTemp = (sTemp | (sTemp2 << 28)); //Original : 12
		*ip = sTemp;
		//*sp = DEF_TEST;
		cp += 4; //Original 2
		if (m_pNpcList[wObjectID]->m_bIsKilled == true) // v1.4
			*cp = 1;
		else *cp = 0;
		cp++;
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 27); // v1.4 //Original : 25
	}
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			return;
	}
}

int CGame::_iGetArrowItemIndex(int iClientH) {
	int i;
	if (m_pClientList[iClientH] == 0) return -1;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
			if ((m_pClientList[iClientH]->m_pItemList[i]->m_cItemType == ItemType::arrow) &&
					  (m_pClientList[iClientH]->m_pItemList[i]->m_dwCount > 0))
				return i;
		}
	return -1;
}

void CGame::ItemDepleteHandler(int iClientH, short sItemIndex, bool bIsUseItemResult, bool bIsItemUsed) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((sItemIndex < 0) || (sItemIndex >= DEF_MAXITEMS)) return;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) return;
	if ((bIsItemUsed == 1) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::consume) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::eat) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::use_deplete) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::use_deplete_dest) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::material) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::ice_storm_manual) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::mass_fire_strike_manual) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::bloody_shock_w_manual)) {
		_bItemLog(DEF_ITEMLOG_DEPLETE, iClientH, -1, m_pClientList[iClientH]->m_pItemList[sItemIndex], false);
	} else if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::aresden_flag) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::elvine_flag)) {
		_bItemLog(DEF_ITEMLOG_DEPLETE, iClientH, -1, m_pClientList[iClientH]->m_pItemList[sItemIndex], false);
	}
	ReleaseItemHandler(iClientH, sItemIndex, true);
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMDEPLETED_ERASEITEM, sItemIndex, (int) bIsUseItemResult, 0, 0);
	delete m_pClientList[iClientH]->m_pItemList[sItemIndex];
	m_pClientList[iClientH]->m_pItemList[sItemIndex] = 0;
	m_pClientList[iClientH]->m_bIsItemEquipped[sItemIndex] = false;
	m_pClientList[iClientH]->m_cArrowIndex = _iGetArrowItemIndex(iClientH);
	iCalcTotalWeight(iClientH);
}

void CGame::NpcBehavior_Stop(int iNpcH) {
	char cTargetType;
	short sTarget = 0;
	bool bFlag;
	if (m_pNpcList[iNpcH] == 0) return;
	m_pNpcList[iNpcH]->m_sBehaviorTurnCount++;
	switch (m_pNpcList[iNpcH]->m_cActionLimit) {
		case 5:
			switch (m_pNpcList[iNpcH]->m_sType) {
				case NpcType::ms:
					if (m_pNpcList[iNpcH]->m_sBehaviorTurnCount >= 3) {
						m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
						bFlag = _bNpcBehavior_ManaCollector(iNpcH);
						if (bFlag == true) {
							SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY, 1);
						}
					}
					break;
				case NpcType::dt: // Detector
					if (m_pNpcList[iNpcH]->m_sBehaviorTurnCount >= 3) {
						m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
						bFlag = _bNpcBehavior_Detector(iNpcH);
						if (bFlag == true) {
							SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTATTACK, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY, 1);
						}
					}
					break;
				case NpcType::esg: // Energy Shield Generator
					break;
				case NpcType::gmg: // Grand Magic Generator
					if (m_pNpcList[iNpcH]->m_sBehaviorTurnCount >= 3) {
						m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
						_NpcBehavior_GrandMagicGenerator(iNpcH);
					}
					break;
				case NpcType::mana_stone:
					m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
					m_pNpcList[iNpcH]->m_iV1 += 5;
					if (m_pNpcList[iNpcH]->m_iV1 >= 5) m_pNpcList[iNpcH]->m_iV1 = 5;
					break;
				default:
					TargetSearch(iNpcH, &sTarget, &cTargetType);
					break;
			}
			break;
	}
	if ((sTarget != 0)) {
		m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::attack;
		m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
		m_pNpcList[iNpcH]->m_iTargetIndex = sTarget;
		m_pNpcList[iNpcH]->m_cTargetType = cTargetType;
		return;
	}
}

void CGame::UseItemHandler(int iClientH, short sItemIndex, short dX, short dY, short sDestItemID) {
	int iTemp;
	int iMax;
	int iV1;
	int iV2;
	int iV3;
	int iSEV1;
	int iEffectResult = 0;
	uint32_t dwTime;
	short sTemp;
	short sTmpType;
	short sTmpAppr1;
	char cSlateType[20];
	dwTime = timeGetTime();
	std::memset(cSlateType, 0, sizeof(cSlateType));
	//testcode
	//wsprintf(G_cTxt, "%d", sDestItemID);
	//PutLogList(G_cTxt);
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((sItemIndex < 0) || (sItemIndex >= DEF_MAXITEMS)) return;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) return;
	if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::use_deplete) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::use_perm) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::arrow) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::eat) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::use_skill) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::use_deplete_dest)) {
	} else return;
	if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::use_deplete) ||
			  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::eat)) {
		switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType) {
			case ItemEffectType::warm:
				if (m_pClientList[iClientH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 1) {
					//	SetIceFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
					bRemoveFromDelayEventList(iClientH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_ICE);
					bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (1 * 1000),
							  iClientH, DEF_OWNERTYPE_PLAYER, 0, 0, 0, 1, 0, 0);
					//				SendNotifyMsg(0, iClientH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_ICE, 0, 0, 0);
				}
				m_pClientList[iClientH]->m_dwWarmEffectTime = dwTime;
				break;
			case ItemEffectType::lottery:
				iTemp = iDice(1, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue1);
				if (iTemp == iDice(1, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue1)) {
				} else {
				}
				break;
			case ItemEffectType::slates:
				if (m_pClientList[iClientH]->m_pItemList[sItemIndex] != 0) {
					// Full Ancient Slate ??
					if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::ancient_tablet) {
						// Slates dont work on Heldenian Map
						switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2) {
							case 2: // Bezerk slate
								m_pClientList[iClientH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_BERSERK ] = true;
								SetBerserkFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
								bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_BERSERK, dwTime + (1000 * 600),
										  iClientH, DEF_OWNERTYPE_PLAYER, 0, 0, 0, 1, 0, 0);
								SendNotifyMsg(0, iClientH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_BERSERK, 1, 0, 0);
								strcpy(cSlateType, "Berserk");
								break;
							case 1: // Invincible slate
								if (strlen(cSlateType) == 0) {
									strcpy(cSlateType, "Invincible");
								}
							case 3: // Mana slate
								if (strlen(cSlateType) == 0) {
									strcpy(cSlateType, "Mana");
								}
							case 4: // Exp slate
								if (strlen(cSlateType) == 0) {
									strcpy(cSlateType, "Exp");
								}
								SetSlateFlag(iClientH, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2, true);
								bRegisterDelayEvent(DEF_DELAYEVENTTYPE_ANCIENT_TABLET, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2,
										  dwTime + (1000 * 600), iClientH, DEF_OWNERTYPE_PLAYER, 0, 0, 0, 1, 0, 0);
								switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2) {
									case 1:
										iEffectResult = 4;
										break;
									case 3:
										iEffectResult = 5;
										break;
									case 4:
										iEffectResult = 6;
										break;
								}
						}
						if (strlen(cSlateType) > 0)
							_bItemLog(DEF_ITEMLOG_USE, iClientH, strlen(cSlateType), m_pClientList[iClientH]->m_pItemList[sItemIndex]);
					}
				}
				break;
			case ItemEffectType::hp:
				iMax = iGetMaxHP(iClientH);
				if (m_pClientList[iClientH]->m_iHP < iMax) {
					if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue1 == 0) {
						iV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
						iV2 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
						iV3 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue3;
					} else {
						iV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue1;
						iV2 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2;
						iV3 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue3;
					}
					m_pClientList[iClientH]->m_iHP += (iDice(iV1, iV2) + iV3);
					if (m_pClientList[iClientH]->m_iHP > iMax) m_pClientList[iClientH]->m_iHP = iMax;
					if (m_pClientList[iClientH]->m_iHP <= 0) m_pClientList[iClientH]->m_iHP = 1;
					iEffectResult = 1;
				}
				break;
			case ItemEffectType::mp:
				iMax = iGetMaxMP(iClientH);
				if (m_pClientList[iClientH]->m_iMP < iMax) {
					if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue1 == 0) {
						iV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
						iV2 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
						iV3 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue3;
					} else {
						iV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue1;
						iV2 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2;
						iV3 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue3;
					}
					m_pClientList[iClientH]->m_iMP += (iDice(iV1, iV2) + iV3);
					if (m_pClientList[iClientH]->m_iMP > iMax)
						m_pClientList[iClientH]->m_iMP = iMax;
					iEffectResult = 2;
				}
				break;
			case ItemEffectType::sp:
				iMax = iGetMaxSP(iClientH);
				if (m_pClientList[iClientH]->m_iSP < iMax) {
					if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue1 == 0) {
						iV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
						iV2 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
						iV3 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue3;
					} else {
						iV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue1;
						iV2 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2;
						iV3 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue3;
					}
					m_pClientList[iClientH]->m_iSP += (iDice(iV1, iV2) + iV3);
					if (m_pClientList[iClientH]->m_iSP > iMax)
						m_pClientList[iClientH]->m_iSP = iMax;
					iEffectResult = 3;
				}
				if (m_pClientList[iClientH]->m_bIsPoisoned == true) {
					m_pClientList[iClientH]->m_bIsPoisoned = false;
					SetPoisonFlag(iClientH, DEF_OWNERTYPE_PLAYER, false); // removes poison aura when using a revitalizing potion
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_POISON, 0, 0, 0);
				}
				break;
			case ItemEffectType::hpstock:
				iV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
				iV2 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
				iV3 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue3;
				m_pClientList[iClientH]->m_iHPstock += iDice(iV1, iV2) + iV3;
				if (m_pClientList[iClientH]->m_iHPstock < 0) m_pClientList[iClientH]->m_iHPstock = 0;
				if (m_pClientList[iClientH]->m_iHPstock > 500) m_pClientList[iClientH]->m_iHPstock = 500;
				m_pClientList[iClientH]->m_iHungerStatus += iDice(iV1, iV2) + iV3;
				if (m_pClientList[iClientH]->m_iHungerStatus > 100) m_pClientList[iClientH]->m_iHungerStatus = 100;
				if (m_pClientList[iClientH]->m_iHungerStatus < 0) m_pClientList[iClientH]->m_iHungerStatus = 0;
				break;
			case ItemEffectType::repplus:
				iMax = 10000;
				if (m_pClientList[iClientH]->m_iRating < iMax) m_pClientList[iClientH]->m_iRating += 1;
				iEffectResult = 7;
				break;
			case ItemEffectType::studyskill:
				iV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
				iV2 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
				iSEV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue1;
				if (iSEV1 == 0) {
					TrainSkillResponse(true, iClientH, iV1, iV2);
				} else {
					TrainSkillResponse(true, iClientH, iV1, iSEV1);
				}
				break;
			case ItemEffectType::studymagic:
				iV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
				if (m_pMagicConfigList[iV1] != 0)
					RequestStudyMagicHandler(iClientH, m_pMagicConfigList[iV1]->m_cName, false);
				break;
			case ItemEffectType::addballpoints:
				char cInfoString[56];
				iV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
				m_pClientList[iClientH]->m_iBallPoints += iV1;
				wsprintf(cInfoString, "%d Ball Points added. Total Amount: %d ", iV1, m_pClientList[iClientH]->m_iBallPoints);
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_IPACCOUNTINFO, 0, 0, 0, cInfoString);
				break;
				/*case ItemEffectType::lottery:
					iLottery = iDice(1, m_pClientList[iClientH]->m_pItemList[sItemIndex]->
					break;*/
				// New 15/05/2004 Changed
			case ItemEffectType::magic:
				if ((m_pClientList[iClientH]->m_iStatus & 0x10) != 0) {
					if (m_pClientList[iClientH]->m_iAdminUserLevel == 0) {
						SetInvisibilityFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
						bRemoveFromDelayEventList(iClientH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_INVISIBILITY);
						m_pClientList[ iClientH ]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = 0;
					}
				}
				switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1) {
					case 1:
						// testcode
						if (bCheckIfIsFlagCarrier(iClientH)) ShowClientMsg(iClientH, "You can not use that item being a flag carrier.");
						else RequestTeleportHandler(iClientH, "1   ");
						break;
					case 2:
						if (bCheckIfIsFlagCarrier(iClientH)) ShowClientMsg(iClientH, "You can not use that item being a flag carrier.");
						else PlayerMagicHandler(iClientH, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, 32, true);
						break;
					case 3:
						if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsFightZone == false)
							PlayerMagicHandler(iClientH, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, 34, true);
						break;
					case 4:
						switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2) {
							case 1:
								if (bCheckIfIsFlagCarrier(iClientH)) ShowClientMsg(iClientH, "You can not use that item being a flag carrier.");
								else {
									if (memcmp(m_pClientList[iClientH]->m_cMapName, "bisle", 5) != 0) {
										ItemDepleteHandler(iClientH, sItemIndex, true, true);
										RequestTeleportHandler(iClientH, "2   ", "bisle", -1, -1);
									}
								}
								break;
							case 11:
							case 12:
							case 13:
							case 14:
							case 15:
							case 16:
							case 17:
							case 18:
							case 19:
								SYSTEMTIME SysTime;
								GetLocalTime(&SysTime);
								if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sTouchEffectValue1 != SysTime.wMonth) ||
										  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sTouchEffectValue2 != SysTime.wDay) ||
										  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sTouchEffectValue3 <= SysTime.wHour)) {
								} else {
									char cDestMapName[11];
									std::memset(cDestMapName, 0, sizeof(cDestMapName));
									wsprintf(cDestMapName, "fightzone%d", m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2 - 10);
									if (memcmp(m_pClientList[iClientH]->m_cMapName, cDestMapName, 10) != 0) {
										//v1.42
										ItemDepleteHandler(iClientH, sItemIndex, true, true);
										RequestTeleportHandler(iClientH, "2   ", cDestMapName, -1, -1);
									}
								}
								break;
						}
						break;
					case 5:
						// new
						if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex] == 0) break;
						if (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "GodH", 4) == 0) break;
						if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2 > 8) {
							if ((m_bHeldenianInitiated == true) && (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsHeldenianMap == true)) {
								PlayerMagicHandler(iClientH, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, 31, true,
										  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2);
							}
						}
						PlayerMagicHandler(iClientH, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, 31, true,
								  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2);
						break;
				}
				break;
			case ItemEffectType::firmstaminar:
				m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
				if (m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar > 20 * 30) m_pClientList[iClientH]->m_iTimeLeft_FirmStaminar = 20 * 30;
				break;
			case ItemEffectType::changeattr:
				switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1) {
					case 1:
						m_pClientList[iClientH]->m_cHairColor++;
						if (m_pClientList[iClientH]->m_cHairColor > 15) m_pClientList[iClientH]->m_cHairColor = 0;
						sTemp = (m_pClientList[iClientH]->m_cHairStyle << 8) | (m_pClientList[iClientH]->m_cHairColor << 4) | (m_pClientList[iClientH]->m_cUnderwear);
						m_pClientList[iClientH]->m_sAppr1 = sTemp;
						break;
					case 2:
						m_pClientList[iClientH]->m_cHairStyle++;
						if (m_pClientList[iClientH]->m_cHairStyle > 7) m_pClientList[iClientH]->m_cHairStyle = 0;
						sTemp = (m_pClientList[iClientH]->m_cHairStyle << 8) | (m_pClientList[iClientH]->m_cHairColor << 4) | (m_pClientList[iClientH]->m_cUnderwear);
						m_pClientList[iClientH]->m_sAppr1 = sTemp;
						break;
					case 3:
						m_pClientList[iClientH]->m_cSkin++;
						if (m_pClientList[iClientH]->m_cSkin > 3)
							m_pClientList[iClientH]->m_cSkin = 1;
						if (m_pClientList[iClientH]->m_cSex == 1) sTemp = 1;
						else if (m_pClientList[iClientH]->m_cSex == 2) sTemp = 4;
						switch (m_pClientList[iClientH]->m_cSkin) {
							case 2: sTemp += 1;
								break;
							case 3: sTemp += 2;
								break;
						}
						m_pClientList[iClientH]->m_sType = sTemp;
						break;
					case 4:
						sTemp = m_pClientList[iClientH]->m_sAppr3 & 0xFF0F;
						if (sTemp == 0) {
							if (m_pClientList[iClientH]->m_cSex == 1)
								m_pClientList[iClientH]->m_cSex = 2;
							else m_pClientList[iClientH]->m_cSex = 1;
							if (m_pClientList[iClientH]->m_cSex == 1) {
								sTmpType = 1;
							} else if (m_pClientList[iClientH]->m_cSex == 2) {
								sTmpType = 4;
							}
							switch (m_pClientList[iClientH]->m_cSkin) {
								case 1:
									break;
								case 2:
									sTmpType += 1;
									break;
								case 3:
									sTmpType += 2;
									break;
							}
							sTmpAppr1 = (m_pClientList[iClientH]->m_cHairStyle << 8) | (m_pClientList[iClientH]->m_cHairColor << 4) | (m_pClientList[iClientH]->m_cUnderwear);
							m_pClientList[iClientH]->m_sType = sTmpType;
							m_pClientList[iClientH]->m_sAppr1 = sTmpAppr1;
							//
						}
						break;
				}
				SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
				break;
			default: break;
		}
		ItemDepleteHandler(iClientH, sItemIndex, true, true);
		switch (iEffectResult) {
			case 1:
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_HP, 0, 0, 0, 0);
				break;
			case 2:
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_MP, 0, 0, 0, 0);
				break;
			case 3:
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_SP, 0, 0, 0, 0);
				break;
			case 4: // Invincible
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_SLATE_INVINCIBLE, 0, 0, 0, 0);
				break;
			case 5: // Mana
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_SLATE_MANA, 0, 0, 0, 0);
				break;
			case 6: // EXP
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_SLATE_EXP, 0, 0, 0, 0);
				break;
			default:
				break;
			case 7: //Rep
				char cRepMessage[60];
				wsprintf(cRepMessage, "You have Earned 1 Rep Point.");
				ShowClientMsg(iClientH, cRepMessage);
				break;
		}
	} else if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::use_deplete_dest) {
		if (_bDepleteDestTypeItemUseEffect(iClientH, dX, dY, sItemIndex, sDestItemID) == true)
			ItemDepleteHandler(iClientH, sItemIndex, true, true);
	} else if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::arrow) {
		m_pClientList[iClientH]->m_cArrowIndex = _iGetArrowItemIndex(iClientH);
	} else if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::use_perm) {
		switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType) {
			case ItemEffectType::showlocation:
				iV1 = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
				switch (iV1) {
					case 1:
						if (strcmp(m_pClientList[iClientH]->m_cMapName, "aresden") == 0)
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SHOWMAP, iV1, 1, 0, 0);
						else if (strcmp(m_pClientList[iClientH]->m_cMapName, "elvine") == 0)
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SHOWMAP, iV1, 2, 0, 0);
						else if (strcmp(m_pClientList[iClientH]->m_cMapName, "middleland") == 0)
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SHOWMAP, iV1, 3, 0, 0);
						else if (strcmp(m_pClientList[iClientH]->m_cMapName, "default") == 0)
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SHOWMAP, iV1, 4, 0, 0);
						else if (strcmp(m_pClientList[iClientH]->m_cMapName, "huntzone2") == 0)
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SHOWMAP, iV1, 5, 0, 0);
						else if (strcmp(m_pClientList[iClientH]->m_cMapName, "huntzone1") == 0)
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SHOWMAP, iV1, 6, 0, 0);
						else if (strcmp(m_pClientList[iClientH]->m_cMapName, "huntzone4") == 0)
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SHOWMAP, iV1, 7, 0, 0);
						else if (strcmp(m_pClientList[iClientH]->m_cMapName, "huntzone3") == 0)
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SHOWMAP, iV1, 8, 0, 0);
						else if (strcmp(m_pClientList[iClientH]->m_cMapName, "arefarm") == 0)
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SHOWMAP, iV1, 9, 0, 0);
						else if (strcmp(m_pClientList[iClientH]->m_cMapName, "elvfarm") == 0)
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SHOWMAP, iV1, 10, 0, 0);
						else SendNotifyMsg(0, iClientH, DEF_NOTIFY_SHOWMAP, iV1, 0, 0, 0);
						break;
				}
				break;
			
			default: break;
		}
	} else if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemType == ItemType::use_skill) {
		if ((m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) ||
				  (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wCurLifeSpan <= 0) ||
				  (m_pClientList[iClientH]->m_bSkillUsingStatus[ m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sRelatedSkill ] == true)) {
			return;
		} else {
			if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wMaxLifeSpan != 0) {
				m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wCurLifeSpan--;
				if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wCurLifeSpan <= 0) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMLIFESPANEND, (int) ItemEquipPos::none, sItemIndex, 0, 0);
				} else {
					int iSkillUsingTimeID = (int) timeGetTime();
					bRegisterDelayEvent(DEF_DELAYEVENTTYPE_USEITEM_SKILL, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sRelatedSkill,
							  dwTime + m_pSkillConfigList[ m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sRelatedSkill ]->m_sValue2 * 1000,
							  iClientH, DEF_OWNERTYPE_PLAYER, m_pClientList[iClientH]->m_cMapIndex, dX, dY,
							  m_pClientList[iClientH]->m_cSkillMastery[ m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sRelatedSkill ], iSkillUsingTimeID, 0);
					m_pClientList[iClientH]->m_bSkillUsingStatus[ m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sRelatedSkill ] = true;
					m_pClientList[iClientH]->m_iSkillUsingTimeID[ m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sRelatedSkill ] = iSkillUsingTimeID; //v1.12
				}
			}
		}
	}
}

void CGame::Effect_Damage_Spot(short sAttackerH, char cAttackerType, short sTargetH, char cTargetType, short sV1, short sV2, short sV3, bool bExp, int iAttr) {
	int iPartyID;
	int iDamage;
	int iSideCondition;
	int iIndex;
	int iRemainLife;
	int iTemp;
	int iExp;
	int iMaxSuperAttack;
	int iRepDamage;
	char cAttackerSide;
	char cDamageMoveDir;
	uint32_t dwTime;
	double dTmp1;
	double dTmp2;
	double dTmp3;
	short sAtkX;
	short sAtkY;
	short sTgtX;
	short sTgtY;
	short dX;
	short dY;
	short sItemIndex;
	if (cAttackerType == DEF_OWNERTYPE_PLAYER)
		if (m_pClientList[sAttackerH] == 0) return;
	if (cAttackerType == DEF_OWNERTYPE_NPC)
		if (m_pNpcList[sAttackerH] == 0) return;
	if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex] != 0) &&
			  (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsHeldenianMap == 1) && (m_bHeldenianInitiated == true)) return;
	dwTime = timeGetTime();
	iDamage = iDice(sV1, sV2) + sV3;
	if (iDamage <= 0) iDamage = 0;
	switch (cAttackerType) {
		case DEF_OWNERTYPE_PLAYER:
			if ((m_bAdminSecurity == true) && (m_pClientList[sAttackerH]->m_iAdminUserLevel > 0)) return;
			if (m_pClientList[sAttackerH]->m_cHeroArmourBonus == 2) iDamage += 4;
			if ((m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::lhand] == -1) || (m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand] == -1)) {
				sItemIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::rhand];
				if ((sItemIndex != -1) && (m_pClientList[sAttackerH]->m_pItemList[sItemIndex] != 0)) {
					if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::berserk_wand_ms20 || m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::berserk_wand_ms10) {
						float damageTemp = (float) iDamage;
						damageTemp *= 1.5; // O el valor con punto flotante que ustedes dispongan...
						iDamage = (int) damageTemp;
					}
					if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::kloness_wand_ms20 || m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::kloness_wand_ms10) {
						if (m_pClientList[sAttackerH]->m_iRating > 0) {
							iRepDamage = m_pClientList[sAttackerH]->m_iRating / 100;
							if (iRepDamage < 5) iRepDamage = 5;
							iDamage += iRepDamage;
						}
						if (cTargetType == DEF_OWNERTYPE_PLAYER) {
							if (m_pClientList[sTargetH] != 0) {
								if (m_pClientList[sTargetH]->m_iRating < 0) {
									iRepDamage = (abs(m_pClientList[sTargetH]->m_iRating) / 10);
									if (iRepDamage > 10) iRepDamage = 10;
									iDamage += iRepDamage;
								}
							}
						}
					}
				}
				sItemIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::neck];
				if ((sItemIndex != -1) && (m_pClientList[sAttackerH]->m_pItemList[sItemIndex] != 0)) {
					if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::necklace_of_kloness) { // NecklaceOfKloness
						if (cTargetType == DEF_OWNERTYPE_PLAYER) {
							if (m_pClientList[sTargetH] != 0) {
								iRepDamage = (abs(m_pClientList[sTargetH]->m_iRating) / 20);
								if (iRepDamage > 5) iRepDamage = 5;
								iDamage += iRepDamage;
							}
						}
					}
				}
			}
			if ((m_bIsCrusadeMode == false) && (m_pClientList[sAttackerH]->m_bIsPlayerCivil == true) && (cTargetType == DEF_OWNERTYPE_PLAYER)) return;
			dTmp1 = (double) iDamage;
			if ((m_pClientList[sAttackerH]->m_iMag + m_pClientList[sAttackerH]->m_iAngelicMag) <= 0)
				dTmp2 = 1.0f;
			else dTmp2 = (double) (m_pClientList[sAttackerH]->m_iMag + m_pClientList[sAttackerH]->m_iAngelicMag);
			dTmp2 = dTmp2 / 3.3f;
			dTmp3 = dTmp1 + (dTmp1 * (dTmp2 / 100.0f));
			iDamage = (int) (dTmp3 + 0.5f);
			iDamage += m_pClientList[sAttackerH]->m_iAddMagicalDamage;
			if (iDamage <= 0) iDamage = 0;
			if (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsFightZone == true)
				iDamage += iDamage / 3;
			if (bCheckHeldenianMap(sAttackerH, m_iBTFieldMapIndex, DEF_OWNERTYPE_PLAYER) == 1) {
				iDamage += iDamage / 3;
			}
			if ((cTargetType == DEF_OWNERTYPE_PLAYER) && (m_bIsCrusadeMode == true) && (m_pClientList[sAttackerH]->m_iCrusadeDuty == 1)) {
				if (m_pClientList[sAttackerH]->m_iLevel <= 80) {
					iDamage += (iDamage * 7) / 10;
				} else if (m_pClientList[sAttackerH]->m_iLevel <= 100) {
					iDamage += iDamage / 2;
				} else
					iDamage += iDamage / 3;
			}
			cAttackerSide = m_pClientList[sAttackerH]->m_cSide;
			sAtkX = m_pClientList[sAttackerH]->m_sX;
			sAtkY = m_pClientList[sAttackerH]->m_sY;
			iPartyID = m_pClientList[sAttackerH]->m_iPartyID;
			break;
		case DEF_OWNERTYPE_NPC:
			cAttackerSide = m_pNpcList[sAttackerH]->m_cSide;
			sAtkX = m_pNpcList[sAttackerH]->m_sX;
			sAtkY = m_pNpcList[sAttackerH]->m_sY;
			break;
	}
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sTargetH] == 0) return;
			if (m_pClientList[sTargetH]->m_bIsInitComplete == false) return;
			if (m_pClientList[sTargetH]->m_bIsKilled == true) return;
			if ((m_pClientList[sTargetH]->m_iStatus & 0x400000) != 0) return;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_bIsCrusadeMode == false) &&
					  (m_pClientList[sTargetH]->m_iPKCount == 0) && (m_pClientList[sTargetH]->m_bIsPlayerCivil == true)) return;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sTargetH]->m_bIsNeutral == true) &&
					  (m_pClientList[sTargetH]->m_iPKCount == 0) && (m_pClientList[sTargetH]->m_bIsOwnLocation == true)) return;
			if ((dwTime - m_pClientList[sTargetH]->m_dwTime) > DEF_RAGPROTECTIONTIME) return;
			if ((m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->m_bIsAttackEnabled == false) && (m_pClientList[sTargetH]->m_iAdminUserLevel == 0)) return;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH]->m_bIsNeutral == true) && (m_pClientList[sTargetH]->m_iPKCount == 0)) return;
			if ((m_pClientList[sTargetH]->m_iPartyID != 0) && (iPartyID == m_pClientList[sTargetH]->m_iPartyID)) return;
			m_pClientList[sTargetH]->m_dwLogoutHackCheck = dwTime;
			if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
				if (m_pClientList[sAttackerH]->m_bIsSafeAttackMode == true) {
					iSideCondition = iGetPlayerRelationship(sAttackerH, sTargetH);
					if ((iSideCondition == 7) || (iSideCondition == 2) || (iSideCondition == 6)) {
					} else {
						if (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsFightZone == true) {
							if (m_pClientList[sAttackerH]->m_iGuildGUID != m_pClientList[sTargetH]->m_iGuildGUID) {
							} else return;
						} else return;
					}
				}
				if (m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->iGetAttribute(m_pClientList[sTargetH]->m_sX, m_pClientList[sTargetH]->m_sY, 0x00000005) != 0) return;
			}
			ClearSkillUsingStatus(sTargetH);
			switch (iAttr) {
				case 1:
					if (m_pClientList[sTargetH]->m_iAddAbsEarth != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsEarth;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				case 2:
					if (m_pClientList[sTargetH]->m_iAddAbsAir != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsAir;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				case 3:
					if (m_pClientList[sTargetH]->m_iAddAbsFire != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsFire;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				case 4:
					if (m_pClientList[sTargetH]->m_iAddAbsWater != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsWater;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				default: break;
			}
			iIndex = m_pClientList[sTargetH]->m_iMagicDamageSaveItemIndex;
			if ((iIndex != -1) && (iIndex >= 0) && (iIndex < DEF_MAXITEMS)) {
				switch (m_pClientList[sTargetH]->m_pItemList[iIndex]->m_sIDnum) {
					case ItemId::emerald_ring:
						dTmp1 = (double) iDamage;
						dTmp2 = dTmp1 * 0.2f;
						dTmp3 = dTmp1 - dTmp2;
						iDamage = (int) (dTmp3 + 0.5f);
						break;
					case ItemId::ruby_ring:
						dTmp1 = (double) iDamage;
						dTmp2 = dTmp1 * 0.1f;
						dTmp3 = dTmp1 - dTmp2;
						iDamage = (int) (dTmp3 + 0.5f);
						break;
					default: break;
				}
				if (iDamage <= 0) iDamage = 0;
				iRemainLife = m_pClientList[sTargetH]->m_pItemList[iIndex]->m_wCurLifeSpan;
				if (iRemainLife <= iDamage) {
					ItemDepleteHandler(sTargetH, iIndex, true, true);
				} else {
					m_pClientList[sTargetH]->m_pItemList[iIndex]->m_wCurLifeSpan -= iDamage;
				}
			}
			if (m_pClientList[sTargetH]->m_iAddAbsMD != 0) {
				dTmp1 = (double) iDamage;
				dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsMD;
				dTmp3 = (dTmp2 / 100.0f) * dTmp1;
				iDamage = iDamage - (int) dTmp3;
			}
			if (cTargetType == DEF_OWNERTYPE_PLAYER) {
				iDamage -= (iDice(1, m_pClientList[sTargetH]->m_iVit / 10) - 1);
				if (iDamage <= 0) iDamage = 0;
			}
			if ((m_pClientList[sTargetH]->m_bIsLuckyEffect == true) &&
					  (iDice(1, 10) == 5) && (m_pClientList[sTargetH]->m_iHP <= iDamage)) {
				iDamage = m_pClientList[sTargetH]->m_iHP - 1;
			}
			if (m_pClientList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] == 2)
				iDamage = iDamage / 2;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sTargetH]->m_bIsSpecialAbilityEnabled == true)) {
				switch (m_pClientList[sTargetH]->m_iSpecialAbilityType) {
					case 51:
					case 52:
						return;
				}
			}
			m_pClientList[sTargetH]->m_iHP -= iDamage;
			if (m_pClientList[sTargetH]->m_iHP <= 0) {
				ClientKilledHandler(sTargetH, sAttackerH, cAttackerType, iDamage);
			} else {
				if (iDamage > 0) {
					if (m_pClientList[sTargetH]->m_iAddTransMana > 0) {
						dTmp1 = (double) m_pClientList[sTargetH]->m_iAddTransMana;
						dTmp2 = (double) iDamage;
						dTmp3 = (dTmp1 / 100.0f) * dTmp2 + 1.0f;
						iTemp = (2 * (m_pClientList[sTargetH]->m_iMag + m_pClientList[sTargetH]->m_iAngelicMag)) + (2 * m_pClientList[sTargetH]->m_iLevel) + ((m_pClientList[sTargetH]->m_iInt + m_pClientList[sTargetH]->m_iAngelicInt) / 2);
						m_pClientList[sTargetH]->m_iMP += (int) dTmp3;
						if (m_pClientList[sTargetH]->m_iMP > iTemp) m_pClientList[sTargetH]->m_iMP = iTemp;
					}
					if (m_pClientList[sTargetH]->m_iAddChargeCritical > 0) {
						if (iDice(1, 100) < (m_pClientList[sTargetH]->m_iAddChargeCritical)) {
							iMaxSuperAttack = (m_pClientList[sTargetH]->m_iLevel / 10);
							if (m_pClientList[sTargetH]->m_iSuperAttackLeft < iMaxSuperAttack) m_pClientList[sTargetH]->m_iSuperAttackLeft++;
							SendNotifyMsg(0, sTargetH, DEF_NOTIFY_SUPERATTACKLEFT, 0, 0, 0, 0);
						}
					}
					SendNotifyMsg(0, sTargetH, DEF_NOTIFY_HP, 0, 0, 0, 0);
					SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, 0, 0);
					if (m_pClientList[sTargetH]->m_bSkillUsingStatus[19] != true) {
						m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->ClearOwner(0, sTargetH, DEF_OWNERTYPE_PLAYER, m_pClientList[sTargetH]->m_sX, m_pClientList[sTargetH]->m_sY);
						m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->SetOwner(sTargetH, DEF_OWNERTYPE_PLAYER, m_pClientList[sTargetH]->m_sX, m_pClientList[sTargetH]->m_sY);
					}
					if (m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
						SendNotifyMsg(0, sTargetH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_HOLDOBJECT, m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ], 0, 0);
						m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
						bRemoveFromDelayEventList(sTargetH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_HOLDOBJECT);
					}
				}
			}
			sTgtX = m_pClientList[sTargetH]->m_sX;
			sTgtY = m_pClientList[sTargetH]->m_sY;
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sTargetH] == 0) return;
			if (m_pNpcList[sTargetH]->m_iHP <= 0) return;
			if ((m_bIsCrusadeMode == true) && (cAttackerSide == m_pNpcList[sTargetH]->m_cSide)) return;
			sTgtX = m_pNpcList[sTargetH]->m_sX;
			sTgtY = m_pNpcList[sTargetH]->m_sY;
			switch (m_pNpcList[sTargetH]->m_cActionLimit) {
				case 1:
				case 2:
					return;
				case 4:
					if (sTgtX == sAtkX) {
						if (sTgtY == sAtkY) return;
						else if (sTgtY > sAtkY) cDamageMoveDir = 5;
						else if (sTgtY < sAtkY) cDamageMoveDir = 1;
					} else if (sTgtX > sAtkX) {
						if (sTgtY == sAtkY) cDamageMoveDir = 3;
						else if (sTgtY > sAtkY) cDamageMoveDir = 4;
						else if (sTgtY < sAtkY) cDamageMoveDir = 2;
					} else if (sTgtX < sAtkX) {
						if (sTgtY == sAtkY) cDamageMoveDir = 7;
						else if (sTgtY > sAtkY) cDamageMoveDir = 6;
						else if (sTgtY < sAtkY) cDamageMoveDir = 8;
					}
					dX = m_pNpcList[sTargetH]->m_sX + _tmp_cTmpDirX[cDamageMoveDir];
					dY = m_pNpcList[sTargetH]->m_sY + _tmp_cTmpDirY[cDamageMoveDir];
					if (m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->bGetMoveable(dX, dY, 0) == false) {
						cDamageMoveDir = iDice(1, 8);
						dX = m_pNpcList[sTargetH]->m_sX + _tmp_cTmpDirX[cDamageMoveDir];
						dY = m_pNpcList[sTargetH]->m_sY + _tmp_cTmpDirY[cDamageMoveDir];
						if (m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->bGetMoveable(dX, dY, 0) == false) return;
					}
					m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->ClearOwner(5, sTargetH, DEF_OWNERTYPE_NPC, m_pNpcList[sTargetH]->m_sX, m_pNpcList[sTargetH]->m_sY);
					m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->SetOwner(sTargetH, DEF_OWNERTYPE_NPC, dX, dY);
					m_pNpcList[sTargetH]->m_sX = dX;
					m_pNpcList[sTargetH]->m_sY = dY;
					m_pNpcList[sTargetH]->m_cDir = cDamageMoveDir;
					SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTMOVE, 0, 0, 0);
					dX = m_pNpcList[sTargetH]->m_sX + _tmp_cTmpDirX[cDamageMoveDir];
					dY = m_pNpcList[sTargetH]->m_sY + _tmp_cTmpDirY[cDamageMoveDir];
					if (m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->bGetMoveable(dX, dY, 0) == false) {
						cDamageMoveDir = iDice(1, 8);
						dX = m_pNpcList[sTargetH]->m_sX + _tmp_cTmpDirX[cDamageMoveDir];
						dY = m_pNpcList[sTargetH]->m_sY + _tmp_cTmpDirY[cDamageMoveDir];
						if (m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->bGetMoveable(dX, dY, 0) == false) return;
					}
					m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->ClearOwner(5, sTargetH, DEF_OWNERTYPE_NPC, m_pNpcList[sTargetH]->m_sX, m_pNpcList[sTargetH]->m_sY);
					m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->SetOwner(sTargetH, DEF_OWNERTYPE_NPC, dX, dY);
					m_pNpcList[sTargetH]->m_sX = dX;
					m_pNpcList[sTargetH]->m_sY = dY;
					m_pNpcList[sTargetH]->m_cDir = cDamageMoveDir;
					SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTMOVE, 0, 0, 0);
					if (bCheckEnergySphereDestination(sTargetH, sAttackerH, cAttackerType) == true) {
						DeleteNpc(sTargetH);
					}
					return;
			}
			if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
				switch (m_pNpcList[sTargetH]->m_sType) {
					case NpcType::esg:
					case NpcType::gmg:
						if ((m_pClientList[sAttackerH]->m_cSide == 0) || (m_pNpcList[sTargetH]->m_cSide == m_pClientList[sAttackerH]->m_cSide)) return;
						break;
					default: break;
				}
			}
			switch (m_pNpcList[sTargetH]->m_sType) {
				case NpcType::mc_gaffin: // McGaffin
				case NpcType::perry: // Perry
				case NpcType::devlin: // Devlin
					return;
				default: break;
			}
			if (m_pNpcList[sTargetH]->m_iAbsDamage > 0) {
				dTmp1 = (double) iDamage;
				dTmp2 = (double) (m_pNpcList[sTargetH]->m_iAbsDamage) / 100.0f;
				dTmp3 = dTmp1 * dTmp2;
				dTmp2 = dTmp1 - dTmp3;
				iDamage = (int) dTmp2;
				if (iDamage < 0) iDamage = 1;
			}
			if (m_pNpcList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] == 2)
				iDamage = iDamage / 2;
			m_pNpcList[sTargetH]->m_iHP -= iDamage;
			if (m_pNpcList[sTargetH]->m_iHP < 0) {
				NpcKilledHandler(sAttackerH, cAttackerType, sTargetH, iDamage);
			} else {
				switch (cAttackerType) {
					case DEF_OWNERTYPE_PLAYER:
						if ((m_pNpcList[sTargetH]->m_sType != NpcType::guard) && (m_pNpcList[sTargetH]->m_sType != NpcType::rabbit) && (m_pNpcList[sTargetH]->m_sType != NpcType::cat)
								  && (m_pNpcList[sTargetH]->m_cSide == cAttackerSide)) return;
						break;
					case DEF_OWNERTYPE_NPC:
						if (m_pNpcList[sAttackerH]->m_cSide == m_pNpcList[sTargetH]->m_cSide) return;
						break;
				}
				SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, 0, 0);
				if ((iDice(1, 3) == 2) && (m_pNpcList[sTargetH]->m_cActionLimit == 0)) {
					if ((cAttackerType == DEF_OWNERTYPE_NPC) &&
							  (m_pNpcList[sAttackerH]->m_sType == m_pNpcList[sTargetH]->m_sType) &&
							  (m_pNpcList[sAttackerH]->m_cSide == m_pNpcList[sTargetH]->m_cSide)) return;
					m_pNpcList[sTargetH]->m_cBehavior = NpcBehavior::attack;
					m_pNpcList[sTargetH]->m_sBehaviorTurnCount = 0;
					m_pNpcList[sTargetH]->m_iTargetIndex = sAttackerH;
					m_pNpcList[sTargetH]->m_cTargetType = cAttackerType;
					m_pNpcList[sTargetH]->m_dwTime = dwTime;
					if (m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
						m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
						bRemoveFromDelayEventList(sTargetH, DEF_OWNERTYPE_NPC, DEF_MAGICTYPE_HOLDOBJECT);
					}
					if ((m_pNpcList[sTargetH]->m_iNoDieRemainExp > 0) && (m_pNpcList[sTargetH]->m_bIsSummoned != true) &&
							  (cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH] != 0)) {
						if (m_pNpcList[sTargetH]->m_iNoDieRemainExp > iDamage) {
							iExp = iDamage;
							if ((m_bIsCrusadeMode == true) && (iExp > 10)) iExp = 10;
							if (m_pClientList[sAttackerH]->m_iAddExp > 0) {
								dTmp1 = (double) m_pClientList[sAttackerH]->m_iAddExp;
								dTmp2 = (double) iExp;
								dTmp3 = (dTmp1 / 100.0f) * dTmp2;
								iExp += (int) dTmp3;
							}
							if (m_pClientList[sAttackerH]->m_iLevel > 100) {
								switch (m_pNpcList[sTargetH]->m_sType) {
									case NpcType::rabbit:
									case NpcType::cat:
										iExp = 0;
										break;
									default: break;
								}
							}
							if (bExp == true)
								GetExp(sAttackerH, iExp, true);
							else GetExp(sAttackerH, (iExp / 2), true);
							m_pNpcList[sTargetH]->m_iNoDieRemainExp -= iDamage;
						} else {
							iExp = m_pNpcList[sTargetH]->m_iNoDieRemainExp;
							if ((m_bIsCrusadeMode == true) && (iExp > 10)) iExp = 10;
							if (m_pClientList[sAttackerH]->m_iAddExp > 0) {
								dTmp1 = (double) m_pClientList[sAttackerH]->m_iAddExp;
								dTmp2 = (double) iExp;
								dTmp3 = (dTmp1 / 100.0f) * dTmp2;
								iExp += (int) dTmp3;
							}
							if (m_pClientList[sAttackerH]->m_iLevel > 100) {
								switch (m_pNpcList[sTargetH]->m_sType) {
									case NpcType::rabbit:
									case NpcType::cat:
										iExp = 0;
										break;
									default: break;
								}
							}
							if (bExp == true)
								GetExp(sAttackerH, iExp, true);
							else GetExp(sAttackerH, (iExp / 2), true);
							m_pNpcList[sTargetH]->m_iNoDieRemainExp = 0;
						}
					}
				}
			}
			break;
	}
}

void CGame::Effect_Damage_Spot_Type2(short sAttackerH, char cAttackerType, short sTargetH, char cTargetType, short sAtkX, short sAtkY, short sV1, short sV2, short sV3, bool bExp, int iAttr) {
	int iPartyID;
	int iDamage;
	int iSideCondition;
	int iIndex;
	int iRemainLife;
	int iTemp;
	int iExp;
	int iMaxSuperAttack;
	int iRepDamage;
	char cAttackerSide;
	char cDamageMoveDir;
	char cDamageMinimum;
	uint32_t dwTime;
	double dTmp1;
	double dTmp2;
	double dTmp3;
	short sTgtX;
	short sTgtY;
	short sItemIndex;
	if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH] == 0)) return;
	if ((cAttackerType == DEF_OWNERTYPE_NPC) && (m_pNpcList[sAttackerH] == 0)) return;
	if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex] != 0) &&
			  (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsHeldenianMap == 1) && (m_bHeldenianInitiated == true)) return;
	dwTime = timeGetTime();
	sTgtX = 0;
	sTgtY = 0;
	iDamage = iDice(sV1, sV2) + sV3;
	if (iDamage <= 0) iDamage = 0;
	switch (cAttackerType) {
		case DEF_OWNERTYPE_PLAYER:
			if ((m_bAdminSecurity == true) && (m_pClientList[sAttackerH]->m_iAdminUserLevel > 0)) return;
			if (m_pClientList[sAttackerH]->m_cHeroArmourBonus == 2) iDamage += 4;
			if ((m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::lhand] == -1) || (m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand] == -1)) {
				sItemIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::rhand];
				if ((sItemIndex != -1) && (m_pClientList[sAttackerH]->m_pItemList[sItemIndex] != 0)) {
					if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::berserk_wand_ms20 || m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::berserk_wand_ms10) {
						iDamage *= (int) 1.3;
					}
					if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::kloness_wand_ms20 || m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::kloness_wand_ms10) {
						if (m_pClientList[sAttackerH]->m_iRating > 0) {
							iRepDamage = m_pClientList[sAttackerH]->m_iRating / 100;
							if (iRepDamage < 5) iRepDamage = 5;
							iDamage += iRepDamage;
						}
						if (cTargetType == DEF_OWNERTYPE_PLAYER) {
							if (m_pClientList[sTargetH] != 0) {
								if (m_pClientList[sTargetH]->m_iRating < 0) {
									iRepDamage = (abs(m_pClientList[sTargetH]->m_iRating) / 10);
									if (iRepDamage > 10) iRepDamage = 10;
									iDamage += iRepDamage;
								}
							}
						}
					}
				}
				sItemIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::neck];
				if ((sItemIndex != -1) && (m_pClientList[sAttackerH]->m_pItemList[sItemIndex] != 0)) {
					if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::necklace_of_kloness) { // NecklaceOfKloness
						if (cTargetType == DEF_OWNERTYPE_PLAYER) {
							if (m_pClientList[sTargetH] != 0) {
								iRepDamage = (abs(m_pClientList[sTargetH]->m_iRating) / 20);
								if (iRepDamage > 5) iRepDamage = 5;
								iDamage += iRepDamage;
							}
						}
					}
				}
			}
			if ((m_bIsCrusadeMode == false) && (m_pClientList[sAttackerH]->m_bIsPlayerCivil == true) && (cTargetType == DEF_OWNERTYPE_PLAYER)) return;
			dTmp1 = (double) iDamage;
			if (m_pClientList[sAttackerH]->m_iMag <= 0)
				dTmp2 = 1.0f;
			else dTmp2 = (double) m_pClientList[sAttackerH]->m_iMag;
			dTmp2 = dTmp2 / 3.3f;
			dTmp3 = dTmp1 + (dTmp1 * (dTmp2 / 100.0f));
			iDamage = (int) (dTmp3 + 0.5f);
			if (iDamage <= 0) iDamage = 0;
			// order switched with above
			iDamage += m_pClientList[sAttackerH]->m_iAddMagicalDamage;
			if (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsFightZone == true)
				iDamage += iDamage / 3;
			if (bCheckHeldenianMap(sAttackerH, m_iBTFieldMapIndex, DEF_OWNERTYPE_PLAYER) == 1) {
				iDamage += iDamage / 3;
			}
			if ((cTargetType == DEF_OWNERTYPE_PLAYER) && (m_bIsCrusadeMode == true) && (m_pClientList[sAttackerH]->m_iCrusadeDuty == 1)) {
				if (m_pClientList[sAttackerH]->m_iLevel <= 80) {
					iDamage += (iDamage * 7) / 10;
				} else if (m_pClientList[sAttackerH]->m_iLevel <= 100) {
					iDamage += iDamage / 2;
				} else
					iDamage += iDamage / 3;
			}
			cAttackerSide = m_pClientList[sAttackerH]->m_cSide;
			iPartyID = m_pClientList[sAttackerH]->m_iPartyID;
			break;
		case DEF_OWNERTYPE_NPC:
			cAttackerSide = m_pNpcList[sAttackerH]->m_cSide;
			break;
	}
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sTargetH] == 0) return;
			if (m_pClientList[sTargetH]->m_bIsInitComplete == false) return;
			if (m_pClientList[sTargetH]->m_bIsKilled == true) return;
			if ((dwTime - m_pClientList[sTargetH]->m_dwTime) > DEF_RAGPROTECTIONTIME) return;
			if (m_pClientList[sTargetH]->m_cMapIndex == -1) return;
			if ((m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->m_bIsAttackEnabled == false) && (m_pClientList[sTargetH]->m_iAdminUserLevel == 0)) return;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sTargetH]->m_bIsNeutral == true) && (m_pClientList[sTargetH]->m_iPKCount == 0)) return;
			if ((m_pClientList[sTargetH]->m_iStatus & 0x400000) != 0) return;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_bIsCrusadeMode == false) &&
					  (m_pClientList[sTargetH]->m_iPKCount == 0) && (m_pClientList[sTargetH]->m_bIsPlayerCivil == true)) return;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sTargetH]->m_bIsNeutral == true) &&
					  (m_pClientList[sTargetH]->m_iPKCount == 0) && (m_pClientList[sTargetH]->m_bIsOwnLocation == true)) return;
			if ((m_pClientList[sTargetH]->m_iPartyID != 0) && (iPartyID == m_pClientList[sTargetH]->m_iPartyID)) return;
			m_pClientList[sTargetH]->m_dwLogoutHackCheck = dwTime;
			if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
				if (m_pClientList[sAttackerH]->m_bIsSafeAttackMode == true) {
					iSideCondition = iGetPlayerRelationship(sAttackerH, sTargetH);
					if ((iSideCondition == 7) || (iSideCondition == 2) || (iSideCondition == 6)) {
					} else {
						if (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsFightZone == true) {
							if (m_pClientList[sAttackerH]->m_iGuildGUID != m_pClientList[sTargetH]->m_iGuildGUID) {
							} else return;
						} else return;
					}
				}
				if (m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->iGetAttribute(m_pClientList[sTargetH]->m_sX, m_pClientList[sTargetH]->m_sY, 0x00000005) != 0) return;
			}
			ClearSkillUsingStatus(sTargetH);
			switch (iAttr) {
				case 1:
					if (m_pClientList[sTargetH]->m_iAddAbsEarth != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsEarth;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				case 2:
					if (m_pClientList[sTargetH]->m_iAddAbsAir != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsAir;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				case 3:
					if (m_pClientList[sTargetH]->m_iAddAbsFire != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsFire;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				case 4:
					if (m_pClientList[sTargetH]->m_iAddAbsWater != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsWater;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				default: break;
			}
			iIndex = m_pClientList[sTargetH]->m_iMagicDamageSaveItemIndex;
			if ((iIndex != -1) && (iIndex >= 0) && (iIndex < DEF_MAXITEMS)) {
				switch (m_pClientList[sTargetH]->m_pItemList[iIndex]->m_sIDnum) {
					case ItemId::emerald_ring:
						dTmp1 = (double) iDamage;
						dTmp2 = dTmp1 * 0.2f;
						dTmp3 = dTmp1 - dTmp2;
						iDamage = (int) (dTmp3 + 0.5f);
						break;
					case ItemId::ruby_ring:
						dTmp1 = (double) iDamage;
						dTmp2 = dTmp1 * 0.1f;
						dTmp3 = dTmp1 - dTmp2;
						iDamage = (int) (dTmp3 + 0.5f);
						break;
					default:break;
				}
				if (iDamage <= 0) iDamage = 0;
				iRemainLife = m_pClientList[sTargetH]->m_pItemList[iIndex]->m_wCurLifeSpan;
				if (iRemainLife <= iDamage) {
					ItemDepleteHandler(sTargetH, iIndex, true, true);
				} else {
					m_pClientList[sTargetH]->m_pItemList[iIndex]->m_wCurLifeSpan -= iDamage;
				}
			}
			if (m_pClientList[sTargetH]->m_iAddAbsMD != 0) {
				dTmp1 = (double) iDamage;
				dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsMD;
				dTmp3 = (dTmp2 / 100.0f) * dTmp1;
				iDamage = iDamage - (int) dTmp3;
			}
			if (cTargetType == DEF_OWNERTYPE_PLAYER) {
				iDamage -= (iDice(1, m_pClientList[sTargetH]->m_iVit / 10) - 1);
				if (iDamage <= 0) iDamage = 0;
			}
			if (m_pClientList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] == 2)
				iDamage = iDamage / 2;
			if (m_pClientList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] == 5) break;
			if ((m_pClientList[sTargetH]->m_bIsLuckyEffect == true) &&
					  (iDice(1, 10) == 5) && (m_pClientList[sTargetH]->m_iHP <= iDamage)) {
				iDamage = m_pClientList[sTargetH]->m_iHP - 1;
			}
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sTargetH]->m_bIsSpecialAbilityEnabled == true)) {
				switch (m_pClientList[sTargetH]->m_iSpecialAbilityType) {
					case 51:
					case 52:
						return;
				}
			}
			m_pClientList[sTargetH]->m_iHP -= iDamage;
			if (m_pClientList[sTargetH]->m_iHP <= 0) {
				ClientKilledHandler(sTargetH, sAttackerH, cAttackerType, iDamage);
			} else {
				if (iDamage > 0) {
					if (m_pClientList[sTargetH]->m_iAddTransMana > 0) {
						dTmp1 = (double) m_pClientList[sTargetH]->m_iAddTransMana;
						dTmp2 = (double) iDamage;
						dTmp3 = (dTmp1 / 100.0f) * dTmp2 + 1.0f;
						iTemp = (2 * m_pClientList[sTargetH]->m_iMag) + (2 * m_pClientList[sTargetH]->m_iLevel) + (m_pClientList[sTargetH]->m_iInt / 2);
						m_pClientList[sTargetH]->m_iMP += (int) dTmp3;
						if (m_pClientList[sTargetH]->m_iMP > iTemp) m_pClientList[sTargetH]->m_iMP = iTemp;
					}
					if (m_pClientList[sTargetH]->m_iAddChargeCritical > 0) {
						if (iDice(1, 100) < (m_pClientList[sTargetH]->m_iAddChargeCritical)) {
							iMaxSuperAttack = (m_pClientList[sTargetH]->m_iLevel / 10);
							if (m_pClientList[sTargetH]->m_iSuperAttackLeft < iMaxSuperAttack) m_pClientList[sTargetH]->m_iSuperAttackLeft++;
							SendNotifyMsg(0, sTargetH, DEF_NOTIFY_SUPERATTACKLEFT, 0, 0, 0, 0);
						}
					}
					if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsFightZone == true)) {
						cDamageMinimum = 80;
					} else {
						cDamageMinimum = 50;
					}
					if (iDamage >= cDamageMinimum) {
						sTgtX = m_pClientList[sTargetH]->m_sX;
						sTgtY = m_pClientList[sTargetH]->m_sY;
						if (sTgtX == sAtkX) {
							if (sTgtY == sAtkY) return;
							else if (sTgtY > sAtkY) cDamageMoveDir = 5;
							else if (sTgtY < sAtkY) cDamageMoveDir = 1;
						} else if (sTgtX > sAtkX) {
							if (sTgtY == sAtkY) cDamageMoveDir = 3;
							else if (sTgtY > sAtkY) cDamageMoveDir = 4;
							else if (sTgtY < sAtkY) cDamageMoveDir = 2;
						} else if (sTgtX < sAtkX) {
							if (sTgtY == sAtkY) cDamageMoveDir = 7;
							else if (sTgtY > sAtkY) cDamageMoveDir = 6;
							else if (sTgtY < sAtkY) cDamageMoveDir = 8;
						}
						m_pClientList[sTargetH]->m_iLastDamage = iDamage;
						SendNotifyMsg(0, sTargetH, DEF_NOTIFY_HP, 0, 0, 0, 0);
						SendNotifyMsg(0, sTargetH, DEF_NOTIFY_DAMAGEMOVE, cDamageMoveDir, iDamage, 0, 0);
					}
					SendNotifyMsg(0, sTargetH, DEF_NOTIFY_HP, 0, 0, 0, 0);
					SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, 0, 0);
					if (m_pClientList[sTargetH]->m_bSkillUsingStatus[19] != true) {
						m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->ClearOwner(0, sTargetH, DEF_OWNERTYPE_PLAYER, m_pClientList[sTargetH]->m_sX, m_pClientList[sTargetH]->m_sY);
						m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->SetOwner(sTargetH, DEF_OWNERTYPE_PLAYER, m_pClientList[sTargetH]->m_sX, m_pClientList[sTargetH]->m_sY);
					}
					if (m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
						SendNotifyMsg(0, sTargetH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_HOLDOBJECT, m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ], 0, 0);
						m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
						bRemoveFromDelayEventList(sTargetH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_HOLDOBJECT);
					}
				}
			}
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sTargetH] == 0) return;
			if (m_pNpcList[sTargetH]->m_iHP <= 0) return;
			if ((m_bIsCrusadeMode == true) && (cAttackerSide == m_pNpcList[sTargetH]->m_cSide)) return;
			switch (m_pNpcList[sTargetH]->m_cActionLimit) {
				case 1:
				case 2:
				case 4:
				case 6:
					return;
				case 3:
				case 5:
					if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
						switch (m_pNpcList[sTargetH]->m_sType) {
							case NpcType::esg:
							case NpcType::gmg:
								if ((m_pClientList[sAttackerH]->m_cSide == 0) || (m_pNpcList[sTargetH]->m_cSide == m_pClientList[sAttackerH]->m_cSide)) return;
								break;
							default: break;
						}
					}
			}
			if (m_pNpcList[sTargetH]->m_iAbsDamage > 0) {
				dTmp1 = (double) iDamage;
				dTmp2 = (double) (m_pNpcList[sTargetH]->m_iAbsDamage) / 100.0f;
				dTmp3 = dTmp1 * dTmp2;
				dTmp2 = dTmp1 - dTmp3;
				iDamage = (int) dTmp2;
				if (iDamage < 0) iDamage = 1;
			}
			if (m_pNpcList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] == 2)
				iDamage = iDamage / 2;
			m_pNpcList[sTargetH]->m_iHP -= iDamage;
			if (m_pNpcList[sTargetH]->m_iHP < 0) {
				NpcKilledHandler(sAttackerH, cAttackerType, sTargetH, iDamage);
			} else {
				switch (cAttackerType) {
					case DEF_OWNERTYPE_PLAYER:
						if ((m_pNpcList[sTargetH]->m_sType != NpcType::guard) && (m_pNpcList[sTargetH]->m_sType != NpcType::rabbit) && (m_pNpcList[sTargetH]->m_sType != NpcType::cat)
								  && (m_pNpcList[sTargetH]->m_cSide == cAttackerSide)) return;
						break;
					case DEF_OWNERTYPE_NPC:
						if (m_pNpcList[sAttackerH]->m_cSide == m_pNpcList[sTargetH]->m_cSide) return;
						break;
				}
				SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, 0, 0);
				if ((iDice(1, 3) == 2) && (m_pNpcList[sTargetH]->m_cActionLimit == 0)) {
					if ((cAttackerType == DEF_OWNERTYPE_NPC) &&
							  (m_pNpcList[sAttackerH]->m_sType == m_pNpcList[sTargetH]->m_sType) &&
							  (m_pNpcList[sAttackerH]->m_cSide == m_pNpcList[sTargetH]->m_cSide)) return;
					m_pNpcList[sTargetH]->m_cBehavior = NpcBehavior::attack;
					m_pNpcList[sTargetH]->m_sBehaviorTurnCount = 0;
					m_pNpcList[sTargetH]->m_iTargetIndex = sAttackerH;
					m_pNpcList[sTargetH]->m_cTargetType = cAttackerType;
					m_pNpcList[sTargetH]->m_dwTime = dwTime;
					if (m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
						m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
						bRemoveFromDelayEventList(sTargetH, DEF_OWNERTYPE_NPC, DEF_MAGICTYPE_HOLDOBJECT);
					}
					if ((m_pNpcList[sTargetH]->m_iNoDieRemainExp > 0) && (m_pNpcList[sTargetH]->m_bIsSummoned != true) && (cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH] != 0)) {
						if (m_pNpcList[sTargetH]->m_iNoDieRemainExp > iDamage) {
							iExp = iDamage;
							if ((m_bIsCrusadeMode == true) && (iExp > 10)) iExp = 10;
							if (m_pClientList[sAttackerH]->m_iAddExp > 0) {
								dTmp1 = (double) m_pClientList[sAttackerH]->m_iAddExp;
								dTmp2 = (double) iExp;
								dTmp3 = (dTmp1 / 100.0f) * dTmp2;
								iExp += (int) dTmp3;
							}
							if (m_pClientList[sAttackerH]->m_iLevel > 100) {
								switch (m_pNpcList[sTargetH]->m_sType) {
									case NpcType::rabbit:
									case NpcType::cat:
										iExp = 0;
										break;
									default: break;
								}
							}
							if (bExp == true)
								GetExp(sAttackerH, iExp, true);
							else GetExp(sAttackerH, (iExp / 2), true);
							m_pNpcList[sTargetH]->m_iNoDieRemainExp -= iDamage;
						} else {
							iExp = m_pNpcList[sTargetH]->m_iNoDieRemainExp;
							if ((m_bIsCrusadeMode == true) && (iExp > 10)) iExp = 10;
							if (m_pClientList[sAttackerH]->m_iAddExp > 0) {
								dTmp1 = (double) m_pClientList[sAttackerH]->m_iAddExp;
								dTmp2 = (double) iExp;
								dTmp3 = (dTmp1 / 100.0f) * dTmp2;
								iExp += (int) dTmp3;
							}
							if (m_pClientList[sAttackerH]->m_iLevel > 100) {
								switch (m_pNpcList[sTargetH]->m_sType) {
									case NpcType::rabbit:
									case NpcType::cat:
										iExp = 0;
										break;
									default: break;
								}
							}
							if (bExp == true)
								GetExp(sAttackerH, iExp, true);
							else GetExp(sAttackerH, (iExp / 2), true);
							m_pNpcList[sTargetH]->m_iNoDieRemainExp = 0;
						}
					}
				}
			}
			break;
	}
}

void CGame::Effect_Damage_Spot_DamageMove(short sAttackerH, char cAttackerType, short sTargetH, char cTargetType, short sAtkX, short sAtkY, short sV1, short sV2, short sV3, bool bExp, int iAttr) {
	int iDamage;
	int iSideCondition;
	int iIndex;
	int iRemainLife;
	int iTemp;
	int iMaxSuperAttack;
	uint32_t dwTime;
	uint32_t wWeaponType;
	char cDamageMod[256];
	char cAttackerSide;
	char cDamageMoveDir;
	double dTmp1;
	double dTmp2;
	double dTmp3;
	int iPartyID;
	int iMoveDamage;
	short sTgtX;
	short sTgtY;
	if (cAttackerType == DEF_OWNERTYPE_PLAYER)
		if (m_pClientList[sAttackerH] == 0) return;
	if (cAttackerType == DEF_OWNERTYPE_NPC)
		if (m_pNpcList[sAttackerH] == 0) return;
	dwTime = timeGetTime();
	sTgtX = 0;
	sTgtY = 0;
	iDamage = iDice(sV1, sV2) + sV3;
	if (iDamage <= 0) iDamage = 0;
	iPartyID = 0;
	switch (cAttackerType) {
		case DEF_OWNERTYPE_PLAYER:
			if ((m_bAdminSecurity == true) && (m_pClientList[sAttackerH]->m_iAdminUserLevel > 0)) return;
			dTmp1 = (double) iDamage;
			if ((m_pClientList[sAttackerH]->m_iMag + m_pClientList[sAttackerH]->m_iAngelicMag) <= 0)
				dTmp2 = 1.0f;
			else dTmp2 = (double) (m_pClientList[sAttackerH]->m_iMag + m_pClientList[sAttackerH]->m_iAngelicMag);
			dTmp2 = dTmp2 / 3.3f;
			dTmp3 = dTmp1 + (dTmp1 * (dTmp2 / 100.0f));
			iDamage = (int) (dTmp3 + 0.5f);
			if (iDamage <= 0) iDamage = 0;
			// v1.432 2001 4 7 13 7
			iDamage += m_pClientList[sAttackerH]->m_iAddMagicalDamage;
			if (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsFightZone == true)
				iDamage += iDamage / 3;
			if ((cTargetType == DEF_OWNERTYPE_PLAYER) && (m_bIsCrusadeMode == true) && (m_pClientList[sAttackerH]->m_iCrusadeDuty == 1)) {
				if (m_pClientList[sAttackerH]->m_iLevel <= 80) {
					iDamage += (iDamage * 7) / 10;
				} else if (m_pClientList[sAttackerH]->m_iLevel <= 100) {
					iDamage += iDamage / 2;
				} else iDamage += iDamage / 3;
			}
			if (m_pClientList[sAttackerH]->m_cHeroArmourBonus == 2) {
				iDamage += 4;
			}
			wWeaponType = ((m_pClientList[sAttackerH]->m_sAppr2 & 0x0FF0) >> 4);
			if (wWeaponType == 34) {
				iDamage += iDamage / 3;
			}
			if (bCheckHeldenianMap(sAttackerH, m_iBTFieldMapIndex, DEF_OWNERTYPE_PLAYER) == 1) {
				iDamage += iDamage / 3;
			}
			cAttackerSide = m_pClientList[sAttackerH]->m_cSide;
			iPartyID = m_pClientList[sAttackerH]->m_iPartyID;
			break;
		case DEF_OWNERTYPE_NPC:
			cAttackerSide = m_pNpcList[sAttackerH]->m_cSide;
			break;
	}
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sTargetH] == 0) return;
			if (m_pClientList[sTargetH]->m_bIsInitComplete == false) return;
			if (m_pClientList[sTargetH]->m_bIsKilled == true) return;
			if ((dwTime - m_pClientList[sTargetH]->m_dwTime) > DEF_RAGPROTECTIONTIME) return;
			if (m_pClientList[sTargetH]->m_cMapIndex == -1) return;
			if ((m_pMapList[ m_pClientList[sTargetH]->m_cMapIndex ]->m_bIsAttackEnabled == false) && (m_pClientList[sTargetH]->m_iAdminUserLevel == 0)) return;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH]->m_bIsNeutral == true) && (m_pClientList[sTargetH]->m_iPKCount == 0)) return;
			if ((m_bIsCrusadeMode == false) && (m_pClientList[sTargetH]->m_iPKCount == 0) && (cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sTargetH]->m_bIsPlayerCivil == true)) return;
			if ((m_bIsCrusadeMode == false) && (m_pClientList[sTargetH]->m_iPKCount == 0) && (cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH]->m_bIsPlayerCivil == true)) return;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sTargetH]->m_bIsNeutral == true) && (m_pClientList[sTargetH]->m_iPKCount == 0) && (m_pClientList[sTargetH]->m_bIsPlayerCivil == true)) return;
			if ((m_pClientList[sTargetH]->m_iPartyID != 0) && (iPartyID == m_pClientList[sTargetH]->m_iPartyID)) return;
			m_pClientList[sTargetH]->m_dwLogoutHackCheck = dwTime;
			if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
				if (m_pClientList[sAttackerH]->m_bIsSafeAttackMode == true) {
					iSideCondition = iGetPlayerRelationship(sAttackerH, sTargetH);
					if ((iSideCondition == 7) || (iSideCondition == 2) || (iSideCondition == 6)) {
					} else {
						if (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsFightZone == true) {
							if (m_pClientList[sAttackerH]->m_iGuildGUID != m_pClientList[sTargetH]->m_iGuildGUID) {
							} else return;
						} else return;
					}
				}
				if (m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->iGetAttribute(m_pClientList[sTargetH]->m_sX, m_pClientList[sTargetH]->m_sY, 0x00000005) != 0) return;
			}
			ClearSkillUsingStatus(sTargetH);
			switch (iAttr) {
				case 1:
					if (m_pClientList[sTargetH]->m_iAddAbsEarth != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsEarth;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				case 2:
					if (m_pClientList[sTargetH]->m_iAddAbsAir != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsAir;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				case 3:
					if (m_pClientList[sTargetH]->m_iAddAbsFire != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsFire;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				case 4:
					if (m_pClientList[sTargetH]->m_iAddAbsWater != 0) {
						dTmp1 = (double) iDamage;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsWater;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iDamage = iDamage - (int) (dTmp3);
						if (iDamage < 0) iDamage = 0;
					}
					break;
				default: break;
			}
			iIndex = m_pClientList[sTargetH]->m_iMagicDamageSaveItemIndex;
			if ((iIndex != -1) && (iIndex >= 0) && (iIndex < DEF_MAXITEMS)) {
				switch (m_pClientList[sTargetH]->m_pItemList[iIndex]->m_sIDnum) {
					case ItemId::emerald_ring:
						dTmp1 = (double) iDamage;
						dTmp2 = dTmp1 * 0.2f;
						dTmp3 = dTmp1 - dTmp2;
						iDamage = (int) (dTmp3 + 0.5f);
						break;
					case ItemId::ruby_ring:
						dTmp1 = (double) iDamage;
						dTmp2 = dTmp1 * 0.1f;
						dTmp3 = dTmp1 - dTmp2;
						iDamage = (int) (dTmp3 + 0.5f);
						break;
					default: break;
				}
				if (iDamage <= 0) iDamage = 0;
				iRemainLife = m_pClientList[sTargetH]->m_pItemList[iIndex]->m_wCurLifeSpan;
				if (iRemainLife <= iDamage) {
					ItemDepleteHandler(sTargetH, iIndex, true, true);
				} else {
					m_pClientList[sTargetH]->m_pItemList[iIndex]->m_wCurLifeSpan -= iDamage;
				}
			}
			if (m_pClientList[sTargetH]->m_iAddAbsMD != 0) {
				dTmp1 = (double) iDamage;
				dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsMD;
				dTmp3 = (dTmp2 / 100.0f) * dTmp1;
				iDamage = iDamage - (int) dTmp3;
			}
			if (cTargetType == DEF_OWNERTYPE_PLAYER) {
				iDamage -= (iDice(1, m_pClientList[sTargetH]->m_iVit / 10) - 1);
				if (iDamage <= 0) iDamage = 0;
			}
			if (m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] == 2)
				iDamage = iDamage / 2;
			if ((m_pClientList[sTargetH]->m_bIsLuckyEffect == true) &&
					  (iDice(1, 10) == 5) && (m_pClientList[sTargetH]->m_iHP <= iDamage)) {
				iDamage = m_pClientList[sTargetH]->m_iHP - 1;
			}
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sTargetH]->m_bIsSpecialAbilityEnabled == true)) {
				switch (m_pClientList[sTargetH]->m_iSpecialAbilityType) {
					case 51:
					case 52:
						//
						return;
				}
			}
			m_pClientList[sTargetH]->m_iHP -= iDamage;
			if (m_pClientList[sAttackerH] != 0) {
				if (m_pClientList[sAttackerH]->iDmgShowon == 1) {
					std::memset(cDamageMod, 0, sizeof(cDamageMod));
					wsprintf(cDamageMod, "You did [%d] Damage to Character [%s] Remaining Life [%d]", iDamage, m_pClientList[sTargetH]->m_cCharName, m_pClientList[sTargetH]->m_iHP);
					SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cDamageMod);
				}
			}
			if (m_pClientList[sTargetH]->m_iHP <= 0) {
				ClientKilledHandler(sTargetH, sAttackerH, cAttackerType, iDamage);
			} else {
				if (iDamage > 0) {
					if (m_pClientList[sTargetH]->m_iAddTransMana > 0) {
						dTmp1 = (double) m_pClientList[sTargetH]->m_iAddTransMana;
						dTmp2 = (double) iDamage;
						dTmp3 = (dTmp1 / 100.0f) * dTmp2 + 1.0f;
						iTemp = (2 * (m_pClientList[sTargetH]->m_iMag + m_pClientList[sTargetH]->m_iAngelicMag)) + (2 * m_pClientList[sTargetH]->m_iLevel) + ((m_pClientList[sTargetH]->m_iInt + m_pClientList[sTargetH]->m_iAngelicInt) / 2);
						m_pClientList[sTargetH]->m_iMP += (int) dTmp3;
						if (m_pClientList[sTargetH]->m_iMP > iTemp) m_pClientList[sTargetH]->m_iMP = iTemp;
					}
					if (m_pClientList[sTargetH]->m_iAddChargeCritical > 0) {
						if (iDice(1, 100) < (m_pClientList[sTargetH]->m_iAddChargeCritical)) {
							iMaxSuperAttack = (m_pClientList[sTargetH]->m_iLevel / 10);
							if (m_pClientList[sTargetH]->m_iSuperAttackLeft < iMaxSuperAttack) m_pClientList[sTargetH]->m_iSuperAttackLeft++;
							SendNotifyMsg(0, sTargetH, DEF_NOTIFY_SUPERATTACKLEFT, 0, 0, 0, 0);
						}
					}
					if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsFightZone == true))
						iMoveDamage = 80;
					else iMoveDamage = 50;
					if (iDamage >= iMoveDamage) {
						///		char cDamageMoveDir;
						sTgtX = m_pClientList[sTargetH]->m_sX;
						sTgtY = m_pClientList[sTargetH]->m_sY;
						if (sTgtX == sAtkX) {
							if (sTgtY == sAtkY) goto EDSD_SKIPDAMAGEMOVE;
							else if (sTgtY > sAtkY) cDamageMoveDir = 5;
							else if (sTgtY < sAtkY) cDamageMoveDir = 1;
						} else if (sTgtX > sAtkX) {
							if (sTgtY == sAtkY) cDamageMoveDir = 3;
							else if (sTgtY > sAtkY) cDamageMoveDir = 4;
							else if (sTgtY < sAtkY) cDamageMoveDir = 2;
						} else if (sTgtX < sAtkX) {
							if (sTgtY == sAtkY) cDamageMoveDir = 7;
							else if (sTgtY > sAtkY) cDamageMoveDir = 6;
							else if (sTgtY < sAtkY) cDamageMoveDir = 8;
						}
						m_pClientList[sTargetH]->m_iLastDamage = iDamage;
						SendNotifyMsg(0, sTargetH, DEF_NOTIFY_HP, 0, 0, 0, 0);
						SendNotifyMsg(0, sTargetH, DEF_NOTIFY_DAMAGEMOVE, cDamageMoveDir, iDamage, 0, 0);
					} else {
EDSD_SKIPDAMAGEMOVE:
						;
						SendNotifyMsg(0, sTargetH, DEF_NOTIFY_HP, 0, 0, 0, 0);
						SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, 0, 0);
					}
					if (m_pClientList[sTargetH]->m_bSkillUsingStatus[19] != true) {
						m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->ClearOwner(0, sTargetH, DEF_OWNERTYPE_PLAYER, m_pClientList[sTargetH]->m_sX, m_pClientList[sTargetH]->m_sY);
						m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->SetOwner(sTargetH, DEF_OWNERTYPE_PLAYER, m_pClientList[sTargetH]->m_sX, m_pClientList[sTargetH]->m_sY);
					}
					if (m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
						// 1: Hold-Person
						// 2: Paralize
						SendNotifyMsg(0, sTargetH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_HOLDOBJECT, m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ], 0, 0);
						m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
						bRemoveFromDelayEventList(sTargetH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_HOLDOBJECT);
					}
				}
			}
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sTargetH] == 0) return;
			if (m_pNpcList[sTargetH]->m_iHP <= 0) return;
			if ((m_bIsCrusadeMode == true) && (cAttackerSide == m_pNpcList[sTargetH]->m_cSide)) return;
			switch (m_pNpcList[sTargetH]->m_cActionLimit) {
				case 1:
				case 2:
				case 4:
					return;
			}
			if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
				switch (m_pNpcList[sTargetH]->m_sType) {
					case NpcType::esg:
					case NpcType::gmg:
						if ((m_pClientList[sAttackerH]->m_cSide == 0) || (m_pNpcList[sTargetH]->m_cSide == m_pClientList[sAttackerH]->m_cSide)) return;
						break;
					default: break;
				}
			}
			switch (m_pNpcList[sTargetH]->m_sType) {
				case NpcType::mc_gaffin: // McGaffin
				case NpcType::perry: // Perry
				case NpcType::devlin: // Devlin
					iDamage = 0;
					break;
				default: break;
			}
			if (m_pNpcList[sTargetH]->m_iAbsDamage > 0) {
				dTmp1 = (double) iDamage;
				dTmp2 = (double) (m_pNpcList[sTargetH]->m_iAbsDamage) / 100.0f;
				dTmp3 = dTmp1 * dTmp2;
				dTmp2 = dTmp1 - dTmp3;
				iDamage = (int) dTmp2;
				if (iDamage < 0) iDamage = 1;
			}
			if (m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] == 2)
				iDamage = iDamage / 2;
			m_pNpcList[sTargetH]->m_iHP -= iDamage;
			if (m_pClientList[sAttackerH] != 0) {
				if (m_pClientList[sAttackerH]->iDmgShowon == 1) {
					std::memset(cDamageMod, 0, sizeof(cDamageMod));
					wsprintf(cDamageMod, "You did [%d] Damage to Npc [%s] Remaining Life [%d]", iDamage, m_pNpcList[sTargetH]->m_cNpcName, m_pNpcList[sTargetH]->m_iHP);
					SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cDamageMod);
				}
			}
			if (m_pNpcList[sTargetH]->m_iHP <= 0) {
				NpcKilledHandler(sAttackerH, cAttackerType, sTargetH, iDamage);
			} else {
				switch (cAttackerType) {
					case DEF_OWNERTYPE_PLAYER:
						if ((m_pNpcList[sTargetH]->m_sType != NpcType::guard) && (m_pNpcList[sTargetH]->m_sType != NpcType::rabbit) && (m_pNpcList[sTargetH]->m_sType != NpcType::cat)
								  && (m_pNpcList[sTargetH]->m_cSide == cAttackerSide)) return;
						break;
					case DEF_OWNERTYPE_NPC:
						if (m_pNpcList[sAttackerH]->m_cSide == m_pNpcList[sTargetH]->m_cSide) return;
						break;
				}
				SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, 0, 0);
				if ((iDice(1, 3) == 2) && (m_pNpcList[sTargetH]->m_cActionLimit == 0)) {
					if ((cAttackerType == DEF_OWNERTYPE_NPC) &&
							  (m_pNpcList[sAttackerH]->m_sType == m_pNpcList[sTargetH]->m_sType) &&
							  (m_pNpcList[sAttackerH]->m_cSide == m_pNpcList[sTargetH]->m_cSide)) return;
					m_pNpcList[sTargetH]->m_cBehavior = NpcBehavior::attack;
					m_pNpcList[sTargetH]->m_sBehaviorTurnCount = 0;
					m_pNpcList[sTargetH]->m_iTargetIndex = sAttackerH;
					m_pNpcList[sTargetH]->m_cTargetType = cAttackerType;
					m_pNpcList[sTargetH]->m_dwTime = dwTime;
					if (m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
						m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
						bRemoveFromDelayEventList(sTargetH, DEF_OWNERTYPE_NPC, DEF_MAGICTYPE_HOLDOBJECT);
					}
					//Crusade
					int iExp;
					if ((m_pNpcList[sTargetH]->m_iNoDieRemainExp > 0) && (m_pNpcList[sTargetH]->m_bIsSummoned != true) &&
							  (cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH] != 0)) {
						if (m_pNpcList[sTargetH]->m_iNoDieRemainExp > iDamage) {
							// Crusade
							iExp = iDamage;
							if ((m_bIsCrusadeMode == true) && (iExp > 10)) iExp = 10;
							if (m_pClientList[sAttackerH]->m_iAddExp > 0) {
								dTmp1 = (double) m_pClientList[sAttackerH]->m_iAddExp;
								dTmp2 = (double) iExp;
								dTmp3 = (dTmp1 / 100.0f) * dTmp2;
								iExp += (int) dTmp3;
							}
							if (m_pClientList[sAttackerH]->m_iLevel > 100) {
								switch (m_pNpcList[sTargetH]->m_sType) {
									case NpcType::rabbit:
									case NpcType::cat:
										iExp = 0;
										break;
									default: break;
								}
							}
							if (bExp == true)
								GetExp(sAttackerH, iExp); //m_pClientList[sAttackerH]->m_iExpStock += iExp;     //iDamage;
							else GetExp(sAttackerH, (iExp / 2)); //m_pClientList[sAttackerH]->m_iExpStock += (iExp/2); //(iDamage/2);
							m_pNpcList[sTargetH]->m_iNoDieRemainExp -= iDamage;
						} else {
							// Crusade
							iExp = m_pNpcList[sTargetH]->m_iNoDieRemainExp;
							if ((m_bIsCrusadeMode == true) && (iExp > 10)) iExp = 10;
							if (m_pClientList[sAttackerH]->m_iAddExp > 0) {
								dTmp1 = (double) m_pClientList[sAttackerH]->m_iAddExp;
								dTmp2 = (double) iExp;
								dTmp3 = (dTmp1 / 100.0f) * dTmp2;
								iExp += (int) dTmp3;
							}
							if (m_pClientList[sAttackerH]->m_iLevel > 100) {
								switch (m_pNpcList[sTargetH]->m_sType) {
									case NpcType::rabbit:
									case NpcType::cat:
										iExp = 0;
										break;
									default: break;
								}
							}
							if (bExp == true)
								GetExp(sAttackerH, iExp); //m_pClientList[sAttackerH]->m_iExpStock += iExp;     //m_pNpcList[sTargetH]->m_iNoDieRemainExp;
							else GetExp(sAttackerH, (iExp / 2)); //m_pClientList[sAttackerH]->m_iExpStock += (iExp/2); //(m_pNpcList[sTargetH]->m_iNoDieRemainExp/2);
							m_pNpcList[sTargetH]->m_iNoDieRemainExp = 0;
						}
					}
				}
			}
			break;
	}
}

void CGame::Effect_HpUp_Spot(short sAttackerH, char cAttackerType, short sTargetH, char cTargetType, short sV1, short sV2, short sV3) {
	int iHP;
	int iMaxHP;
	if (cAttackerType == DEF_OWNERTYPE_PLAYER)
		if (m_pClientList[sAttackerH] == 0) return;
	iHP = iDice(sV1, sV2) + sV3;
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sTargetH] == 0) return;
			if (m_pClientList[sTargetH]->m_bIsKilled == true) return;
			iMaxHP = (3 * m_pClientList[sTargetH]->m_iVit) + (2 * m_pClientList[sTargetH]->m_iLevel) + ((m_pClientList[sTargetH]->m_iStr + m_pClientList[sTargetH]->m_iAngelicStr) / 2);
			if (m_pClientList[sTargetH]->m_iSideEffect_MaxHPdown != 0)
				iMaxHP = iMaxHP - (iMaxHP / m_pClientList[sTargetH]->m_iSideEffect_MaxHPdown);
			if (m_pClientList[sTargetH]->m_iHP < iMaxHP) {
				m_pClientList[sTargetH]->m_iHP += iHP;
				if (m_pClientList[sTargetH]->m_iHP > iMaxHP) m_pClientList[sTargetH]->m_iHP = iMaxHP;
				if (m_pClientList[sTargetH]->m_iHP <= 0) m_pClientList[sTargetH]->m_iHP = 1;
				SendNotifyMsg(0, sTargetH, DEF_NOTIFY_HP, 0, 0, 0, 0);
			}
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sTargetH] == 0) return;
			if (m_pNpcList[sTargetH]->m_iHP <= 0) return;
			if (m_pNpcList[sTargetH]->m_bIsKilled == true) return;
			iMaxHP = m_pNpcList[sTargetH]->m_iHitDice * 4;
			if (m_pNpcList[sTargetH]->m_iHP < iMaxHP) {
				m_pNpcList[sTargetH]->m_iHP += iHP;
				if (m_pNpcList[sTargetH]->m_iHP > iMaxHP) m_pNpcList[sTargetH]->m_iHP = iMaxHP;
				if (m_pNpcList[sTargetH]->m_iHP <= 0) m_pNpcList[sTargetH]->m_iHP = 1;
			}
			break;
	}
}

void CGame::Effect_SpDown_Spot(short sAttackerH, char cAttackerType, short sTargetH, char cTargetType, short sV1, short sV2, short sV3) {
	int iSP;
	if (cAttackerType == DEF_OWNERTYPE_PLAYER)
		if (m_pClientList[sAttackerH] == 0) return;
	iSP = iDice(sV1, sV2) + sV3;
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sTargetH] == 0) return;
			if (m_pClientList[sTargetH]->m_bIsKilled == true) return;
			// New 19/05/2004
			// Is the user having an invincibility slate
			if ((m_pClientList[sTargetH]->m_iStatus & 0x400000) != 0) return;
			if (m_pClientList[sTargetH]->m_iSP > 0) {
				//v1.42
				if (m_pClientList[sTargetH]->m_iTimeLeft_FirmStaminar == 0) {
					m_pClientList[sTargetH]->m_iSP -= iSP;
					if (m_pClientList[sTargetH]->m_iSP < 0) m_pClientList[sTargetH]->m_iSP = 0;
					SendNotifyMsg(0, sTargetH, DEF_NOTIFY_SP, 0, 0, 0, 0);
				}
			}
			break;
		case DEF_OWNERTYPE_NPC:
			break;
	}
}

void CGame::Effect_SpUp_Spot(short sAttackerH, char cAttackerType, short sTargetH, char cTargetType, short sV1, short sV2, short sV3) {
	int iSP;
	int iMaxSP;
	if (cAttackerType == DEF_OWNERTYPE_PLAYER)
		if (m_pClientList[sAttackerH] == 0) return;
	iSP = iDice(sV1, sV2) + sV3;
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sTargetH] == 0) return;
			if (m_pClientList[sTargetH]->m_bIsKilled == true) return;
			iMaxSP = (2 * (m_pClientList[sTargetH]->m_iStr + m_pClientList[sTargetH]->m_iAngelicStr)) + (2 * m_pClientList[sTargetH]->m_iLevel);
			if (m_pClientList[sTargetH]->m_iSP < iMaxSP) {
				m_pClientList[sTargetH]->m_iSP += iSP;
				if (m_pClientList[sTargetH]->m_iSP > iMaxSP)
					m_pClientList[sTargetH]->m_iSP = iMaxSP;
				SendNotifyMsg(0, sTargetH, DEF_NOTIFY_SP, 0, 0, 0, 0);
			}
			break;
		case DEF_OWNERTYPE_NPC:
			break;
	}
}

/*********************************************************************************************************************
 **  int bool CGame::bCheckResistingMagicSuccess(char cAttackerDir, short sTargetH, char cTargetType, int iHitRatio) **
 **  description			:: calculates if a player resists magic														**
 **  last updated		:: November 20, 2004; 8:42 PM; Hypnotoad													**
 **	return value		:: bool																						**
 **  commentary			::	-	hero armor for target mages adds 50 magic resistance								**
 **							-	10000 or more it ratio will deduct 10000 hit ratio									**
 **							-	invincible tablet is 100% magic resistance											**
 **********************************************************************************************************************/
bool CGame::bCheckResistingMagicSuccess(char cAttackerDir, short sTargetH, char cTargetType, int iHitRatio) {
	double dTmp1;
	double dTmp2;
	double dTmp3;
	int iTargetMagicResistRatio;
	int iDestHitRatio;
	int iResult;
	char cProtect;
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sTargetH] == 0) return false;
			if (m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->m_bIsAttackEnabled == false) return false;
			if (m_pClientList[sTargetH]->m_iAdminUserLevel > 0) return true;
			if ((m_pClientList[sTargetH]->m_iStatus & 0x400000) != 0) return true;
			iTargetMagicResistRatio = m_pClientList[sTargetH]->m_cSkillMastery[3] + m_pClientList[sTargetH]->m_iAddMR;
			if ((m_pClientList[sTargetH]->m_iMag + m_pClientList[sTargetH]->m_iAngelicMag) > 50)
				iTargetMagicResistRatio += ((m_pClientList[sTargetH]->m_iMag + m_pClientList[sTargetH]->m_iAngelicMag) - 50);
			iTargetMagicResistRatio += m_pClientList[sTargetH]->m_iAddResistMagic;
			cProtect = m_pClientList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT];
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sTargetH] == 0) return false;
			iTargetMagicResistRatio = m_pNpcList[sTargetH]->m_cResistMagic;
			cProtect = m_pNpcList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT];
			break;
	}
	if (cProtect == 5) return true;
	if ((iHitRatio < 1000) && (cProtect == 2)) return true;
	if (iHitRatio >= 10000) iHitRatio -= 10000;
	if (iTargetMagicResistRatio < 1) iTargetMagicResistRatio = 1;
	if ((cAttackerDir != 0) && (m_pClientList[sTargetH] != 0) && (m_pClientList[sTargetH]->m_cHeroArmourBonus == 2)) {
		iHitRatio += 50;
	}
	dTmp1 = (double) (iHitRatio);
	dTmp2 = (double) (iTargetMagicResistRatio);
	dTmp3 = (dTmp1 / dTmp2)*50.0f;
	iDestHitRatio = (int) (dTmp3);
	if (iDestHitRatio < DEF_MINIMUMHITRATIO) iDestHitRatio = DEF_MINIMUMHITRATIO;
	if (iDestHitRatio > DEF_MAXIMUMHITRATIO) iDestHitRatio = DEF_MAXIMUMHITRATIO;
	if (iDestHitRatio >= 100) return false;
	iResult = iDice(1, 100);
	if (iResult <= iDestHitRatio) return false;
	if (cTargetType == DEF_OWNERTYPE_PLAYER)
		CalculateSSN_SkillIndex(sTargetH, 3, 1);
	return true;
}

bool CGame::bCheckResistingIceSuccess(char /*cAttackerDir*/, short sTargetH, char cTargetType, int /*iHitRatio*/) {
	int iTargetIceResistRatio;
	int iResult;
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sTargetH] == 0) return false;
			if (m_pClientList[sTargetH]->m_iAdminUserLevel > 0) return true;
			iTargetIceResistRatio = m_pClientList[sTargetH]->m_iAddAbsWater * 2;
			if (m_pClientList[sTargetH]->m_dwWarmEffectTime == 0) {
			} else if ((timeGetTime() - m_pClientList[sTargetH]->m_dwWarmEffectTime) < 1000 * 30) return true;
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sTargetH] == 0) return false;
			iTargetIceResistRatio = (m_pNpcList[sTargetH]->m_cResistMagic) - (m_pNpcList[sTargetH]->m_cResistMagic / 3);
			break;
	}
	if (iTargetIceResistRatio < 1) iTargetIceResistRatio = 1;
	iResult = iDice(1, 100);
	if (iResult <= iTargetIceResistRatio) return true;
	return false;
}

/*bool CGame::bCheckResistingIceSuccess(char cAttackerDir, short sTargetH, char cTargetType, int iHitRatio)
{
 int iTargetIceResistRatio;
 int iResult;
	switch (cTargetType) {
	case DEF_OWNERTYPE_PLAYER:
		if (m_pClientList[sTargetH] == 0) return false;
		if (m_pClientList[sTargetH]->m_iAdminUserLevel > 0) return true;
		iTargetIceResistRatio = m_pClientList[sTargetH]->m_iAddAbsWater*2;
		break;
	case DEF_OWNERTYPE_NPC:
		if (m_pNpcList[sTargetH] == 0) return false;
		iTargetIceResistRatio = (m_pNpcList[sTargetH]->m_cResistMagic) - (m_pNpcList[sTargetH]->m_cResistMagic/3);
		break;
	}
	if (iTargetIceResistRatio < 1) iTargetIceResistRatio = 1;
	iResult = iDice(1, 100);
	if (iResult <= iTargetIceResistRatio) return true;
	return false;
}*/
bool CGame::bSetItemToBankItem(int iClientH, CItem * pItem) {
	int i;
	int iRet;
	uint32_t * dwp;
	uint16_t * wp;
	char * cp;
	short * sp;
	char cData[100];
	if (m_pClientList[iClientH] == 0) return false;
	if (pItem == 0) return false;
	for (i = 0; i < DEF_MAXBANKITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemInBankList[i] == 0) {
			m_pClientList[iClientH]->m_pItemInBankList[i] = pItem;
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_ITEMTOBANK;
			cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
			*cp = i;
			cp++;
			*cp = 1;
			cp++;
			memcpy(cp, pItem->m_cName, 20);
			cp += 20;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwCount;
			cp += 4;
			*cp = (char) pItem->m_cItemType;
			cp++;
			*cp = (char) pItem->m_cEquipPos;
			cp++;
			*cp = (char) 0;
			cp++;
			sp = (short *) cp;
			*sp = pItem->m_sLevelLimit;
			cp += 2;
			*cp = pItem->m_cGenderLimit;
			cp++;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wCurLifeSpan;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wWeight;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSprite;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSpriteFrame;
			cp += 2;
			*cp = pItem->m_cItemColor;
			cp++;
			// v1.432
			sp = (short *) cp;
			*sp = pItem->m_sItemEffectValue2;
			cp += 2;
			// v1.42
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwAttribute;
			cp += 4;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 55);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					// DeleteClient(iClientH, true, true);
					return true;
			}
			return true;
		}
	return false;
}

bool CGame::bCheckTotalSkillMasteryPoints(int iClientH, int iSkill) {
	int i;
	int iRemainPoint;
	int iTotalPoints;
	int iWeaponIndex;
	int iDownSkillSSN;
	int iDownPoint;
	short sDownSkillIndex;
	if (m_pClientList[iClientH] == 0) return false;
	iTotalPoints = 0;
	for (i = 0; i < DEF_MAXSKILLTYPE; i++)
		iTotalPoints += m_pClientList[iClientH]->m_cSkillMastery[i];
	iRemainPoint = iTotalPoints - DEF_MAXSKILLPOINTS;
	if (iRemainPoint > 0) {
		while (iRemainPoint > 0) {
			sDownSkillIndex = -1; // v1.4
			if (m_pClientList[iClientH]->m_iDownSkillIndex != -1) {
				switch (m_pClientList[iClientH]->m_iDownSkillIndex) {
					case 3:
						/*
						case 4:
						case 5:
						case 7:
							if (m_pClientList[iClientH]->m_cSkillMastery[m_pClientList[iClientH]->m_iDownSkillIndex] > 20) {
								sDownSkillIndex = m_pClientList[iClientH]->m_iDownSkillIndex;
							}
							else {
								iDownSkillSSN = 99999999;
								for (i = 0; i < DEF_MAXSKILLTYPE; i++)
								if ((m_pClientList[iClientH]->m_cSkillMastery[i] >= 21) && (i != iSkill) &&
									(m_pClientList[iClientH]->m_iSkillSSN[i] <= iDownSkillSSN)) {
									iDownSkillSSN = m_pClientList[iClientH]->m_iSkillSSN[i];
									sDownSkillIndex = i;
								}
							}
							break;
						 */
					default:
						if (m_pClientList[iClientH]->m_cSkillMastery[m_pClientList[iClientH]->m_iDownSkillIndex] > 0) {
							sDownSkillIndex = m_pClientList[iClientH]->m_iDownSkillIndex;
						} else {
							iDownSkillSSN = 99999999;
							for (i = 0; i < DEF_MAXSKILLTYPE; i++)
								if ((m_pClientList[iClientH]->m_cSkillMastery[i] >= 21) && (i != iSkill) &&
										  (m_pClientList[iClientH]->m_iSkillSSN[i] <= iDownSkillSSN)) {
									iDownSkillSSN = m_pClientList[iClientH]->m_iSkillSSN[i];
									sDownSkillIndex = i;
								}
						}
						break;
				}
			}
			if (sDownSkillIndex != -1) {
				if (m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex] <= 20) // v1.4
					iDownPoint = m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex];
				else iDownPoint = 1;
				m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex] -= iDownPoint; // v1.4
				m_pClientList[iClientH]->m_iSkillSSN[sDownSkillIndex] = m_iSkillSSNpoint[m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex] + 1] - 1;
				iRemainPoint -= iDownPoint; // v1.4
				if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ] != -1) {
					iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ];
					if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sDownSkillIndex) {
						m_pClientList[iClientH]->m_iHitRatio -= iDownPoint; // v1.4
						if (m_pClientList[iClientH]->m_iHitRatio < 0) m_pClientList[iClientH]->m_iHitRatio = 0;
					}
				}
				if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ] != -1) {
					iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ];
					if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sDownSkillIndex) {
						m_pClientList[iClientH]->m_iHitRatio -= iDownPoint; // v1.4
						if (m_pClientList[iClientH]->m_iHitRatio < 0) m_pClientList[iClientH]->m_iHitRatio = 0;
					}
				}
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILL, sDownSkillIndex, m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex], 0, 0);
			} else {
				return false;
			}
		}
		return true;
	}
	return false;
}
/* 
bool CGame::bCheckTotalSkillMasteryPoints(int iClientH, int iSkill)
{
 int i;
 int iRemainPoint;
 int iTotalPoints;
 int iWeaponIndex;
 int iDownSkillSSN;
 int iDownPoint;
 short sDownSkillIndex;
	if (m_pClientList[iClientH] == 0) return false;
	iTotalPoints = 0;
	for (i = 0; i <	DEF_MAXSKILLTYPE; i++)
		iTotalPoints += m_pClientList[iClientH]->m_cSkillMastery[i];
	iRemainPoint = iTotalPoints - DEF_MAXSKILLPOINTS;
	if (iRemainPoint > 0) {
		while (iRemainPoint > 0) {
			sDownSkillIndex = -1; // v1.4
			if (m_pClientList[iClientH]->m_iDownSkillIndex != -1) {
				if (m_pClientList[iClientH]->m_cSkillMastery[m_pClientList[iClientH]->m_iDownSkillIndex] > 0) {
					sDownSkillIndex = m_pClientList[iClientH]->m_iDownSkillIndex;
				}
				else {
					iDownSkillSSN = 99999999;
					for (i = 0; i < DEF_MAXSKILLTYPE; i++)
					if ((m_pClientList[iClientH]->m_cSkillMastery[i] >= 0) && (i != iSkill) &&
						(m_pClientList[iClientH]->m_iSkillSSN[i] <= iDownSkillSSN)) {
						iDownSkillSSN = m_pClientList[iClientH]->m_iSkillSSN[i];
						sDownSkillIndex = i;
					}
				}
			}
			else {
				iDownSkillSSN = 99999999;
				for (i = 0; i < DEF_MAXSKILLTYPE; i++)
				if ((m_pClientList[iClientH]->m_cSkillMastery[i] >= 0) && (i != iSkill) &&
					(m_pClientList[iClientH]->m_iSkillSSN[i] <= iDownSkillSSN)) {
					iDownSkillSSN = m_pClientList[iClientH]->m_iSkillSSN[i];
					sDownSkillIndex = i;
				}
			}
			if (sDownSkillIndex != -1) {
				if (m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex] <= 20) // v1.4
					 iDownPoint = m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex];
				else iDownPoint = 1;
				m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex] -= iDownPoint; // v1.4
				m_pClientList[iClientH]->m_iSkillSSN[sDownSkillIndex] = m_iSkillSSNpoint[m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex]+1] - 1;
				iRemainPoint -= iDownPoint; // v1.4
				if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ] != -1) {
					iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ];
					if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sDownSkillIndex) {
						m_pClientList[iClientH]->m_iHitRatio -= iDownPoint; // v1.4
						if (m_pClientList[iClientH]->m_iHitRatio < 0) m_pClientList[iClientH]->m_iHitRatio = 0;
					}
				}
				if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ] != -1) {
					iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ];
					if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sDownSkillIndex) {
						m_pClientList[iClientH]->m_iHitRatio -= iDownPoint; // v1.4
						if (m_pClientList[iClientH]->m_iHitRatio < 0) m_pClientList[iClientH]->m_iHitRatio = 0;
					}
				}
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILL, sDownSkillIndex, m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex], 0, 0);
			}
			else {
				return false;
			}
		}
		return true;
	}
	return false;
}
 */
/*
bool CGame::bCheckTotalSkillMasteryPoints(int iClientH, int iSkill)
{
 int i;
 int j;
 int iRemainPoint;
 int iTotalPoints;
 int iWeaponIndex;
 short sDownSkillIndex;
 short sDownSkillLevel;
	if (m_pClientList[iClientH] == 0) return false;
	iTotalPoints = 0;
	for (i = 0; i <	DEF_MAXSKILLTYPE; i++)
		iTotalPoints += m_pClientList[iClientH]->m_cSkillMastery[i];
	iRemainPoint = iTotalPoints - DEF_MAXSKILLPOINTS;
	if (iRemainPoint > 0) {
		while (iRemainPoint != 0) {
			sDownSkillIndex = -1;
			sDownSkillLevel = 100;
			for (i = 0; i < DEF_MAXSKILLTYPE; i++)
			if ((m_pClientList[iClientH]->m_cSkillMastery[i] >= 1) && (i != iSkill) &&
				(m_pClientList[iClientH]->m_cSkillMastery[i] < sDownSkillLevel)) {
				sDownSkillLevel = m_pClientList[iClientH]->m_cSkillMastery[i];
				sDownSkillIndex = i;
			}
			if (sDownSkillIndex != -1) {
				m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex]--;
				m_pClientList[iClientH]->m_iSkillSSN[sDownSkillIndex] = 0;
				iRemainPoint--;
				if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ] != -1) {
					iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ];
					if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sDownSkillIndex) {
						m_pClientList[iClientH]->m_iHitRatio--;
						if (m_pClientList[iClientH]->m_iHitRatio < 0) m_pClientList[iClientH]->m_iHitRatio = 0;
					}
				}
				if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ] != -1) {
					iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ];
					if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sDownSkillIndex) {
						m_pClientList[iClientH]->m_iHitRatio--;
						if (m_pClientList[iClientH]->m_iHitRatio < 0) m_pClientList[iClientH]->m_iHitRatio = 0;
					}
				}
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILL, sDownSkillIndex, m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex], 0, 0);
			}
			else {
				return false;
			}
		}
		return true;
	}
	return false;
}
 */

/*
bool CGame::bCheckTotalSkillMasteryPoints(int iClientH, int iSkill)
{
 int i;
 int j;
 int iTotalPoints;
 int iWeaponIndex;
 short sDownSkillIndex;
 short sComSSN;
	if (m_pClientList[iClientH] == 0) return false;
	iTotalPoints = 0;
	for (i = 0; i <	DEF_MAXSKILLTYPE; i++)
		iTotalPoints += m_pClientList[iClientH]->m_cSkillMastery[i];
	if (iTotalPoints > DEF_MAXSKILLPOINTS) {
		sDownSkillIndex = -1;
		sComSSN = 10000;
		for (i = 0; i < DEF_MAXSKILLTYPE; i++)
		if ((m_pClientList[iClientH]->m_cSkillMastery[i] >= 1) && (i != iSkill) && (m_pClientList[iClientH]->m_iSkillSSN[i] < sComSSN)) {
			sComSSN = m_pClientList[iClientH]->m_iSkillSSN[i];
			sDownSkillIndex = i;
		}
		if (sDownSkillIndex != -1) {
			m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex] -= (iTotalPoints - DEF_MAXSKILLPOINTS);
			m_pClientList[iClientH]->m_iSkillSSN[sDownSkillIndex] = 0;
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ] != -1) {
				iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::twohand ];
				if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sDownSkillIndex) {
					m_pClientList[iClientH]->m_iHitRatio -= (iTotalPoints - DEF_MAXSKILLPOINTS);
				}
			}
			if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ] != -1) {
				iWeaponIndex = m_pClientList[iClientH]->m_sItemEquipmentStatus[ ItemEquipPos::rhand ];
				if (m_pClientList[iClientH]->m_pItemList[iWeaponIndex]->m_sRelatedSkill == sDownSkillIndex) {
					m_pClientList[iClientH]->m_iHitRatio -= (iTotalPoints - DEF_MAXSKILLPOINTS);
				}
			}
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILL, sDownSkillIndex, m_pClientList[iClientH]->m_cSkillMastery[sDownSkillIndex], 0, 0);
			return true;
		}
	}
	return false;
}
 */
void CGame::OnKeyDown(WPARAM wParam, LPARAM /*lParam*/) {
	switch (wParam) {
		case VK_F1:
			m_bF1pressed = true;
			break;
		case VK_F4:
			m_bF4pressed = true;
			break;
		case VK_F5:
			m_bF5pressed = true;
			break;
		case VK_F12:
			m_bF12pressed = true;
			break;
	}
}

void CGame::OnKeyUp(WPARAM wParam, LPARAM /*lParam*/) {
	int i;
	switch (wParam) {
		case VK_F2:
			/*
			char cTxt[120];
			for (i = 1; i <= 200; i++){
				wsprintf(cTxt, "Level %d:  Exp %d", i, iGetLevelExp(i));
				PutLogFileList(cTxt);
			}
			if (m_bOnExitProcess == false) {
				m_cShutDownCode      = 3;
				m_bOnExitProcess     = true;
				m_dwExitProcessTime  = timeGetTime();
				PutLogList("(!) GAME SERVER SHUTDOWN PROCESS STARTED(by Log-server connection Lost Emulation)!!!");
			}
			 */
			break;
		case VK_F1:
			m_bF1pressed = false;
			break;
		case VK_F4:
			m_bF4pressed = false;
			break;
		case VK_F5:
			m_bF5pressed = false;
			break;
		case VK_F12:
			m_bF12pressed = false;
			break;
		case VK_F6:
			if (m_bF1pressed == true) {
				PutLogList("(!) Send server shutdown announcement1...");
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
						SendNotifyMsg(0, i, DEF_NOTIFY_SERVERSHUTDOWN, 1, 0, 0, 0);
					}
			}
			break;
		case VK_F7:
			if (m_bF1pressed == true) {
				PutLogList("(!) Send server shutdown announcement2...");
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
						SendNotifyMsg(0, i, DEF_NOTIFY_SERVERSHUTDOWN, 2, 0, 0, 0);
					}
			}
			break;
		case VK_F9:
			if ((m_bF1pressed == true)) {
				PutLogList("(!!!) Resume Crusade Mode...");
				LocalStartCrusadeMode(0);
			}
			break;
		case VK_F11:
			if ((m_bF1pressed == true)) {
				PutLogList("(!!!) ManualEndCrusadeMode: side 0");
				ManualEndCrusadeMode(0);
			}
			break;
#define VK_1 0x31
		case VK_1:
			if ((m_bF1pressed == true)) {
				GlobalUpdateConfigs(1);
			}
			break;
#define VK_2 0x32
		case VK_2:
			if ((m_bF1pressed == true)) {
				GlobalUpdateConfigs(2);
			}
			break;
#define VK_3 0x33
		case VK_3:
			if ((m_bF1pressed == true)) {
				GlobalUpdateConfigs(3);
			}
			break;
#define VK_4 0x34
		case VK_4:
			if ((m_bF1pressed == true)) {
				GlobalUpdateConfigs(1);
			}
			break;
			/*#define VK_H 0x49 // H key
			case VK_H:
				if ((m_bF1pressed == true)) {
					GlobalStartHeldenianMode();
				}
				break;*/
			//Crusade Testcode
		case VK_HOME:
			if ((m_bF1pressed == true)) {
				GlobalStartCrusadeMode();
			}
			break;
		case VK_INSERT:
			_GrandMagicLaunchMsgSend(1, 1);
			MeteorStrikeMsgHandler(1);
			break;
		case VK_DELETE:
			_GrandMagicLaunchMsgSend(1, 2);
			MeteorStrikeMsgHandler(2);
			break;
	}
}

int CGame::iGetFollowerNumber(short sOwnerH, char cOwnerType) {
	int i;
	int iTotal;
	iTotal = 0;
	for (i = 1; i < DEF_MAXNPCS; i++)
		if ((m_pNpcList[i] != 0) && (m_pNpcList[i]->m_cMoveType == NpcMoveType::follow)) {
			if ((m_pNpcList[i]->m_iFollowOwnerIndex == sOwnerH) && (m_pNpcList[i]->m_cFollowOwnerType == cOwnerType))
				iTotal++;
		}
	return iTotal;
}

/*********************************************************************************************************************
 **  bool CGame::bRegisterDelayEvent(int iDelayType, int iEffectType, uint32_t dwLastTime, int iTargetH,				**
 **									   char cTargetType, char cMapIndex, int dX, int dY, int iV1, int iV2, int iV3) **
 **  description			:: initiates the delayed event process														**
 **  last updated		:: November 20, 2004; 9:30 PM; Hypnotoad													**
 **	return value		:: bool																						**
 **********************************************************************************************************************/
bool CGame::bRegisterDelayEvent(int iDelayType, int iEffectType, uint32_t dwLastTime, int iTargetH, char cTargetType, char cMapIndex, int dX, int dY, int iV1, int iV2, int iV3) {
	int i;
	for (i = 0; i < DEF_MAXDELAYEVENTS; i++)
		if (m_pDelayEventList[i] == 0) {
			m_pDelayEventList[i] = new CDelayEvent;
			m_pDelayEventList[i]->m_iDelayType = iDelayType;
			m_pDelayEventList[i]->m_iEffectType = iEffectType;
			m_pDelayEventList[i]->m_cMapIndex = cMapIndex;
			m_pDelayEventList[i]->m_dX = dX;
			m_pDelayEventList[i]->m_dY = dY;
			m_pDelayEventList[i]->m_iTargetH = iTargetH;
			m_pDelayEventList[i]->m_cTargetType = cTargetType;
			m_pDelayEventList[i]->m_iV1 = iV1;
			m_pDelayEventList[i]->m_iV2 = iV2;
			m_pDelayEventList[i]->m_iV3 = iV3;
			m_pDelayEventList[i]->m_dwTriggerTime = dwLastTime;
			return true;
		}
	return false;
}

void CGame::DelayEventProcessor() {
	int i;
	int iSkillNum;
	int iResult;
	uint32_t dwTime = timeGetTime();
	int iTemp;
	for (i = 0; i < DEF_MAXDELAYEVENTS; i++)
		if ((m_pDelayEventList[i] != 0) && (m_pDelayEventList[i]->m_dwTriggerTime < dwTime)) {
			switch (m_pDelayEventList[i]->m_iDelayType) {
				case DEF_DELAYEVENTTYPE_ANCIENT_TABLET:
					if ((m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_iStatus & 0x400000) != 0) {
						iTemp = 1;
					} else if ((m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_iStatus & 0x800000) != 0) {
						iTemp = 3;
					} else if ((m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_iStatus & 0x10000) != 0) {
						iTemp = 4;
					}
					SendNotifyMsg(0, m_pDelayEventList[i]->m_iTargetH, DEF_NOTIFY_SLATE_STATUS, iTemp, 0, 0, 0);
					SetSlateFlag(m_pDelayEventList[i]->m_iTargetH, iTemp, false);
					break;
				case DEF_DELAYEVENTTYPE_CALCMETEORSTRIKEEFFECT:
					CalcMeteorStrikeEffectHandler(m_pDelayEventList[i]->m_cMapIndex);
					break;
				case DEF_DELAYEVENTTYPE_DOMETEORSTRIKEDAMAGE:
					DoMeteorStrikeDamageHandler(m_pDelayEventList[i]->m_cMapIndex);
					break;
				case DEF_DELAYEVENTTYPE_METEORSTRIKE:
					MeteorStrikeHandler(m_pDelayEventList[i]->m_cMapIndex);
					break;
				case DEF_DELAYEVENTTYPE_USEITEM_SKILL:
					switch (m_pDelayEventList[i]->m_cTargetType) {
						case DEF_OWNERTYPE_PLAYER:
							iSkillNum = m_pDelayEventList[i]->m_iEffectType;
							if (m_pClientList[m_pDelayEventList[i]->m_iTargetH] == 0) break;
							if (m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_bSkillUsingStatus[iSkillNum] == false) break;
							if (m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_iSkillUsingTimeID[iSkillNum] != m_pDelayEventList[i]->m_iV2) break;
							m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_bSkillUsingStatus[iSkillNum] = false;
							m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_iSkillUsingTimeID[iSkillNum] = 0;
							iResult = iCalculateUseSkillItemEffect(m_pDelayEventList[i]->m_iTargetH, m_pDelayEventList[i]->m_cTargetType,
									  m_pDelayEventList[i]->m_iV1, iSkillNum, m_pDelayEventList[i]->m_cMapIndex, m_pDelayEventList[i]->m_dX, m_pDelayEventList[i]->m_dY);
							SendNotifyMsg(0, m_pDelayEventList[i]->m_iTargetH, DEF_NOTIFY_SKILLUSINGEND, iResult, 0, 0, 0);
							break;
					}
					break;
				case DEF_DELAYEVENTTYPE_DAMAGEOBJECT:
					break;
				case DEF_DELAYEVENTTYPE_MAGICRELEASE:
					// Removes the aura after time
					switch (m_pDelayEventList[i]->m_cTargetType) {
						case DEF_OWNERTYPE_PLAYER:
							if (m_pClientList[ m_pDelayEventList[i]->m_iTargetH ] == 0) break;
							SendNotifyMsg(0, m_pDelayEventList[i]->m_iTargetH, DEF_NOTIFY_MAGICEFFECTOFF,
									  m_pDelayEventList[i]->m_iEffectType, m_pClientList[ m_pDelayEventList[i]->m_iTargetH ]->m_cMagicEffectStatus[ m_pDelayEventList[i]->m_iEffectType ], 0, 0);
							m_pClientList[ m_pDelayEventList[i]->m_iTargetH ]->m_cMagicEffectStatus[ m_pDelayEventList[i]->m_iEffectType ] = 0;
							// Inbitition casting
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_INHIBITION)
								m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_bInhibition = false;
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_INVISIBILITY)
								SetInvisibilityFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_BERSERK)
								SetBerserkFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
							// Confusion
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_CONFUSE)
								switch (m_pDelayEventList[i]->m_iV1) {
									case 3: SetIllusionFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
										break;
									case 4: SetIllusionMovementFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
										break;
								}
							// Protection Magic
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_PROTECT) {
								switch (m_pDelayEventList[i]->m_iV1) {
									case 1:
										SetProtectionFromArrowFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
										break;
									case 2:
									case 5:
										SetMagicProtectionFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
										break;
									case 3:
									case 4:
										SetDefenseShieldFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
										break;
								}
							}
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_POLYMORPH) {
								m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_sType = m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_sOriginalType;
								SendEventToNearClient_TypeA(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
							}
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_ICE)
								SetIceFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
							break;
							/*case DEF_DELAYEVENTTYPE_MAGICRELEASE:
							// Removes the aura after time
							switch (m_pDelayEventList[i]->m_cTargetType) {
							case DEF_OWNERTYPE_PLAYER:
								if (m_pClientList[ m_pDelayEventList[i]->m_iTargetH ] == 0) break;
								SendNotifyMsg(0, m_pDelayEventList[i]->m_iTargetH, DEF_NOTIFY_MAGICEFFECTOFF,
												 m_pDelayEventList[i]->m_iEffectType, m_pClientList[ m_pDelayEventList[i]->m_iTargetH ]->m_cMagicEffectStatus[ m_pDelayEventList[i]->m_iEffectType ], 0, 0);
								m_pClientList[ m_pDelayEventList[i]->m_iTargetH ]->m_cMagicEffectStatus[ m_pDelayEventList[i]->m_iEffectType ] = 0;
								// Inhibition Casting
								if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_INHIBITION)
									m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_bInhibition = false;
								if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_INVISIBILITY)
									SetInvisibilityFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
								if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_BERSERK)
									SetBerserkFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
								// Illusion
								if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_CONFUSE)
									SetIllusionFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
								// Protection Magic
								if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_PROTECT) {
									switch(m_pDelayEventList[i]->m_iV1){
										case 1:
											SetProtectionFromArrowFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
											break;
										case 2:
										case 5:
											SetMagicProtectionFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
											break;
										case 3:
										case 4:
											SetDefenseShieldFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
											break;
									}
								}
								if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_POLYMORPH) {
									m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_sType = m_pClientList[m_pDelayEventList[i]->m_iTargetH]->m_sOriginalType;
									SendEventToNearClient_TypeA(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
								}
								if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_ICE)
									SetIceFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_PLAYER, false);
								break;*/
						case DEF_OWNERTYPE_NPC:
							if (m_pNpcList[ m_pDelayEventList[i]->m_iTargetH ] == 0) break;
							m_pNpcList[ m_pDelayEventList[i]->m_iTargetH ]->m_cMagicEffectStatus[ m_pDelayEventList[i]->m_iEffectType ] = 0;
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_INVISIBILITY)
								SetInvisibilityFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_NPC, false);
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_BERSERK)
								SetBerserkFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_NPC, false);
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_POLYMORPH) {
								m_pNpcList[m_pDelayEventList[i]->m_iTargetH]->m_sType = m_pNpcList[m_pDelayEventList[i]->m_iTargetH]->m_sOriginalType;
								SendEventToNearClient_TypeA(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
							}
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_ICE)
								SetIceFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_NPC, false);
							// Illusion
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_CONFUSE)
								SetIllusionFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_NPC, false);
							// Protection Magic
							if (m_pDelayEventList[i]->m_iEffectType == DEF_MAGICTYPE_PROTECT) {
								switch (m_pDelayEventList[i]->m_iV1) {
									case 1:
										SetProtectionFromArrowFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_NPC, false);
										break;
									case 2:
									case 5:
										SetMagicProtectionFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_NPC, false);
										break;
									case 3:
									case 4:
										SetDefenseShieldFlag(m_pDelayEventList[i]->m_iTargetH, DEF_OWNERTYPE_NPC, false);
										break;
								}
							}
							//	if (m_pDelayEventList[i]->m_iEffectType == /*notcoded*/)
							break;
					}
					break;
			}
			delete m_pDelayEventList[i];
			m_pDelayEventList[i] = 0;
		}
}

bool CGame::bRemoveFromDelayEventList(int iH, char cType, int iEffectType) {
	int i;
	for (i = 0; i < DEF_MAXDELAYEVENTS; i++)
		if (m_pDelayEventList[i] != 0) {
			if (iEffectType == 0) {
				if ((m_pDelayEventList[i]->m_iTargetH == iH) && (m_pDelayEventList[i]->m_cTargetType == cType)) {
					delete m_pDelayEventList[i];
					m_pDelayEventList[i] = 0;
				}
			} else {
				if ((m_pDelayEventList[i]->m_iTargetH == iH) && (m_pDelayEventList[i]->m_cTargetType == cType) &&
						  (m_pDelayEventList[i]->m_iEffectType == iEffectType)) {
					delete m_pDelayEventList[i];
					m_pDelayEventList[i] = 0;
				}
			}
		}
	return true;
}

void CGame::SendObjectMotionRejectMsg(int iClientH) {
	char * cp, cData[30];
	uint32_t * dwp;
	uint16_t * wp;
	short * sp;
	int iRet;
	m_pClientList[iClientH]->m_bIsMoveBlocked = true; // v2.171
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_RESPONSE_MOTION;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = DEF_OBJECTMOTION_REJECT;
	cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sX;
	cp += 2;
	sp = (short *) cp;
	*sp = m_pClientList[iClientH]->m_sY;
	cp += 2;
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 10);
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			return;
	}
	return;
}

int CGame::_iGetTotalClients() {
	int i;
	int iTotal;
	iTotal = 0;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if (m_pClientList[i] != 0) iTotal++;
	return iTotal;
}

void CGame::DynamicObjectEffectProcessor() {
	int i;
	int ix;
	int iy;
	int iIndex;
	short sOwnerH;
	short iDamage;
	short sType;
	char cOwnerType;
	uint32_t dwTime = timeGetTime(), dwRegisterTime;
	//
	for (i = 0; i < DEF_MAXDYNAMICOBJECTS; i++)
		if (m_pDynamicObjectList[i] != 0) {
			switch (m_pDynamicObjectList[i]->m_sType) {
				case DEF_DYNAMICOBJECT_PCLOUD_BEGIN:
					for (ix = m_pDynamicObjectList[i]->m_sX - 1; ix <= m_pDynamicObjectList[i]->m_sX + 1; ix++)
						for (iy = m_pDynamicObjectList[i]->m_sY - 1; iy <= m_pDynamicObjectList[i]->m_sY + 1; iy++) {
							m_pMapList[m_pDynamicObjectList[i]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
							if (sOwnerH != 0) {
								switch (cOwnerType) {
									case DEF_OWNERTYPE_PLAYER:
										if (m_pClientList[sOwnerH] == 0) break;
										if (m_pClientList[sOwnerH]->m_bIsKilled == true) break;
										//if ((m_pClientList[sOwnerH]->m_bIsNeutral == true) && (m_pClientList[sOwnerH]->m_sAppr2 & 0xF000) == 0) break;
										if (m_pDynamicObjectList[i]->m_iV1 < 20)
											iDamage = iDice(1, 6);
										else iDamage = iDice(1, 8);
										// New 17/05/2004 Changed
										if (m_pClientList[sOwnerH]->m_iAdminUserLevel == 0)
											m_pClientList[sOwnerH]->m_iHP -= iDamage;
										if (m_pClientList[sOwnerH]->m_iHP <= 0) {
											ClientKilledHandler(sOwnerH, sOwnerH, cOwnerType, iDamage);
										} else {
											if (iDamage > 0) {
												SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_HP, 0, 0, 0, 0);
												if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
													// 1: Hold-Person
													// 2: Paralize
													SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_HOLDOBJECT, m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ], 0, 0);
													m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
													bRemoveFromDelayEventList(sOwnerH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_HOLDOBJECT);
												}
											}
											if ((bCheckResistingMagicSuccess(1, sOwnerH, DEF_OWNERTYPE_PLAYER, 100) == false) &&
													  (m_pClientList[sOwnerH]->m_bIsPoisoned == false)) {
												m_pClientList[sOwnerH]->m_bIsPoisoned = true;
												m_pClientList[sOwnerH]->m_iPoisonLevel = m_pDynamicObjectList[i]->m_iV1;
												m_pClientList[sOwnerH]->m_dwPoisonTime = dwTime;
												SetPoisonFlag(sOwnerH, cOwnerType, true); // poison aura appears from dynamic objects
												SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_POISON, m_pClientList[sOwnerH]->m_iPoisonLevel, 0, 0);
											}
										}
										break;
									case DEF_OWNERTYPE_NPC:
										if (m_pNpcList[sOwnerH] == 0) break;
										if (m_pDynamicObjectList[i]->m_iV1 < 20)
											iDamage = iDice(1, 6);
										else iDamage = iDice(1, 8);
										switch (m_pNpcList[sOwnerH]->m_sType) {
											case NpcType::esg: // ESG
											case NpcType::gmg: // GMG
											case NpcType::mc_gaffin: // McGaffin
											case NpcType::perry: // Perry
											case NpcType::devlin: // Devlin
												iDamage = 0;
												break;
											default: break;
										}
										switch (m_pNpcList[sOwnerH]->m_cActionLimit) {
											case 0:
											case 3:
											case 5:
												m_pNpcList[sOwnerH]->m_iHP -= iDamage;
												break;
										}
										//if (m_pNpcList[sOwnerH]->m_cActionLimit == 0)
										//	m_pNpcList[sOwnerH]->m_iHP -= iDamage;
										if (m_pNpcList[sOwnerH]->m_iHP <= 0) {
											NpcKilledHandler(sOwnerH, cOwnerType, sOwnerH, 0);
										} else {
											if (iDice(1, 3) == 2)
												m_pNpcList[sOwnerH]->m_dwTime = dwTime;
											if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
												m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
											}
											SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, 0, 0);
										}
										break;
								}
							}
						}
					break;
				case DEF_DYNAMICOBJECT_ICESTORM:
					for (ix = m_pDynamicObjectList[i]->m_sX - 2; ix <= m_pDynamicObjectList[i]->m_sX + 2; ix++)
						for (iy = m_pDynamicObjectList[i]->m_sY - 2; iy <= m_pDynamicObjectList[i]->m_sY + 2; iy++) {
							m_pMapList[m_pDynamicObjectList[i]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
							if (sOwnerH != 0) {
								switch (cOwnerType) {
									case DEF_OWNERTYPE_PLAYER:
										if (m_pClientList[sOwnerH] == 0) break;
										if (m_pClientList[sOwnerH]->m_bIsKilled == true) break;
										iDamage = iDice(3, 3) + 5;
										if (m_pClientList[sOwnerH]->m_iAdminUserLevel == 0)
											m_pClientList[sOwnerH]->m_iHP -= iDamage;
										if (m_pClientList[sOwnerH]->m_iHP <= 0) {
											ClientKilledHandler(sOwnerH, sOwnerH, cOwnerType, iDamage);
										} else {
											if (iDamage > 0) {
												SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_HP, 0, 0, 0, 0);
												if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] == 1) {
													SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_HOLDOBJECT, m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ], 0, 0);
													m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
													bRemoveFromDelayEventList(sOwnerH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_HOLDOBJECT);
												}
											}
											if ((bCheckResistingIceSuccess(1, sOwnerH, DEF_OWNERTYPE_PLAYER, m_pDynamicObjectList[i]->m_iV1) == false) &&
													  (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0)) {
												m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
												SetIceFlag(sOwnerH, cOwnerType, true);
												bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (20 * 1000),
														  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
												SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
											}
										}
										break;
									case DEF_OWNERTYPE_NPC:
										if (m_pNpcList[sOwnerH] == 0) break;
										iDamage = iDice(3, 3) + 5;
										switch (m_pNpcList[sOwnerH]->m_sType) {
											case NpcType::esg: // ESG
											case NpcType::gmg: // GMG
											case NpcType::mc_gaffin: // McGaffin
											case NpcType::perry: // Perry
											case NpcType::devlin: // Devlin
												iDamage = 0;
												break;
											default: break;
										}
										switch (m_pNpcList[sOwnerH]->m_cActionLimit) {
											case 0:
											case 3:
											case 5:
												m_pNpcList[sOwnerH]->m_iHP -= iDamage;
												break;
										}
										if (m_pNpcList[sOwnerH]->m_iHP <= 0) {
											NpcKilledHandler(sOwnerH, cOwnerType, sOwnerH, 0);
										} else {
											if (iDice(1, 3) == 2)
												m_pNpcList[sOwnerH]->m_dwTime = dwTime;
											if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
												m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
											}
											SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, 0, 0);
											if ((bCheckResistingIceSuccess(1, sOwnerH, DEF_OWNERTYPE_NPC, m_pDynamicObjectList[i]->m_iV1) == false) &&
													  (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0)) {
												m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
												SetIceFlag(sOwnerH, cOwnerType, true);
												bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + (20 * 1000),
														  sOwnerH, cOwnerType, 0, 0, 0, 1, 0, 0);
											}
										}
										break;
								}
							}
							m_pMapList[m_pDynamicObjectList[i]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
							if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
									  (m_pClientList[sOwnerH]->m_iHP > 0)) {
								iDamage = iDice(3, 2);
								m_pClientList[sOwnerH]->m_iHP -= iDamage;
								if (m_pClientList[sOwnerH]->m_iHP <= 0) {
									ClientKilledHandler(sOwnerH, sOwnerH, cOwnerType, iDamage);
								} else {
									if (iDamage > 0) {
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_HP, 0, 0, 0, 0);
									}
								}
							}
							m_pMapList[m_pDynamicObjectList[i]->m_cMapIndex]->bGetDynamicObject(ix, iy, &sType, &dwRegisterTime, &iIndex);
							if (((sType == DEF_DYNAMICOBJECT_FIRE) || (sType == DEF_DYNAMICOBJECT_FIRE3)) && (m_pDynamicObjectList[iIndex] != 0))
								m_pDynamicObjectList[iIndex]->m_dwLastTime = m_pDynamicObjectList[iIndex]->m_dwLastTime - (m_pDynamicObjectList[iIndex]->m_dwLastTime / 10);
						}
					break;
				case DEF_DYNAMICOBJECT_FIRE3:
				case DEF_DYNAMICOBJECT_FIRE:
					if (m_pDynamicObjectList[i]->m_iCount == 1) {
						CheckFireBluring(m_pDynamicObjectList[i]->m_cMapIndex, m_pDynamicObjectList[i]->m_sX, m_pDynamicObjectList[i]->m_sY);
					}
					m_pDynamicObjectList[i]->m_iCount++;
					if (m_pDynamicObjectList[i]->m_iCount > 10) m_pDynamicObjectList[i]->m_iCount = 10;
					for (ix = m_pDynamicObjectList[i]->m_sX; ix <= m_pDynamicObjectList[i]->m_sX; ix++)
						for (iy = m_pDynamicObjectList[i]->m_sY; iy <= m_pDynamicObjectList[i]->m_sY; iy++) {
							m_pMapList[m_pDynamicObjectList[i]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
							if (sOwnerH != 0) {
								switch (cOwnerType) {
									case DEF_OWNERTYPE_PLAYER:
										if (m_pClientList[sOwnerH] == 0) break;
										if (m_pClientList[sOwnerH]->m_bIsKilled == true) break;
										//if ((m_pClientList[sOwnerH]->m_bIsNeutral == true) && (m_pClientList[sOwnerH]->m_sAppr2 & 0xF000) == 0) break;
										iDamage = iDice(1, 6);
										// New 17/05/2004
										if (m_pClientList[sOwnerH]->m_iAdminUserLevel == 0)
											m_pClientList[sOwnerH]->m_iHP -= iDamage;
										if (m_pClientList[sOwnerH]->m_iHP <= 0) {
											ClientKilledHandler(sOwnerH, sOwnerH, cOwnerType, iDamage);
										} else {
											if (iDamage > 0) {
												SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_HP, 0, 0, 0, 0);
												if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
													// 1: Hold-Person
													// 2: Paralize
													SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_HOLDOBJECT, m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ], 0, 0);
													m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
													bRemoveFromDelayEventList(sOwnerH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_HOLDOBJECT);
												}
											}
										}
										break;
									case DEF_OWNERTYPE_NPC:
										if (m_pNpcList[sOwnerH] == 0) break;
										iDamage = iDice(1, 6);
										switch (m_pNpcList[sOwnerH]->m_sType) {
											case NpcType::esg: // ESG
											case NpcType::gmg: // GMG
											case NpcType::mc_gaffin: // McGaffin
											case NpcType::perry: // Perry
											case NpcType::devlin: // Devlin
												iDamage = 0;
												break;
											default: break;
										}
										switch (m_pNpcList[sOwnerH]->m_cActionLimit) {
											case 0:
											case 3:
											case 5:
												m_pNpcList[sOwnerH]->m_iHP -= iDamage;
												break;
										}
										//if (m_pNpcList[sOwnerH]->m_cActionLimit == 0)
										//	m_pNpcList[sOwnerH]->m_iHP -= iDamage;
										if (m_pNpcList[sOwnerH]->m_iHP <= 0) {
											NpcKilledHandler(sOwnerH, cOwnerType, sOwnerH, 0);
										} else {
											if (iDice(1, 3) == 2)
												m_pNpcList[sOwnerH]->m_dwTime = dwTime;
											if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
												m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
											}
											SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, 0, 0);
										}
										break;
								}
							}
							m_pMapList[m_pDynamicObjectList[i]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
							if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
									  (m_pClientList[sOwnerH]->m_iHP > 0)) {
								iDamage = iDice(1, 6);
								m_pClientList[sOwnerH]->m_iHP -= iDamage;
								if (m_pClientList[sOwnerH]->m_iHP <= 0) {
									ClientKilledHandler(sOwnerH, sOwnerH, cOwnerType, iDamage);
								} else {
									if (iDamage > 0) {
										SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_HP, 0, 0, 0, 0);
									}
								}
							}
							m_pMapList[m_pDynamicObjectList[i]->m_cMapIndex]->bGetDynamicObject(ix, iy, &sType, &dwRegisterTime, &iIndex);
							if ((sType == DEF_DYNAMICOBJECT_ICESTORM) && (m_pDynamicObjectList[iIndex] != 0))
								m_pDynamicObjectList[iIndex]->m_dwLastTime = m_pDynamicObjectList[iIndex]->m_dwLastTime - (m_pDynamicObjectList[iIndex]->m_dwLastTime / 10);
						}
					break;
			}
		}
}
char _tmp_cCorpseX[] = {0, 1, 1, 1, 0, -1, -1, -1, 0, 0, 0, 0};
char _tmp_cCorpseY[] = {-1, -1, 0, 1, 1, 1, 0, -1, 0, 0, 0};

void CGame::ClearSkillUsingStatus(int iClientH) {
	int i;
	short tX;
	short fX;
	short tY;
	short fY;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bSkillUsingStatus[19] == true) {
		tX = m_pClientList[iClientH]->m_sX;
		tY = m_pClientList[iClientH]->m_sY;
		if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bGetMoveable(tX, tY, 0) == false) {
			fX = m_pClientList[iClientH]->m_sX + _tmp_cCorpseX[m_pClientList[iClientH]->m_cDir];
			fY = m_pClientList[iClientH]->m_sY + _tmp_cCorpseY[m_pClientList[iClientH]->m_cDir];
			if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bGetMoveable(fX, fY, 0) == false) {
				m_pClientList[iClientH]->m_cDir = iDice(1, 8);
				fX = m_pClientList[iClientH]->m_sX + _tmp_cCorpseX[m_pClientList[iClientH]->m_cDir];
				fY = m_pClientList[iClientH]->m_sY + _tmp_cCorpseY[m_pClientList[iClientH]->m_cDir];
				if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bGetMoveable(fX, fY, 0) == false) {
					return;
				}
			}
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_DAMAGEMOVE, m_pClientList[iClientH]->m_cDir, 0, 0, 0);
		}
	}
	for (i = 0; i < DEF_MAXSKILLTYPE; i++) {
		m_pClientList[iClientH]->m_bSkillUsingStatus[i] = false;
		m_pClientList[iClientH]->m_iSkillUsingTimeID[i] = 0;
	}
	if (m_pClientList[iClientH]->m_iAllocatedFish != 0) {
		if (m_pFish[m_pClientList[iClientH]->m_iAllocatedFish] != 0)
			m_pFish[m_pClientList[iClientH]->m_iAllocatedFish]->m_sEngagingCount--;
		m_pClientList[iClientH]->m_iAllocatedFish = 0;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_FISHCANCELED, 0, 0, 0, 0);
	}
}

int CGame::iCalculateUseSkillItemEffect(int iOwnerH, char cOwnerType, char cOwnerSkill, int iSkillNum, char cMapIndex, int dX, int dY) {
	CItem * pItem;
	char cItemName[21];
	short lX;
	short lY;
	int iResult;
	int iFish;
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[iOwnerH] == 0) return 0;
			if (m_pClientList[iOwnerH]->m_cMapIndex != cMapIndex) return 0;
			lX = m_pClientList[iOwnerH]->m_sX;
			lY = m_pClientList[iOwnerH]->m_sY;
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[iOwnerH] == 0) return 0;
			if (m_pNpcList[iOwnerH]->m_cMapIndex != cMapIndex) return 0;
			lX = m_pNpcList[iOwnerH]->m_sX;
			lY = m_pNpcList[iOwnerH]->m_sY;
			break;
	}
	if (cOwnerSkill == 0) return 0;
	iResult = iDice(1, 105);
	if (cOwnerSkill <= iResult) return 0;
	if (m_pMapList[cMapIndex]->bGetIsWater(dX, dY) == false) return 0;
	if (cOwnerType == DEF_OWNERTYPE_PLAYER)
		CalculateSSN_SkillIndex(iOwnerH, iSkillNum, 1);
	switch (m_pSkillConfigList[iSkillNum]->m_sType) {
		case DEF_SKILLEFFECTTYPE_TAMING:
			_TamingHandler(iOwnerH, iSkillNum, cMapIndex, dX, dY);
			break;
		case DEF_SKILLEFFECTTYPE_GET:
			std::memset(cItemName, 0, sizeof(cItemName));
			switch (m_pSkillConfigList[iSkillNum]->m_sValue1) {
				case 1:
					wsprintf(cItemName, "Meat");
					break;
				case 2:
					//if (m_pMapList[cMapIndex]->bGetIsWater(dX, dY) == false) return 0;
					if (cOwnerType == DEF_OWNERTYPE_PLAYER) {
						iFish = iCheckFish(iOwnerH, cMapIndex, dX, dY);
						if (iFish == 0) wsprintf(cItemName, "Fish");
					} else wsprintf(cItemName, "Fish");
					break;
			}
			if (strlen(cItemName) != 0) {
				if (memcmp(cItemName, "Fish", 6) == 0) {
					SendNotifyMsg(0, iOwnerH, DEF_NOTIFY_FISHSUCCESS, 0, 0, 0, 0);
					m_pClientList[iOwnerH]->m_iExpStock += iDice(1, 2);
				}
				pItem = new CItem;
				if (pItem == 0) return 0;
				if (_bInitItemAttr(pItem, cItemName) == true) {
					m_pMapList[cMapIndex]->bSetItem(lX, lY, pItem);
					SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, cMapIndex,
							  lX, lY, pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); //v1.4
				}
			}
			break;
	}
	return 1;
}

void CGame::UseSkillHandler(int iClientH, int iV1, int /*iV2*/, int /*iV3*/) {
	char cOwnerType;
	short sAttackerWeapon;
	short sOwnerH;
	int iResult;
	int iPlayerSkillLevel;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((iV1 < 0) || (iV1 >= DEF_MAXSKILLTYPE)) return;
	if (m_pSkillConfigList[iV1] == 0) return;
	if (m_pClientList[iClientH]->m_bSkillUsingStatus[iV1] == true) return;
	/*
	if (iV1 != 19) {
		m_pClientList[iClientH]->m_iAbuseCount++;
		if ((m_pClientList[iClientH]->m_iAbuseCount % 30) == 0) {
			wsprintf(G_cTxt, "(!) Character (%s) trying to use unusable skill (%d) Tries(%d)",m_pClientList[iClientH]->m_cCharName,
																						 iV1, m_pClientList[iClientH]->m_iAbuseCount);
			PutLogFileList(G_cTxt);
		}
	}
	 */
	iPlayerSkillLevel = m_pClientList[iClientH]->m_cSkillMastery[iV1];
	iResult = iDice(1, 100);
	if (iResult > iPlayerSkillLevel) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILLUSINGEND, 0, 0, 0, 0);
		return;
	}
	switch (m_pSkillConfigList[iV1]->m_sType) {
		case DEF_SKILLEFFECTTYPE_PRETEND:
			switch (m_pSkillConfigList[iV1]->m_sValue1) {
				case 1:
					if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsFightZone == true) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILLUSINGEND, 0, 0, 0, 0);
						return;
					}
					m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->GetDeadOwner(&sOwnerH, &cOwnerType, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
					if (sOwnerH != 0) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILLUSINGEND, 0, 0, 0, 0);
						return;
					}
					iResult = 0;
					if (m_pClientList[iClientH]->m_iAdminUserLevel <= 0) {
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->GetOwner(&sOwnerH, &cOwnerType, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY - 1);
						iResult += sOwnerH;
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->GetOwner(&sOwnerH, &cOwnerType, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY + 1);
						iResult += sOwnerH;
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->GetOwner(&sOwnerH, &cOwnerType, m_pClientList[iClientH]->m_sX - 1, m_pClientList[iClientH]->m_sY);
						iResult += sOwnerH;
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->GetOwner(&sOwnerH, &cOwnerType, m_pClientList[iClientH]->m_sX + 1, m_pClientList[iClientH]->m_sY);
						iResult += sOwnerH;
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->GetOwner(&sOwnerH, &cOwnerType, m_pClientList[iClientH]->m_sX - 1, m_pClientList[iClientH]->m_sY - 1);
						iResult += sOwnerH;
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->GetOwner(&sOwnerH, &cOwnerType, m_pClientList[iClientH]->m_sX + 1, m_pClientList[iClientH]->m_sY - 1);
						iResult += sOwnerH;
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->GetOwner(&sOwnerH, &cOwnerType, m_pClientList[iClientH]->m_sX - 1, m_pClientList[iClientH]->m_sY + 1);
						iResult += sOwnerH;
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->GetOwner(&sOwnerH, &cOwnerType, m_pClientList[iClientH]->m_sX + 1, m_pClientList[iClientH]->m_sY + 1);
						iResult += sOwnerH;
					}
					if (iResult != 0) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILLUSINGEND, 0, 0, 0, 0);
						return;
					}
					CalculateSSN_SkillIndex(iClientH, iV1, 1);
					sAttackerWeapon = 1;
					SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDYING, 0, sAttackerWeapon, 0);
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->ClearOwner(14, iClientH, DEF_OWNERTYPE_PLAYER, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetDeadOwner(iClientH, DEF_OWNERTYPE_PLAYER, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
					break;
			}
			break;
	}
	m_pClientList[iClientH]->m_bSkillUsingStatus[iV1] = true;
}

void CGame::ReqSellItemHandler(int iClientH, char cItemID, char cSellToWhom, int iNum, char */*pItemName*/) {
	char cItemCategory;
	char cItemName[21];
	short sRemainLife;
	int iPrice;
	double d1;
	double d2;
	double d3;
	bool bNeutral;
	uint32_t dwSWEType;
	uint32_t dwSWEValue;
	uint32_t dwAddPrice1;
	uint32_t dwAddPrice2;
	uint32_t dwMul1;
	uint32_t dwMul2;
	CItem * m_pGold;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((cItemID < 0) || (cItemID >= 50)) return;
	if (m_pClientList[iClientH]->m_pItemList[cItemID] == 0) return;
	if (iNum <= 0) return;
	if (m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwCount < (uint32_t) iNum) return;
	iCalcTotalWeight(iClientH);
	m_pGold = new CItem;
	std::memset(cItemName, 0, sizeof(cItemName));
	wsprintf(cItemName, "Gold");
	_bInitItemAttr(m_pGold, cItemName);
	// v1.42
	bNeutral = false;
	if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) bNeutral = true;
	switch (cSellToWhom) {
		case 15:
		case 24:
			cItemCategory = m_pClientList[iClientH]->m_pItemList[cItemID]->m_cCategory;
			if ((cItemCategory >= 11) && (cItemCategory <= 50)) {
				iPrice = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice / 2) * iNum;
				sRemainLife = m_pClientList[iClientH]->m_pItemList[cItemID]->m_wCurLifeSpan;
				if (bNeutral == true) iPrice = iPrice / 2;
				if (iPrice <= 0) iPrice = 1;
				if (iPrice > 1000000) iPrice = 1000000;
				if (m_pClientList[iClientH]->m_iCurWeightLoad + iGetItemWeight(m_pGold, iPrice) > _iCalcMaxLoad(iClientH)) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTSELLITEM, cItemID, 4, 0, m_pClientList[iClientH]->m_pItemList[cItemID]->m_cName);
				} else SendNotifyMsg(0, iClientH, DEF_NOTIFY_SELLITEMPRICE, cItemID, sRemainLife, iPrice, m_pClientList[iClientH]->m_pItemList[cItemID]->m_cName, iNum);
			} else if ((cItemCategory >= 1) && (cItemCategory <= 10)) {
				sRemainLife = m_pClientList[iClientH]->m_pItemList[cItemID]->m_wCurLifeSpan;
				if (sRemainLife == 0) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTSELLITEM, cItemID, 2, 0, m_pClientList[iClientH]->m_pItemList[cItemID]->m_cName);
				} else {
					d1 = (double) sRemainLife;
					if (m_pClientList[iClientH]->m_pItemList[cItemID]->m_wMaxLifeSpan != 0)
						d2 = (double) m_pClientList[iClientH]->m_pItemList[cItemID]->m_wMaxLifeSpan;
					else d2 = 1.0f;
					d3 = (d1 / d2) * 0.5f;
					d2 = (double) m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice;
					d3 = d3 * d2;
					iPrice = (int) d3;
					iPrice = iPrice*iNum;
					dwAddPrice1 = 0;
					dwAddPrice2 = 0;
					if ((m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x00F00000) != 0) {
						dwSWEType = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x00F00000) >> 20;
						dwSWEValue = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x000F0000) >> 16;
						switch (dwSWEType) {
							case 6: dwMul1 = 2;
								break;
							case 8: dwMul1 = 2;
								break;
							case 5: dwMul1 = 3;
								break;
							case 1: dwMul1 = 4;
								break;
							case 7: dwMul1 = 5;
								break;
							case 2: dwMul1 = 6;
								break;
							case 3: dwMul1 = 15;
								break;
							case 9: dwMul1 = 20;
								break;
							default: dwMul1 = 1;
								break;
						}
						d1 = (double) iPrice*dwMul1;
						switch (dwSWEValue) {
							case 1: d2 = 10.0f;
								break;
							case 2: d2 = 20.0f;
								break;
							case 3: d2 = 30.0f;
								break;
							case 4: d2 = 35.0f;
								break;
							case 5: d2 = 40.0f;
								break;
							case 6: d2 = 50.0f;
								break;
							case 7: d2 = 100.0f;
								break;
							case 8: d2 = 200.0f;
								break;
							case 9: d2 = 300.0f;
								break;
							case 10: d2 = 400.0f;
								break;
							case 11: d2 = 500.0f;
								break;
							case 12: d2 = 700.0f;
								break;
							case 13: d2 = 900.0f;
								break;
							default: d2 = 0.0f;
								break;
						}
						d3 = d1 * (d2 / 100.0f);
						dwAddPrice1 = (int) (d1 + d3);
					}
					if ((m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x0000F000) != 0) {
						dwSWEType = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x0000F000) >> 12;
						dwSWEValue = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x00000F00) >> 8;
						switch (dwSWEType) {
							case 1:
							case 12: dwMul2 = 2;
								break;
							case 2:
							case 3:
							case 4:
							case 5:
							case 6:
							case 7: dwMul2 = 4;
								break;
							case 8:
							case 9:
							case 10:
							case 11: dwMul2 = 6;
								break;
						}
						d1 = (double) iPrice*dwMul2;
						switch (dwSWEValue) {
							case 1: d2 = 10.0f;
								break;
							case 2: d2 = 20.0f;
								break;
							case 3: d2 = 30.0f;
								break;
							case 4: d2 = 35.0f;
								break;
							case 5: d2 = 40.0f;
								break;
							case 6: d2 = 50.0f;
								break;
							case 7: d2 = 100.0f;
								break;
							case 8: d2 = 200.0f;
								break;
							case 9: d2 = 300.0f;
								break;
							case 10: d2 = 400.0f;
								break;
							case 11: d2 = 500.0f;
								break;
							case 12: d2 = 700.0f;
								break;
							case 13: d2 = 900.0f;
								break;
							default: d2 = 0.0f;
								break;
						}
						d3 = d1 * (d2 / 100.0f);
						dwAddPrice2 = (int) (d1 + d3);
					}
					iPrice = iPrice + (dwAddPrice1 - (dwAddPrice1 / 3)) + (dwAddPrice2 - (dwAddPrice2 / 3));
					if (bNeutral == true) iPrice = iPrice / 2;
					if (iPrice <= 0) iPrice = 1;
					if (iPrice > 1000000) iPrice = 1000000;
					if (m_pClientList[iClientH]->m_iCurWeightLoad + iGetItemWeight(m_pGold, iPrice) > _iCalcMaxLoad(iClientH)) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTSELLITEM, cItemID, 4, 0, m_pClientList[iClientH]->m_pItemList[cItemID]->m_cName);
					} else SendNotifyMsg(0, iClientH, DEF_NOTIFY_SELLITEMPRICE, cItemID, sRemainLife, iPrice, m_pClientList[iClientH]->m_pItemList[cItemID]->m_cName, iNum);
				}
			} else SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTSELLITEM, cItemID, 1, 0, m_pClientList[iClientH]->m_pItemList[cItemID]->m_cName);
			break;
		default:
			break;
	}
	delete m_pGold;
}

void CGame::ReqSellItemConfirmHandler(int iClientH, char cItemID, int iNum, char * /*pString*/) {
	CItem * pItemGold;
	short sRemainLife;
	int iPrice;
	double d1;
	double d2;
	double d3;
	char * cp, cItemName[21], cData[120], cItemCategory;
	uint32_t * dwp, dwMul1, dwMul2, dwSWEType, dwSWEValue, dwAddPrice1, dwAddPrice2;
	uint16_t * wp;
	int iEraseReq;
	int iRet;
	short * sp;
	bool bNeutral;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((cItemID < 0) || (cItemID >= 50)) return;
	if (m_pClientList[iClientH]->m_pItemList[cItemID] == 0) return;
	if (iNum <= 0) return;
	if (m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwCount < (uint32_t) iNum) return;
	// New 18/05/2004
	if (m_pClientList[iClientH]->m_pIsProcessingAllowed == false) return;
	iCalcTotalWeight(iClientH);
	cItemCategory = m_pClientList[iClientH]->m_pItemList[cItemID]->m_cCategory;
	// v1.42
	bNeutral = false;
	if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) bNeutral = true;
	iPrice = 0;
	if ((cItemCategory >= 1) && (cItemCategory <= 10)) {
		sRemainLife = m_pClientList[iClientH]->m_pItemList[cItemID]->m_wCurLifeSpan;
		if (sRemainLife <= 0) {
			return;
		} else {
			d1 = (double) sRemainLife;
			if (m_pClientList[iClientH]->m_pItemList[cItemID]->m_wMaxLifeSpan != 0)
				d2 = (double) m_pClientList[iClientH]->m_pItemList[cItemID]->m_wMaxLifeSpan;
			else d2 = 1.0f;
			d3 = (d1 / d2) * 0.5f;
			d2 = (double) m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice;
			d3 = d3 * d2;
			iPrice = (short) d3;
			iPrice = iPrice*iNum;
			dwAddPrice1 = 0;
			dwAddPrice2 = 0;
			if ((m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x00F00000) != 0) {
				dwSWEType = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x00F00000) >> 20;
				dwSWEValue = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x000F0000) >> 16;
				switch (dwSWEType) {
					case 6: dwMul1 = 2;
						break;
					case 8: dwMul1 = 2;
						break;
					case 5: dwMul1 = 3;
						break;
					case 1: dwMul1 = 4;
						break;
					case 7: dwMul1 = 5;
						break;
					case 2: dwMul1 = 6;
						break;
					case 3: dwMul1 = 15;
						break;
					case 9: dwMul1 = 20;
						break;
					default: dwMul1 = 1;
						break;
				}
				d1 = (double) iPrice*dwMul1;
				switch (dwSWEValue) {
					case 1: d2 = 10.0f;
						break;
					case 2: d2 = 20.0f;
						break;
					case 3: d2 = 30.0f;
						break;
					case 4: d2 = 35.0f;
						break;
					case 5: d2 = 40.0f;
						break;
					case 6: d2 = 50.0f;
						break;
					case 7: d2 = 100.0f;
						break;
					case 8: d2 = 200.0f;
						break;
					case 9: d2 = 300.0f;
						break;
					case 10: d2 = 400.0f;
						break;
					case 11: d2 = 500.0f;
						break;
					case 12: d2 = 700.0f;
						break;
					case 13: d2 = 900.0f;
						break;
					default: d2 = 0.0f;
						break;
				}
				d3 = d1 * (d2 / 100.0f);
				dwAddPrice1 = (int) (d1 + d3);
			}
			if ((m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x0000F000) != 0) {
				dwSWEType = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x0000F000) >> 12;
				dwSWEValue = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwAttribute & 0x00000F00) >> 8;
				switch (dwSWEType) {
					case 1:
					case 12: dwMul2 = 2;
						break;
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7: dwMul2 = 4;
						break;
					case 8:
					case 9:
					case 10:
					case 11: dwMul2 = 6;
						break;
				}
				d1 = (double) iPrice*dwMul2;
				switch (dwSWEValue) {
					case 1: d2 = 10.0f;
						break;
					case 2: d2 = 20.0f;
						break;
					case 3: d2 = 30.0f;
						break;
					case 4: d2 = 35.0f;
						break;
					case 5: d2 = 40.0f;
						break;
					case 6: d2 = 50.0f;
						break;
					case 7: d2 = 100.0f;
						break;
					case 8: d2 = 200.0f;
						break;
					case 9: d2 = 300.0f;
						break;
					case 10: d2 = 400.0f;
						break;
					case 11: d2 = 500.0f;
						break;
					case 12: d2 = 700.0f;
						break;
					case 13: d2 = 900.0f;
						break;
					default: d2 = 0.0f;
						break;
				}
				d3 = d1 * (d2 / 100.0f);
				dwAddPrice2 = (int) (d1 + d3);
			}
			iPrice = iPrice + (dwAddPrice1 - (dwAddPrice1 / 3)) + (dwAddPrice2 - (dwAddPrice2 / 3));
			if (bNeutral == true) iPrice = iPrice / 2;
			if (iPrice <= 0) iPrice = 1;
			if (iPrice > 1000000) iPrice = 1000000; // New 06/05/2004
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMSOLD, cItemID, 0, 0, 0);
			_bItemLog(DEF_ITEMLOG_SELL, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[cItemID]);
			if ((m_pClientList[iClientH]->m_pItemList[cItemID]->m_cItemType == ItemType::consume) ||
					  (m_pClientList[iClientH]->m_pItemList[cItemID]->m_cItemType == ItemType::arrow)) {
				// v1.41 !!!
				SetItemCount(iClientH, cItemID, m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwCount - iNum);
			} else ItemDepleteHandler(iClientH, cItemID, false, false);
		}
	} else
		if ((cItemCategory >= 11) && (cItemCategory <= 50)) {
		iPrice = m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice / 2;
		iPrice = iPrice*iNum;
		if (bNeutral == true) iPrice = iPrice / 2;
		if (iPrice <= 0) iPrice = 1;
		if (iPrice > 1000000) iPrice = 1000000; // New 06/05/2004
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMSOLD, cItemID, 0, 0, 0);
		_bItemLog(DEF_ITEMLOG_SELL, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[cItemID]);
		if ((m_pClientList[iClientH]->m_pItemList[cItemID]->m_cItemType == ItemType::consume) ||
				  (m_pClientList[iClientH]->m_pItemList[cItemID]->m_cItemType == ItemType::arrow)) {
			// v1.41 !!!
			SetItemCount(iClientH, cItemID, m_pClientList[iClientH]->m_pItemList[cItemID]->m_dwCount - iNum);
		} else ItemDepleteHandler(iClientH, cItemID, false, true);
	}
	if (iPrice <= 0) return;
	pItemGold = new CItem;
	std::memset(cItemName, 0, sizeof(cItemName));
	wsprintf(cItemName, "Gold");
	_bInitItemAttr(pItemGold, cItemName);
	pItemGold->m_dwCount = iPrice;
	if (_bAddClientItemList(iClientH, pItemGold, &iEraseReq) == true) {
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_NOTIFY;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_NOTIFY_ITEMOBTAINED;
		cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
		*cp = 1;
		cp++;
		memcpy(cp, pItemGold->m_cName, 20);
		cp += 20;
		dwp = (uint32_t *) cp;
		*dwp = pItemGold->m_dwCount;
		cp += 4;
		*cp = (char) pItemGold->m_cItemType;
		cp++;
		*cp = (char) pItemGold->m_cEquipPos;
		cp++;
		*cp = (char) 0;
		cp++;
		sp = (short *) cp;
		*sp = pItemGold->m_sLevelLimit;
		cp += 2;
		*cp = pItemGold->m_cGenderLimit;
		cp++;
		wp = (uint16_t *) cp;
		*wp = pItemGold->m_wCurLifeSpan;
		cp += 2;
		wp = (uint16_t *) cp;
		*wp = pItemGold->m_wWeight;
		cp += 2;
		sp = (short *) cp;
		*sp = pItemGold->m_sSprite;
		cp += 2;
		sp = (short *) cp;
		*sp = pItemGold->m_sSpriteFrame;
		cp += 2;
		*cp = pItemGold->m_cItemColor;
		cp++;
		*cp = (char) pItemGold->m_sItemSpecEffectValue2; // v1.41
		cp++;
		dwp = (uint32_t *) cp;
		*dwp = pItemGold->m_dwAttribute;
		cp += 4;
		/*
		 *cp = (char)(pItemGold->m_dwAttribute & 0x00000001);
		cp++;
		 */
		if (iEraseReq == 1)
			delete pItemGold;
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
		iCalcTotalWeight(iClientH);
		switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
			case DEF_XSOCKEVENT_SOCKETCLOSED:
				DeleteClient(iClientH, true, true);
				break;
		}
	} else {
		m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
				  m_pClientList[iClientH]->m_sY, pItemGold);
		SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
				  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
				  pItemGold->m_sSprite, pItemGold->m_sSpriteFrame, pItemGold->m_cItemColor); // v1.4 color
		iCalcTotalWeight(iClientH);
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_NOTIFY;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
		switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
			case DEF_XSOCKEVENT_SOCKETCLOSED:
				DeleteClient(iClientH, true, true);
				return;
		}
	}
}

void CGame::ReqRepairItemHandler(int iClientH, char cItemID, char cRepairWhom, char * /*pString*/) {
	char cItemCategory;
	short sRemainLife;
	short sPrice;
	double d1;
	double d2;
	double d3;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((cItemID < 0) || (cItemID >= 50)) return;
	if (m_pClientList[iClientH]->m_pItemList[cItemID] == 0) return;
	cItemCategory = m_pClientList[iClientH]->m_pItemList[cItemID]->m_cCategory;
	if ((cItemCategory >= 1) && (cItemCategory <= 10)) {
		if (cRepairWhom != 24) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTREPAIRITEM, cItemID, 2, 0, m_pClientList[iClientH]->m_pItemList[cItemID]->m_cName);
			return;
		}
		sRemainLife = m_pClientList[iClientH]->m_pItemList[cItemID]->m_wCurLifeSpan;
		if (sRemainLife == 0) {
			sPrice = m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice / 2;
		} else {
			d1 = (double) sRemainLife;
			if (m_pClientList[iClientH]->m_pItemList[cItemID]->m_wMaxLifeSpan != 0)
				d2 = (double) m_pClientList[iClientH]->m_pItemList[cItemID]->m_wMaxLifeSpan;
			else d2 = 1.0f;
			d3 = (d1 / d2) * 0.5f;
			d2 = (double) m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice;
			d3 = d3 * d2;
			sPrice = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice / 2) - (short) d3;
		}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_REPAIRITEMPRICE, cItemID, sRemainLife, sPrice, m_pClientList[iClientH]->m_pItemList[cItemID]->m_cName);
	} else if (((cItemCategory >= 43) && (cItemCategory <= 50)) || ((cItemCategory >= 11) && (cItemCategory <= 12))) {
		if (cRepairWhom != 15) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTREPAIRITEM, cItemID, 2, 0, m_pClientList[iClientH]->m_pItemList[cItemID]->m_cName);
			return;
		}
		sRemainLife = m_pClientList[iClientH]->m_pItemList[cItemID]->m_wCurLifeSpan;
		if (sRemainLife == 0) {
			sPrice = m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice / 2;
		} else {
			d1 = (double) sRemainLife;
			if (m_pClientList[iClientH]->m_pItemList[cItemID]->m_wMaxLifeSpan != 0)
				d2 = (double) m_pClientList[iClientH]->m_pItemList[cItemID]->m_wMaxLifeSpan;
			else d2 = 1.0f;
			d3 = (d1 / d2) * 0.5f;
			d2 = (double) m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice;
			d3 = d3 * d2;
			sPrice = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice / 2) - (short) d3;
		}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_REPAIRITEMPRICE, cItemID, sRemainLife, sPrice, m_pClientList[iClientH]->m_pItemList[cItemID]->m_cName);
	} else {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTREPAIRITEM, cItemID, 1, 0, m_pClientList[iClientH]->m_pItemList[cItemID]->m_cName);
	}
}

void CGame::ReqRepairItemCofirmHandler(int iClientH, char cItemID, char */*pString*/) {
	short sRemainLife;
	short sPrice;
	char * cp, cItemCategory, cData[120];
	double d1;
	double d2;
	double d3;
	uint32_t * dwp, dwGoldCount;
	uint16_t * wp;
	int iRet;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if ((cItemID < 0) || (cItemID >= 50)) return;
	if (m_pClientList[iClientH]->m_pItemList[cItemID] == 0) return;
	// New 18/05/2004
	if (m_pClientList[iClientH]->m_pIsProcessingAllowed == false) return;
	//testcode
	//PutLogList("Repair!");
	cItemCategory = m_pClientList[iClientH]->m_pItemList[cItemID]->m_cCategory;
	if (((cItemCategory >= 1) && (cItemCategory <= 10)) || ((cItemCategory >= 43) && (cItemCategory <= 50)) ||
			  ((cItemCategory >= 11) && (cItemCategory <= 12))) {
		sRemainLife = m_pClientList[iClientH]->m_pItemList[cItemID]->m_wCurLifeSpan;
		if (sRemainLife == 0) {
			sPrice = m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice / 2;
		} else {
			d1 = (double) abs(sRemainLife);
			if (m_pClientList[iClientH]->m_pItemList[cItemID]->m_wMaxLifeSpan != 0)
				d2 = (double) abs(m_pClientList[iClientH]->m_pItemList[cItemID]->m_wMaxLifeSpan);
			else d2 = 1.0f;
			d3 = (d1 / d2) * 0.5f;
			d2 = (double) m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice;
			d3 = d3 * d2;
			sPrice = (m_pClientList[iClientH]->m_pItemList[cItemID]->m_wPrice / 2) - (short) d3;
		}
		dwGoldCount = dwGetItemCount(iClientH, "Gold");
		if (dwGoldCount < (uint32_t) sPrice) {
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_NOTENOUGHGOLD;
			cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
			*cp = cItemID;
			cp++;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 7);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					return;
			}
			return;
		} else {
			m_pClientList[iClientH]->m_pItemList[cItemID]->m_wCurLifeSpan = m_pClientList[iClientH]->m_pItemList[cItemID]->m_wMaxLifeSpan;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMREPAIRED, cItemID, m_pClientList[iClientH]->m_pItemList[cItemID]->m_wCurLifeSpan, 0, 0);
			SetItemCount(iClientH, "Gold", dwGoldCount - sPrice);
			iCalcTotalWeight(iClientH);
			m_stCityStatus[m_pClientList[iClientH]->m_cSide].iFunds += sPrice;
		}
	} else {
	}
}

int CGame::iCalcTotalWeight(int iClientH) {
	int i;
	int iWeight;
	short sItemIndex;
	if (m_pClientList[iClientH] == 0) return 0;
	m_pClientList[iClientH]->m_iAlterItemDropIndex = -1;
	for (sItemIndex = 0; sItemIndex < DEF_MAXITEMS; sItemIndex++)
		if (m_pClientList[iClientH]->m_pItemList[sItemIndex] != 0) {
			switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType) {
				case ItemEffectType::alteritemdrop:
					if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wCurLifeSpan > 0) {
						m_pClientList[iClientH]->m_iAlterItemDropIndex = sItemIndex;
					}
					break;
				default: break;
			}
		}
	iWeight = 0;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
			iWeight += iGetItemWeight(m_pClientList[iClientH]->m_pItemList[i], m_pClientList[iClientH]->m_pItemList[i]->m_dwCount);
		}
	m_pClientList[iClientH]->m_iCurWeightLoad = iWeight;
	return iWeight;
}

void CGame::CheckAndNotifyPlayerConnection(int iClientH, char * pMsg, uint32_t dwSize) {
	char seps[] = "= \t\n";
	char * token, * cp, cName[11], cBuff[256], cPlayerLocation[120];
	CStrTok * pStrTok;
	int i;
	uint16_t * wp;
	if (m_pClientList[iClientH] == 0) return;
	if (dwSize <= 0) return;
	std::memset(cPlayerLocation, 0, sizeof(cPlayerLocation));
	std::memset(cName, 0, sizeof(cName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pMsg, dwSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	if (strlen(token) > 10)
		memcpy(cName, token, 10);
	else memcpy(cName, token, strlen(token));
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (memcmp(cName, m_pClientList[i]->m_cCharName, 10) == 0)) {
			if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) { // GM's get more info
				cp = (char *) cPlayerLocation;
				memcpy(cp, m_pClientList[i]->m_cMapName, 10);
				cp += 10;
				wp = (uint16_t *) cp;
				*wp = m_pClientList[i]->m_sX;
				cp += 2;
				wp = (uint16_t *) cp;
				*wp = m_pClientList[i]->m_sY;
				cp += 2;
			}
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERONGAME, 0, 0, 0, m_pClientList[i]->m_cCharName, 0, 0, 0, 0, 0, 0, cPlayerLocation);
			delete pStrTok;
			return;
		}
	delete pStrTok;
}

void CGame::ToggleWhisperPlayer(int iClientH, char * pMsg, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cName[11], cBuff[256];
	CStrTok * pStrTok;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (dwMsgSize <= 0) return;
	std::memset(cName, 0, sizeof(cName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pMsg, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		m_pClientList[iClientH]->m_iWhisperPlayerIndex = -1;
		std::memset(m_pClientList[iClientH]->m_cWhisperPlayerName, 0, sizeof(m_pClientList[iClientH]->m_cWhisperPlayerName));
		// Whisper mode enabled
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_WHISPERMODEOFF, 0, 0, 0, cName);
	} else {
		if (strlen(token) > 10)
			memcpy(cName, token, 10);
		else memcpy(cName, token, strlen(token));
		m_pClientList[iClientH]->m_iWhisperPlayerIndex = -1;
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cName, 10) == 0)) {
				if (i == iClientH) {
					delete pStrTok;
					// Whisper self XenX
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "You shouldnt talk to yourself!");
					return;
				}
				m_pClientList[iClientH]->m_iWhisperPlayerIndex = i;
				std::memset(m_pClientList[iClientH]->m_cWhisperPlayerName, 0, sizeof(m_pClientList[iClientH]->m_cWhisperPlayerName));
				strcpy(m_pClientList[iClientH]->m_cWhisperPlayerName, cName);
				break;
			}
		if (m_pClientList[iClientH]->m_iWhisperPlayerIndex == -1) {
			//player not online XenX
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "This player is not online!");
		} else {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_WHISPERMODEON, 0, 0, 0, m_pClientList[iClientH]->m_cWhisperPlayerName);
			return;
		}
	}
	delete pStrTok;
}

void CGame::SetPlayerProfile(int iClientH, char * pMsg, uint32_t dwMsgSize) {
	char cTemp[256];
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize - 7) <= 0) return;
	std::memset(cTemp, 0, sizeof(cTemp));
	memcpy(cTemp, (pMsg + 7), dwMsgSize - 7);
	for (i = 0; i < 256; i++)
		if (cTemp[i] == ' ') cTemp[i] = '_';
	cTemp[255] = 0;
	std::memset(m_pClientList[iClientH]->m_cProfile, 0, sizeof(m_pClientList[iClientH]->m_cProfile));
	strcpy(m_pClientList[iClientH]->m_cProfile, cTemp);
}

void CGame::GetPlayerProfile(int iClientH, char * pMsg, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cName[11], cBuff[256], cBuff2[500];
	CStrTok * pStrTok;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	std::memset(cName, 0, sizeof(cName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pMsg, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (strlen(token) > 10)
			memcpy(cName, token, 10);
		else memcpy(cName, token, strlen(token));
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cName, 10) == 0)) {
				std::memset(cBuff2, 0, sizeof(cBuff2));
				wsprintf(cBuff2, "%s Profile: %s", cName, m_pClientList[i]->m_cProfile);
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERPROFILE, 0, 0, 0, cBuff2);
				delete pStrTok;
				return;
			}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERNOTONGAME, 0, 0, 0, cName);
	}
	delete pStrTok;
	return;
}

void CGame::___RestorePlayerCharacteristics(int iClientH) {
	int iStr;
	int iDex;
	int iInt;
	int iVit;
	int iMag;
	int iCharisma;
	int iOriginalPoint;
	int iCurPoint;
	int iVerifyPoint;
	int iToBeRestoredPoint;
	int iMax;
	int iA;
	int iB;
	bool bFlag;
	char cTxt[120];
	return;
	if (m_pClientList[iClientH] == 0) return;
	iStr = m_pClientList[iClientH]->m_iStr;
	iDex = m_pClientList[iClientH]->m_iDex;
	iInt = m_pClientList[iClientH]->m_iInt;
	iVit = m_pClientList[iClientH]->m_iVit;
	iMag = m_pClientList[iClientH]->m_iMag;
	iCharisma = m_pClientList[iClientH]->m_iCharisma;
	iCurPoint = m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iInt +
			  m_pClientList[iClientH]->m_iVit + m_pClientList[iClientH]->m_iDex +
			  m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iCharisma;
	iOriginalPoint = (m_pClientList[iClientH]->m_iLevel - 1)*3 + 70;
	iToBeRestoredPoint = iOriginalPoint - iCurPoint;
	if (iToBeRestoredPoint == 0) return;
	if (iToBeRestoredPoint > 0) {
		while (1) {
			bFlag = false;
			if ((iToBeRestoredPoint > 0) && (m_pClientList[iClientH]->m_iStr < 10)) {
				m_pClientList[iClientH]->m_iStr++;
				iToBeRestoredPoint--;
				bFlag = true;
			}
			if ((iToBeRestoredPoint > 0) && (m_pClientList[iClientH]->m_iMag < 10)) {
				m_pClientList[iClientH]->m_iMag++;
				iToBeRestoredPoint--;
				bFlag = true;
			}
			if ((iToBeRestoredPoint > 0) && (m_pClientList[iClientH]->m_iInt < 10)) {
				m_pClientList[iClientH]->m_iInt++;
				iToBeRestoredPoint--;
				bFlag = true;
			}
			if ((iToBeRestoredPoint > 0) && (m_pClientList[iClientH]->m_iDex < 10)) {
				m_pClientList[iClientH]->m_iDex++;
				iToBeRestoredPoint--;
				bFlag = true;
			}
			if ((iToBeRestoredPoint > 0) && (m_pClientList[iClientH]->m_iVit < 10)) {
				m_pClientList[iClientH]->m_iVit++;
				iToBeRestoredPoint--;
				bFlag = true;
			}
			if ((iToBeRestoredPoint > 0) && (m_pClientList[iClientH]->m_iCharisma < 10)) {
				m_pClientList[iClientH]->m_iCharisma++;
				iToBeRestoredPoint--;
				bFlag = true;
			}
			if (bFlag == false) break;
			if (iToBeRestoredPoint <= 0) break;
		}
		iMax = m_pClientList[iClientH]->m_cSkillMastery[5];
		if (m_pClientList[iClientH]->m_iStr < (iMax / 2)) {
			while (1) {
				if ((iToBeRestoredPoint > 0) && (m_pClientList[iClientH]->m_iStr < (iMax / 2))) {
					m_pClientList[iClientH]->m_iStr++;
					iToBeRestoredPoint--;
				}
				if (m_pClientList[iClientH]->m_iStr == (iMax / 2)) break;
				if (iToBeRestoredPoint <= 0) break;
			}
		}
		iA = m_pClientList[iClientH]->m_cSkillMastery[7];
		iB = m_pClientList[iClientH]->m_cSkillMastery[8];
		if (iA > iB)
			iMax = iA;
		else iMax = iB;
		iA = m_pClientList[iClientH]->m_cSkillMastery[9];
		if (iA > iMax) iMax = iA;
		iA = m_pClientList[iClientH]->m_cSkillMastery[6];
		if (iA > iMax) iMax = iA;
		if (m_pClientList[iClientH]->m_iDex < (iMax / 2)) {
			while (1) {
				if ((iToBeRestoredPoint > 0) && (m_pClientList[iClientH]->m_iDex < (iMax / 2))) {
					m_pClientList[iClientH]->m_iDex++;
					iToBeRestoredPoint--;
				}
				if (m_pClientList[iClientH]->m_iDex == (iMax / 2)) break;
				if (iToBeRestoredPoint <= 0) break;
			}
		}
		iMax = m_pClientList[iClientH]->m_cSkillMastery[19];
		if (m_pClientList[iClientH]->m_iInt < (iMax / 2)) {
			while (1) {
				if ((iToBeRestoredPoint > 0) && (m_pClientList[iClientH]->m_iInt < (iMax / 2))) {
					m_pClientList[iClientH]->m_iInt++;
					iToBeRestoredPoint--;
				}
				if (m_pClientList[iClientH]->m_iInt == (iMax / 2)) break;
				if (iToBeRestoredPoint <= 0) break;
			}
		}
		iA = m_pClientList[iClientH]->m_cSkillMastery[3];
		iB = m_pClientList[iClientH]->m_cSkillMastery[4];
		if (iA > iB)
			iMax = iA;
		else iMax = iB;
		if (m_pClientList[iClientH]->m_iMag < (iMax / 2)) {
			while (1) {
				if ((iToBeRestoredPoint > 0) && (m_pClientList[iClientH]->m_iMag < (iMax / 2))) {
					m_pClientList[iClientH]->m_iMag++;
					iToBeRestoredPoint--;
				}
				if (m_pClientList[iClientH]->m_iMag == (iMax / 2)) break;
				if (iToBeRestoredPoint <= 0) break;
			}
		}
		while (iToBeRestoredPoint != 0) {
			switch (iDice(1, 6)) {
				case 1:
					if (m_pClientList[iClientH]->m_iStr < DEF_CHARPOINTLIMIT) {
						m_pClientList[iClientH]->m_iStr++;
						iToBeRestoredPoint--;
					}
					break;
				case 2:
					if (m_pClientList[iClientH]->m_iVit < DEF_CHARPOINTLIMIT) {
						m_pClientList[iClientH]->m_iVit++;
						iToBeRestoredPoint--;
					}
					break;
				case 3:
					if (m_pClientList[iClientH]->m_iDex < DEF_CHARPOINTLIMIT) {
						m_pClientList[iClientH]->m_iDex++;
						iToBeRestoredPoint--;
					}
					break;
				case 4:
					if (m_pClientList[iClientH]->m_iMag < DEF_CHARPOINTLIMIT) {
						m_pClientList[iClientH]->m_iMag++;
						iToBeRestoredPoint--;
					}
					break;
				case 5:
					if (m_pClientList[iClientH]->m_iInt < DEF_CHARPOINTLIMIT) {
						m_pClientList[iClientH]->m_iInt++;
						iToBeRestoredPoint--;
					}
					break;
				case 6:
					if (m_pClientList[iClientH]->m_iCharisma < DEF_CHARPOINTLIMIT) {
						m_pClientList[iClientH]->m_iCharisma++;
						iToBeRestoredPoint--;
					}
					break;
			}
		}
		iVerifyPoint = m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iInt +
				  m_pClientList[iClientH]->m_iVit + m_pClientList[iClientH]->m_iDex +
				  m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iCharisma;
		if (iVerifyPoint != iOriginalPoint) {
			wsprintf(cTxt, "(T_T) RestorePlayerCharacteristics(Minor) FAIL! Player(%s)-(%d/%d)", m_pClientList[iClientH]->m_cCharName, iVerifyPoint, iOriginalPoint);
			PutLogList(cTxt);
			m_pClientList[iClientH]->m_iStr = iStr;
			m_pClientList[iClientH]->m_iDex = iDex;
			m_pClientList[iClientH]->m_iInt = iInt;
			m_pClientList[iClientH]->m_iVit = iVit;
			m_pClientList[iClientH]->m_iMag = iMag;
			m_pClientList[iClientH]->m_iCharisma = iCharisma;
		} else {
			wsprintf(cTxt, "(^o^) RestorePlayerCharacteristics(Minor) SUCCESS! Player(%s)-(%d/%d)", m_pClientList[iClientH]->m_cCharName, iVerifyPoint, iOriginalPoint);
			PutLogList(cTxt);
		}
	} else {
		while (1) {
			bFlag = false;
			if (m_pClientList[iClientH]->m_iStr > DEF_CHARPOINTLIMIT) {
				bFlag = true;
				m_pClientList[iClientH]->m_iStr--;
				iToBeRestoredPoint++;
			}
			if (m_pClientList[iClientH]->m_iDex > DEF_CHARPOINTLIMIT) {
				bFlag = true;
				m_pClientList[iClientH]->m_iDex--;
				iToBeRestoredPoint++;
			}
			if (m_pClientList[iClientH]->m_iVit > DEF_CHARPOINTLIMIT) {
				bFlag = true;
				m_pClientList[iClientH]->m_iVit--;
				iToBeRestoredPoint++;
			}
			if (m_pClientList[iClientH]->m_iInt > DEF_CHARPOINTLIMIT) {
				bFlag = true;
				m_pClientList[iClientH]->m_iInt--;
				iToBeRestoredPoint++;
			}
			if (m_pClientList[iClientH]->m_iMag > DEF_CHARPOINTLIMIT) {
				bFlag = true;
				m_pClientList[iClientH]->m_iMag--;
				iToBeRestoredPoint++;
			}
			if (m_pClientList[iClientH]->m_iCharisma > DEF_CHARPOINTLIMIT) {
				bFlag = true;
				m_pClientList[iClientH]->m_iCharisma--;
				iToBeRestoredPoint++;
			}
			if (bFlag == false) break;
			if (iToBeRestoredPoint >= 0) break;
		}
		if (iToBeRestoredPoint < 0) {
			while (iToBeRestoredPoint != 0) {
				switch (iDice(1, 6)) {
					case 1:
						if (m_pClientList[iClientH]->m_iStr > 10) {
							m_pClientList[iClientH]->m_iStr--;
							iToBeRestoredPoint++;
						}
						break;
					case 2:
						if (m_pClientList[iClientH]->m_iVit > 10) {
							m_pClientList[iClientH]->m_iVit--;
							iToBeRestoredPoint++;
						}
						break;
					case 3:
						if (m_pClientList[iClientH]->m_iDex > 10) {
							m_pClientList[iClientH]->m_iDex--;
							iToBeRestoredPoint++;
						}
						break;
					case 4:
						if (m_pClientList[iClientH]->m_iMag > 10) {
							m_pClientList[iClientH]->m_iMag--;
							iToBeRestoredPoint++;
						}
						break;
					case 5:
						if (m_pClientList[iClientH]->m_iInt > 10) {
							m_pClientList[iClientH]->m_iInt--;
							iToBeRestoredPoint++;
						}
						break;
					case 6:
						if (m_pClientList[iClientH]->m_iCharisma > 10) {
							m_pClientList[iClientH]->m_iCharisma--;
							iToBeRestoredPoint++;
						}
						break;
				}
			}
		} else {
			while (iToBeRestoredPoint != 0) {
				switch (iDice(1, 6)) {
					case 1:
						if (m_pClientList[iClientH]->m_iStr < DEF_CHARPOINTLIMIT) {
							m_pClientList[iClientH]->m_iStr++;
							iToBeRestoredPoint--;
						}
						break;
					case 2:
						if (m_pClientList[iClientH]->m_iVit < DEF_CHARPOINTLIMIT) {
							m_pClientList[iClientH]->m_iVit++;
							iToBeRestoredPoint--;
						}
						break;
					case 3:
						if (m_pClientList[iClientH]->m_iDex < DEF_CHARPOINTLIMIT) {
							m_pClientList[iClientH]->m_iDex++;
							iToBeRestoredPoint--;
						}
						break;
					case 4:
						if (m_pClientList[iClientH]->m_iMag < DEF_CHARPOINTLIMIT) {
							m_pClientList[iClientH]->m_iMag++;
							iToBeRestoredPoint--;
						}
						break;
					case 5:
						if (m_pClientList[iClientH]->m_iInt < DEF_CHARPOINTLIMIT) {
							m_pClientList[iClientH]->m_iInt++;
							iToBeRestoredPoint--;
						}
						break;
					case 6:
						if (m_pClientList[iClientH]->m_iCharisma < DEF_CHARPOINTLIMIT) {
							m_pClientList[iClientH]->m_iCharisma++;
							iToBeRestoredPoint--;
						}
						break;
				}
			}
		}
		iVerifyPoint = m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iInt +
				  m_pClientList[iClientH]->m_iVit + m_pClientList[iClientH]->m_iDex +
				  m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iCharisma;
		if (iVerifyPoint != iOriginalPoint) {
			wsprintf(cTxt, "(T_T) RestorePlayerCharacteristics(Over) FAIL! Player(%s)-(%d/%d)", m_pClientList[iClientH]->m_cCharName, iVerifyPoint, iOriginalPoint);
			PutLogList(cTxt);
			/*
			m_pClientList[iClientH]->m_iStr = iStr;
			m_pClientList[iClientH]->m_iDex = iDex;
			m_pClientList[iClientH]->m_iInt = iInt;
			m_pClientList[iClientH]->m_iVit = iVit;
			m_pClientList[iClientH]->m_iMag = iMag;
			m_pClientList[iClientH]->m_iCharisma = iCharisma;
			 */
		} else {
			wsprintf(cTxt, "(^o^) RestorePlayerCharacteristics(Over) SUCCESS! Player(%s)-(%d/%d)", m_pClientList[iClientH]->m_cCharName, iVerifyPoint, iOriginalPoint);
			PutLogList(cTxt);
		}
	}
}

void CGame::CalcTotalItemEffect(int iClientH, int iEquipItemID, bool bNotify) {
	short sItemIndex;
	int iPrevSAType;
	int iTemp;
	ItemEquipPos cEquipPos;
	double dV1;
	double dV2;
	double dV3;
	uint32_t dwSWEType;
	uint32_t dwSWEValue;
	short sTemp;
	if (m_pClientList[iClientH] == 0) return;
	if ((m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::rhand] != -1) &&
			  (m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::twohand] != -1)) {
		if (m_pClientList[iClientH]->m_pItemList[ m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::rhand] ] != 0) {
			m_pClientList[iClientH]->m_bIsItemEquipped[m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::rhand]] = false;
			m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::rhand] = -1;
		}
	}
	m_pClientList[iClientH]->m_iAngelicStr = 0; // By Snoopy81
	m_pClientList[iClientH]->m_iAngelicInt = 0; // By Snoopy81
	m_pClientList[iClientH]->m_iAngelicDex = 0; // By Snoopy81
	m_pClientList[iClientH]->m_iAngelicMag = 0; // By Snoopy81
	SetAngelFlag(iClientH, DEF_OWNERTYPE_PLAYER, 0, 0);
	m_pClientList[iClientH]->m_cAttackDiceThrow_SM = 0;
	m_pClientList[iClientH]->m_cAttackDiceRange_SM = 0;
	m_pClientList[iClientH]->m_cAttackBonus_SM = 0;
	m_pClientList[iClientH]->m_cAttackDiceThrow_L = 0;
	m_pClientList[iClientH]->m_cAttackDiceRange_L = 0;
	m_pClientList[iClientH]->m_cAttackBonus_L = 0;
	m_pClientList[iClientH]->m_iHitRatio = 0;
	m_pClientList[iClientH]->m_iDefenseRatio = m_pClientList[iClientH]->m_iDex * 2;
	m_pClientList[iClientH]->m_iDamageAbsorption_Shield = 0;
	m_pClientList[iClientH]->m_iDamageAbsorption_Armor.clear();
	m_pClientList[iClientH]->m_iManaSaveRatio = 0;
	m_pClientList[iClientH]->m_iAddResistMagic = 0;
	m_pClientList[iClientH]->m_iAddPhysicalDamage = 0;
	m_pClientList[iClientH]->m_iAddMagicalDamage = 0;
	m_pClientList[iClientH]->m_bIsLuckyEffect = false;
	m_pClientList[iClientH]->m_iMagicDamageSaveItemIndex = -1;
	m_pClientList[iClientH]->m_iSideEffect_MaxHPdown = 0;
	m_pClientList[iClientH]->m_iAddAbsAir = 0;
	m_pClientList[iClientH]->m_iAddAbsEarth = 0;
	m_pClientList[iClientH]->m_iAddAbsFire = 0;
	m_pClientList[iClientH]->m_iAddAbsWater = 0;
	m_pClientList[iClientH]->m_iCustomItemValue_Attack = 0;
	m_pClientList[iClientH]->m_iCustomItemValue_Defense = 0;
	m_pClientList[iClientH]->m_iMinAP_SM = 0;
	m_pClientList[iClientH]->m_iMinAP_L = 0;
	m_pClientList[iClientH]->m_iMaxAP_SM = 0;
	m_pClientList[iClientH]->m_iMaxAP_L = 0;
	m_pClientList[iClientH]->m_iSpecialWeaponEffectType = 0;
	m_pClientList[iClientH]->m_iSpecialWeaponEffectValue = 0;
	m_pClientList[iClientH]->m_iAddHP = m_pClientList[iClientH]->m_iAddSP = m_pClientList[iClientH]->m_iAddMP = 0;
	m_pClientList[iClientH]->m_iAddAR = m_pClientList[iClientH]->m_iAddPR = m_pClientList[iClientH]->m_iAddDR = 0;
	m_pClientList[iClientH]->m_iAddMR = m_pClientList[iClientH]->m_iAddAbsPD = m_pClientList[iClientH]->m_iAddAbsMD = 0;
	m_pClientList[iClientH]->m_iAddCD = m_pClientList[iClientH]->m_iAddExp = m_pClientList[iClientH]->m_iAddGold = 0;
	iPrevSAType = m_pClientList[iClientH]->m_iSpecialAbilityType;
	m_pClientList[iClientH]->m_iSpecialAbilityType = 0;
	m_pClientList[iClientH]->m_iSpecialAbilityLastSec = 0;
	m_pClientList[iClientH]->m_iSpecialAbilityEquipPos = ItemEquipPos::none;
	m_pClientList[iClientH]->m_iAddTransMana = 0;
	m_pClientList[iClientH]->m_iAddChargeCritical = 0;
	m_pClientList[iClientH]->m_iAlterItemDropIndex = -1;
	for (sItemIndex = 0; sItemIndex < DEF_MAXITEMS; sItemIndex++)
		if (m_pClientList[iClientH]->m_pItemList[sItemIndex] != 0) {
			switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType) {
				case ItemEffectType::alteritemdrop:
					if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wCurLifeSpan > 0) {
						m_pClientList[iClientH]->m_iAlterItemDropIndex = sItemIndex;
					}
					break;
				default: break;
			}
		}
	for (sItemIndex = 0; sItemIndex < DEF_MAXITEMS; sItemIndex++)
		if ((m_pClientList[iClientH]->m_pItemList[sItemIndex] != 0) &&
				  (m_pClientList[iClientH]->m_bIsItemEquipped[sItemIndex] == true)) {
			cEquipPos = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos;
			switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType) {
				case ItemEffectType::magicdamagesave:
					m_pClientList[iClientH]->m_iMagicDamageSaveItemIndex = sItemIndex;
					break;
				case ItemEffectType::attack_specablty:
				case ItemEffectType::attack_defense:
				case ItemEffectType::attack_manasave:
				case ItemEffectType::attack_maxhpdown:
				case ItemEffectType::attack:
					m_pClientList[iClientH]->m_cAttackDiceThrow_SM = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
					m_pClientList[iClientH]->m_cAttackDiceRange_SM = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
					m_pClientList[iClientH]->m_cAttackBonus_SM = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue3;
					m_pClientList[iClientH]->m_cAttackDiceThrow_L = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue4;
					m_pClientList[iClientH]->m_cAttackDiceRange_L = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue5;
					m_pClientList[iClientH]->m_cAttackBonus_L = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue6;
					iTemp = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0xF0000000) >> 28;
					//testcode
					//wsprintf(G_cTxt, "Add Damage: %d", iTemp);
					//PutLogList(G_cTxt);
					m_pClientList[iClientH]->m_iAddPhysicalDamage += iTemp;
					m_pClientList[iClientH]->m_iAddMagicalDamage += iTemp;
					m_pClientList[iClientH]->m_iHitRatio += m_pClientList[iClientH]->m_cSkillMastery[ m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sRelatedSkill ];
					//m_pClientList[iClientH]->m_iHitRatio_ItemEffect_SM += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSM_HitRatio;
					//m_pClientList[iClientH]->m_iHitRatio_ItemEffect_L  += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sL_HitRatio;
					m_pClientList[iClientH]->m_sUsingWeaponSkill = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sRelatedSkill;
					if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x00000001) != 0) {
						m_pClientList[iClientH]->m_iCustomItemValue_Attack += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2;
						if (m_pClientList[iClientH]->m_iCustomItemValue_Attack > 100)
							m_pClientList[iClientH]->m_iCustomItemValue_Attack = 100;
						if (m_pClientList[iClientH]->m_iCustomItemValue_Attack < -100)
							m_pClientList[iClientH]->m_iCustomItemValue_Attack = -100;
						if (m_pClientList[iClientH]->m_iCustomItemValue_Attack > 0) {
							dV2 = (double) m_pClientList[iClientH]->m_iCustomItemValue_Attack;
							dV1 = (dV2 / 100.0f)*(5.0f);
							m_pClientList[iClientH]->m_iMinAP_SM = m_pClientList[iClientH]->m_cAttackDiceThrow_SM +
									  m_pClientList[iClientH]->m_cAttackBonus_SM + (int) dV1;
							m_pClientList[iClientH]->m_iMinAP_L = m_pClientList[iClientH]->m_cAttackDiceThrow_L +
									  m_pClientList[iClientH]->m_cAttackBonus_L + (int) dV1;
							if (m_pClientList[iClientH]->m_iMinAP_SM < 1) m_pClientList[iClientH]->m_iMinAP_SM = 1;
							if (m_pClientList[iClientH]->m_iMinAP_L < 1) m_pClientList[iClientH]->m_iMinAP_L = 1;
							if (m_pClientList[iClientH]->m_iMinAP_SM > (m_pClientList[iClientH]->m_cAttackDiceThrow_SM * m_pClientList[iClientH]->m_cAttackDiceRange_SM + m_pClientList[iClientH]->m_cAttackBonus_SM))
								m_pClientList[iClientH]->m_iMinAP_SM = (m_pClientList[iClientH]->m_cAttackDiceThrow_SM * m_pClientList[iClientH]->m_cAttackDiceRange_SM + m_pClientList[iClientH]->m_cAttackBonus_SM);
							if (m_pClientList[iClientH]->m_iMinAP_L > (m_pClientList[iClientH]->m_cAttackDiceThrow_L * m_pClientList[iClientH]->m_cAttackDiceRange_L + m_pClientList[iClientH]->m_cAttackBonus_L))
								m_pClientList[iClientH]->m_iMinAP_L = (m_pClientList[iClientH]->m_cAttackDiceThrow_L * m_pClientList[iClientH]->m_cAttackDiceRange_L + m_pClientList[iClientH]->m_cAttackBonus_L);
							//testcode
							//wsprintf(G_cTxt, "MinAP: %d %d +(%d)", m_pClientList[iClientH]->m_iMinAP_SM, m_pClientList[iClientH]->m_iMinAP_L, (int)dV1);
							//PutLogList(G_cTxt);
						} else if (m_pClientList[iClientH]->m_iCustomItemValue_Attack < 0) {
							dV2 = (double) m_pClientList[iClientH]->m_iCustomItemValue_Attack;
							dV1 = (dV2 / 100.0f)*(5.0f);
							m_pClientList[iClientH]->m_iMaxAP_SM = m_pClientList[iClientH]->m_cAttackDiceThrow_SM * m_pClientList[iClientH]->m_cAttackDiceRange_SM
									  + m_pClientList[iClientH]->m_cAttackBonus_SM + (int) dV1;
							m_pClientList[iClientH]->m_iMaxAP_L = m_pClientList[iClientH]->m_cAttackDiceThrow_L * m_pClientList[iClientH]->m_cAttackDiceRange_L
									  + m_pClientList[iClientH]->m_cAttackBonus_L + (int) dV1;
							if (m_pClientList[iClientH]->m_iMaxAP_SM < 1) m_pClientList[iClientH]->m_iMaxAP_SM = 1;
							if (m_pClientList[iClientH]->m_iMaxAP_L < 1) m_pClientList[iClientH]->m_iMaxAP_L = 1;
							if (m_pClientList[iClientH]->m_iMaxAP_SM < (m_pClientList[iClientH]->m_cAttackDiceThrow_SM * m_pClientList[iClientH]->m_cAttackDiceRange_SM + m_pClientList[iClientH]->m_cAttackBonus_SM))
								m_pClientList[iClientH]->m_iMaxAP_SM = (m_pClientList[iClientH]->m_cAttackDiceThrow_SM * m_pClientList[iClientH]->m_cAttackDiceRange_SM + m_pClientList[iClientH]->m_cAttackBonus_SM);
							if (m_pClientList[iClientH]->m_iMaxAP_L < (m_pClientList[iClientH]->m_cAttackDiceThrow_L * m_pClientList[iClientH]->m_cAttackDiceRange_L + m_pClientList[iClientH]->m_cAttackBonus_L))
								m_pClientList[iClientH]->m_iMaxAP_L = (m_pClientList[iClientH]->m_cAttackDiceThrow_L * m_pClientList[iClientH]->m_cAttackDiceRange_L + m_pClientList[iClientH]->m_cAttackBonus_L);
							//testcode
							//wsprintf(G_cTxt, "MaxAP: %d %d +(%d)", m_pClientList[iClientH]->m_iMaxAP_SM, m_pClientList[iClientH]->m_iMaxAP_L, (int)dV1);
							//PutLogList(G_cTxt);
						}
					}
					if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x00F00000) != 0) {
						dwSWEType = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x00F00000) >> 20;
						dwSWEValue = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x000F0000) >> 16;
						m_pClientList[iClientH]->m_iSpecialWeaponEffectType = (int) dwSWEType;
						m_pClientList[iClientH]->m_iSpecialWeaponEffectValue = (int) dwSWEValue;
						switch (dwSWEType) {
							case 7:
								m_pClientList[iClientH]->m_cAttackDiceRange_SM++;
								m_pClientList[iClientH]->m_cAttackDiceRange_L++;
								break;
							case 9:
								m_pClientList[iClientH]->m_cAttackDiceRange_SM += 2;
								m_pClientList[iClientH]->m_cAttackDiceRange_L += 2;
								break;
						}
					}
					if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x0000F000) != 0) {
						dwSWEType = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x0000F000) >> 12;
						dwSWEValue = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x00000F00) >> 8;
						switch (dwSWEType) {
							case 0: break;
							case 1: m_pClientList[iClientH]->m_iAddPR += (int) dwSWEValue * 7;
								break;
							case 2: m_pClientList[iClientH]->m_iAddAR += (int) dwSWEValue * 7;
								break;
							case 3: m_pClientList[iClientH]->m_iAddDR += (int) dwSWEValue * 7;
								break;
							case 4: m_pClientList[iClientH]->m_iAddHP += (int) dwSWEValue * 7;
								break;
							case 5: m_pClientList[iClientH]->m_iAddSP += (int) dwSWEValue * 7;
								break;
							case 6: m_pClientList[iClientH]->m_iAddMP += (int) dwSWEValue * 7;
								break;
							case 7: m_pClientList[iClientH]->m_iAddMR += (int) dwSWEValue * 7;
								break;
						 //case 8: m_pClientList[iClientH]->m_iDamageAbsorption_Armor[m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos] += (int)dwSWEValue*3; break;
						
							case 8: m_pClientList[iClientH]->m_iAddAbsPD += (int) dwSWEValue * 3;
								break;
							case 9: m_pClientList[iClientH]->m_iAddAbsMD += (int) dwSWEValue * 3;
								break;
							case 10: m_pClientList[iClientH]->m_iAddCD += (int) dwSWEValue;
								break;
							case 11: m_pClientList[iClientH]->m_iAddExp += (int) dwSWEValue * 10;
								break;
							case 12: m_pClientList[iClientH]->m_iAddGold += (int) dwSWEValue * 10;
								break;
						}
						switch (dwSWEType) {
								// PA Fixed by KahBur.
							case 8: if (m_pClientList[iClientH]->m_iAddAbsPD > 80) m_pClientList[iClientH]->m_iAddAbsPD = 80;
								break;
							case 9: if (m_pClientList[iClientH]->m_iAddAbsMD > 80) m_pClientList[iClientH]->m_iAddAbsMD = 80;
								break;
						}
						switch (dwSWEType) {
							case 9: if (m_pClientList[iClientH]->m_iAddAbsMD > 80) m_pClientList[iClientH]->m_iAddAbsMD = 80;
								break;
						}
					}
					switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType) {
						case ItemEffectType::attack_maxhpdown:
							m_pClientList[iClientH]->m_iSideEffect_MaxHPdown = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpecialEffect;
							break;
						case ItemEffectType::attack_manasave:
							m_pClientList[iClientH]->m_iManaSaveRatio += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue4;
							if (m_pClientList[iClientH]->m_iManaSaveRatio > 80) m_pClientList[iClientH]->m_iManaSaveRatio = 80;
							break;
						case ItemEffectType::attack_defense:
							m_pClientList[iClientH]->m_iDamageAbsorption_Armor[ItemEquipPos::body] += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpecialEffect;
							break;
						case ItemEffectType::attack_specablty:
							m_pClientList[iClientH]->m_iSpecialAbilityType = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpecialEffect;
							m_pClientList[iClientH]->m_iSpecialAbilityLastSec = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpecialEffectValue1;
							m_pClientList[iClientH]->m_iSpecialAbilityEquipPos = cEquipPos;
							if ((bNotify == true) && (iEquipItemID == (int) sItemIndex))
								SendNotifyMsg(0, iClientH, DEF_NOTIFY_SPECIALABILITYSTATUS, 2, m_pClientList[iClientH]->m_iSpecialAbilityType, m_pClientList[iClientH]->m_iSpecialAbilityTime, 0);
							break;
						default: break;
					}
					break;
				case ItemEffectType::addeffect:
					switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1) {
						case 1:
							m_pClientList[iClientH]->m_iAddResistMagic += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
							break;
						case 2:
							m_pClientList[iClientH]->m_iManaSaveRatio += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
							if (m_pClientList[iClientH]->m_iManaSaveRatio > 80) m_pClientList[iClientH]->m_iManaSaveRatio = 80;
							break;
						case 3:
							m_pClientList[iClientH]->m_iAddPhysicalDamage += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
							break;
						case 4:
							m_pClientList[iClientH]->m_iDefenseRatio += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
							break;
						case 5:
							if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2 != 0)
								m_pClientList[iClientH]->m_bIsLuckyEffect = true;
							else m_pClientList[iClientH]->m_bIsLuckyEffect = false;
							break;
						case 6:
							m_pClientList[iClientH]->m_iAddMagicalDamage += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
							break;
						case 7:
							m_pClientList[iClientH]->m_iAddAbsAir += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
							break;
						case 8:
							m_pClientList[iClientH]->m_iAddAbsEarth += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
							break;
						case 9:
							m_pClientList[iClientH]->m_iAddAbsFire += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
							break;
						case 10:
							m_pClientList[iClientH]->m_iAddAbsWater += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
							break;
						case 11:
							m_pClientList[iClientH]->m_iAddPR += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
							break;
						case 12: // Adds To Hit Bonus (Xelima Neck)
							m_pClientList[iClientH]->m_iHitRatio += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
							break;
						case 13: // Magin Ruby		Characters Hp recovery rate(% applied) added by the purity formula.
							m_pClientList[iClientH]->m_iAddHP += (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2 / 5);
							break;
						case 14: // Magin Diamond	Attack probability(physical&magic) added by the purity formula.
							m_pClientList[iClientH]->m_iAddAR += (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2 / 5);
							break;
						case 15: // Magin Emerald	Magical damage decreased(% applied) by the purity formula.
							m_pClientList[iClientH]->m_iAddAbsMD += (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2 / 10);
							if (m_pClientList[iClientH]->m_iAddAbsMD > 80) m_pClientList[iClientH]->m_iAddAbsMD = 80;
							break;
						case 30: // Magin Sapphire	Phisical damage decreased(% applied) by the purity formula.
							iTemp = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2 / 10);
							m_pClientList[iClientH]->m_iDamageAbsorption_Armor[ItemEquipPos::head] += iTemp;
							m_pClientList[iClientH]->m_iDamageAbsorption_Armor[ItemEquipPos::body] += iTemp;
							m_pClientList[iClientH]->m_iDamageAbsorption_Armor[ItemEquipPos::arms] += iTemp;
							m_pClientList[iClientH]->m_iDamageAbsorption_Armor[ItemEquipPos::pants] += iTemp;
							break;
							/*Functions rates confirm.
							Magic Diamond: Completion rate / 5 = Functions rate. ? Maximum 20. (not%)
							Magic Ruby: Completion rate / 5 = Functions rate.(%) ? Maximum 20%.
							Magic Emerald: Completion rate / 10 = Functions rate.(%) ? Maximum 10%.
							Magic Sapphire: Completion rate / 10 = Functions rate.(%) ? Maximum 10%.*/
							// ******* Angel Code - Begin ******* //
						case 16: // Angel STR//AngelicPandent(STR)
							iTemp = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0xF0000000) >> 28;
							m_pClientList[iClientH]->m_iAngelicStr = iTemp;
							SetAngelFlag(iClientH, DEF_OWNERTYPE_PLAYER, 1, iTemp);
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SETTING_SUCCESS, 0, 0, 0, 0);
							break;
						case 17: // Angel DEX //AngelicPandent(DEX)
							iTemp = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0xF0000000) >> 28;
							m_pClientList[iClientH]->m_iAngelicDex = iTemp;
							SetAngelFlag(iClientH, DEF_OWNERTYPE_PLAYER, 2, iTemp);
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SETTING_SUCCESS, 0, 0, 0, 0);
							break;
						case 18: // Angel INT//AngelicPandent(INT)
							iTemp = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0xF0000000) >> 28;
							m_pClientList[iClientH]->m_iAngelicInt = iTemp;
							SetAngelFlag(iClientH, DEF_OWNERTYPE_PLAYER, 3, iTemp);
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SETTING_SUCCESS, 0, 0, 0, 0);
							break;
						case 19: // Angel MAG//AngelicPandent(MAG)
							iTemp = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0xF0000000) >> 28;
							m_pClientList[iClientH]->m_iAngelicMag = iTemp;
							SetAngelFlag(iClientH, DEF_OWNERTYPE_PLAYER, 4, iTemp);
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_SETTING_SUCCESS, 0, 0, 0, 0);
							break;
					}
					break;
				case ItemEffectType::attack_arrow:
					if ((m_pClientList[iClientH]->m_cArrowIndex != -1) &&
							  (m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cArrowIndex] == 0)) {
						m_pClientList[iClientH]->m_cArrowIndex = _iGetArrowItemIndex(iClientH);
					} else if (m_pClientList[iClientH]->m_cArrowIndex == -1)
						m_pClientList[iClientH]->m_cArrowIndex = _iGetArrowItemIndex(iClientH);
					if (m_pClientList[iClientH]->m_cArrowIndex == -1) {
						m_pClientList[iClientH]->m_cAttackDiceThrow_SM = 0;
						m_pClientList[iClientH]->m_cAttackDiceRange_SM = 0;
						m_pClientList[iClientH]->m_cAttackBonus_SM = 0;
						m_pClientList[iClientH]->m_cAttackDiceThrow_L = 0;
						m_pClientList[iClientH]->m_cAttackDiceRange_L = 0;
						m_pClientList[iClientH]->m_cAttackBonus_L = 0;
					} else {
						
						/*
						int iArrowIndex = m_pClientList[iClientH]->m_cArrowIndex;
						m_pClientList[iClientH]->m_cAttackDiceThrow_SM = m_pClientList[iClientH]->m_pItemList[iArrowIndex]->m_sItemEffectValue1;
						m_pClientList[iClientH]->m_cAttackDiceRange_SM = m_pClientList[iClientH]->m_pItemList[iArrowIndex]->m_sItemEffectValue2;
						m_pClientList[iClientH]->m_cAttackBonus_SM     = m_pClientList[iClientH]->m_pItemList[iArrowIndex]->m_sItemEffectValue3;
						m_pClientList[iClientH]->m_cAttackDiceThrow_L  = m_pClientList[iClientH]->m_pItemList[iArrowIndex]->m_sItemEffectValue4;
						m_pClientList[iClientH]->m_cAttackDiceRange_L  = m_pClientList[iClientH]->m_pItemList[iArrowIndex]->m_sItemEffectValue5;
						m_pClientList[iClientH]->m_cAttackBonus_L      = m_pClientList[iClientH]->m_pItemList[iArrowIndex]->m_sItemEffectValue6;
						 */
						m_pClientList[iClientH]->m_cAttackDiceThrow_SM = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
						m_pClientList[iClientH]->m_cAttackDiceRange_SM = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2;
						m_pClientList[iClientH]->m_cAttackBonus_SM = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue3;
						m_pClientList[iClientH]->m_cAttackDiceThrow_L = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue4;
						m_pClientList[iClientH]->m_cAttackDiceRange_L = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue5;
						m_pClientList[iClientH]->m_cAttackBonus_L = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue6;
					}
					m_pClientList[iClientH]->m_iHitRatio += m_pClientList[iClientH]->m_cSkillMastery[ m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sRelatedSkill ];
					// m_pClientList[iClientH]->m_iHitRatio_ItemEffect_SM += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSM_HitRatio;
					// m_pClientList[iClientH]->m_iHitRatio_ItemEffect_L  += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sL_HitRatio;
					break;
				case ItemEffectType::defense_specablty:
				case ItemEffectType::defense:
					m_pClientList[iClientH]->m_iDefenseRatio += m_pClientList[iClientH]->m_pItemList[ sItemIndex ]->m_sItemEffectValue1;
					//m_pClientList[iClientH]->m_iHitRatio_ItemEffect_SM += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSM_HitRatio;
					//m_pClientList[iClientH]->m_iHitRatio_ItemEffect_L  += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sL_HitRatio;
					if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x00000001) != 0) {
						m_pClientList[iClientH]->m_iCustomItemValue_Defense += m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2;
						dV2 = (double) m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2;
						dV3 = (double) m_pClientList[iClientH]->m_pItemList[ sItemIndex ]->m_sItemEffectValue1;
						dV1 = (double) (dV2 / 100.0f) * dV3;
						dV1 = dV1 / 2.0f;
						m_pClientList[iClientH]->m_iDefenseRatio += (int) dV1;
						if (m_pClientList[iClientH]->m_iDefenseRatio <= 0) m_pClientList[iClientH]->m_iDefenseRatio = 1;
						//testcode
						//wsprintf(G_cTxt, "Custom-Defense: %d", (int)dV1);
						//PutLogList(G_cTxt);
					}
					if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x00F00000) != 0) {
						dwSWEType = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x00F00000) >> 20;
						dwSWEValue = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x000F0000) >> 16;
						switch (dwSWEType) {
							case 7:
								m_pClientList[iClientH]->m_cAttackDiceRange_SM++;
								m_pClientList[iClientH]->m_cAttackDiceRange_L++;
								break;
							case 9:
								m_pClientList[iClientH]->m_cAttackDiceRange_SM += 2;
								m_pClientList[iClientH]->m_cAttackDiceRange_L += 2;
								break;
								// v2.04
							case 11:
								m_pClientList[iClientH]->m_iAddTransMana += dwSWEValue;
								if (m_pClientList[iClientH]->m_iAddTransMana > 13) m_pClientList[iClientH]->m_iAddTransMana = 13;
								break;
							case 12:
								m_pClientList[iClientH]->m_iAddChargeCritical += dwSWEValue;
								if (m_pClientList[iClientH]->m_iAddChargeCritical > 20) m_pClientList[iClientH]->m_iAddChargeCritical = 20;
								break;
						}
					}
					if ((m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x0000F000) != 0) {
						dwSWEType = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x0000F000) >> 12;
						dwSWEValue = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute & 0x00000F00) >> 8;
						switch (dwSWEType) {
							case 0: break;
							case 1: m_pClientList[iClientH]->m_iAddPR += (int) dwSWEValue * 7;
								break;
							case 2: m_pClientList[iClientH]->m_iAddAR += (int) dwSWEValue * 7;
								break;
							case 3: m_pClientList[iClientH]->m_iAddDR += (int) dwSWEValue * 7;
								break;
							case 4: m_pClientList[iClientH]->m_iAddHP += (int) dwSWEValue * 7;
								break;
							case 5: m_pClientList[iClientH]->m_iAddSP += (int) dwSWEValue * 7;
								break;
							case 6: m_pClientList[iClientH]->m_iAddMP += (int) dwSWEValue * 7;
								break;
							case 7: m_pClientList[iClientH]->m_iAddMR += (int) dwSWEValue * 7;
								break;
								//case 8: m_pClientList[iClientH]->m_iDamageAbsorption_Armor[m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos] += (int)dwSWEValue*3; break;
								// PA Fixed by KahBur.
							case 8: m_pClientList[iClientH]->m_iAddAbsPD += (int) dwSWEValue * 3;
								break;
							case 9: m_pClientList[iClientH]->m_iAddAbsMD += (int) dwSWEValue * 3;
								break;
							case 10: m_pClientList[iClientH]->m_iAddCD += (int) dwSWEValue;
								break;
							case 11: m_pClientList[iClientH]->m_iAddExp += (int) dwSWEValue * 10;
								break;
							case 12: m_pClientList[iClientH]->m_iAddGold += (int) dwSWEValue * 10;
								break;
						}
						switch (dwSWEType) {
								// PA Fixed by KahBur.
							case 8: if (m_pClientList[iClientH]->m_iAddAbsPD > 80) m_pClientList[iClientH]->m_iAddAbsPD = 80;
								break;
							case 9: if (m_pClientList[iClientH]->m_iAddAbsMD > 80) m_pClientList[iClientH]->m_iAddAbsMD = 80;
								break;
						}
						switch (dwSWEType) {
							case 9: if (m_pClientList[iClientH]->m_iAddAbsMD > 80) m_pClientList[iClientH]->m_iAddAbsMD = 80;
								break;
						}
					}
					switch (cEquipPos) {
						case ItemEquipPos::lhand:
							m_pClientList[iClientH]->m_iDamageAbsorption_Shield = (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1) - (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1) / 3;
							break;
						default:
							m_pClientList[iClientH]->m_iDamageAbsorption_Armor[m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cEquipPos] += (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2);
							break;
					}
					switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType) {
						case ItemEffectType::defense_specablty:
							m_pClientList[iClientH]->m_iSpecialAbilityType = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpecialEffect;
							m_pClientList[iClientH]->m_iSpecialAbilityLastSec = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpecialEffectValue1;
							m_pClientList[iClientH]->m_iSpecialAbilityEquipPos = cEquipPos;
							if ((bNotify == true) && (iEquipItemID == (int) sItemIndex))
								SendNotifyMsg(0, iClientH, DEF_NOTIFY_SPECIALABILITYSTATUS, 2, m_pClientList[iClientH]->m_iSpecialAbilityType, m_pClientList[iClientH]->m_iSpecialAbilityTime, 0);
							break;
						default: break;
					}
					break;
				default: break;
			}
		}
	//v1.432
	if ((iPrevSAType != 0) && (m_pClientList[iClientH]->m_iSpecialAbilityType == 0) && (bNotify == true)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SPECIALABILITYSTATUS, 4, 0, 0, 0);
		if (m_pClientList[iClientH]->m_bIsSpecialAbilityEnabled == true) {
			m_pClientList[iClientH]->m_bIsSpecialAbilityEnabled = false;
			m_pClientList[iClientH]->m_iSpecialAbilityTime = DEF_SPECABLTYTIMESEC;
			sTemp = m_pClientList[iClientH]->m_sAppr4;
			sTemp = sTemp & 0xFF0F;
			m_pClientList[iClientH]->m_sAppr4 = sTemp;
			SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
		}
	}
	if ((iPrevSAType != 0) && (m_pClientList[iClientH]->m_iSpecialAbilityType != 0) &&
			  (iPrevSAType != m_pClientList[iClientH]->m_iSpecialAbilityType) && (bNotify == true)) {
		if (m_pClientList[iClientH]->m_bIsSpecialAbilityEnabled == true) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_SPECIALABILITYSTATUS, 3, 0, 0, 0);
			m_pClientList[iClientH]->m_bIsSpecialAbilityEnabled = false;
			m_pClientList[iClientH]->m_iSpecialAbilityTime = DEF_SPECABLTYTIMESEC;
			sTemp = m_pClientList[iClientH]->m_sAppr4;
			sTemp = sTemp & 0xFF0F;
			m_pClientList[iClientH]->m_sAppr4 = sTemp;
			SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
		}
	}
	m_pClientList[iClientH]->m_iDefenseRatio += m_pClientList[iClientH]->m_iAngelicDex * 2;
	if (m_pClientList[iClientH]->m_iHP > iGetMaxHP(iClientH)) m_pClientList[iClientH]->m_iHP = iGetMaxHP(iClientH);
	if (m_pClientList[iClientH]->m_iMP > iGetMaxMP(iClientH)) m_pClientList[iClientH]->m_iMP = iGetMaxMP(iClientH);
	if (m_pClientList[iClientH]->m_iSP > iGetMaxSP(iClientH)) m_pClientList[iClientH]->m_iSP = iGetMaxSP(iClientH);
}

int CGame::_iGetPlayerNumberOnSpot(short dX, short dY, char cMapIndex, char cRange) {
	int ix;
	int iy;
	int iSum = 0;
	short sOwnerH;
	char cOwnerType;
	for (ix = dX - cRange; ix <= dX + cRange; ix++)
		for (iy = dY - cRange; iy <= dY + cRange; iy++) {
			m_pMapList[cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
			if ((sOwnerH != 0) && (cOwnerType == DEF_OWNERTYPE_PLAYER))
				iSum++;
		}
	return iSum;
}

void CGame::RequestAdminUserMode(int /*iClientH*/, char * /*pData*/) {
}

bool CGame::bAnalyzeCriminalAction(int iClientH, short dX, short dY, bool bIsCheck) {
	int iNamingValue;
	int tX;
	int tY;
	short sOwnerH;
	char cOwnerType;
	char cName[11], cNpcName[21];
	char cNpcWaypoint[11];
	if (m_pClientList[iClientH] == 0) return false;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return false;
	if (m_bIsCrusadeMode == true) return false;
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
	if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0)) {
		if (_bGetIsPlayerHostile(iClientH, sOwnerH) != true) {
			if (bIsCheck == true) return true;
			std::memset(cNpcName, 0, sizeof(cNpcName));
			if (strcmp(m_pClientList[iClientH]->m_cMapName, "aresden") == 0)
				strcpy(cNpcName, "Guard-Aresden");
			else if (strcmp(m_pClientList[iClientH]->m_cMapName, "elvine") == 0)
				strcpy(cNpcName, "Guard-Elvine");
			else if (strcmp(m_pClientList[iClientH]->m_cMapName, "default") == 0)
				strcpy(cNpcName, "Guard-Neutral");
			iNamingValue = m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->iGetEmptyNamingValue();
			if (iNamingValue == -1) {
			} else {
				std::memset(cNpcWaypoint, 0, sizeof(cNpcWaypoint));
				std::memset(cName, 0, sizeof(cName));
				wsprintf(cName, "XX%d", iNamingValue);
				cName[0] = '_';
				cName[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
				tX = (int) m_pClientList[iClientH]->m_sX;
				tY = (int) m_pClientList[iClientH]->m_sY;
				if (bCreateNewNpc(cNpcName, cName, m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_cName, 0, 0, NpcMoveType::random,
						  &tX, &tY, cNpcWaypoint, 0, 0, -1, false, true) == false) {
					m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->SetNamingValueEmpty(iNamingValue);
				} else {
					bSetNpcAttackMode(cName, iClientH, DEF_OWNERTYPE_PLAYER, true);
				}
			}
		}
	}
	return false;
}

bool CGame::_bGetIsPlayerHostile(int iClientH, int sOwnerH) {
	if (m_pClientList[iClientH] == 0) return false;
	if (m_pClientList[sOwnerH] == 0) return false;
	if (iClientH == sOwnerH) return true;
	if (m_pClientList[iClientH]->m_cSide == 0) {
		if (m_pClientList[sOwnerH]->m_iPKCount != 0)
			return true;
		else return false;
	} else {
		if (m_pClientList[iClientH]->m_cSide != m_pClientList[sOwnerH]->m_cSide) {
			if (m_pClientList[sOwnerH]->m_cSide == 0) {
				if (m_pClientList[sOwnerH]->m_iPKCount != 0)
					return true;
				else return false;
			} else return true;
		} else {
			if (m_pClientList[sOwnerH]->m_iPKCount != 0)
				return true;
			else return false;
		}
	}
	return false;
}

void CGame::bSetNpcAttackMode(char * cName, int iTargetH, char cTargetType, bool bIsPermAttack) {
	int i;
	int iIndex;
	for (i = 1; i < DEF_MAXNPCS; i++)
		if ((m_pNpcList[i] != 0) && (memcmp(m_pNpcList[i]->m_cName, cName, 5) == 0)) {
			iIndex = i;
			goto NEXT_STEP_SNAM1;
			//testcode
			//PutLogList("bSetNpcAttackMode - Npc found");
		}
	return;
NEXT_STEP_SNAM1:
	;
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[iTargetH] == 0) return;
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[iTargetH] == 0) return;
			break;
	}
	m_pNpcList[iIndex]->m_cBehavior = NpcBehavior::attack;
	m_pNpcList[iIndex]->m_sBehaviorTurnCount = 0;
	m_pNpcList[iIndex]->m_iTargetIndex = iTargetH;
	m_pNpcList[iIndex]->m_cTargetType = cTargetType;
	m_pNpcList[iIndex]->m_bIsPermAttackMode = bIsPermAttack;
	//testcode
	//PutLogList("bSetNpcAttackMode - complete");
}

void CGame::PoisonEffect(int iClientH, int /*iV1*/) {
	int iPoisonLevel;
	int iDamage;
	int iPrevHP;
	int iProb;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	iPoisonLevel = m_pClientList[iClientH]->m_iPoisonLevel;
	iDamage = iDice(1, iPoisonLevel);
	iPrevHP = m_pClientList[iClientH]->m_iHP;
	m_pClientList[iClientH]->m_iHP -= iDamage;
	if (m_pClientList[iClientH]->m_iHP <= 0) m_pClientList[iClientH]->m_iHP = 1;
	if (iPrevHP != m_pClientList[iClientH]->m_iHP)
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_HP, 0, 0, 0, 0);
	iProb = m_pClientList[iClientH]->m_cSkillMastery[23] - 10 + m_pClientList[iClientH]->m_iAddPR;
	if (iProb <= 10) iProb = 10;
	if (iDice(1, 100) <= iProb) {
		m_pClientList[iClientH]->m_bIsPoisoned = false;
		SetPoisonFlag(iClientH, DEF_OWNERTYPE_PLAYER, false); // remove poison aura after effect complete
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_POISON, 0, 0, 0);
	}
}

bool CGame::bCheckResistingPoisonSuccess(short sOwnerH, char cOwnerType) {
	int iResist;
	int iResult;
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return false;
			iResist = m_pClientList[sOwnerH]->m_cSkillMastery[23] + m_pClientList[sOwnerH]->m_iAddPR;
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sOwnerH] == 0) return false;
			iResist = 0;
			break;
	}
	iResult = iDice(1, 100);
	if (iResult >= iResist)
		return false;
	if (cOwnerType == DEF_OWNERTYPE_PLAYER)
		CalculateSSN_SkillIndex(sOwnerH, 23, 1);
	return true;
}

bool CGame::bCheckBadWord(char * pString) {
	char * cp;
	cp = pString;
	while (*cp != 0) {
		cp++;
	}
	return false;
}

void CGame::CheckDayOrNightMode() {
	SYSTEMTIME SysTime;
	char cPrevMode;
	int i;
	if (m_bManualTime == true) return;
	cPrevMode = m_cDayOrNight;
	GetLocalTime(&SysTime);
	if (SysTime.wMinute >= DEF_NIGHTTIME)
		m_cDayOrNight = 2;
	else m_cDayOrNight = 1;
	if (cPrevMode != m_cDayOrNight) {
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
				if ((m_pClientList[i]->m_cMapIndex >= 0) &&
						  (m_pMapList[m_pClientList[i]->m_cMapIndex] != 0) &&
						  (m_pMapList[m_pClientList[i]->m_cMapIndex]->m_bIsFixedDayMode == false))
					SendNotifyMsg(0, i, DEF_NOTIFY_TIMECHANGE, m_cDayOrNight, 0, 0, 0);
			}
	}
}

void CGame::ShutUpPlayer(int iClientH, char * pMsg, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cName[11], cBuff[256];
	CStrTok * pStrTok;
	int i;
	int iTime;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelShutup) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cName, 0, sizeof(cName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pMsg, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (strlen(token) > 10)
			memcpy(cName, token, 10);
		else memcpy(cName, token, strlen(token));
		token = pStrTok->pGet();
		if (token == 0)
			iTime = 0;
		else iTime = atoi(token);
		if (iTime < 0) iTime = 0;
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cName, 10) == 0)) {
				m_pClientList[i]->m_iTimeLeft_ShutUp = iTime * 20;
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERSHUTUP, iTime, 0, 0, cName);
				SendNotifyMsg(0, i, DEF_NOTIFY_PLAYERSHUTUP, iTime, 0, 0, cName);
				// Admin Log
				wsprintf(G_cTxt, "GM Order(%s): Shutup PC(%s) (%d)Min", m_pClientList[iClientH]->m_cCharName,
						  m_pClientList[i]->m_cCharName, iTime);
				PutAdminLogFileList(G_cTxt);
				delete pStrTok;
				return;
			}
	}
	delete pStrTok;
	return;
}

void CGame::SetPlayerReputation(int iClientH, char * pMsg, char cValue, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cName[11], cBuff[256];
	CStrTok * pStrTok;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iLevel < 40) return;
	if ((m_pClientList[iClientH]->m_iTimeLeft_Rating != 0) || (m_pClientList[iClientH]->m_iPKCount != 0)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTRATING, m_pClientList[iClientH]->m_iTimeLeft_Rating, 0, 0, 0);
		return;
	} else if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTRATING, 0, 0, 0, 0);
		return;
	}
	std::memset(cName, 0, sizeof(cName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pMsg, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (strlen(token) > 10)
			memcpy(cName, token, 10);
		else memcpy(cName, token, strlen(token));
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cName, 10) == 0)) {
				if (i != iClientH) {
					if (cValue == 0)
						m_pClientList[i]->m_iRating--;
					else if (cValue == 1)
						m_pClientList[i]->m_iRating++;
					if (m_pClientList[i]->m_iRating > 10000) m_pClientList[i]->m_iRating = 10000;
					if (m_pClientList[i]->m_iRating < -10000) m_pClientList[i]->m_iRating = -10000;
					m_pClientList[iClientH]->m_iTimeLeft_Rating = 20 * 60;
					SendNotifyMsg(0, i, DEF_NOTIFY_RATINGPLAYER, cValue, 0, 0, cName);
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_RATINGPLAYER, cValue, 0, 0, cName);
					delete pStrTok;
					return;
				}
			}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERNOTONGAME, 0, 0, 0, cName);
	}
	delete pStrTok;
	return;
}

bool CGame::bReadNotifyMsgListFile(const char * cFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadMode;
	char seps[] = "=\t\n;";
	CStrTok * pStrTok;
	int i;
	cReadMode = 0;
	m_iTotalNoticeMsg = 0;
	hFile = CreateFile(cFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFn, "rt");
	if (pFile == 0) {
		PutLogList("(!) Notify Message list file not found!...");
		return false;
	} else {
		PutLogList("(!) Reading Notify Message list file...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		//token = strtok( cp, seps );
		while (token != 0) {
			if (cReadMode != 0) {
				switch (cReadMode) {
					case 1:
						for (i = 0; i < DEF_MAXNOTIFYMSGS; i++)
							if (m_pNoticeMsgList[i] == 0) {
								m_pNoticeMsgList[i] = new CMsg;
								m_pNoticeMsgList[i]->bPut(0, token, strlen(token), 0, 0);
								m_iTotalNoticeMsg++;
								goto LNML_NEXTSTEP1;
							}
LNML_NEXTSTEP1:
						;
						cReadMode = 0;
						break;
				}
			} else {
				if (memcmp(token, "notify_msg", 10) == 0) cReadMode = 1;
			}
			token = pStrTok->pGet();
			//token = strtok( 0, seps );
		}
		delete pStrTok;
		delete cp;
	}
	if (pFile != 0) fclose(pFile);
	return true;
}

void CGame::NoticeHandler() {
	char cTemp;
	char cBuffer[1000], cKey;
	uint32_t dwSize;
	uint32_t dwTime = timeGetTime();
	int i;
	int iMsgIndex;
	int iTemp;
	if (m_iTotalNoticeMsg <= 1) return;
	if ((dwTime - m_dwNoticeTime) > DEF_NOTICETIME) {
		m_dwNoticeTime = dwTime;
		do {
			iMsgIndex = iDice(1, m_iTotalNoticeMsg) - 1;
		} while (iMsgIndex == m_iPrevSendNoticeMsg);
		m_iPrevSendNoticeMsg = iMsgIndex;
		std::memset(cBuffer, 0, sizeof(cBuffer));
		if (m_pNoticeMsgList[iMsgIndex] != 0) {
			m_pNoticeMsgList[iMsgIndex]->Get(&cTemp, cBuffer, &dwSize, &iTemp, &cKey);
		}
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if (m_pClientList[i] != 0) {
				SendNotifyMsg(0, i, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cBuffer);
			}
	}
}

void CGame::ResponseSavePlayerDataReplyHandler(char * pData, uint32_t /*dwMsgSize*/) {
	char * cp, cCharName[11];
	int i;
	std::memset(cCharName, 0, sizeof(cCharName));
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cCharName, cp, 10);
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		if (m_pClientList[i] != 0) {
			if (memcmp(m_pClientList[i]->m_cCharName, cCharName, 10) == 0) {
				SendNotifyMsg(0, i, DEF_NOTIFY_SERVERCHANGE, 0, 0, 0, 0);
			}
		}
}

void CGame::CalcExpStock(int iClientH) {
	bool bIsLevelUp;
	CItem * pItem;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_iExpStock <= 0) return;
	//if ((m_pClientList[iClientH]->m_iLevel >= m_iPlayerMaxLevel) && (m_pClientList[iClientH]->m_iExp >= m_iLevelExpTable[m_iPlayerMaxLevel])) return;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cType == DEF_MAPTYPE_NOPENALTY_NOREWARD) {
		m_pClientList[iClientH]->m_iExpStock = 0;
		return;
	}
	m_pClientList[iClientH]->m_iExp += m_pClientList[iClientH]->m_iExpStock;
	m_pClientList[iClientH]->m_iAutoExpAmount += m_pClientList[iClientH]->m_iExpStock;
	m_pClientList[iClientH]->m_iExpStock = 0;
	if (bCheckLimitedUser(iClientH) == false) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_EXP, 0, 0, 0, 0);
	}
	bIsLevelUp = bCheckLevelUp(iClientH);
	if ((bIsLevelUp == true) && (m_pClientList[iClientH]->m_iLevel <= 5)) {
		pItem = new CItem;
		if (_bInitItemAttr(pItem, "Gold") == false) {
			delete pItem;
			return;
		} else pItem->m_dwCount = (uint32_t) 100;
		bAddItem(iClientH, pItem, 0);
	}
	if ((bIsLevelUp == true) && (m_pClientList[iClientH]->m_iLevel > 5) && (m_pClientList[iClientH]->m_iLevel <= 20)) {
		pItem = new CItem;
		if (_bInitItemAttr(pItem, "Gold") == false) {
			delete pItem;
			return;
		} else pItem->m_dwCount = (uint32_t) 300;
		bAddItem(iClientH, pItem, 0);
	}
}

void CGame::___RestorePlayerRating(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iRating < -10000) m_pClientList[iClientH]->m_iRating = 0;
	if (m_pClientList[iClientH]->m_iRating > 10000) m_pClientList[iClientH]->m_iRating = 0;
}

int CGame::iGetExpLevel(int iExp) {
	int i;
	for (i = 1; i < 1001; i++)
		if ((m_iLevelExpTable[i] <= iExp) && (m_iLevelExpTable[i + 1] > iExp)) return i;
	return 0;
}

void CGame::AdminOrder_CallGuard(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cName[11], cTargetName[11], cBuff[256], cNpcName[21], cNpcWaypoint[11];
	CStrTok * pStrTok;
	int i;
	int iNamingValue;
	int tX;
	int tY;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelCallGaurd) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cName, 0, sizeof(cName));
	std::memset(cNpcWaypoint, 0, sizeof(cNpcWaypoint));
	std::memset(cTargetName, 0, sizeof(cTargetName));
	std::memset(cNpcName, 0, sizeof(cNpcName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (strlen(token) > 10)
			memcpy(cTargetName, token, 10);
		else memcpy(cTargetName, token, strlen(token));
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0)) {
				if (memcmp(m_pClientList[i]->m_cMapName, "aresden", 7) == 0)
					strcpy(cNpcName, "Guard-Aresden");
				else if (memcmp(m_pClientList[i]->m_cMapName, "elvine", 6) == 0)
					strcpy(cNpcName, "Guard-Elvine");
				else strcpy(cNpcName, "Guard-Neutral");
				iNamingValue = m_pMapList[ m_pClientList[i]->m_cMapIndex ]->iGetEmptyNamingValue();
				if (iNamingValue == -1) {
				} else {
					wsprintf(cName, "XX%d", iNamingValue);
					cName[0] = '_';
					cName[1] = m_pClientList[i]->m_cMapIndex + 65;
					tX = (int) m_pClientList[i]->m_sX;
					tY = (int) m_pClientList[i]->m_sY;
					if (bCreateNewNpc(cNpcName, cName, m_pMapList[ m_pClientList[i]->m_cMapIndex ]->m_cName, 0, 0, NpcMoveType::random,
							  &tX, &tY, cNpcWaypoint, 0, 0, -1, false, true) == false) {
						m_pMapList[ m_pClientList[i]->m_cMapIndex ]->SetNamingValueEmpty(iNamingValue);
					} else {
						bSetNpcAttackMode(cName, i, DEF_OWNERTYPE_PLAYER, true);
					}
				}
				delete pStrTok;
				return;
			}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERNOTONGAME, 0, 0, 0, cTargetName);
	}
	delete pStrTok;
	return;
}

void CGame::AdminOrder_Kill(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cName[11], cTargetName[11], cBuff[256], cNpcName[21], cNpcWaypoint[11];
	CStrTok * pStrTok;
	int i;
	int sAttackerWeapon;
	int sDamage;
	int iExH;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelGMKill) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cNpcWaypoint, 0, sizeof(cNpcWaypoint));
	std::memset(cTargetName, 0, sizeof(cTargetName));
	std::memset(cNpcName, 0, sizeof(cNpcName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cName, 0, sizeof(cName));
		strcpy(cName, token);
	} else {
		std::memset(cName, 0, sizeof(cName));
		strcpy(cName, "null");
	}
	token = pStrTok->pGet();
	if (token != 0) {
		sDamage = atoi(token);
	} else {
		sDamage = 1;
	}
	if (cName != 0) {
		token = cName;
		if (strlen(token) > 10)
			memcpy(cTargetName, token, 10);
		else memcpy(cTargetName, token, strlen(token));
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0)) {
				m_pClientList[i]->m_iHP = 0;
				//if (iGetMaxHP(i) < m_pClientList[i]->m_iHP) m_pClientList[i]->m_iHP = iGetMaxHP(i);
				m_pClientList[i]->m_bIsKilled = true;
				if (m_pClientList[i]->m_bIsExchangeMode == true) {
					iExH = m_pClientList[i]->m_iExchangeH;
					_ClearExchangeStatus(iExH);
					_ClearExchangeStatus(i);
				}
				RemoveFromTarget(i, DEF_OWNERTYPE_PLAYER);
				SendNotifyMsg(0, i, DEF_NOTIFY_KILLED, 0, 0, 0, m_pClientList[iClientH]->m_cCharName);
				sAttackerWeapon = 1;
				SendEventToNearClient_TypeA(i, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDYING, sDamage, sAttackerWeapon, 0);
				m_pMapList[m_pClientList[i]->m_cMapIndex]->ClearOwner(12, i, DEF_OWNERTYPE_PLAYER, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
				m_pMapList[m_pClientList[i]->m_cMapIndex]->SetDeadOwner(i, DEF_OWNERTYPE_PLAYER, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
				delete pStrTok;
				return;
			}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERNOTONGAME, 0, 0, 0, cTargetName);
	}
	delete pStrTok;
	return;
}

void CGame::AdminOrder_Revive(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cName[11], cTargetName[11], cBuff[256], cNpcName[21], cNpcWaypoint[11];
	CStrTok * pStrTok;
	int i;
	int sAttackerWeapon;
	int sDamage;
	int sHP;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelGMRevive) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cNpcWaypoint, 0, sizeof(cNpcWaypoint));
	std::memset(cTargetName, 0, sizeof(cTargetName));
	std::memset(cNpcName, 0, sizeof(cNpcName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cName, 0, sizeof(cName));
		strcpy(cName, token);
	} else {
		std::memset(cName, 0, sizeof(cName));
		strcpy(cName, "null");
	}
	token = pStrTok->pGet();
	if (token != 0) {
		sDamage = atoi(token);
	} else {
		sDamage = 1;
	}
	token = pStrTok->pGet();
	if (token != 0) {
		sHP = atoi(token);
	} else {
		sHP = 1;
	}
	token = cName;
	//if (token == 0) { token = "null"; }
	if (cName != 0) {
		if (strlen(token) > 10)
			memcpy(cTargetName, token, 10);
		else memcpy(cTargetName, token, strlen(token));
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0)) {
				m_pClientList[i]->m_iHP = sHP;
				if (iGetMaxHP(i) < m_pClientList[i]->m_iHP) m_pClientList[i]->m_iHP = iGetMaxHP(i);
				m_pClientList[i]->m_bIsKilled = false;
				m_pClientList[i]->m_iLastDamage = sDamage;
				//			SendEventToNearClient_TypeA(i, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGEMOVE, m_pClientList[i]->m_iLastDamage, 0, 0);
				SendNotifyMsg(0, i, DEF_NOTIFY_HP, 0, 0, 0, 0);
				sAttackerWeapon = 1;
				SendEventToNearClient_TypeA(i, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, sDamage, sAttackerWeapon, 0);
				m_pMapList[m_pClientList[i]->m_cMapIndex]->ClearOwner(14, i, DEF_OWNERTYPE_PLAYER, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
				m_pMapList[m_pClientList[i]->m_cMapIndex]->SetDeadOwner(i, DEF_OWNERTYPE_PLAYER, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
				delete pStrTok;
				return;
			}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERNOTONGAME, 0, 0, 0, cTargetName);
	}
	delete pStrTok;
	return;
}

void CGame::AdminOrder_SummonDemon(int iClientH) {
	char cName[21], cNpcName[21], cNpcWaypoint[11];
	int iNamingValue;
	int tX;
	int tY;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsAdminCommandEnabled == false) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSummonDemon) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	iNamingValue = m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->iGetEmptyNamingValue();
	if (iNamingValue == -1) {
	} else {
		std::memset(cNpcName, 0, sizeof(cNpcName));
		strcpy(cNpcName, "Demon");
		std::memset(cName, 0, sizeof(cName));
		wsprintf(cName, "XX%d", iNamingValue);
		cName[0] = '_';
		cName[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
		std::memset(cNpcWaypoint, 0, sizeof(cNpcWaypoint));
		tX = (int) m_pClientList[iClientH]->m_sX;
		tY = (int) m_pClientList[iClientH]->m_sY;
		if (bCreateNewNpc(cNpcName, cName, m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_cName, 0, (rand() % 9),
				  NpcMoveType::random, &tX, &tY, cNpcWaypoint, 0, 0, -1, false, false) == false) {
			m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->SetNamingValueEmpty(iNamingValue);
		} else {
			// Admin Log
			wsprintf(G_cTxt, "Admin Order(%s): Summon Demon", m_pClientList[iClientH]->m_cCharName);
			PutAdminLogFileList(G_cTxt);
		}
	}
}

void CGame::AdminOrder_SummonDeath(int iClientH) {
	char cName[21], cNpcName[21], cNpcWaypoint[11];
	int iNamingValue;
	int tX;
	int tY;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsAdminCommandEnabled == false) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSummonDeath) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	iNamingValue = m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->iGetEmptyNamingValue();
	if (iNamingValue == -1) {
	} else {
		std::memset(cNpcName, 0, sizeof(cNpcName));
		strcpy(cNpcName, "Wyvern");
		std::memset(cName, 0, sizeof(cName));
		wsprintf(cName, "XX%d", iNamingValue);
		cName[0] = '_';
		cName[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
		std::memset(cNpcWaypoint, 0, sizeof(cNpcWaypoint));
		tX = (int) m_pClientList[iClientH]->m_sX;
		tY = (int) m_pClientList[iClientH]->m_sY;
		if (bCreateNewNpc(cNpcName, cName, m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_cName, 0, (rand() % 9),
				  NpcMoveType::random, &tX, &tY, cNpcWaypoint, 0, 0, -1, false, false) == false) {
			m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->SetNamingValueEmpty(iNamingValue);
		} else {
			// Admin Log
			wsprintf(G_cTxt, "Admin Order(%s): Summon Death", m_pClientList[iClientH]->m_cCharName);
			PutAdminLogFileList(G_cTxt);
		}
	}
}

void CGame::AdminOrder_ReserveFightzone(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	int iNum;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelReserveFightzone) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (m_iFightzoneNoForceRecall == 0) {
		m_iFightzoneNoForceRecall = 1;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_FIGHTZONERESERVE, -5, 0, 0, 0);
	} else {
		m_iFightzoneNoForceRecall = 0;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_FIGHTZONERESERVE, -4, 0, 0, 0);
	}
	if (token == 0) {
		delete pStrTok;
		return;
	}
	iNum = atoi(token) - 1;
	if (m_iFightZoneReserve[iNum] != -1) {
		// Admin Log
		wsprintf(G_cTxt, "Admin Order(%s):  %d FightzoneReserved", m_pClientList[iClientH]->m_cCharName, iNum);
		PutAdminLogFileList(G_cTxt);
		m_iFightZoneReserve[iNum] = -1;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_FIGHTZONERESERVE, iNum + 1, 0, 0, 0);
	} else {
		wsprintf(G_cTxt, "Admin Order(%s):  %d Cancel FightzoneReserved", m_pClientList[iClientH]->m_cCharName, iNum);
		PutAdminLogFileList(G_cTxt);
		m_iFightZoneReserve[iNum] = 0;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_FIGHTZONERESERVE, -3, 0, 0, 0);
	}
	return;
}

void CGame::AdminOrder_CloseConn(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cTargetName[11], cBuff[256];
	CStrTok * pStrTok;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	/*
	if ((memcmp(m_pClientList[iClientH]->m_cMapName, "fightzone", 9) == 0) && (m_pClientList[iClientH]->m_iSkillSSN[59] == 1)) {
		goto AOCC_PASS;
	}
	 */
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelGMCloseconn) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cTargetName, 0, sizeof(cTargetName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (strlen(token) > 10)
			memcpy(cTargetName, token, 10);
		else memcpy(cTargetName, token, strlen(token));
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0)) {
				if (m_pClientList[i]->m_bIsInitComplete == true) {
					DeleteClient(i, true, true, true, true);
				}
				// Admin Log
				wsprintf(G_cTxt, "Admin Order(%s): Close Conn", m_pClientList[iClientH]->m_cCharName);
				PutAdminLogFileList(G_cTxt);
				delete pStrTok;
				return;
			}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERNOTONGAME, 0, 0, 0, cTargetName);
	}
	delete pStrTok;
	return;
}

void CGame::UserCommand_BanGuildsman(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cTargetName[11], cBuff[256];
	CStrTok * pStrTok;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iGuildRank != 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOGUILDMASTERLEVEL, 0, 0, 0, 0);
		return;
	}
	std::memset(cTargetName, 0, sizeof(cTargetName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (strlen(token) > 10)
			memcpy(cTargetName, token, 10);
		else memcpy(cTargetName, token, strlen(token));
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0)) {
				if (memcmp(m_pClientList[iClientH]->m_cGuildName, m_pClientList[i]->m_cGuildName, 20) != 0) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTBANGUILDMAN, 0, 0, 0, 0);
					delete pStrTok;
					return;
				}
				bSendMsgToLS(MSGID_REQUEST_UPDATEGUILDINFO_DELGUILDSMAN, i);
				SendGuildMsg(i, DEF_NOTIFY_DISMISSGUILDSMAN, 0, 0, 0);
				std::memset(m_pClientList[i]->m_cGuildName, 0, sizeof(m_pClientList[i]->m_cGuildName));
				strcpy(m_pClientList[i]->m_cGuildName, "NONE");
				m_pClientList[i]->m_iGuildRank = -1;
				m_pClientList[i]->m_iGuildGUID = -1;
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_SUCCESSBANGUILDMAN, 0, 0, 0, 0);
				SendNotifyMsg(iClientH, i, DEF_COMMONTYPE_BANGUILD, 0, 0, 0, 0);
				SendEventToNearClient_TypeA(i, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
				delete pStrTok;
				return;
			}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERNOTONGAME, 0, 0, 0, cTargetName);
	}
	delete pStrTok;
	return;
}

void CGame::UserCommand_DissmissGuild(int /*iClientH*/, char */*pData*/, uint32_t /*dwMsgSize*/) {
}

int CGame::iCreateFish(char cMapIndex, short sX, short sY, short sType, CItem * pItem, int iDifficulty, uint32_t dwLastTime) {
	int i;
	int iDynamicHandle;
	if ((cMapIndex < 0) || (cMapIndex >= DEF_MAXMAPS)) return 0;
	if (m_pMapList[cMapIndex] == 0) return 0;
	if (m_pMapList[cMapIndex]->bGetIsWater(sX, sY) == false) return 0;
	for (i = 1; i < DEF_MAXFISHS; i++)
		if (m_pFish[i] == 0) {
			m_pFish[i] = new CFish(cMapIndex, sX, sY, sType, pItem, iDifficulty);
			if (m_pFish[i] == 0) return 0;
			switch (pItem->m_sIDnum) {
				case ItemId::red_fish:
				case ItemId::green_fish:
				case ItemId::yellow_fish:
				case ItemId::red_carp:
				case ItemId::green_carp:
				case ItemId::gold_carp:
				case ItemId::crucian_carp:
				case ItemId::blue_sea_bream:
				case ItemId::salmon:
				case ItemId::red_sea_bream:
				case ItemId::gray_mullet:
					iDynamicHandle = iAddDynamicObjectList(i, 0, DEF_DYNAMICOBJECT_FISH, cMapIndex, sX, sY, dwLastTime);
					break;
				default:
					iDynamicHandle = iAddDynamicObjectList(i, 0, DEF_DYNAMICOBJECT_FISHOBJECT, cMapIndex, sX, sY, dwLastTime);
					break;
			}
			if (iDynamicHandle == 0) {
				delete m_pFish[i];
				m_pFish[i] = 0;
				return 0;
			}
			m_pFish[i]->m_sDynamicObjectHandle = iDynamicHandle;
			m_pMapList[cMapIndex]->m_iCurFish++;
			return i;
		}
	return 0;
}

bool CGame::bDeleteFish(int iHandle, int iDelMode) {
	int i;
	int iH;
	uint32_t dwTime;
	if (m_pFish[iHandle] == 0) return false;
	dwTime = timeGetTime();
	iH = m_pFish[iHandle]->m_sDynamicObjectHandle;
	if (m_pDynamicObjectList[iH] != 0) {
		SendEventToNearClient_TypeB(MSGID_DYNAMICOBJECT, DEF_MSGTYPE_REJECT, m_pDynamicObjectList[iH]->m_cMapIndex, m_pDynamicObjectList[iH]->m_sX, m_pDynamicObjectList[iH]->m_sY, m_pDynamicObjectList[iH]->m_sType, iH, 0);
		m_pMapList[m_pDynamicObjectList[iH]->m_cMapIndex]->SetDynamicObject(0, 0, m_pDynamicObjectList[iH]->m_sX, m_pDynamicObjectList[iH]->m_sY, dwTime);
		m_pMapList[m_pDynamicObjectList[iH]->m_cMapIndex]->m_iCurFish--;
		delete m_pDynamicObjectList[iH];
		m_pDynamicObjectList[iH] = 0;
	}
	for (i = 1; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true) &&
				  (m_pClientList[i]->m_iAllocatedFish == iHandle)) {
			SendNotifyMsg(0, i, DEF_NOTIFY_FISHCANCELED, iDelMode, 0, 0, 0);
			ClearSkillUsingStatus(i);
		}
	}
	delete m_pFish[iHandle];
	m_pFish[iHandle] = 0;
	return true;
}

int CGame::iCheckFish(int iClientH, char cMapIndex, short dX, short dY) {
	int i;
	short sDistX;
	short sDistY;
	if (m_pClientList[iClientH] == 0) return 0;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return 0;
	if ((cMapIndex < 0) || (cMapIndex >= DEF_MAXMAPS)) return 0;
	for (i = 1; i < DEF_MAXDYNAMICOBJECTS; i++)
		if (m_pDynamicObjectList[i] != 0) {
			sDistX = abs(m_pDynamicObjectList[i]->m_sX - dX);
			sDistY = abs(m_pDynamicObjectList[i]->m_sY - dY);
			if ((m_pDynamicObjectList[i]->m_cMapIndex == cMapIndex) &&
					  ((m_pDynamicObjectList[i]->m_sType == DEF_DYNAMICOBJECT_FISH) || (m_pDynamicObjectList[i]->m_sType == DEF_DYNAMICOBJECT_FISHOBJECT)) &&
					  (sDistX <= 2) && (sDistY <= 2)) {
				if (m_pFish[ m_pDynamicObjectList[i]->m_sOwner ] == 0) return 0;
				if (m_pFish[ m_pDynamicObjectList[i]->m_sOwner ]->m_sEngagingCount >= DEF_MAXENGAGINGFISH) return 0;
				if (m_pClientList[iClientH]->m_iAllocatedFish != 0) return 0;
				if (m_pClientList[iClientH]->m_cMapIndex != cMapIndex) return 0;
				m_pClientList[iClientH]->m_iAllocatedFish = m_pDynamicObjectList[i]->m_sOwner;
				m_pClientList[iClientH]->m_iFishChance = 1;
				m_pClientList[iClientH]->m_bSkillUsingStatus[1] = true;
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_EVENTFISHMODE, (m_pFish[m_pDynamicObjectList[i]->m_sOwner]->m_pItem->m_wPrice / 2), m_pFish[m_pDynamicObjectList[i]->m_sOwner]->m_pItem->m_sSprite,
						  m_pFish[m_pDynamicObjectList[i]->m_sOwner]->m_pItem->m_sSpriteFrame, m_pFish[m_pDynamicObjectList[i]->m_sOwner]->m_pItem->m_cName);
				m_pFish[ m_pDynamicObjectList[i]->m_sOwner ]->m_sEngagingCount++;
				return i;
			}
		}
	return 0;
}

void CGame::FishProcessor() {
	int i;
	int iSkillLevel;
	int iResult;
	int iChangeValue;
	for (i = 1; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true) &&
				  (m_pClientList[i]->m_iAllocatedFish != 0)) {
			if (m_pFish[ m_pClientList[i]->m_iAllocatedFish ] == 0) break;
			iSkillLevel = m_pClientList[i]->m_cSkillMastery[1];
			iSkillLevel -= m_pFish[m_pClientList[i]->m_iAllocatedFish]->m_iDifficulty;
			if (iSkillLevel <= 0) iSkillLevel = 1;
			iChangeValue = iSkillLevel / 10;
			if (iChangeValue <= 0) iChangeValue = 1;
			iChangeValue = iDice(1, iChangeValue);
			iResult = iDice(1, 100);
			if (iSkillLevel > iResult) {
				m_pClientList[i]->m_iFishChance += iChangeValue;
				if (m_pClientList[i]->m_iFishChance > 99) m_pClientList[i]->m_iFishChance = 99;
				SendNotifyMsg(0, i, DEF_NOTIFY_FISHCHANCE, m_pClientList[i]->m_iFishChance, 0, 0, 0);
			} else if (iSkillLevel < iResult) {
				m_pClientList[i]->m_iFishChance -= iChangeValue;
				if (m_pClientList[i]->m_iFishChance < 1) m_pClientList[i]->m_iFishChance = 1;
				SendNotifyMsg(0, i, DEF_NOTIFY_FISHCHANCE, m_pClientList[i]->m_iFishChance, 0, 0, 0);
			}
		}
	}
}

void CGame::AdminOrder_CreateFish(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	CItem * pItem;
	int tX;
	int tY;
	int iType;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelCreateFish) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	tX = tY = iType = 0;
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		tX = atoi(token);
	}
	token = pStrTok->pGet();
	if (token != 0) {
		tY = atoi(token);
	}
	token = pStrTok->pGet();
	if (token != 0) {
		iType = atoi(token);
	}
	if ((tX != 0) && (tY != 0) && (iType != 0)) {
		pItem = new CItem;
		if (pItem == 0) {
			delete pStrTok;
			return;
		}
		if (_bInitItemAttr(pItem, ItemId::_5000_gold_pocket) == true) {
			iCreateFish(m_pClientList[iClientH]->m_cMapIndex, tX, tY, iType, pItem, 1, 60000 * 20);
		} else delete pItem;
	}
	delete pStrTok;
	return;
}

void CGame::AdminOrder_Teleport(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256], cMapName[256];
	CStrTok * pStrTok;
	int dX;
	int dY;
	bool bFlag;
	dX = dY = -1;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelTeleport) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cMapName, 0, sizeof(cMapName));
		strcpy(cMapName, token);
	}
	token = pStrTok->pGet();
	if (token != 0) {
		dX = atoi(token);
	}
	token = pStrTok->pGet();
	if (token != 0) {
		dY = atoi(token);
	}
	bFlag = false;
	if (strcmp("2ndmiddle", cMapName) == 0) bFlag = true;
	if (strcmp("abaddon", cMapName) == 0) bFlag = true;
	if (strcmp("arebrk11", cMapName) == 0) bFlag = true;
	if (strcmp("arebrk12", cMapName) == 0) bFlag = true;
	if (strcmp("arebrk21", cMapName) == 0) bFlag = true;
	if (strcmp("arebrk22", cMapName) == 0) bFlag = true;
	if (strcmp("arefarm", cMapName) == 0) bFlag = true;
	if (strcmp("arejail", cMapName) == 0) bFlag = true;
	if (strcmp("aremidl", cMapName) == 0) bFlag = true;
	if (strcmp("aremidr", cMapName) == 0) bFlag = true;
	if (strcmp("aresden", cMapName) == 0) bFlag = true;
	if (strcmp("aresdend1", cMapName) == 0) bFlag = true;
	if (strcmp("areuni", cMapName) == 0) bFlag = true;
	if (strcmp("arewrhus", cMapName) == 0) bFlag = true;
	if (strcmp("bisle", cMapName) == 0) bFlag = true;
	if (strcmp("bsmith_1", cMapName) == 0) bFlag = true;
	if (strcmp("bsmith_1f", cMapName) == 0) bFlag = true;
	if (strcmp("bsmith_2", cMapName) == 0) bFlag = true;
	if (strcmp("bsmith_2f", cMapName) == 0) bFlag = true;
	if (strcmp("BtField", cMapName) == 0) bFlag = true;
	if (strcmp("cath_1", cMapName) == 0) bFlag = true;
	if (strcmp("cath_2", cMapName) == 0) bFlag = true;
	if (strcmp("cityhall_1", cMapName) == 0) bFlag = true;
	if (strcmp("cityhall_2", cMapName) == 0) bFlag = true;
	if (strcmp("CmdHall_1", cMapName) == 0) bFlag = true;
	if (strcmp("CmdHall_2", cMapName) == 0) bFlag = true;
	if (strcmp("default", cMapName) == 0) bFlag = true;
	if (strcmp("dglv2", cMapName) == 0) bFlag = true;
	if (strcmp("dglv3", cMapName) == 0) bFlag = true;
	if (strcmp("dglv4", cMapName) == 0) bFlag = true;
	if (strcmp("druncncity", cMapName) == 0) bFlag = true;
	if (strcmp("elvbrk11", cMapName) == 0) bFlag = true;
	if (strcmp("elvbrk12", cMapName) == 0) bFlag = true;
	if (strcmp("elvbrk21", cMapName) == 0) bFlag = true;
	if (strcmp("elvbrk22", cMapName) == 0) bFlag = true;
	if (strcmp("elvfarm", cMapName) == 0) bFlag = true;
	if (strcmp("elvine", cMapName) == 0) bFlag = true;
	if (strcmp("elvined1", cMapName) == 0) bFlag = true;
	if (strcmp("elvjail", cMapName) == 0) bFlag = true;
	if (strcmp("elvmidl", cMapName) == 0) bFlag = true;
	if (strcmp("elvmidr", cMapName) == 0) bFlag = true;
	if (strcmp("elvuni", cMapName) == 0) bFlag = true;
	if (strcmp("elvwrhus", cMapName) == 0) bFlag = true;
	if (strcmp("fightzone1", cMapName) == 0) bFlag = true;
	if (strcmp("fightzone2", cMapName) == 0) bFlag = true;
	if (strcmp("fightzone3", cMapName) == 0) bFlag = true;
	if (strcmp("fightzone4", cMapName) == 0) bFlag = true;
	if (strcmp("fightzone5", cMapName) == 0) bFlag = true;
	if (strcmp("fightzone6", cMapName) == 0) bFlag = true;
	if (strcmp("fightzone7", cMapName) == 0) bFlag = true;
	if (strcmp("fightzone8", cMapName) == 0) bFlag = true;
	if (strcmp("fightzone9", cMapName) == 0) bFlag = true;
	if (strcmp("fightzone10", cMapName) == 0) bFlag = true;
	if (strcmp("gldhall_1", cMapName) == 0) bFlag = true;
	if (strcmp("gldhall_2", cMapName) == 0) bFlag = true;
	if (strcmp("GodH", cMapName) == 0) bFlag = true;
	if (strcmp("gshop_1", cMapName) == 0) bFlag = true;
	if (strcmp("gshop_1f", cMapName) == 0) bFlag = true;
	if (strcmp("gshop_2", cMapName) == 0) bFlag = true;
	if (strcmp("gshop_2f", cMapName) == 0) bFlag = true;
	if (strcmp("HRampart", cMapName) == 0) bFlag = true;
	if (strcmp("huntzone1", cMapName) == 0) bFlag = true;
	if (strcmp("huntzone2", cMapName) == 0) bFlag = true;
	if (strcmp("huntzone3", cMapName) == 0) bFlag = true;
	if (strcmp("huntzone4", cMapName) == 0) bFlag = true;
	if (strcmp("icebound", cMapName) == 0) bFlag = true;
	if (strcmp("inferniaA", cMapName) == 0) bFlag = true;
	if (strcmp("inferniaB", cMapName) == 0) bFlag = true;
	if (strcmp("maze", cMapName) == 0) bFlag = true;
	if (strcmp("middled1n", cMapName) == 0) bFlag = true;
	if (strcmp("middled1x", cMapName) == 0) bFlag = true;
	if (strcmp("middleland", cMapName) == 0) bFlag = true;
	if (strcmp("penalty", cMapName) == 0) bFlag = true;
	if (strcmp("procella", cMapName) == 0) bFlag = true;
	if (strcmp("resurr1", cMapName) == 0) bFlag = true;
	if (strcmp("resurr2", cMapName) == 0) bFlag = true;
	if (strcmp("toh1", cMapName) == 0) bFlag = true;
	if (strcmp("toh2", cMapName) == 0) bFlag = true;
	if (strcmp("toh3", cMapName) == 0) bFlag = true;
	if (strcmp("wrhus_1", cMapName) == 0) bFlag = true;
	if (strcmp("wrhus_1f", cMapName) == 0) bFlag = true;
	if (strcmp("wrhus_2", cMapName) == 0) bFlag = true;
	if (strcmp("wrhus_2f", cMapName) == 0) bFlag = true;
	if (strcmp("wzdtwr_1", cMapName) == 0) bFlag = true;
	if (strcmp("wzdtwr_2", cMapName) == 0) bFlag = true;
	if (strcmp("Test", cMapName) == 0) bFlag = true;
	if (strcmp("GMMap", cMapName) == 0) bFlag = true;
	if (strcmp("dv", cMapName) == 0) bFlag = true;
	if (strcmp("HBX", cMapName) == 0) bFlag = true;
	if (bFlag == true)
		RequestTeleportHandler(iClientH, "2   ", cMapName, dX, dY);
	delete pStrTok;
	return;
}

void CGame::ReqGetFishThisTimeHandler(int iClientH) {
	int iResult;
	int iFishH;
	CItem * pItem;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_iAllocatedFish == 0) return;
	if (m_pFish[m_pClientList[iClientH]->m_iAllocatedFish] == 0) return;
	m_pClientList[iClientH]->m_bSkillUsingStatus[1] = false;
	iResult = iDice(1, 100);
	if (m_pClientList[iClientH]->m_iFishChance >= iResult) {
		GetExp(iClientH, iDice(m_pFish[m_pClientList[iClientH]->m_iAllocatedFish]->m_iDifficulty, 5)); //m_pClientList[iClientH]->m_iExpStock += iDice(m_pFish[m_pClientList[iClientH]->m_iAllocatedFish]->m_iDifficulty, 5);
		CalculateSSN_SkillIndex(iClientH, 1, m_pFish[m_pClientList[iClientH]->m_iAllocatedFish]->m_iDifficulty);
		pItem = m_pFish[m_pClientList[iClientH]->m_iAllocatedFish]->m_pItem;
		m_pFish[m_pClientList[iClientH]->m_iAllocatedFish]->m_pItem = 0;
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bSetItem(m_pClientList[iClientH]->m_sX,
				  m_pClientList[iClientH]->m_sY,
				  pItem);
		SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
				  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
				  pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); // v1.4 color
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_FISHSUCCESS, 0, 0, 0, 0);
		iFishH = m_pClientList[iClientH]->m_iAllocatedFish;
		m_pClientList[iClientH]->m_iAllocatedFish = 0;
		bDeleteFish(iFishH, 1);
		return;
	}
	m_pFish[ m_pClientList[iClientH]->m_iAllocatedFish ]->m_sEngagingCount--;
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_FISHFAIL, 0, 0, 0, 0);
	m_pClientList[iClientH]->m_iAllocatedFish = 0;
}

void CGame::FishGenerator() {
	int i;
	int iP;
	int tX;
	int tY;
	char cItemName[21];
	short sDifficulty;
	uint32_t dwLastTime;
	CItem * pItem;
	for (i = 0; i < DEF_MAXMAPS; i++) {
		if ((iDice(1, 10) == 5) && (m_pMapList[i] != 0) &&
				  (m_pMapList[i]->m_iCurFish < m_pMapList[i]->m_iMaxFish)) {
			iP = iDice(1, m_pMapList[i]->m_iTotalFishPoint) - 1;
			if ((m_pMapList[i]->m_FishPointList[iP].x == -1) || (m_pMapList[i]->m_FishPointList[iP].y == -1)) break;
			tX = m_pMapList[i]->m_FishPointList[iP].x + (iDice(1, 3) - 2);
			tY = m_pMapList[i]->m_FishPointList[iP].y + (iDice(1, 3) - 2);
			pItem = new CItem;
			if (pItem == 0) break;
			std::memset(cItemName, 0, sizeof(cItemName));
			switch (iDice(1, 9)) {
				case 1: strcpy(cItemName, "RedCarp");
					sDifficulty = iDice(1, 10) + 20;
					break;
				case 2: strcpy(cItemName, "GreenCarp");
					sDifficulty = iDice(1, 5) + 10;
					break;
				case 3: strcpy(cItemName, "GoldCarp");
					sDifficulty = iDice(1, 10) + 1;
					break;
				case 4: strcpy(cItemName, "CrucianCarp");
					sDifficulty = 1;
					break;
				case 5: strcpy(cItemName, "BlueSeaBream");
					sDifficulty = iDice(1, 15) + 1;
					break;
				case 6: strcpy(cItemName, "RedSeaBream");
					sDifficulty = iDice(1, 18) + 1;
					break;
				case 7: strcpy(cItemName, "Salmon");
					sDifficulty = iDice(1, 12) + 1;
					break;
				case 8: strcpy(cItemName, "GrayMullet");
					sDifficulty = iDice(1, 10) + 1;
					break;
				case 9:
					switch (iDice(1, 150)) {
						case 1:
						case 2:
						case 3:
							strcpy(cItemName, "PowerGreenPotion");
							sDifficulty = iDice(5, 4) + 30;
							break;
						case 10:
						case 11:
							strcpy(cItemName, "SuperPowerGreenPotion");
							sDifficulty = iDice(5, 4) + 50;
							break;
						case 20:
							strcpy(cItemName, "Dagger+2");
							sDifficulty = iDice(5, 4) + 30;
							break;
						case 30:
							strcpy(cItemName, "LongSword+2");
							sDifficulty = iDice(5, 4) + 40;
							break;
						case 40:
							strcpy(cItemName, "Scimitar+2");
							sDifficulty = iDice(5, 4) + 50;
							break;
						case 50:
							strcpy(cItemName, "Rapier+2");
							sDifficulty = iDice(5, 4) + 60;
							break;
						case 60:
							strcpy(cItemName, "Flameberge+2");
							sDifficulty = iDice(5, 4) + 60;
							break;
						case 70:
							strcpy(cItemName, "WarAxe+2");
							sDifficulty = iDice(5, 4) + 50;
							break;
						case 90:
							strcpy(cItemName, "Ruby");
							sDifficulty = iDice(5, 4) + 40;
							break;
						case 95:
							strcpy(cItemName, "Diamond");
							sDifficulty = iDice(5, 4) + 40;
							break;
					}
					break;
			}
			dwLastTime = (60000 * 10) + (iDice(1, 3) - 1)*(60000 * 10);
			if (_bInitItemAttr(pItem, cItemName) == true) {
				iCreateFish(i, tX, tY, 1, pItem, sDifficulty, dwLastTime);
			} else {
				delete pItem;
				pItem = 0;
			}
		}
	}
}

int CGame::_iCalcPlayerNum(char cMapIndex, short dX, short dY, char cRadius) {
	int ix;
	int iy;
	int iRet;
	CTile * pTile;
	if ((cMapIndex < 0) || (cMapIndex > DEF_MAXMAPS)) return 0;
	if (m_pMapList[cMapIndex] == 0) return 0;
	iRet = 0;
	for (ix = dX - cRadius; ix <= dX + cRadius; ix++)
		for (iy = dY - cRadius; iy <= dY + cRadius; iy++) {
			if ((ix < 0) || (ix >= m_pMapList[cMapIndex]->m_sSizeX) ||
					  (iy < 0) || (iy >= m_pMapList[cMapIndex]->m_sSizeY)) {
			} else {
				pTile = (CTile *) (m_pMapList[cMapIndex]->m_pTile + ix + iy * m_pMapList[cMapIndex]->m_sSizeY);
				if ((pTile->m_sOwner != 0) && (pTile->m_cOwnerClass == DEF_OWNERTYPE_PLAYER))
					iRet++;
			}
		}
	return iRet;
}

void CGame::WhetherProcessor() {
	char cPrevMode;
	int i;
	int j;
	uint32_t dwTime;
	dwTime = timeGetTime();
	for (i = 0; i < DEF_MAXMAPS; i++) {
		if ((m_pMapList[i] != 0) && (m_pMapList[i]->m_bIsFixedDayMode == false)) {
			cPrevMode = m_pMapList[i]->m_cWhetherStatus;
			if (m_pMapList[i]->m_cWhetherStatus != 0) {
				if ((dwTime - m_pMapList[i]->m_dwWhetherStartTime) > m_pMapList[i]->m_dwWhetherLastTime)
					m_pMapList[i]->m_cWhetherStatus = 0;
			} else {
				if (iDice(1, 300) == 13) {
					m_pMapList[i]->m_cWhetherStatus = iDice(1, 3); //This looks better or else we only get snow :(
					//m_pMapList[i]->m_cWhetherStatus = iDice(1,3)+3; <- This original code looks fucked
					m_pMapList[i]->m_dwWhetherStartTime = dwTime;
					m_pMapList[i]->m_dwWhetherLastTime = 60000 * 3 + 60000 * iDice(1, 7);
				}
			}
			if (m_pMapList[i]->m_bIsSnowEnabled == true) {
				m_pMapList[i]->m_cWhetherStatus = iDice(1, 3) + 3;
				m_pMapList[i]->m_dwWhetherStartTime = dwTime;
				m_pMapList[i]->m_dwWhetherLastTime = 60000 * 3 + 60000 * iDice(1, 7);
			}
			if (cPrevMode != m_pMapList[i]->m_cWhetherStatus) {
				for (j = 1; j < DEF_MAXCLIENTS; j++)
					if ((m_pClientList[j] != 0) && (m_pClientList[j]->m_bIsInitComplete == true) && (m_pClientList[j]->m_cMapIndex == i))
						SendNotifyMsg(0, j, DEF_NOTIFY_WHETHERCHANGE, m_pMapList[i]->m_cWhetherStatus, 0, 0, 0);
			}
		} //If
	} //for Loop
}

void CGame::FightzoneReserveProcessor() {/*
 int i;
	PutLogList("CAN FIGHTZONE RESERVE!!");
	for (i=0 ; i < DEF_MAXFIGHTZONE ; i++ ) {
		if (m_iFightZoneReserve[i] == -1 ) continue ;
		m_iFightZoneReserve[i] = 0 ;
	}
	for (i = 1; i < DEF_MAXCLIENTS; i++) {
		if((m_pClientList[i] != 0) && (m_pClientList[i]->m_iFightzoneNumber != 0))
				SendNotifyMsg(0, i, DEF_NOTIFY_FIGHTZONERESERVE, -2, 0, 0, 0);
	}*/
}

/*********************************************************************************************************************
 **  int CGame::iGetWhetherMagicBonusEffect(short sType, char cWheatherStatus)										**
 **  description			:: checks for a weather bonus when magic is cast											**
 **  last updated		:: November 20, 2004; 10:34 PM; Hypnotoad													**
 **	return value		:: int																						**
 *********************************************************************************************************************/
int CGame::iGetWhetherMagicBonusEffect(short sType, char cWheatherStatus) {
	int iWheatherBonus;
	iWheatherBonus = 0;
	switch (cWheatherStatus) {
		case 0: break;
		case 1:
		case 2:
		case 3:
			switch (sType) {
				case 10:
				case 37:
				case 43:
				case 51:
					iWheatherBonus = 1;
					break;
				case 20:
				case 30:
					iWheatherBonus = -1;
					break;
			}
			break;
	}
	return iWheatherBonus;
}

int CGame::iGetPlayerRelationship(int iClientH, int iOpponentH) {
	int iRet;
	if (m_pClientList[iClientH] == 0) return 0;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return 0;
	if (m_pClientList[iOpponentH] == 0) return 0;
	if (m_pClientList[iOpponentH]->m_bIsInitComplete == false) return 0;
	iRet = 0;
	if (m_pClientList[iClientH]->m_iPKCount != 0) {
		if ((memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iOpponentH]->m_cLocation, 10) == 0) &&
				  (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) != 0) && (memcmp(m_pClientList[iOpponentH]->m_cLocation, "NONE", 4) != 0)) {
			iRet = 7;
		} else iRet = 2;
	} else if (m_pClientList[iOpponentH]->m_iPKCount != 0) {
		if ((memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iOpponentH]->m_cLocation, 10) == 0) &&
				  (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) != 0))
			iRet = 6;
		else iRet = 2;
	} else {
		if (m_pClientList[iClientH]->m_cSide != m_pClientList[iOpponentH]->m_cSide) {
			if ((m_pClientList[iClientH]->m_cSide != 0) && (m_pClientList[iOpponentH]->m_cSide != 0)) {
				iRet = 2;
			} else {
				iRet = 0;
			}
		} else {
			if ((memcmp(m_pClientList[iClientH]->m_cGuildName, m_pClientList[iOpponentH]->m_cGuildName, 20) == 0) &&
					  (memcmp(m_pClientList[iClientH]->m_cGuildName, "NONE", 4) != 0)) {
				if (m_pClientList[iOpponentH]->m_iGuildRank == 0)
					iRet = 5;
				else iRet = 3;
			} else
				if ((memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iOpponentH]->m_cLocation, 10) == 0) &&
					  (memcmp(m_pClientList[iClientH]->m_cGuildName, "NONE", 4) != 0) &&
					  (memcmp(m_pClientList[iOpponentH]->m_cGuildName, "NONE", 4) != 0) &&
					  (memcmp(m_pClientList[iClientH]->m_cGuildName, m_pClientList[iOpponentH]->m_cGuildName, 20) != 0)) {
				iRet = 4;
			} else iRet = 1;
		}
	}
	return iRet;
}

int CGame::iGetPlayerABSStatus(int iWhatH, int iRecvH) {
	int iRet;
	if (m_pClientList[iWhatH] == 0) return 0;
	if (m_pClientList[iRecvH] == 0) return 0;
	iRet = 0;
	/*if (m_pMapList[m_pClientList[iRecvH]->m_cMapIndex]->m_bIsFightZone == true &&
		m_pClientList[iWhatH]->m_iGuildRank != -1 && m_pClientList[iRecvH]->m_iGuildRank != -1 &&
		memcmp(m_pClientList[iWhatH]->m_cGuildName,m_pClientList[iRecvH]->m_cGuildName,20) != 0) {
			iRet = 8;
		}*/
	if (m_pClientList[iWhatH]->m_iPKCount != 0) {
		iRet = 8;
	}
	if (m_pClientList[iWhatH]->m_cSide != 0) {
		iRet = iRet | 4;
	}
	if (m_pClientList[iWhatH]->m_cSide == 1) {
		iRet = iRet | 2;
	}
	if (m_pClientList[iWhatH]->m_bIsPlayerCivil == true)
		iRet = iRet | 1;
	return iRet;
}

int CGame::iGetNpcRelationship(int iWhatH, int iRecvH) {
	int iRet;
	if (m_pClientList[iRecvH] == 0) return 0;
	if (m_pNpcList[iWhatH] == 0) return 0;
	iRet = 0;
	switch (m_pNpcList[iWhatH]->m_cSide) {
		case 10: iRet |= 8; //Fixed, Original 15
		case 1: iRet = (iRet | 4) | 2; //Fixed, Original 1
		case 2: iRet |= 4; //Fixed, Orignal 8
	}
	return iRet;
}

/*int CGame::iGetPlayerRelationship_SendEvent(int iClientH, int iOpponentH)
{
 int iRet;
	if (m_pClientList[iClientH] == 0) return 0;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return 0;
	if (m_pClientList[iOpponentH] == 0) return 0;
	if (m_pClientList[iOpponentH]->m_bIsInitComplete == false) return 0;
	iRet = 0;
	if (m_pClientList[iClientH]->m_iPKCount != 0) {
		if ((memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iOpponentH]->m_cLocation, 10) != 0) &&
			(memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) != 0) && (memcmp(m_pClientList[iOpponentH]->m_cLocation, "NONE", 4) != 0))
			 iRet = 2;
		else iRet = 6; // PK
	}
	else if (m_pClientList[iOpponentH]->m_iPKCount != 0) {
		if ((memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iOpponentH]->m_cLocation, 10) != 0) &&
			(memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) != 0) && (memcmp(m_pClientList[iOpponentH]->m_cLocation, "NONE", 4) != 0))
			 iRet = 2;
		else {
			iRet = 7;
		}
	}
	else {
		if (m_pClientList[iClientH]->m_cSide != m_pClientList[iOpponentH]->m_cSide) {
			if ((m_pClientList[iClientH]->m_cSide != 0) && (m_pClientList[iOpponentH]->m_cSide != 0)) {
				iRet = 2;
			}
			else {
				iRet = 0;
			}
		}
		else {
			if ((m_pClientList[iClientH]->m_cSide == m_pClientList[iOpponentH]->m_cSide) &&
				(m_pClientList[iClientH]->m_cSide == 0)) {
				iRet = 0;
			}
			else
			if ((memcmp(m_pClientList[iClientH]->m_cGuildName, m_pClientList[iOpponentH]->m_cGuildName, 20) == 0) &&
				(memcmp(m_pClientList[iClientH]->m_cGuildName, "NONE", 4) != 0) ) {
				if (m_pClientList[iClientH]->m_iGuildRank == 0)
					 iRet = 5;
				else iRet = 3;
			}
			else
			if ((memcmp(m_pClientList[iClientH]->m_cLocation, m_pClientList[iOpponentH]->m_cLocation, 10) == 0) &&
				(memcmp(m_pClientList[iClientH]->m_cGuildName, "NONE", 4) != 0) &&
				(memcmp(m_pClientList[iOpponentH]->m_cGuildName, "NONE", 4) != 0) &&
				(memcmp(m_pClientList[iClientH]->m_cGuildName, m_pClientList[iOpponentH]->m_cGuildName, 20) != 0)) {
				iRet = 4;
			}
			else {
				iRet = 1;
			}
		}
	}
	return iRet;
}*/
int CGame::iGetNpcRelationship_SendEvent(int iNpcH, int iOpponentH) {
	int iRet;
	if (m_pClientList[iOpponentH] == 0) return 0;
	if (m_pClientList[iOpponentH]->m_bIsInitComplete == false) return 0;
	if (m_pNpcList[iNpcH] == 0) return 0;
	iRet = 0;
	if (m_pClientList[iOpponentH]->m_iPKCount != 0) {
		if (m_pNpcList[iNpcH]->m_cSide == m_pClientList[iOpponentH]->m_cSide)
			iRet = 7;
		else iRet = 2;
	} else {
		if (m_pNpcList[iNpcH]->m_cSide != m_pClientList[iOpponentH]->m_cSide) {
			if (m_pNpcList[iNpcH]->m_cSide == 10)
				iRet = 2;
			else
				if (m_pNpcList[iNpcH]->m_cSide == 0) iRet = 0;
			else
				if (m_pClientList[iOpponentH]->m_cSide == 0)
				iRet = 0;
			else iRet = 2;
		} else iRet = 1;
	}
	return iRet;
}

int CGame::iGetMapIndex(char * pMapName) {
	int i;
	int iMapIndex;
	char cTmpName[256];
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, pMapName);
	iMapIndex = -1;
	for (i = 0; i < DEF_MAXMAPS; i++)
		if (m_pMapList[i] != 0) {
			if (memcmp(m_pMapList[i]->m_cName, pMapName, 10) == 0)
				iMapIndex = i;
		}
	return iMapIndex;
}

int CGame::_iForcePlayerDisconect(int iNum) {
	int i;
	int iCnt;
	iCnt = 0;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if (m_pClientList[i] != 0) {
			if (m_pClientList[i]->m_bIsInitComplete == true)
				DeleteClient(i, true, true);
			else DeleteClient(i, false, false);
			iCnt++;
			if (iCnt >= iNum) break;
		}
	return iCnt;
}

void CGame::SpecialEventHandler() {
	uint32_t dwTime;
	dwTime = timeGetTime();
	if ((dwTime - m_dwSpecialEventTime) < DEF_SPECIALEVENTTIME) return; // DEF_SPECIALEVENTTIME
	m_dwSpecialEventTime = dwTime;
	m_bIsSpecialEventTime = true;
	switch (iDice(1, 180)) {
		case 98: m_cSpecialEventType = 2;
			break;
		default: m_cSpecialEventType = 1;
			break;
	}
}

void CGame::AdminOrder_CheckIP(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256], cIP[21], cInfoString[500];
	CStrTok * pStrTok;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelCheckIP) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cIP, 0, sizeof(cIP));
		strcpy(cIP, token);
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cIPaddress, cIP, strlen(cIP)) == 0)) {
				std::memset(cInfoString, 0, sizeof(cInfoString));
				wsprintf(cInfoString, "Name(%s/%s) Loc(%s: %d %d) Level(%d:%d) Init(%d) IP(%s)",
						  m_pClientList[i]->m_cAccountName, m_pClientList[i]->m_cCharName, m_pClientList[i]->m_cMapName,
						  m_pClientList[i]->m_sX, m_pClientList[i]->m_sY,
						  m_pClientList[i]->m_iLevel, 0/*m_pClientList[i]->m_cAccountStatus*/,
						  m_pClientList[i]->m_bIsInitComplete, m_pClientList[i]->m_cIPaddress);
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_IPACCOUNTINFO, 0, 0, 0, cInfoString);
			}
	}
	delete pStrTok;
}

void CGame::ToggleSafeAttackModeHandler(int iClientH) //v1.1
{
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	if (m_pClientList[iClientH]->m_bIsSafeAttackMode == true)
		m_pClientList[iClientH]->m_bIsSafeAttackMode = false;
	else m_pClientList[iClientH]->m_bIsSafeAttackMode = true;
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_SAFEATTACKMODE, 0, 0, 0, 0);
}

void CGame::NpcRequestAssistance(int iNpcH) {
	int ix;
	int iy;
	int sX;
	int sY;
	short sOwnerH;
	char cOwnerType;
	if (m_pNpcList[iNpcH] == 0) return;
	sX = m_pNpcList[iNpcH]->m_sX;
	sY = m_pNpcList[iNpcH]->m_sY;
	for (ix = sX - 8; ix <= sX + 8; ix++)
		for (iy = sY - 8; iy <= sY + 8; iy++) {
			m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
			if ((sOwnerH != 0) && (m_pNpcList[sOwnerH] != 0) && (cOwnerType == DEF_OWNERTYPE_NPC) &&
					  (iNpcH != sOwnerH) && (m_pNpcList[sOwnerH]->m_cSide == m_pNpcList[iNpcH]->m_cSide) &&
					  (m_pNpcList[sOwnerH]->m_bIsPermAttackMode == false) && (m_pNpcList[sOwnerH]->m_cBehavior == NpcBehavior::move)) {
				m_pNpcList[sOwnerH]->m_cBehavior = NpcBehavior::attack;
				m_pNpcList[sOwnerH]->m_sBehaviorTurnCount = 0;
				m_pNpcList[sOwnerH]->m_iTargetIndex = m_pNpcList[iNpcH]->m_iTargetIndex;
				m_pNpcList[sOwnerH]->m_cTargetType = m_pNpcList[iNpcH]->m_cTargetType;
				return;
			}
		}
}

void CGame::ForceDisconnectAccount(char *pAccountName, uint16_t wCount) {
	int i;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cAccountName, pAccountName, 10) == 0)) {
			wsprintf(G_cTxt, "<%d> Force disconnect account: CharName(%s) AccntName(%s) Count(%d)", i, m_pClientList[i]->m_cCharName, m_pClientList[i]->m_cAccountName, wCount);
			PutLogList(G_cTxt);
			//DeleteClient(i, true, true);
			//v1.4312
			SendNotifyMsg(0, i, DEF_NOTIFY_FORCEDISCONN, wCount, 0, 0, 0);
		}
}

void CGame::AdminOrder_Polymorph(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelPolymorph) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (memcmp(token, "off", 3) == 0)
			m_pClientList[iClientH]->m_sType = m_pClientList[iClientH]->m_sOriginalType;
		else if (memcmp(token, "Slime", 5) == 0)
			m_pClientList[iClientH]->m_sType = 10;
		else if (memcmp(token, "Skeleton", 8) == 0)
			m_pClientList[iClientH]->m_sType = 11;
		else if (memcmp(token, "Stone-Golem", 11) == 0)
			m_pClientList[iClientH]->m_sType = 12;
		else if (memcmp(token, "Cyclops", 7) == 0)
			m_pClientList[iClientH]->m_sType = 13;
		else if (memcmp(token, "Orc", 3) == 0)
			m_pClientList[iClientH]->m_sType = 14;
		else if (memcmp(token, "ShopKeeper", 10) == 0)
			m_pClientList[iClientH]->m_sType = 15;
		else if (memcmp(token, "Giant-Ant", 9) == 0)
			m_pClientList[iClientH]->m_sType = 16;
		else if (memcmp(token, "Scorpion", 8) == 0)
			m_pClientList[iClientH]->m_sType = 17;
		else if (memcmp(token, "Zombie", 6) == 0)
			m_pClientList[iClientH]->m_sType = 18;
		else if (memcmp(token, "Gandlf", 6) == 0)
			m_pClientList[iClientH]->m_sType = 19;
		else if (memcmp(token, "Howard", 6) == 0)
			m_pClientList[iClientH]->m_sType = 20;
		else if (memcmp(token, "Gaurd", 5) == 0)
			m_pClientList[iClientH]->m_sType = 21;
		else if (memcmp(token, "Amphis", 6) == 0)
			m_pClientList[iClientH]->m_sType = 22;
		else if (memcmp(token, "Clay-Golem", 10) == 0)
			m_pClientList[iClientH]->m_sType = 23;
		else if (memcmp(token, "Tom", 3) == 0)
			m_pClientList[iClientH]->m_sType = 24;
		else if (memcmp(token, "William", 7) == 0)
			m_pClientList[iClientH]->m_sType = 25;
		else if (memcmp(token, "Kennedy", 7) == 0)
			m_pClientList[iClientH]->m_sType = 26;
		else if (memcmp(token, "Hellbound", 9) == 0)
			m_pClientList[iClientH]->m_sType = 27;
		else if (memcmp(token, "Troll", 5) == 0)
			m_pClientList[iClientH]->m_sType = 28;
		else if (memcmp(token, "Orge", 4) == 0)
			m_pClientList[iClientH]->m_sType = 29;
		else if (memcmp(token, "Liche", 5) == 0)
			m_pClientList[iClientH]->m_sType = 30;
		else if (memcmp(token, "Demon", 5) == 0)
			m_pClientList[iClientH]->m_sType = 31;
		else if (memcmp(token, "Unicorn", 7) == 0)
			m_pClientList[iClientH]->m_sType = 32;
		else if (memcmp(token, "WereWolf", 8) == 0)
			m_pClientList[iClientH]->m_sType = 33;
		else if (memcmp(token, "Dummy", 5) == 0)
			m_pClientList[iClientH]->m_sType = 34;
		else if (memcmp(token, "Energy-Sphere", 13) == 0)
			m_pClientList[iClientH]->m_sType = 35;
		else if (memcmp(token, "AGT", 3) == 0)
			m_pClientList[iClientH]->m_sType = 36;
		else if (memcmp(token, "CGT", 3) == 0)
			m_pClientList[iClientH]->m_sType = 37;
		else if (memcmp(token, "MS", 2) == 0)
			m_pClientList[iClientH]->m_sType = 38;
		else if (memcmp(token, "DT", 2) == 0)
			m_pClientList[iClientH]->m_sType = 39;
		else if (memcmp(token, "ESG", 3) == 0)
			m_pClientList[iClientH]->m_sType = 40;
		else if (memcmp(token, "GMG", 3) == 0)
			m_pClientList[iClientH]->m_sType = 41;
		else if (memcmp(token, "ManaStone", 9) == 0)
			m_pClientList[iClientH]->m_sType = 42;
		else if (memcmp(token, "LWB", 3) == 0)
			m_pClientList[iClientH]->m_sType = 43;
		else if (memcmp(token, "GHK", 3) == 0)
			m_pClientList[iClientH]->m_sType = 44;
		else if (memcmp(token, "GHC", 6) == 0)
			m_pClientList[iClientH]->m_sType = 45;
		else if (memcmp(token, "TK", 2) == 0)
			m_pClientList[iClientH]->m_sType = 46;
		else if (memcmp(token, "BG", 2) == 0)
			m_pClientList[iClientH]->m_sType = 47;
		else if (memcmp(token, "Stalker", 7) == 0)
			m_pClientList[iClientH]->m_sType = 48;
		else if (memcmp(token, "Hellclaw", 8) == 0)
			m_pClientList[iClientH]->m_sType = 49;
		else if (memcmp(token, "Tigerworm", 8) == 0)
			m_pClientList[iClientH]->m_sType = 50;
		else if (memcmp(token, "CP", 2) == 0)
			m_pClientList[iClientH]->m_sType = 51;
		else if (memcmp(token, "Gagoyle", 7) == 0)
			m_pClientList[iClientH]->m_sType = 52;
		else if (memcmp(token, "Beholder", 8) == 0)
			m_pClientList[iClientH]->m_sType = 53;
		else if (memcmp(token, "Dark-Elf", 8) == 0)
			m_pClientList[iClientH]->m_sType = 54;
		else if (memcmp(token, "Rabbit", 6) == 0)
			m_pClientList[iClientH]->m_sType = 55;
		else if (memcmp(token, "Cat", 3) == 0)
			m_pClientList[iClientH]->m_sType = 56;
		else if (memcmp(token, "Giant-Frog", 10) == 0)
			m_pClientList[iClientH]->m_sType = 57;
		else if (memcmp(token, "Mountain-Giant", 14) == 0)
			m_pClientList[iClientH]->m_sType = 58;
		else if (memcmp(token, "Ettin", 5) == 0)
			m_pClientList[iClientH]->m_sType = 59;
		else if (memcmp(token, "Cannibal-Plant", 13) == 0)
			m_pClientList[iClientH]->m_sType = 60;
		else if (memcmp(token, "Rudolph", 7) == 0)
			m_pClientList[iClientH]->m_sType = 61;
		else if (memcmp(token, "DireBoar", 8) == 0)
			m_pClientList[iClientH]->m_sType = 62;
		else if (memcmp(token, "Frost", 5) == 0)
			m_pClientList[iClientH]->m_sType = 63;
		else if (memcmp(token, "Crops", 5) == 0)
			m_pClientList[iClientH]->m_sType = 64;
		else if (memcmp(token, "Ice-Golem", 9) == 0)
			m_pClientList[iClientH]->m_sType = 65;
			//else if (memcmp(token, "Wyvern", 6) == 0)
			//	m_pClientList[iClientH]->m_sType = 66;
		else if (memcmp(token, "McGaffin", 8) == 0)
			m_pClientList[iClientH]->m_sType = 67;
		else if (memcmp(token, "Perry", 5) == 0)
			m_pClientList[iClientH]->m_sType = 68;
		else if (memcmp(token, "Devlin", 6) == 0)
			m_pClientList[iClientH]->m_sType = 69;
		else if (memcmp(token, "Barlog", 6) == 0)
			m_pClientList[iClientH]->m_sType = 70;
		else if (memcmp(token, "Centaurus", 9) == 0)
			m_pClientList[iClientH]->m_sType = 71;
		else if (memcmp(token, "Claw-Turtle", 11) == 0)
			m_pClientList[iClientH]->m_sType = 72;
			//else if (memcmp(token, "Fire-Wyvern", 11) == 0)
			//	m_pClientList[iClientH]->m_sType = 73;
		else if (memcmp(token, "Giant-Crayfish", 14) == 0)
			m_pClientList[iClientH]->m_sType = 74;
		else if (memcmp(token, "Giant-Lizard", 12) == 0)
			m_pClientList[iClientH]->m_sType = 75;
		else if (memcmp(token, "Giant-Plant", 11) == 0)
			m_pClientList[iClientH]->m_sType = 76;
		else if (memcmp(token, "MasterMage-Orc", 14) == 0)
			m_pClientList[iClientH]->m_sType = 77;
		else if (memcmp(token, "Minotaurs", 9) == 0)
			m_pClientList[iClientH]->m_sType = 78;
		else if (memcmp(token, "Nizie", 5) == 0)
			m_pClientList[iClientH]->m_sType = 79;
		else if (memcmp(token, "Tentocle", 8) == 0)
			m_pClientList[iClientH]->m_sType = 80;
			//else if (memcmp(token, "Abaddon", 7) == 0)
			//	m_pClientList[iClientH]->m_sType = 81;
		else if (memcmp(token, "Sor", 3) == 0)
			m_pClientList[iClientH]->m_sType = 82;
		else if (memcmp(token, "ATK", 3) == 0)
			m_pClientList[iClientH]->m_sType = 83;
		else if (memcmp(token, "Elf", 3) == 0)
			m_pClientList[iClientH]->m_sType = 84;
		else if (memcmp(token, "DSK", 3) == 0)
			m_pClientList[iClientH]->m_sType = 85;
		else if (memcmp(token, "HBT", 3) == 0)
			m_pClientList[iClientH]->m_sType = 86;
		else if (memcmp(token, "CT", 2) == 0)
			m_pClientList[iClientH]->m_sType = 87;
		else if (memcmp(token, "Bar", 3) == 0)
			m_pClientList[iClientH]->m_sType = 88;
		else if (memcmp(token, "AGC", 3) == 0)
			m_pClientList[iClientH]->m_sType = 89;
		else if (memcmp(token, "Gail", 4) == 0)
			m_pClientList[iClientH]->m_sType = 90;
		else if (memcmp(token, "gate", 4) == 0)
			m_pClientList[iClientH]->m_sType = 91;
	}
	SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
	delete pStrTok;
}

void CGame::AdminOrder_SetInvi(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSetInvis) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (token[0] == '1') SetInvisibilityFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
		else
			if (token[0] == '0') SetInvisibilityFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
	}
	delete pStrTok;
}

bool CGame::bOnClose() {
	if (m_bIsServerShutdowned == false)
		if (MessageBox(0, "Player data not saved! Shutdown server now?", m_cServerName, MB_ICONEXCLAMATION | MB_YESNO) == IDYES) return true;
		else return false;
	else return true;
	return false;
}

void CGame::AdminOrder_SetZerk(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSetZerk) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (token[0] == '1') {
			SetBerserkFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
			m_pClientList[iClientH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_BERSERK ] = (char) m_pMagicConfigList[32]->m_sValue4;
		} else
			if (token[0] == '0') SetBerserkFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
	}
	delete pStrTok;
}

void CGame::AdminOrder_SetFreeze(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSetIce) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (token[0] == '1') SetIceFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
		else
			if (token[0] == '0') SetIceFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
	}
	delete pStrTok;
}
// 05/24/2004 - Hypnotoad - Hammer and Wand train to 100% fixed

void CGame::_CheckAttackType(int iClientH, short *spType) {
	uint16_t wType;
	if (m_pClientList[iClientH] == 0) return;
	wType = ((m_pClientList[iClientH]->m_sAppr2 & 0x0FF0) >> 4);
	switch (*spType) {
		case 2:
			if (m_pClientList[iClientH]->m_cArrowIndex == -1) *spType = 0;
			if (wType < 40) *spType = 1;
			break;
		case 20:
			if (m_pClientList[iClientH]->m_iSuperAttackLeft <= 0) *spType = 1;
			if (m_pClientList[iClientH]->m_cSkillMastery[5] < 100) *spType = 1;
			break;
		case 21:
			if (m_pClientList[iClientH]->m_iSuperAttackLeft <= 0) *spType = 1;
			if (m_pClientList[iClientH]->m_cSkillMastery[7] < 100) *spType = 1;
			break;
		case 22:
			if (m_pClientList[iClientH]->m_iSuperAttackLeft <= 0) *spType = 1;
			if (m_pClientList[iClientH]->m_cSkillMastery[9] < 100) *spType = 1;
			break;
		case 23:
			if (m_pClientList[iClientH]->m_iSuperAttackLeft <= 0) *spType = 1;
			if (m_pClientList[iClientH]->m_cSkillMastery[8] < 100) *spType = 1;
			break;
		case 24:
			if (m_pClientList[iClientH]->m_iSuperAttackLeft <= 0) *spType = 1;
			if (m_pClientList[iClientH]->m_cSkillMastery[10] < 100) *spType = 1;
			break;
		case 25:
			if (m_pClientList[iClientH]->m_iSuperAttackLeft <= 0) *spType = 2;
			if (m_pClientList[iClientH]->m_cSkillMastery[6] < 100) *spType = 2;
			if (m_pClientList[iClientH]->m_cArrowIndex == -1) *spType = 0;
			if (wType < 40) *spType = 1;
			break;
		case 26:
			if (m_pClientList[iClientH]->m_iSuperAttackLeft <= 0) *spType = 1;
			if (m_pClientList[iClientH]->m_cSkillMastery[14] < 100) *spType = 1;
			break;
		case 27:
			if (m_pClientList[iClientH]->m_iSuperAttackLeft <= 0) *spType = 1;
			if (m_pClientList[iClientH]->m_cSkillMastery[21] < 100) *spType = 1;
			break;
	}
}

void CGame::ReqCreatePortionHandler(int iClientH, char *pData) {
	uint32_t * dwp;
	uint16_t * wp;
	char * cp, cI[6], cPortionName[21], cData[120];
	int iRet;
	int i;
	int j;
	int iEraseReq;
	int iSkillLimit;
	int iSkillLevel;
	int iResult;
	int iDifficulty;
	short * sp, sItemIndex[6], sTemp;
	CPortion::E sItemArray[6];
	short sItemNumber[6];
	bool bDup;
	bool bFlag;
	CItem * pItem;
	if (m_pClientList[iClientH] == 0) return;
	m_pClientList[iClientH]->m_iSkillMsgRecvCount++;
	for (i = 0; i < 6; i++) {
		cI[i] = -1;
		sItemIndex[i] = -1;
		sItemNumber[i] = 0;
	}
	cp = (char *) (pData + 11);
	cI[0] = *cp;
	cp++;
	cI[1] = *cp;
	cp++;
	cI[2] = *cp;
	cp++;
	cI[3] = *cp;
	cp++;
	cI[4] = *cp;
	cp++;
	cI[5] = *cp;
	cp++;
	for (i = 0; i < 6; i++) {
		if (cI[i] >= DEF_MAXITEMS) return;
		if ((cI[i] >= 0) && (m_pClientList[iClientH]->m_pItemList[cI[i]] == 0)) return;
	}
	for (i = 0; i < 6; i++)
		if (cI[i] >= 0) {
			bDup = false;
			for (j = 0; j < 6; j++)
				if (sItemIndex[j] == cI[i]) {
					sItemNumber[j]++;
					bDup = true;
				}
			if (bDup == false) {
				for (j = 0; j < 6; j++)
					if (sItemIndex[j] == -1) {
						sItemIndex[j] = cI[i];
						sItemNumber[j]++;
						goto RCPH_LOOPBREAK;
					}
RCPH_LOOPBREAK:
				;
			}
		}
	for (i = 0; i < 6; i++)
		if (sItemIndex[i] != -1) {
			if (sItemIndex[i] < 0) return;
			if ((sItemIndex[i] >= 0) && (sItemIndex[i] >= DEF_MAXITEMS)) return;
			if (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]] == 0) return;
			if (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_dwCount < (uint32_t) sItemNumber[i]) return;
		}
	bFlag = true;
	while (bFlag == true) {
		bFlag = false;
		for (i = 0; i < 5; i++)
			if ((sItemIndex[i] != -1) && (sItemIndex[i + 1] != -1)) {
				if ((m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_sIDnum) <
						  (m_pClientList[iClientH]->m_pItemList[sItemIndex[i + 1]]->m_sIDnum)) {
					sTemp = sItemIndex[i + 1];
					sItemIndex[i + 1] = sItemIndex[i];
					sItemIndex[i] = sTemp;
					sTemp = sItemNumber[i + 1];
					sItemNumber[i + 1] = sItemNumber[i];
					sItemNumber[i] = sTemp;
					bFlag = true;
				}
			}
	}
	//testcode
	/*
	char cTemp[120];
	char cTxt1[120];
	char cTxt2[120];
	std::memset(cTxt1, 0, sizeof(cTxt1));
	std::memset(cTxt2, 0, sizeof(cTxt2));
	for (i = 0; i < 6; i++) {
		std::memset(cTemp, 0, sizeof(cTemp));
		if (sItemIndex[i] != -1)
			 wsprintf(cTemp, "(%d) ", m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_sIDnum);
		else strcpy(cTemp, "(*)");
		strcat(cTxt1, cTemp);
		std::memset(cTemp, 0, sizeof(cTemp));
		wsprintf(cTemp, "(%d) ", sItemNumber[i]);
		strcat(cTxt2, cTemp);
	}
	PutLogList(cTxt1);
	PutLogList(cTxt2);
	 */
	j = 0;
	for (i = 0; i < 6; i++) {
		if (sItemIndex[i] != -1)
			sItemArray[j].id_ = m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_sIDnum;
		else sItemArray[j].id_ = ItemId::none;
		sItemArray[j].num_ = sItemNumber[i];
		++j;
	}
	//testcode
	/*
	char cTemp[120], cTxt1[120];
	std::memset(cTxt1, 0, sizeof(cTxt1));
	for (i = 0; i < 12; i++) {
		std::memset(cTemp, 0, sizeof(cTemp));
		wsprintf(cTemp, "%d", sItemArray[i]);
		strcat(cTxt1, cTemp);
	}
	PutLogList(cTxt1);
	 */
	std::memset(cPortionName, 0, sizeof(cPortionName));
	for (i = 0; i < DEF_MAXPORTIONTYPES; i++)
		if (m_pPortionConfigList[i] != 0) {
			bFlag = false;
			for (j = 0; j < 6; j++)
				if (m_pPortionConfigList[i]->m_sArray[j] != sItemArray[j]) bFlag = true;
			if (bFlag == false) {
				std::memset(cPortionName, 0, sizeof(cPortionName));
				memcpy(cPortionName, m_pPortionConfigList[i]->m_cName, 20);
				iSkillLimit = m_pPortionConfigList[i]->m_iSkillLimit;
				iDifficulty = m_pPortionConfigList[i]->m_iDifficulty;
			}
		}
	if (strlen(cPortionName) == 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOMATCHINGPORTION, 0, 0, 0, 0);
		return;
	}
	iSkillLevel = m_pClientList[iClientH]->m_cSkillMastery[12];
	if (iSkillLimit > iSkillLevel) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_LOWPORTIONSKILL, 0, 0, 0, cPortionName);
		return;
	}
	iSkillLevel -= iDifficulty;
	if (iSkillLevel <= 0) iSkillLevel = 1;
	iResult = iDice(1, 100);
	if (iResult > iSkillLevel) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_PORTIONFAIL, 0, 0, 0, cPortionName);
		return;
	}
	CalculateSSN_SkillIndex(iClientH, 12, 1);
	if (strlen(cPortionName) != 0) {
		pItem = 0;
		pItem = new CItem;
		if (pItem == 0) return;
		for (i = 0; i < 6; i++)
			if (sItemIndex[i] != -1) {
				if (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_cItemType == ItemType::consume)
					// v1.41 !!!
					SetItemCount(iClientH, sItemIndex[i], //     m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_cName,
						  m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_dwCount - sItemNumber[i]);
				else ItemDepleteHandler(iClientH, sItemIndex[i], false, true);
			}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_PORTIONSUCCESS, 0, 0, 0, cPortionName);
		m_pClientList[iClientH]->m_iExpStock += iDice(1, (iDifficulty / 3));
		if ((_bInitItemAttr(pItem, cPortionName) == true)) {
			if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
				std::memset(cData, 0, sizeof(cData));
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_ITEMOBTAINED;
				cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
				*cp = 1;
				cp++;
				memcpy(cp, pItem->m_cName, 20);
				cp += 20;
				dwp = (uint32_t *) cp;
				*dwp = pItem->m_dwCount;
				cp += 4;
				*cp = (char) pItem->m_cItemType;
				cp++;
				*cp = (char) pItem->m_cEquipPos;
				cp++;
				*cp = (char) 0;
				cp++;
				sp = (short *) cp;
				*sp = pItem->m_sLevelLimit;
				cp += 2;
				*cp = pItem->m_cGenderLimit;
				cp++;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wCurLifeSpan;
				cp += 2;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wWeight;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSprite;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSpriteFrame;
				cp += 2;
				*cp = pItem->m_cItemColor;
				cp++;
				*cp = (char) pItem->m_sItemSpecEffectValue2; // v1.41
				cp++;
				dwp = (uint32_t *) cp;
				*dwp = pItem->m_dwAttribute;
				cp += 4;
				/*
				 *cp = (char)(pItem->m_dwAttribute & 0x00000001);
				cp++;
				 */
				if (iEraseReq == 1) delete pItem;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						break;
				}
				//if ((pItem->m_wPrice * pItem->m_dwCount) > 1000)
				//	SendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATA, iClientH);
			} else {
				m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
						  m_pClientList[iClientH]->m_sY, pItem);
				SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
						  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
						  pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); // v1.4
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						break;
				}
			}
		} else {
			delete pItem;
			pItem = 0;
		}
	}
}
///		Snoopy: Added Crafting to the same file than potions

bool CGame::_bDecodePortionConfigFileContents(char *pData, uint32_t dwMsgSize) {
	char * pContents, * token, cTxt[120];
	char seps[] = "= \t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int iPortionConfigListIndex = 0;
	int iCraftingConfigListIndex = 0;
	CStrTok * pStrTok;
	pContents = new char[dwMsgSize + 1];
	ZeroMemory(pContents, dwMsgSize + 1);
	memcpy(pContents, pData, dwMsgSize);
	pStrTok = new CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != 0) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1: // Potion's index
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! POTION configuration file error - Wrong Data format(1).");
								delete pContents;
								delete pStrTok;
								return false;
							}
							if (m_pPortionConfigList[atoi(token)] != 0) {
								PutLogList("(!!!) CRITICAL ERROR! POTION configuration file error - Duplicate portion number.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pPortionConfigList[atoi(token)] = new CPortion;
							iPortionConfigListIndex = atoi(token);
							cReadModeB = 2;
							break;
						case 2: // Potion's name
							std::memset(m_pPortionConfigList[iPortionConfigListIndex]->m_cName, 0, sizeof(m_pPortionConfigList[iPortionConfigListIndex]->m_cName));
							memcpy(m_pPortionConfigList[iPortionConfigListIndex]->m_cName, token, strlen(token));
							cReadModeB = 3;
							break;
						default:
						{ // m_sArray[0~10] {
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! POTION configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							auto i = (cReadModeB - 3) / 2;
							bool q = (cReadModeB - 3) % 2;
							auto &r = m_pPortionConfigList[iPortionConfigListIndex]->m_sArray[i];
							if (q) {
								r.id_ = (ItemId) atoi(token);
							} else {
								r.num_ = atoi(token);
							}
							cReadModeB++;
						}
							break;
						case 14: // m_sArray[11]
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! POTION configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pPortionConfigList[iPortionConfigListIndex]->m_sArray[5].num_ = atoi(token);
							cReadModeB = 15;
							break;
						case 15: // Mini Skill
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! POTION configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pPortionConfigList[iPortionConfigListIndex]->m_iSkillLimit = atoi(token);
							cReadModeB = 16;
							break;
						case 16:// Difficulty
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! POTION configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pPortionConfigList[iPortionConfigListIndex]->m_iDifficulty = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				case 2: // Crafting
					switch (cReadModeB) {
						case 1: //
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! CRAFTING configuration file error - Wrong Data format(1).");
								delete pContents;
								delete pStrTok;
								return false;
							}
							if (m_pCraftingConfigList[atoi(token)] != 0) {
								PutLogList("(!!!) CRITICAL ERROR! CRAFTING configuration file error - Duplicate crafting number.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pCraftingConfigList[atoi(token)] = new CPortion;
							iCraftingConfigListIndex = atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							std::memset(m_pCraftingConfigList[iCraftingConfigListIndex]->m_cName, 0, sizeof(m_pCraftingConfigList[iCraftingConfigListIndex]->m_cName));
							memcpy(m_pCraftingConfigList[iCraftingConfigListIndex]->m_cName, token, strlen(token));
							cReadModeB = 3;
							break;
						default:
						{ // m_sArray[0~10]
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! CRAFTING configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							auto i = (cReadModeB - 3) / 2;
							bool q = (cReadModeB - 3) % 2;
							auto &e = m_pCraftingConfigList[iCraftingConfigListIndex]->m_sArray[i];
							if (q) {
								e.num_ = atoi(token);
							} else {
								e.id_ = (ItemId) atoi(token);
							}
							cReadModeB++;
						}
							break;
						case 14: // m_sArray[11]
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! CRAFTING configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pCraftingConfigList[iCraftingConfigListIndex]->m_sArray[5].num_ = atoi(token);
							cReadModeB = 15;
							break;
						case 15: //
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! CRAFTING configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pCraftingConfigList[iCraftingConfigListIndex]->m_iSkillLimit = atoi(token);
							cReadModeB = 16;
							break;
						case 16://
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! CRAFTING configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pCraftingConfigList[iCraftingConfigListIndex]->m_iDifficulty = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				default:
					break;
			}
		} else {
			if (memcmp(token, "potion", 5) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
			}
			if (memcmp(token, "crafting", 8) == 0) {
				cReadModeA = 2;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
	}
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		PutLogList("(!!!) CRITICAL ERROR! POTION configuration file contents error!");
		return false;
	}
	wsprintf(cTxt, "(!) POTION(Total:%d) configuration - success!", iPortionConfigListIndex);
	PutLogList(cTxt);
	return true;
}

void CGame::LocalSavePlayerData(int iClientH) {
	char * pData, * cp, cFn[256], cDir[256], cTxt[256], cCharDir[256];
	int iSize;
	FILE * pFile;
	SYSTEMTIME SysTime;
	if (m_pClientList[iClientH] == 0) return;
	pData = new char[30000];
	if (pData == 0) return;
	ZeroMemory(pData, 30000);
	cp = (char *) (pData);
	iSize = _iComposePlayerDataFileContents(iClientH, cp);
	GetLocalTime(&SysTime);
	ZeroMemory(cCharDir, sizeof (cDir));
	wsprintf(cCharDir, "Character_%d_%d_%d_%d", SysTime.wMonth, SysTime.wDay, SysTime.wHour, SysTime.wMinute);
	std::memset(cDir, 0, sizeof(cDir));
	std::memset(cFn, 0, sizeof(cFn));
	strcat(cFn, cCharDir);
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	wsprintf(cTxt, "AscII%d", (unsigned char) m_pClientList[iClientH]->m_cCharName[0]);
	strcat(cFn, cTxt);
	strcpy(cDir, cFn);
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, m_pClientList[iClientH]->m_cCharName);
	strcat(cFn, ".txt");
	_mkdir(cCharDir);
	_mkdir(cDir);
	if (iSize == 0) {
		PutLogList("(!) Character data body empty: Cannot create & save temporal player data file.");
		delete pData;
		return;
	}
	pFile = fopen(cFn, "wt");
	if (pFile == 0) {
		wsprintf(cTxt, "(!) Cannot create temporal player data file : Name(%s)", cFn);
		PutLogList(cTxt);
	} else {
		wsprintf(cTxt, "(!) temporal player data file saved : Name(%s)", cFn);
		PutLogList(cTxt);
		fwrite(cp, iSize, 1, pFile);
	}
	if (pFile != 0) fclose(pFile);
	delete pData;
}

void CGame::MineralGenerator() {
	int i;
	int iP;
	int tX;
	int tY;
	for (i = 0; i < DEF_MAXMAPS; i++) {
		if ((iDice(1, 4) == 1) && (m_pMapList[i] != 0) &&
				  (m_pMapList[i]->m_bMineralGenerator == true) &&
				  (m_pMapList[i]->m_iCurMineral < m_pMapList[i]->m_iMaxMineral)) {
			iP = iDice(1, m_pMapList[i]->m_iTotalMineralPoint) - 1;
			if ((m_pMapList[i]->m_MineralPointList[iP].x == -1) || (m_pMapList[i]->m_MineralPointList[iP].y == -1)) break;
			tX = m_pMapList[i]->m_MineralPointList[iP].x;
			tY = m_pMapList[i]->m_MineralPointList[iP].y;
			iCreateMineral(i, tX, tY, m_pMapList[i]->m_cMineralGeneratorLevel);
		}
	}
}

int CGame::iCreateMineral(char cMapIndex, int tX, int tY, char cLevel) {
	int i;
	int iDynamicHandle;
	int iMineralType;
	if ((cMapIndex < 0) || (cMapIndex >= DEF_MAXMAPS)) return 0;
	if (m_pMapList[cMapIndex] == 0) return 0;
	for (i = 1; i < DEF_MAXMINERALS; i++)
		if (m_pMineral[i] == 0) {
			iMineralType = iDice(1, cLevel);
			m_pMineral[i] = new CMineral(iMineralType, cMapIndex, tX, tY, 1);
			if (m_pMineral[i] == 0) return 0;
			iDynamicHandle = 0;
			switch (iMineralType) {
				case 1:
				case 2:
				case 3:
				case 4:
					iDynamicHandle = iAddDynamicObjectList(0, 0, DEF_DYNAMICOBJECT_MINERAL1, cMapIndex, tX, tY, 0, i);
					break;
				case 5:
				case 6:
					iDynamicHandle = iAddDynamicObjectList(0, 0, DEF_DYNAMICOBJECT_MINERAL2, cMapIndex, tX, tY, 0, i);
					break;
				default:
					iDynamicHandle = iAddDynamicObjectList(0, 0, DEF_DYNAMICOBJECT_MINERAL1, cMapIndex, tX, tY, 0, i);
					break;
			}
			if (iDynamicHandle == 0) {
				delete m_pMineral[i];
				m_pMineral[i] = 0;
				return 0;
			}
			m_pMineral[i]->m_sDynamicObjectHandle = iDynamicHandle;
			m_pMineral[i]->m_cMapIndex = cMapIndex;
			switch (iMineralType) {
				case 1: m_pMineral[i]->m_iDifficulty = 10;
					m_pMineral[i]->m_iRemain = 20;
					break;
				case 2: m_pMineral[i]->m_iDifficulty = 15;
					m_pMineral[i]->m_iRemain = 15;
					break;
				case 3: m_pMineral[i]->m_iDifficulty = 20;
					m_pMineral[i]->m_iRemain = 10;
					break;
				case 4: m_pMineral[i]->m_iDifficulty = 50;
					m_pMineral[i]->m_iRemain = 8;
					break;
				case 5: m_pMineral[i]->m_iDifficulty = 70;
					m_pMineral[i]->m_iRemain = 6;
					break;
				case 6: m_pMineral[i]->m_iDifficulty = 90;
					m_pMineral[i]->m_iRemain = 4;
					break;
				default: m_pMineral[i]->m_iDifficulty = 10;
					m_pMineral[i]->m_iRemain = 20;
					break;
			}
			m_pMapList[cMapIndex]->m_iCurMineral++;
			return i;
		}
	return 0;
}

void CGame::_CheckMiningAction(int iClientH, int dX, int dY) {
	short sType;
	uint32_t dwRegisterTime;
	int iDynamicIndex;
	int iSkillLevel;
	int iResult;
	ItemId iItemID = ItemId::none;
	CItem * pItem;
	uint16_t wWeaponType;
	if (m_pClientList[iClientH] == 0) return;
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bGetDynamicObject(dX, dY, &sType, &dwRegisterTime, &iDynamicIndex);
	switch (sType) {
		case DEF_DYNAMICOBJECT_MINERAL1:
		case DEF_DYNAMICOBJECT_MINERAL2:
			wWeaponType = ((m_pClientList[iClientH]->m_sAppr2 & 0x0FF0) >> 4);
			if (wWeaponType == 25) {
			} else return;
			if ((m_pClientList[iClientH]->m_sAppr2 & 0xF000) == 0) return;
			iSkillLevel = m_pClientList[iClientH]->m_cSkillMastery[0];
			if (iSkillLevel == 0) break;
			if (m_pDynamicObjectList[iDynamicIndex] == 0) break;
			iSkillLevel -= m_pMineral[ m_pDynamicObjectList[iDynamicIndex]->m_iV1 ]->m_iDifficulty;
			if (iSkillLevel <= 0) iSkillLevel = 1;
			iResult = iDice(1, 100);
			if (iResult <= iSkillLevel) {
				CalculateSSN_SkillIndex(iClientH, 0, 1);
				switch (m_pMineral[m_pDynamicObjectList[iDynamicIndex]->m_iV1]->m_cType) {
					case 1:
						switch (iDice(1, 5)) {
							case 1:
							case 2:
							case 3:
								iItemID = ItemId::coal; // Coal
								m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
								break;
							case 4:
								iItemID = ItemId::iron_ore; // IronOre
								m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
								break;
							case 5:
								iItemID = ItemId::blonde_stone; // BlondeStone
								m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
								break;
						}
						break;
					case 2:
						switch (iDice(1, 5)) {
							case 1:
							case 2:
								iItemID = ItemId::coal; // Coal
								m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
								break;
							case 3:
							case 4:
								iItemID = ItemId::iron_ore; // IronOre
								m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
								break;
							case 5:
								if (iDice(1, 3) == 2) {
									iItemID = ItemId::silver_nugget; // SilverNugget
									m_pClientList[iClientH]->m_iExpStock += iDice(1, 4);
								} else {
									iItemID = ItemId::blonde_stone; // BlondeStone
									m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
								}
								break;
						}
						break;
					case 3:
						switch (iDice(1, 6)) {
							case 1:
								iItemID = ItemId::coal; // Coal
								m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
								break;
							case 2:
							case 3:
							case 4:
							case 5:
								iItemID = ItemId::iron_ore; // IronOre
								m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
								break;
							case 6:
								if (iDice(1, 8) == 3) {
									if (iDice(1, 2) == 1) {
										iItemID = ItemId::silver_nugget; // SilverNugget
										m_pClientList[iClientH]->m_iExpStock += iDice(1, 4);
									} else {
										iItemID = ItemId::iron_ore; // IronOre
										m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
									}
									break;
								} else {
									iItemID = ItemId::iron_ore; // IronOre
									m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
								}
								break;
						}
						break;
					case 4:
						switch (iDice(1, 6)) {
							case 1:
								iItemID = ItemId::coal; // Coal
								m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
								break;
							case 2:
								if (iDice(1, 3) == 2) {
									iItemID = ItemId::silver_nugget; // SilverNugget
									m_pClientList[iClientH]->m_iExpStock += iDice(1, 4);
								}
								break;
							case 3:
							case 4:
							case 5:
								iItemID = ItemId::iron_ore; // IronOre
								m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
								break;
							case 6:
								if (iDice(1, 8) == 3) {
									if (iDice(1, 4) == 3) {
										if (iDice(1, 4) < 3) {
											iItemID = ItemId::mithral; // Mithral
											m_pClientList[iClientH]->m_iExpStock += iDice(1, 6);
										} else {
											iItemID = ItemId::gold_nugget; // GoldNugget
											m_pClientList[iClientH]->m_iExpStock += iDice(1, 5);
										}
										break;
									} else {
										iItemID = ItemId::silver_nugget; // SilverNugget
										m_pClientList[iClientH]->m_iExpStock += iDice(1, 4);
									}
									break;
								} else {
									if (iDice(1, 2) == 1) {
										iItemID = ItemId::gold_nugget; // GoldNugget
										m_pClientList[iClientH]->m_iExpStock += iDice(1, 5);
									} else {
										iItemID = ItemId::iron_ore; // IronOre
										m_pClientList[iClientH]->m_iExpStock += iDice(1, 3);
									}
									break;
								}
								break;
						}
						break;
					case 5:
						switch (iDice(1, 19)) {
							case 3:
								iItemID = ItemId::sapphire; // Sapphire
								m_pClientList[iClientH]->m_iExpStock += iDice(2, 3);
								break;
							default:
								iItemID = ItemId::crystal; // Crystal
								m_pClientList[iClientH]->m_iExpStock += iDice(2, 3);
								break;
						}
						break;
					case 6:
						switch (iDice(1, 5)) {
							case 1:
								if (iDice(1, 6) == 3) {
									iItemID = ItemId::emerald; // Emerald
									m_pClientList[iClientH]->m_iExpStock += iDice(2, 4);
								} else {
									iItemID = ItemId::crystal; // Crystal
									m_pClientList[iClientH]->m_iExpStock += iDice(2, 3);
								}
								break;
							case 2:
								if (iDice(1, 6) == 3) {
									iItemID = ItemId::sapphire; // Saphire
									m_pClientList[iClientH]->m_iExpStock += iDice(2, 4);
								} else {
									iItemID = ItemId::crystal; // Crystal
									m_pClientList[iClientH]->m_iExpStock += iDice(2, 3);
								}
								break;
							case 3:
								if (iDice(1, 6) == 3) {
									iItemID = ItemId::ruby; // Ruby
									m_pClientList[iClientH]->m_iExpStock += iDice(2, 4);
								} else {
									iItemID = ItemId::crystal; // Crystal
									m_pClientList[iClientH]->m_iExpStock += iDice(2, 3);
								}
								break;
							case 4:
								iItemID = ItemId::crystal; // Crystal
								m_pClientList[iClientH]->m_iExpStock += iDice(2, 3);
								break;
							case 5:
								if (iDice(1, 12) == 3) {
									iItemID = ItemId::diamond; // Diamond
									m_pClientList[iClientH]->m_iExpStock += iDice(2, 5);
								} else {
									iItemID = ItemId::crystal; // Crystal
									m_pClientList[iClientH]->m_iExpStock += iDice(2, 3);
								}
								break;
						}
						break;
				}
				pItem = new CItem;
				if (_bInitItemAttr(pItem, iItemID) == false) {
					delete pItem;
				} else {
					m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
							  m_pClientList[iClientH]->m_sY, pItem);
					SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
							  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
							  pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); // v1.4
					// testcode
					// wsprintf(G_cTxt, "Mining Success: %d", iItemID);
					// PutLogList(G_cTxt);
				}
				m_pMineral[m_pDynamicObjectList[iDynamicIndex]->m_iV1]->m_iRemain--;
				if (m_pMineral[m_pDynamicObjectList[iDynamicIndex]->m_iV1]->m_iRemain <= 0) {
					bDeleteMineral(m_pDynamicObjectList[iDynamicIndex]->m_iV1);
					delete m_pDynamicObjectList[iDynamicIndex];
					m_pDynamicObjectList[iDynamicIndex] = 0;
				}
			}
			break;
		default:
			break;
	}
}

bool CGame::bDeleteMineral(int iIndex) {
	int iDynamicIndex;
	uint32_t dwTime;
	dwTime = timeGetTime();
	if (m_pMineral[iIndex] == 0) return false;
	iDynamicIndex = m_pMineral[iIndex]->m_sDynamicObjectHandle;
	if (m_pDynamicObjectList[iDynamicIndex] == 0) return false;
	SendEventToNearClient_TypeB(MSGID_DYNAMICOBJECT, DEF_MSGTYPE_REJECT, m_pDynamicObjectList[iDynamicIndex]->m_cMapIndex,
			  m_pDynamicObjectList[iDynamicIndex]->m_sX, m_pDynamicObjectList[iDynamicIndex]->m_sY,
			  m_pDynamicObjectList[iDynamicIndex]->m_sType, iDynamicIndex, 0);
	m_pMapList[m_pDynamicObjectList[iDynamicIndex]->m_cMapIndex]->SetDynamicObject(0, 0, m_pDynamicObjectList[iDynamicIndex]->m_sX, m_pDynamicObjectList[iDynamicIndex]->m_sY, dwTime);
	m_pMapList[m_pMineral[iIndex]->m_cMapIndex]->SetTempMoveAllowedFlag(m_pDynamicObjectList[iDynamicIndex]->m_sX, m_pDynamicObjectList[iDynamicIndex]->m_sY, true);
	m_pMapList[m_pMineral[iIndex]->m_cMapIndex]->m_iCurMineral--;
	delete m_pMineral[iIndex];
	m_pMineral[iIndex] = 0;
	return true;
}

void CGame::NpcTalkHandler(int iClientH, int iWho) {
	char cRewardName[21], cTargetName[21];
	int iResMode;
	int iQuestNum;
	int iQuestType;
	int iRewardType;
	int iRewardAmount;
	int iContribution;
	int iX;
	int iY;
	int iRange;
	NpcType iTargetType;
	int iTargetCount;
	iQuestNum = 0;
	std::memset(cTargetName, 0, sizeof(cTargetName));
	if (m_pClientList[iClientH] == 0) return;
	switch (iWho) {
		case 1: break;
		case 2: break;
		case 3: break;
		case 4:
			iQuestNum = _iTalkToNpcResult_Cityhall(iClientH, &iQuestType, &iResMode, &iRewardType, &iRewardAmount, &iContribution, cTargetName, &iTargetType, &iTargetCount, &iX, &iY, &iRange);
			break;
		case 5: break;
		case 6: break;
		case 32: break;
		case 21:
			iQuestNum = _iTalkToNpcResult_Guard(iClientH, &iQuestType, &iResMode, &iRewardType, &iRewardAmount, &iContribution, cTargetName, &iTargetType, &iTargetCount, &iX, &iY, &iRange);
			if (iQuestNum >= 1000) return;
			break;
	}
	std::memset(cRewardName, 0, sizeof(cRewardName));
	if (iQuestNum > 0) {
		if (iRewardType > 1) {
			strcpy(cRewardName, m_pItemConfigList[iRewardType]->m_cName);
		} else {
			switch (iRewardType) {
				case -10: strcpy(cRewardName, "experience");
					break;
			}
		}
		m_pClientList[iClientH]->m_iAskedQuest = iQuestNum;
		m_pClientList[iClientH]->m_iQuestRewardType = iRewardType;
		m_pClientList[iClientH]->m_iQuestRewardAmount = iRewardAmount;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NPCTALK, iQuestType, iResMode, iRewardAmount, cRewardName, iContribution,
				  (int) iTargetType, iTargetCount, iX, iY, iRange, cTargetName);
	} else {
		switch (iQuestNum) {
			case 0: SendNotifyMsg(0, iClientH, DEF_NOTIFY_NPCTALK, (iWho + 130), 0, 0, 0, 0);
				break;
			case -1:
			case -2:
			case -3:
			case -4: SendNotifyMsg(0, iClientH, DEF_NOTIFY_NPCTALK, abs(iQuestNum) + 100, 0, 0, 0, 0);
				break;
			case -5: break;
		}
	}
}

void CGame::CheckFireBluring(char cMapIndex, int sX, int sY) {
	int ix;
	int iy;
	short sSpr;
	short sSprFrame;
	char cItemColor;
	CItem * pItem;
	for (ix = sX - 1; ix <= sX + 1; ix++)
		for (iy = sY - 1; iy <= sY + 1; iy++) {
			ItemId iItemNum = m_pMapList[cMapIndex]->iCheckItem(ix, iy);
			if (iItemNum == ItemId::coal) {
				pItem = m_pMapList[cMapIndex]->pGetItem(ix, iy, &sSpr, &sSprFrame, &cItemColor);
				delete pItem;
				iAddDynamicObjectList(0, 0, DEF_DYNAMICOBJECT_FIRE, cMapIndex, ix, iy, 6000);
				SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_SETITEM, cMapIndex,
						  ix, iy, sSpr, sSprFrame, cItemColor);
			}
		}
}

void CGame::AdminOrder_GetNpcStatus(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256], cNpcName[256];
	CStrTok * pStrTok;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelGetNpcStatus) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cNpcName, 0, sizeof(cNpcName));
		strcpy(cNpcName, token);
	}
	for (i = 0; i < DEF_MAXNPCS; i++)
		if (m_pNpcList[i] != 0) {
			if (memcmp(m_pNpcList[i]->m_cName, cNpcName, 5) == 0) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINIFO, 1, i, 0, 0);
			}
		}
	delete pStrTok;
	return;
}

int CGame::_iGetWeaponSkillType(int iClientH) {
	uint16_t wWeaponType;
	if (m_pClientList[iClientH] == 0) return 0;
	wWeaponType = ((m_pClientList[iClientH]->m_sAppr2 & 0x0FF0) >> 4);
	if (wWeaponType == 0) {
		return 5;
	} else if ((wWeaponType >= 1) && (wWeaponType <= 2)) {
		return 7;
	} else if ((wWeaponType > 2) && (wWeaponType < 20)) {
		if (wWeaponType == 7)
			return 9;
		else return 8;
	} else if ((wWeaponType >= 20) && (wWeaponType < 30)) {
		return 10;
	} else if ((wWeaponType >= 30) && (wWeaponType < 35)) {
		return 14;
	} else if ((wWeaponType >= 35) && (wWeaponType < 40)) {
		return 21;
	} else if (wWeaponType >= 40) {
		return 6;
	}
	return 1;
}
static int ___iCAB5[] = {0, 0, 0, 1, 2};
static int ___iCAB6[] = {0, 0, 0, 0, 0};
static int ___iCAB7[] = {0, 0, 1, 2, 3};
static int ___iCAB8[] = {0, 0, 1, 3, 5};
static int ___iCAB9[] = {0, 0, 2, 4, 8};
static int ___iCAB10[] = {0, 0, 1, 2, 3};

int CGame::iGetComboAttackBonus(int iSkill, int iComboCount) {
	if (iComboCount <= 1) return 0;
	if (iComboCount > 6) return 0;
	switch (iSkill) {
		case 5:
			return ___iCAB5[iComboCount];
			break;
		case 6:
			return ___iCAB6[iComboCount];
			break;
		case 7:
			return ___iCAB7[iComboCount];
			break;
		case 8:
			return ___iCAB8[iComboCount];
			break;
		case 9:
			return ___iCAB9[iComboCount];
			break;
		case 10:
			return ___iCAB10[iComboCount];
			break;
		case 14:
			return ___iCAB6[iComboCount];
			break;
		case 21:
			return ___iCAB10[iComboCount];
			break;
	}
	return 0;
}

void CGame::SetDownSkillIndexHandler(int iClientH, int iSkillIndex) {
	if (m_pClientList[iClientH] == 0) return;
	if ((iSkillIndex < 0) || (iSkillIndex >= DEF_MAXSKILLTYPE)) return;
	if (m_pClientList[iClientH]->m_cSkillMastery[iSkillIndex] > 0)
		m_pClientList[iClientH]->m_iDownSkillIndex = iSkillIndex;
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_DOWNSKILLINDEXSET, m_pClientList[iClientH]->m_iDownSkillIndex, 0, 0, 0);
}

bool CGame::_bDepleteDestTypeItemUseEffect(int iClientH, int dX, int dY, short sItemIndex, short sDestItemID) {
	bool bRet;
	if (m_pClientList[iClientH] == 0) return false;
	if ((sItemIndex < 0) || (sItemIndex >= DEF_MAXITEMS)) return false;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) return false;
	switch (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectType) {
		case ItemEffectType::occupyflag:
			bRet = __bSetOccupyFlag(m_pClientList[iClientH]->m_cMapIndex, dX, dY,
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1,
					  0, iClientH, 0);
			if (bRet == true) {
				GetExp(iClientH, (iDice(m_pClientList[iClientH]->m_iLevel, 10)));
			} else {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTFLAGSPOT, 0, 0, 0, 0);
			}
			return bRet;
			// crusade
		case ItemEffectType::constructionkit:
			bRet = __bSetConstructionKit(m_pClientList[iClientH]->m_cMapIndex, dX, dY, //
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1, //
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2, //
					  iClientH);
			if (bRet == true) {
			} else {
			}
			return bRet;
		case ItemEffectType::dye:
			if ((sDestItemID >= 0) && (sDestItemID < DEF_MAXITEMS)) {
				if (m_pClientList[iClientH]->m_pItemList[sDestItemID] != 0) {
					if ((m_pClientList[iClientH]->m_pItemList[sDestItemID]->m_cCategory == 11) ||
							  (m_pClientList[iClientH]->m_pItemList[sDestItemID]->m_cCategory == 12)) {
						m_pClientList[iClientH]->m_pItemList[sDestItemID]->m_cItemColor = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMCOLORCHANGE, sDestItemID, m_pClientList[iClientH]->m_pItemList[sDestItemID]->m_cItemColor, 0, 0);
						return true;
					} else {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMCOLORCHANGE, sDestItemID, -1, 0, 0);
						return false;
					}
				}
			}
			break;
		case ItemEffectType::armordye:
			if ((sDestItemID >= 0) && (sDestItemID < DEF_MAXITEMS)) {
				if (m_pClientList[iClientH]->m_pItemList[sDestItemID] != 0) {
					if (m_pClientList[iClientH]->m_pItemList[sDestItemID]->m_cCategory == 6) {
						m_pClientList[iClientH]->m_pItemList[sDestItemID]->m_cItemColor = m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1;
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMCOLORCHANGE, sDestItemID, m_pClientList[iClientH]->m_pItemList[sDestItemID]->m_cItemColor, 0, 0);
						return true;
					} else {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMCOLORCHANGE, sDestItemID, -1, 0, 0);
						return false;
					}
				}
			}
			break;
		case ItemEffectType::farming:
			bRet = bPlantSeedBag(m_pClientList[iClientH]->m_cMapIndex, dX, dY,
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue1,
					  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemEffectValue2,
					  iClientH);
			return bRet;
		default:
			break;
	}
	return true;
}

bool CGame::__bSetOccupyFlag(char cMapIndex, int dX, int dY, int iSide, int iEKNum, int iClientH, bool bAdminFlag) {
	int ix;
	int iy;
	int iDynamicObjectIndex;
	int iIndex;
	CTile * pTile;;
	if (m_pMapList[cMapIndex] == 0) return false;
	if (((m_bIsHeldenianMode == false) || (m_bIsHeldenianMode != m_cHeldenianModeType)) && (m_bHeldenianInitiated == 1)) return false;
	if ((m_cHeldenianModeType == 1) && (m_iBTFieldMapIndex == -1)) return false;
	if ((m_cHeldenianModeType == 2) && (m_iGodHMapIndex == -1)) return false;
	if ((m_pClientList[iClientH]->m_iGuildRank == 0)) return false;
	pTile = (CTile *) (m_pMapList[cMapIndex]->m_pTile + dX + dY * m_pMapList[cMapIndex]->m_sSizeY);
	if (pTile->m_iAttribute != 0) return false;
	iSide = m_sLastHeldenianWinner;
	if ((dX < 25) || (dX >= m_pMapList[cMapIndex]->m_sSizeX - 25) ||
			  (dY < 25) || (dY >= m_pMapList[cMapIndex]->m_sSizeY - 25)) return false;
	if ((iClientH > 0) && (m_pClientList[iClientH] != 0)) {
		if ((bAdminFlag == false) && (m_pClientList[iClientH]->m_cSide != iSide)) return false;
	}
	pTile = (CTile *) (m_pMapList[cMapIndex]->m_pTile + dX + dY * m_pMapList[cMapIndex]->m_sSizeY);
	if (pTile->m_iOccupyFlagIndex != 0) return false;
	if (pTile->m_bIsMoveAllowed == false) return false;
	for (ix = dX - 3; ix <= dX + 3; ix++)
		for (iy = dY - 3; iy <= dY + 3; iy++) {
			if ((ix == dX) && (iy == dY)) {
			} else {
				pTile = (CTile *) (m_pMapList[cMapIndex]->m_pTile + ix + iy * m_pMapList[cMapIndex]->m_sSizeY);
				if ((pTile->m_iOccupyFlagIndex != 0) && (pTile->m_iOccupyFlagIndex > 0) &&
						  (pTile->m_iOccupyFlagIndex < DEF_MAXOCCUPYFLAG) && (m_pMapList[cMapIndex]->m_pOccupyFlag[pTile->m_iOccupyFlagIndex] != 0)) {
					if (m_pMapList[cMapIndex]->m_pOccupyFlag[pTile->m_iOccupyFlagIndex]->m_cSide == iSide) return false;
				}
			}
		}
	if (m_pMapList[cMapIndex]->m_iTotalOccupyFlags >= DEF_MAXOCCUPYFLAG) {
		return false;
	}
	switch (iSide) {
		case 1: iDynamicObjectIndex = iAddDynamicObjectList(0, 0, DEF_DYNAMICOBJECT_ARESDENFLAG1, cMapIndex, dX, dY, 0, 0);
			break;
		case 2: iDynamicObjectIndex = iAddDynamicObjectList(0, 0, DEF_DYNAMICOBJECT_ELVINEFLAG1, cMapIndex, dX, dY, 0, 0);
			break;
		default: iDynamicObjectIndex = 0;
	}
	iEKNum = 1;
	iIndex = m_pMapList[cMapIndex]->iRegisterOccupyFlag(dX, dY, iSide, iEKNum, iDynamicObjectIndex);
	if (iIndex < 0) {
		if (iDynamicObjectIndex > DEF_MAXGUILDS)
			return true;
	}
	pTile = (CTile *) (m_pMapList[cMapIndex]->m_pTile + dX + dY * m_pMapList[cMapIndex]->m_sSizeY);
	pTile->m_iOccupyFlagIndex = iIndex;
	m_pMapList[cMapIndex]->m_iTotalOccupyFlags++;
	if (m_cHeldenianModeType == 1) {
		for (ix = dX - 3; ix <= dX + 3; ix++)
			for (iy = dY - 3; iy <= dY + 3; iy++) {
				if ((ix < 0) || (ix >= m_pMapList[cMapIndex]->m_sSizeX) ||
						  (iy < 0) || (iy >= m_pMapList[cMapIndex]->m_sSizeY)) {
				} else {
					pTile = (CTile *) (m_pMapList[cMapIndex]->m_pTile + ix + iy * m_pMapList[cMapIndex]->m_sSizeY);
					switch (iSide) {
						case 1:
							pTile->m_iOccupyStatus -= iEKNum;
							break;
						case 2:
							pTile->m_iOccupyStatus += iEKNum;
							break;
					}
				}
			}
	}
	if (m_cHeldenianModeType == 2) {
		if (iSide == m_sLastHeldenianWinner) {
			m_cHeldenianVictoryType = iSide;
			GlobalEndHeldenianMode();
		}
	}
	return true;
}

void CGame::SetSummonMobAction(int iClientH, int iMode, uint32_t dwMsgSize, char *pData) {
	int i;
	int iTargetIndex;
	char seps[] = "= \t\n";
	char * token, cTargetName[11], cBuff[256];
	CStrTok * pStrTok;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_cSide == 0) return;
	switch (iMode) {
		case 0:
		case 1:
			for (i = 0; i < DEF_MAXNPCS; i++)
				if (m_pNpcList[i] != 0) {
					if ((m_pNpcList[i]->m_bIsSummoned == true) &&
							  (m_pNpcList[i]->m_iFollowOwnerIndex == iClientH) &&
							  (m_pNpcList[i]->m_cFollowOwnerType == DEF_OWNERTYPE_PLAYER)) {
						m_pNpcList[i]->m_iSummonControlMode = iMode;
						m_pNpcList[i]->m_bIsPermAttackMode = false;
						m_pNpcList[i]->m_cBehavior = NpcBehavior::move;
						m_pNpcList[i]->m_sBehaviorTurnCount = 0;
						m_pNpcList[i]->m_iTargetIndex = 0;
					}
				}
			break;
		case 2:
			if ((dwMsgSize) <= 0) return;
			memcpy(cBuff, pData, dwMsgSize);
			pStrTok = new CStrTok(cBuff, seps);
			token = pStrTok->pGet();
			token = pStrTok->pGet();
			iTargetIndex = 0;
			if (token != 0) {
				if (strlen(token) > 10)
					memcpy(cTargetName, token, 10);
				else memcpy(cTargetName, token, strlen(token));
				for (i = 1; i < DEF_MAXCLIENTS; i++) {
					// if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0)) { // original
					if ((m_pClientList[i] != 0) &&
							  (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0) &&
							  (strcmp(m_pClientList[iClientH]->m_cMapName, m_pClientList[i]->m_cMapName) == 0)) {
						iTargetIndex = i;
						goto SSMA_SKIPSEARCH;
					}
				}
			}
SSMA_SKIPSEARCH:
			;
			if ((iTargetIndex != 0) && (m_pClientList[iTargetIndex]->m_cSide != 0) &&
					  (m_pClientList[iTargetIndex]->m_cSide != m_pClientList[iClientH]->m_cSide)) {
				for (i = 0; i < DEF_MAXNPCS; i++)
					if (m_pNpcList[i] != 0) {
						if ((m_pNpcList[i]->m_bIsSummoned == true) &&
								  (m_pNpcList[i]->m_iFollowOwnerIndex == iClientH) &&
								  (m_pNpcList[i]->m_cFollowOwnerType == DEF_OWNERTYPE_PLAYER)) {
							m_pNpcList[i]->m_iSummonControlMode = iMode;
							m_pNpcList[i]->m_cBehavior = NpcBehavior::attack;
							m_pNpcList[i]->m_sBehaviorTurnCount = 0;
							m_pNpcList[i]->m_iTargetIndex = iTargetIndex;
							m_pNpcList[i]->m_cTargetType = DEF_OWNERTYPE_PLAYER;
							m_pNpcList[i]->m_bIsPermAttackMode = true;
						}
					}
			}
			break;
	}
}

void CGame::GetOccupyFlagHandler(int iClientH) {
	int i;
	int iNum;
	int iRet;
	int iEraseReq;
	int iEKNum;
	char * cp, cData[256], cItemName[21];
	CItem * pItem;
	uint32_t * dwp;
	short * sp;
	uint16_t * wp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iEnemyKillCount < 3) return;
	if (m_pClientList[iClientH]->m_cSide == 0) return;
	std::memset(cItemName, 0, sizeof(cItemName));
	switch (m_pClientList[iClientH]->m_cSide) {
		case 1: strcpy(cItemName, "AresdenFlag");
			break;
		case 2: strcpy(cItemName, "ElvineFlag");
			break;
	}
	iNum = 1;
	for (i = 1; i <= iNum; i++) {
		pItem = new CItem;
		if (_bInitItemAttr(pItem, cItemName) == false) {
			delete pItem;
		} else {
			if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
				if (m_pClientList[iClientH]->m_iCurWeightLoad < 0) m_pClientList[iClientH]->m_iCurWeightLoad = 0;
				if (m_pClientList[iClientH]->m_iEnemyKillCount >= 10) {
					iEKNum = 10;
					m_pClientList[iClientH]->m_iEnemyKillCount -= 10;
				} else {
					iEKNum = m_pClientList[iClientH]->m_iEnemyKillCount;
					m_pClientList[iClientH]->m_iEnemyKillCount = iEKNum;
				}
				pItem->m_sItemSpecEffectValue1 = iEKNum;
				wsprintf(G_cTxt, "PC(%s) obtained a Flag (%d).   %s(%d %d)", m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_cSide, m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
				PutLogList(G_cTxt);
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_ITEMOBTAINED;
				cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
				*cp = 1;
				cp++;
				memcpy(cp, pItem->m_cName, 20);
				cp += 20;
				dwp = (uint32_t *) cp;
				*dwp = pItem->m_dwCount;
				cp += 4;
				*cp = (char) pItem->m_cItemType;
				cp++;
				*cp = (char) pItem->m_cEquipPos;
				cp++;
				*cp = (char) 0;
				cp++;
				sp = (short *) cp;
				*sp = pItem->m_sLevelLimit;
				cp += 2;
				*cp = pItem->m_cGenderLimit;
				cp++;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wCurLifeSpan;
				cp += 2;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wWeight;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSprite;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSpriteFrame;
				cp += 2;
				*cp = pItem->m_cItemColor;
				cp++;
				*cp = (char) pItem->m_sItemSpecEffectValue2;
				cp++;
				dwp = (uint32_t *) cp;
				*dwp = pItem->m_dwAttribute;
				cp += 4;
				if (iEraseReq == 1) delete pItem;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
				iCalcTotalWeight(iClientH);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						return;
				}
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_ENEMYKILLS, m_pClientList[iClientH]->m_iEnemyKillCount, 0, 0, 0);
			} else {
				delete pItem;
				iCalcTotalWeight(iClientH);
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						return;
				}
			}
		}
	}
}

void CGame::GetFightzoneTicketHandler(int iClientH) {
	int iRet;
	int iEraseReq;
	int iMonth;
	int iDay;
	int iHour;
	char * cp, cData[256], cItemName[21];
	CItem * pItem;
	uint32_t * dwp;
	short * sp;
	uint16_t * wp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iFightZoneTicketNumber <= 0) {
		m_pClientList[iClientH]->m_iFightzoneNumber *= -1;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_FIGHTZONERESERVE, -1, 0, 0, 0);
		return;
	}
	std::memset(cItemName, 0, sizeof(cItemName));
	if (m_pClientList[iClientH]->m_iFightzoneNumber == 1)
		strcpy(cItemName, "ArenaTicket");
	else wsprintf(cItemName, "ArenaTicket(%d)", m_pClientList[iClientH]->m_iFightzoneNumber);
	pItem = new CItem;
	if (_bInitItemAttr(pItem, cItemName) == false) {
		delete pItem;
		return;
	}
	if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
		if (m_pClientList[iClientH]->m_iCurWeightLoad < 0) m_pClientList[iClientH]->m_iCurWeightLoad = 0;
		m_pClientList[iClientH]->m_iFightZoneTicketNumber = m_pClientList[iClientH]->m_iFightZoneTicketNumber - 1;
		pItem->m_sTouchEffectType = DEF_ITET_DATE;
		iMonth = m_pClientList[iClientH]->m_iReserveTime / 10000;
		iDay = (m_pClientList[iClientH]->m_iReserveTime - iMonth * 10000) / 100;
		iHour = m_pClientList[iClientH]->m_iReserveTime - iMonth * 10000 - iDay * 100;
		pItem->m_sTouchEffectValue1 = iMonth;
		pItem->m_sTouchEffectValue2 = iDay;
		pItem->m_sTouchEffectValue3 = iHour;
		wsprintf(G_cTxt, "(*) Get FIGHTZONETICKET : Char(%s) TICKENUMBER (%d)(%d)(%d)", m_pClientList[iClientH]->m_cCharName, pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3);
		PutLogFileList(G_cTxt);
		PutLogList(G_cTxt);
		std::memset(cData, 0, sizeof(cData));
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_NOTIFY;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_NOTIFY_ITEMOBTAINED;
		cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
		*cp = 1;
		cp++;
		memcpy(cp, pItem->m_cName, 20);
		cp += 20;
		dwp = (uint32_t *) cp;
		*dwp = pItem->m_dwCount;
		cp += 4;
		*cp = (char) pItem->m_cItemType;
		cp++;
		*cp = (char) pItem->m_cEquipPos;
		cp++;
		*cp = (char) 0;
		cp++;
		sp = (short *) cp;
		*sp = pItem->m_sLevelLimit;
		cp += 2;
		*cp = pItem->m_cGenderLimit;
		cp++;
		wp = (uint16_t *) cp;
		*wp = pItem->m_wCurLifeSpan;
		cp += 2;
		wp = (uint16_t *) cp;
		*wp = pItem->m_wWeight;
		cp += 2;
		sp = (short *) cp;
		*sp = pItem->m_sSprite;
		cp += 2;
		sp = (short *) cp;
		*sp = pItem->m_sSpriteFrame;
		cp += 2;
		*cp = pItem->m_cItemColor;
		cp++;
		*cp = (char) pItem->m_sItemSpecEffectValue2; // v1.41
		cp++;
		dwp = (uint32_t *) cp;
		*dwp = pItem->m_dwAttribute;
		cp += 4;
		if (iEraseReq == 1) delete pItem;
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
		iCalcTotalWeight(iClientH);
		switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
			case DEF_XSOCKEVENT_SOCKETCLOSED:
				DeleteClient(iClientH, true, true);
				return;
		}
	} else {
		delete pItem;
		iCalcTotalWeight(iClientH);
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_NOTIFY;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
		iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
		switch (iRet) {
			case DEF_XSOCKEVENT_QUENEFULL:
			case DEF_XSOCKEVENT_SOCKETERROR:
			case DEF_XSOCKEVENT_CRITICALERROR:
			case DEF_XSOCKEVENT_SOCKETCLOSED:
				DeleteClient(iClientH, true, true);
				return;
		}
	}
}

int CGame::_iComposeFlagStatusContents(char * pData) {
	SYSTEMTIME SysTime;
	char cTxt[120];
	int i;
	if (m_iMiddlelandMapIndex < 0) return 0;
	GetLocalTime(&SysTime);
	strcat(pData, "[FILE-DATE]\n\n");
	wsprintf(cTxt, "file-saved-date: %d %d %d %d %d\n", SysTime.wYear, SysTime.wMonth, SysTime.wDay, SysTime.wHour, SysTime.wMinute);
	strcat(pData, cTxt);
	strcat(pData, "\n\n");
	//
	for (i = 1; i < DEF_MAXOCCUPYFLAG; i++)
		if (m_pMapList[m_iMiddlelandMapIndex]->m_pOccupyFlag[i] != 0) {
			wsprintf(cTxt, "flag = %d %d %d %d", m_pMapList[m_iMiddlelandMapIndex]->m_pOccupyFlag[i]->m_cSide,
					  m_pMapList[m_iMiddlelandMapIndex]->m_pOccupyFlag[i]->m_sX,
					  m_pMapList[m_iMiddlelandMapIndex]->m_pOccupyFlag[i]->m_sY,
					  m_pMapList[m_iMiddlelandMapIndex]->m_pOccupyFlag[i]->m_iEKCount);
			strcat(pData, cTxt);
			strcat(pData, "\n");
		}
	strcat(pData, "\n\n");
	return strlen(pData);
}

bool CGame::_bDecodeOccupyFlagSaveFileContents(char * pData, uint32_t dwMsgSize) {
	char * pContents, * token;
	char seps[] = "= \t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int iSide;
	CStrTok * pStrTok;
	int dX;
	int dY;
	int iEKNum;
	int iTotalFlags;
	if (m_iMiddlelandMapIndex < 0) {
		PutLogList("(!) This game server does not managing Middleland Map. OcuupyFlag data ignored.");
		return false;
	}
	iTotalFlags = 0;
	pContents = new char[dwMsgSize + 10];
	ZeroMemory(pContents, dwMsgSize + 10);
	memcpy(pContents, pData, dwMsgSize - 9);
	pStrTok = new CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != 0) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							// Side
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! OccupyFlag save file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iSide = atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! OccupyFlag save file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							dX = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! OccupyFlag save file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							dY = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							// EKNum
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! OccupyFlag save file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							iEKNum = atoi(token);
							if (__bSetOccupyFlag(m_iMiddlelandMapIndex, dX, dY, iSide, iEKNum, -1, true) == true)
								iTotalFlags++;
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
				default:
					break;
			}
		} else {
			if (memcmp(token, "flag", 4) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
	}
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		PutLogList("(!!!) CRITICAL ERROR! OccupyFlag save file contents error!");
		return false;
	}
	wsprintf(G_cTxt, "(!) OccupyFlag save file decoding success! Total(%d)", iTotalFlags);
	PutLogList(G_cTxt);
	return true;
}
//Hero Code by Zabuza

void CGame::GetHeroMantleHandler(int iClientH, ItemId iItemID, char * /*pString*/) {
	int i;
	int iNum;
	int iRet;
	int iEraseReq;
	char * cp, cData[256], cItemName[21];
	CItem * pItem;
	uint32_t * dwp;
	short * sp;
	uint16_t * wp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iEnemyKillCount < 100) return;
	if (m_pClientList[iClientH]->m_cSide == 0) return;
	if (_iGetItemSpaceLeft(iClientH) == 0) {
		SendItemNotifyMsg(iClientH, DEF_NOTIFY_CANNOTCARRYMOREITEM, 0, 0);
		return;
	}
	//Prevents a crash if item dosent exist
	if (m_pItemConfigList[(int) iItemID] == 0) return;
	switch (iItemID) {
			// Hero Cape
		case ItemId::aresden_hero_cape: //Aresden HeroCape
		case ItemId::elvine_hero_cape: //Elvine HeroCape
			if (m_pClientList[iClientH]->m_iEnemyKillCount < 300) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 300;
			break;
			// Hero Helm
		case ItemId::a_hero_helm_m: //Aresden HeroHelm(M)
		case ItemId::a_hero_helm_w: //Aresden HeroHelm(W)
		case ItemId::e_hero_helm_m: //Elvine HeroHelm(M)
		case ItemId::e_hero_helm_w: //Elvine HeroHelm(W)
			if (m_pClientList[iClientH]->m_iEnemyKillCount < 150) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 150;
			if (m_pClientList[iClientH]->m_iContribution < 20) return;
			m_pClientList[iClientH]->m_iContribution -= 20;
			break;
			// Hero Cap
		case ItemId::a_hero_cap_m: //Aresden HeroCap(M)
		case ItemId::a_hero_cap_w: //Aresden HeroCap(W)
		case ItemId::e_hero_cap_m: //Elvine HeroHelm(M)
		case ItemId::e_hero_cap_w: //Elvine HeroHelm(W)
			if (m_pClientList[iClientH]->m_iEnemyKillCount < 100) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 100;
			if (m_pClientList[iClientH]->m_iContribution < 20) return;
			m_pClientList[iClientH]->m_iContribution -= 20;
			break;
			// Hero Armour
		case ItemId::a_hero_armor_m: //Aresden HeroArmour(M)
		case ItemId::a_hero_armor_w: //Aresden HeroArmour(W)
		case ItemId::e_hero_armor_m: //Elvine HeroArmour(M)
		case ItemId::e_hero_armor_w: //Elvine HeroArmour(W)
			if (m_pClientList[iClientH]->m_iEnemyKillCount < 300) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 300;
			if (m_pClientList[iClientH]->m_iContribution < 30) return;
			m_pClientList[iClientH]->m_iContribution -= 30;
			break;
			// Hero Robe
		case ItemId::a_hero_robe_m: //Aresden HeroRobe(M)
		case ItemId::a_hero_robe_w: //Aresden HeroRobe(W)
		case ItemId::e_hero_robe_m: //Elvine HeroRobe(M)
		case ItemId::e_hero_robe_w: //Elvine HeroRobe(W)
			if (m_pClientList[iClientH]->m_iEnemyKillCount < 200) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 200;
			if (m_pClientList[iClientH]->m_iContribution < 20) return;
			m_pClientList[iClientH]->m_iContribution -= 20;
			break;
			// Hero Hauberk
		case ItemId::a_hero_hauberk_m: //Aresden HeroHauberk(M)
		case ItemId::a_hero_hauberk_w: //Aresden HeroHauberk(W)
		case ItemId::e_hero_hauberk_m: //Elvine HeroHauberk(M)
		case ItemId::e_hero_hauberk_w: //Elvine HeroHauberk(W)
			if (m_pClientList[iClientH]->m_iEnemyKillCount < 100) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 100;
			if (m_pClientList[iClientH]->m_iContribution < 10) return;
			m_pClientList[iClientH]->m_iContribution -= 10;
			break;
			// Hero Leggings
		case ItemId::a_hero_leggings_m: //Aresden HeroLeggings(M)
		case ItemId::a_hero_leggings_w: //Aresden HeroLeggings(W)
		case ItemId::e_hero_leggings_m: //Elvine HeroLeggings(M)
		case ItemId::e_hero_leggings_w: //Elvine HeroLeggings(W)
			if (m_pClientList[iClientH]->m_iEnemyKillCount < 150) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 150;
			if (m_pClientList[iClientH]->m_iContribution < 15) return;
			m_pClientList[iClientH]->m_iContribution -= 15;
			break;
		default:
			return;
			break;
	}
	std::memset(cItemName, 0, sizeof(cItemName));
	memcpy(cItemName, m_pItemConfigList[(int) iItemID]->m_cName, 20);
	// ReqPurchaseItemHandler
	iNum = 1;
	for (i = 1; i <= iNum; i++) {
		pItem = new CItem;
		if (_bInitItemAttr(pItem, iItemID) == false) {
			delete pItem;
		} else {
			if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
				if (m_pClientList[iClientH]->m_iCurWeightLoad < 0) m_pClientList[iClientH]->m_iCurWeightLoad = 0;
				wsprintf(G_cTxt, "(*) Get HeroItem : Char(%s) Player-EK(%d) Player-Contr(%d) Hero Obtained(%s)", m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_iEnemyKillCount, m_pClientList[iClientH]->m_iContribution, cItemName);
				PutLogFileList(G_cTxt);
				pItem->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
				pItem->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
				pItem->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
				pItem->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_ITEMOBTAINED;
				cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
				*cp = 1;
				cp++;
				memcpy(cp, pItem->m_cName, 20);
				cp += 20;
				dwp = (uint32_t *) cp;
				*dwp = pItem->m_dwCount;
				cp += 4;
				*cp = (char) pItem->m_cItemType;
				cp++;
				*cp = (char) pItem->m_cEquipPos;
				cp++;
				*cp = (char) 0;
				cp++;
				sp = (short *) cp;
				*sp = pItem->m_sLevelLimit;
				cp += 2;
				*cp = pItem->m_cGenderLimit;
				cp++;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wCurLifeSpan;
				cp += 2;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wWeight;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSprite;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSpriteFrame;
				cp += 2;
				*cp = pItem->m_cItemColor;
				cp++;
				*cp = (char) pItem->m_sItemSpecEffectValue2; // v1.41
				cp++;
				dwp = (uint32_t *) cp;
				*dwp = pItem->m_dwAttribute;
				cp += 4;
				/*
				 *cp = (char)(pItem->m_dwAttribute & 0x00000001); // Custom-Item??? ??
				cp++;
				 */
				if (iEraseReq == 1) delete pItem;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
				iCalcTotalWeight(iClientH);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						return;
				}
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_ENEMYKILLS, m_pClientList[iClientH]->m_iEnemyKillCount, 0, 0, 0);
			} else {
				delete pItem;
				iCalcTotalWeight(iClientH);
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						return;
				}
			}
		}
	}
}

void CGame::_SetItemPos(int iClientH, char *pData) {
	char * cp, cItemIndex;
	short * sp, sX, sY;
	if (m_pClientList[iClientH] == 0) return;
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	cItemIndex = *cp;
	cp++;
	sp = (short *) cp;
	sX = *sp;
	cp += 2;
	sp = (short *) cp;
	sY = *sp;
	cp += 2;
	if (sY < -10) sY = -10;
	if ((cItemIndex < 0) || (cItemIndex >= DEF_MAXITEMS)) return;
	if (m_pClientList[iClientH]->m_pItemList[cItemIndex] != 0) {
		m_pClientList[iClientH]->m_ItemPosList[cItemIndex].x = sX;
		m_pClientList[iClientH]->m_ItemPosList[cItemIndex].y = sY;
	}
}

void CGame::CheckUniqueItemEquipment(int iClientH) {
	int i;
	int iDamage;
	if (m_pClientList[iClientH] == 0) return;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
			if ((m_pClientList[iClientH]->m_pItemList[i]->m_sTouchEffectType == DEF_ITET_UNIQUE_OWNER) &&
					  (m_pClientList[iClientH]->m_bIsItemEquipped[i] == true)) {
				if ((m_pClientList[iClientH]->m_pItemList[i]->m_sTouchEffectValue1 == m_pClientList[iClientH]->m_sCharIDnum1) &&
						  (m_pClientList[iClientH]->m_pItemList[i]->m_sTouchEffectValue2 == m_pClientList[iClientH]->m_sCharIDnum2) &&
						  (m_pClientList[iClientH]->m_pItemList[i]->m_sTouchEffectValue3 == m_pClientList[iClientH]->m_sCharIDnum3)) {
				} else {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iClientH]->m_pItemList[i]->m_cEquipPos, i, 0, 0);
					ReleaseItemHandler(iClientH, i, true);
					iDamage = iDice(10, 10);
					m_pClientList[iClientH]->m_iHP -= iDamage;
					if (m_pClientList[iClientH]->m_iHP <= 0) {
						ClientKilledHandler(iClientH, 0, 0, iDamage);
					}
				}
			}
		}
}

void CGame::_BWM_Init(int iClientH, char */*pData*/) {
	if (m_pClientList[iClientH] == 0) return;
	m_pClientList[iClientH]->m_bIsBWMonitor = true;
	wsprintf(G_cTxt, "(*) BWMonitor(%d) registered.", iClientH);
	PutLogList(G_cTxt);
}

void CGame::_BWM_Command_Shutup(char *pData) {
	char * cp, cName[11];
	int i;
	cp = (char *) (pData + 16);
	std::memset(cName, 0, sizeof(cName));
	memcpy(cName, cp, 10);
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if (m_pClientList[i] != 0) {
			if (memcmp(m_pClientList[i]->m_cCharName, cName, 10) == 0) {
				m_pClientList[i]->m_iTimeLeft_ShutUp = 20 * 3 * 10;
				SendNotifyMsg(0, i, DEF_NOTIFY_PLAYERSHUTUP, 20 * 3 * 10, 0, 0, cName);
				// Admin Log
				wsprintf(G_cTxt, "BWordMonitor shutup(%s %d)", cName, 20 * 3 * 10);
				PutAdminLogFileList(G_cTxt);
				return;
			}
		}
}

void CGame::ExchangeItemHandler(int iClientH, short sItemIndex, int iAmount, short dX, short dY, uint16_t wObjectID, char */*pItemName*/) {
	short sOwnerH;
	char cOwnerType;
	if (m_pClientList[iClientH] == 0) return;
	if ((sItemIndex < 0) || (sItemIndex >= DEF_MAXITEMS)) return;
	if ((m_bAdminSecurity == true) && (m_pClientList[iClientH]->m_iAdminUserLevel > 0)) return;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex] == 0) return;
	if (m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwCount < (uint32_t) iAmount) return;
	if (m_pClientList[iClientH]->m_bIsOnServerChange == true) return;
	if (m_pClientList[iClientH]->m_bIsExchangeMode == true) return;
	if (wObjectID >= DEF_MAXCLIENTS) return;
	m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
	if ((sOwnerH != 0) && (cOwnerType == DEF_OWNERTYPE_PLAYER)) {
		if ((m_bAdminSecurity == true) && (m_pClientList[sOwnerH]->m_iAdminUserLevel > 0)) {
			return;
		}
		if (wObjectID != 0) {
			if (wObjectID < 10000) {
				if (m_pClientList[wObjectID] != 0) {
					if ((uint16_t) sOwnerH != wObjectID) sOwnerH = 0;
				}
			} else sOwnerH = 0;
		}
		if ((sOwnerH == 0) || (m_pClientList[sOwnerH] == 0)) {
			_ClearExchangeStatus(iClientH);
		} else {
			if ((m_pClientList[sOwnerH]->m_bIsExchangeMode == true) || (m_pClientList[sOwnerH]->m_sAppr2 & 0xF000) ||
					  (m_pMapList[m_pClientList[sOwnerH]->m_cMapIndex]->m_bIsFightZone == true)) {
				_ClearExchangeStatus(iClientH);
			} else {
				m_pClientList[iClientH]->m_bIsExchangeMode = true;
				m_pClientList[iClientH]->m_iExchangeH = sOwnerH;
				std::memset(m_pClientList[iClientH]->m_cExchangeName, 0, sizeof(m_pClientList[iClientH]->m_cExchangeName));
				strcpy(m_pClientList[iClientH]->m_cExchangeName, m_pClientList[sOwnerH]->m_cCharName);
				//Clear items in the list
				m_pClientList[iClientH]->iExchangeCount = 0;
				m_pClientList[sOwnerH]->iExchangeCount = 0;
				for (int i = 0; i < 4; i++) {
					//Clear the trader
					std::memset(m_pClientList[iClientH]->m_cExchangeItemName[i], 0, sizeof(m_pClientList[iClientH]->m_cExchangeItemName[i]));
					m_pClientList[iClientH]->m_cExchangeItemIndex[i] = -1;
					m_pClientList[iClientH]->m_iExchangeItemAmount[i] = 0;
					//Clear the guy we're trading with
					std::memset(m_pClientList[sOwnerH]->m_cExchangeItemName[i], 0, sizeof(m_pClientList[sOwnerH]->m_cExchangeItemName[i]));
					m_pClientList[sOwnerH]->m_cExchangeItemIndex[i] = -1;
					m_pClientList[sOwnerH]->m_iExchangeItemAmount[i] = 0;
				}
				m_pClientList[iClientH]->m_cExchangeItemIndex[m_pClientList[iClientH]->iExchangeCount] = (char) sItemIndex;
				m_pClientList[iClientH]->m_iExchangeItemAmount[m_pClientList[iClientH]->iExchangeCount] = iAmount;
				//std::memset(m_pClientList[iClientH]->m_cExchangeItemName, 0, sizeof(m_pClientList[iClientH]->m_cExchangeItemName));
				memcpy(m_pClientList[iClientH]->m_cExchangeItemName[m_pClientList[iClientH]->iExchangeCount], m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cName, 20);
				m_pClientList[sOwnerH]->m_bIsExchangeMode = true;
				m_pClientList[sOwnerH]->m_iExchangeH = iClientH;
				std::memset(m_pClientList[sOwnerH]->m_cExchangeName, 0, sizeof(m_pClientList[sOwnerH]->m_cExchangeName));
				strcpy(m_pClientList[sOwnerH]->m_cExchangeName, m_pClientList[iClientH]->m_cCharName);
				m_pClientList[iClientH]->iExchangeCount++;
				SendNotifyMsg(iClientH, iClientH, DEF_NOTIFY_OPENEXCHANGEWINDOW, sItemIndex + 1000, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSprite,
						  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpriteFrame, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cName, iAmount, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor,
						  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wCurLifeSpan,
						  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wMaxLifeSpan,
						  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2 + 100,
						  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute);
				SendNotifyMsg(iClientH, sOwnerH, DEF_NOTIFY_OPENEXCHANGEWINDOW, sItemIndex, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSprite,
						  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sSpriteFrame, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cName, iAmount, m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_cItemColor,
						  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wCurLifeSpan,
						  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_wMaxLifeSpan,
						  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_sItemSpecEffectValue2 + 100,
						  m_pClientList[iClientH]->m_pItemList[sItemIndex]->m_dwAttribute);
			}
		}
	} else {
		_ClearExchangeStatus(iClientH);
	}
}

void CGame::SetExchangeItem(int iClientH, int iItemIndex, int iAmount) {
	int iExH;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsOnServerChange == true) return;
	if (m_pClientList[iClientH]->iExchangeCount > 4) return; //only 4 items trade
	//no admin trade
	if ((m_bAdminSecurity == true) && (m_pClientList[iClientH]->m_iAdminUserLevel > 0)) {
		_ClearExchangeStatus(m_pClientList[iClientH]->m_iExchangeH);
		_ClearExchangeStatus(iClientH);
	}
	if ((m_pClientList[iClientH]->m_bIsExchangeMode == true) && (m_pClientList[iClientH]->m_iExchangeH != 0)) {
		iExH = m_pClientList[iClientH]->m_iExchangeH;
		if ((m_pClientList[iExH] == 0) || (memcmp(m_pClientList[iClientH]->m_cExchangeName, m_pClientList[iExH]->m_cCharName, 10) != 0)) {
		} else {
			if ((iItemIndex < 0) || (iItemIndex >= DEF_MAXITEMS)) return;
			if (m_pClientList[iClientH]->m_pItemList[iItemIndex] == 0) return;
			if (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwCount < (uint32_t) iAmount) return;
			//No Duplicate items
			for (int i = 0; i < m_pClientList[iClientH]->iExchangeCount; i++) {
				if (m_pClientList[iClientH]->m_cExchangeItemIndex[i] == (char) iItemIndex) {
					_ClearExchangeStatus(iExH);
					_ClearExchangeStatus(iClientH);
					return;
				}
			}
			m_pClientList[iClientH]->m_cExchangeItemIndex[m_pClientList[iClientH]->iExchangeCount] = (char) iItemIndex;
			m_pClientList[iClientH]->m_iExchangeItemAmount[m_pClientList[iClientH]->iExchangeCount] = iAmount;
			//std::memset(m_pClientList[iClientH]->m_cExchangeItemName, 0, sizeof(m_pClientList[iClientH]->m_cExchangeItemName));
			memcpy(m_pClientList[iClientH]->m_cExchangeItemName[m_pClientList[iClientH]->iExchangeCount], m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName, 20);
			//m_pClientList[iClientH]->m_cExchangeItemIndex  = iItemIndex;
			//m_pClientList[iClientH]->m_iExchangeItemAmount = iAmount;
			//std::memset(m_pClientList[iClientH]->m_cExchangeItemName, 0, sizeof(m_pClientList[iClientH]->m_cExchangeItemName));
			//memcpy(m_pClientList[iClientH]->m_cExchangeItemName, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName, 20);
			m_pClientList[iClientH]->iExchangeCount++;
			SendNotifyMsg(iClientH, iClientH, DEF_NOTIFY_SETEXCHANGEITEM, iItemIndex + 1000, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName, iAmount, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2 + 100,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
			SendNotifyMsg(iClientH, iExH, DEF_NOTIFY_SETEXCHANGEITEM, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName, iAmount, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2 + 100,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
		}
	} else {
	}
}

void CGame::ConfirmExchangeItem(int iClientH) {
	int iExH;
	int iItemWeightA;
	int iItemWeightB;
	int iWeightLeftA;
	int iWeightLeftB;
	int iAmountLeft;
	CItem * pItemA[4], * pItemB[4], * pItemAcopy[4], * pItemBcopy[4];
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsOnServerChange == true) return;
	if ((m_bAdminSecurity == true) && (m_pClientList[iClientH]->m_iAdminUserLevel > 0)) return;
	if ((m_pClientList[iClientH]->m_bIsExchangeMode == true) && (m_pClientList[iClientH]->m_iExchangeH != 0)) {
		iExH = m_pClientList[iClientH]->m_iExchangeH;
		if (iClientH == iExH) return;
		if (m_pClientList[iExH] != 0) {
			if ((memcmp(m_pClientList[iClientH]->m_cExchangeName, m_pClientList[iExH]->m_cCharName, 10) != 0) ||
					  (m_pClientList[iExH]->m_bIsExchangeMode != true) ||
					  (memcmp(m_pClientList[iExH]->m_cExchangeName, m_pClientList[iClientH]->m_cCharName, 10) != 0)) {
				_ClearExchangeStatus(iClientH);
				_ClearExchangeStatus(iExH);
				return;
			} else {
				m_pClientList[iClientH]->m_bIsExchangeConfirm = true;
				if (m_pClientList[iExH]->m_bIsExchangeConfirm == true) {
					//Check all items
					for (int i = 0; i < m_pClientList[iClientH]->iExchangeCount; i++) {
						if ((m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]] == 0) ||
								  (memcmp(m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]]->m_cName, m_pClientList[iClientH]->m_cExchangeItemName[i], 20) != 0)) {
							_ClearExchangeStatus(iClientH);
							_ClearExchangeStatus(iExH);
							return;
						}
					}
					for (int i = 0; i < m_pClientList[iExH]->iExchangeCount; i++) {
						if ((m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]] == 0) ||
								  (memcmp(m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]]->m_cName, m_pClientList[iExH]->m_cExchangeItemName[i], 20) != 0)) {
							_ClearExchangeStatus(iClientH);
							_ClearExchangeStatus(iExH);
							return;
						}
					}
					iWeightLeftA = _iCalcMaxLoad(iClientH) - iCalcTotalWeight(iClientH);
					iWeightLeftB = _iCalcMaxLoad(iExH) - iCalcTotalWeight(iExH);
					//Calculate weight for items
					iItemWeightA = 0;
					for (int i = 0; i < m_pClientList[iClientH]->iExchangeCount; i++) {
						iItemWeightA = iGetItemWeight(m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]],
								  m_pClientList[iClientH]->m_iExchangeItemAmount[i]);
					}
					iItemWeightB = 0;
					for (int i = 0; i < m_pClientList[iExH]->iExchangeCount; i++) {
						iItemWeightB = iGetItemWeight(m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]],
								  m_pClientList[iExH]->m_iExchangeItemAmount[i]);
					}
					//See if the other person can take the item weightload
					if ((iWeightLeftA < iItemWeightB) || (iWeightLeftB < iItemWeightA)) {
						_ClearExchangeStatus(iClientH);
						_ClearExchangeStatus(iExH);
						return;
					}
					for (int i = 0; i < m_pClientList[iClientH]->iExchangeCount; i++) {
						if ((m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]]->m_cItemType == ItemType::consume) ||
								  (m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]]->m_cItemType == ItemType::arrow)) {
							if (((uint32_t) m_pClientList[iClientH]->m_iExchangeItemAmount[i]) > m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]]->m_dwCount) {
								_ClearExchangeStatus(iClientH);
								_ClearExchangeStatus(iExH);
								return;
							}
							pItemA[i] = new CItem;
							_bInitItemAttr(pItemA[i], m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]]->m_cName);
							pItemA[i]->m_dwCount = m_pClientList[iClientH]->m_iExchangeItemAmount[i];
							pItemAcopy[i] = new CItem;
							_bInitItemAttr(pItemAcopy[i], m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]]->m_cName);
							bCopyItemContents(pItemAcopy[i], pItemA[i]);
							pItemAcopy[i]->m_dwCount = m_pClientList[iClientH]->m_iExchangeItemAmount[i];
						} else {
							pItemA[i] = (CItem *) m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]];
							pItemA[i]->m_dwCount = m_pClientList[iClientH]->m_iExchangeItemAmount[i];
							pItemAcopy[i] = new CItem;
							_bInitItemAttr(pItemAcopy[i], m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]]->m_cName);
							bCopyItemContents(pItemAcopy[i], pItemA[i]);
							pItemAcopy[i]->m_dwCount = m_pClientList[iClientH]->m_iExchangeItemAmount[i];
						}
					}
					for (int i = 0; i < m_pClientList[iExH]->iExchangeCount; i++) {
						if ((m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]]->m_cItemType == ItemType::consume) ||
								  (m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]]->m_cItemType == ItemType::arrow)) {
							if (((uint32_t) m_pClientList[iExH]->m_iExchangeItemAmount[i]) > m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]]->m_dwCount) {
								_ClearExchangeStatus(iClientH);
								_ClearExchangeStatus(iExH);
								return;
							}
							pItemB[i] = new CItem;
							_bInitItemAttr(pItemB[i], m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]]->m_cName);
							pItemB[i]->m_dwCount = m_pClientList[iExH]->m_iExchangeItemAmount[i];
							pItemBcopy[i] = new CItem;
							_bInitItemAttr(pItemBcopy[i], m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]]->m_cName);
							bCopyItemContents(pItemBcopy[i], pItemB[i]);
							pItemBcopy[i]->m_dwCount = m_pClientList[iExH]->m_iExchangeItemAmount[i];
						} else {
							pItemB[i] = (CItem *) m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]];
							pItemB[i]->m_dwCount = m_pClientList[iExH]->m_iExchangeItemAmount[i];
							pItemBcopy[i] = new CItem;
							_bInitItemAttr(pItemBcopy[i], m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]]->m_cName);
							bCopyItemContents(pItemBcopy[i], pItemB[i]);
							pItemBcopy[i]->m_dwCount = m_pClientList[iExH]->m_iExchangeItemAmount[i];
						}
					}
					for (int i = 0; i < m_pClientList[iExH]->iExchangeCount; i++) {
						bAddItem(iClientH, pItemB[i], 0);
						_bItemLog(DEF_ITEMLOG_EXCHANGE, iExH, iClientH, pItemBcopy[i]);
						delete pItemBcopy[i];
						pItemBcopy[i] = 0;
						if ((m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]]->m_cItemType == ItemType::consume) ||
								  (m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]]->m_cItemType == ItemType::arrow)) {
							//
							iAmountLeft = (int) m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]]->m_dwCount - m_pClientList[iExH]->m_iExchangeItemAmount[i];
							if (iAmountLeft < 0) iAmountLeft = 0;
							// v1.41 !!!
							SetItemCount(iExH, m_pClientList[iExH]->m_cExchangeItemIndex[i], iAmountLeft);
							// m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex]->m_cName, iAmountLeft);
							//
						} else {
							ReleaseItemHandler(iExH, m_pClientList[iExH]->m_cExchangeItemIndex[i], true);
							SendNotifyMsg(0, iExH, DEF_NOTIFY_GIVEITEMFIN_ERASEITEM, m_pClientList[iExH]->m_cExchangeItemIndex[i], m_pClientList[iExH]->m_iExchangeItemAmount[i], 0, m_pClientList[iClientH]->m_cCharName);
							m_pClientList[iExH]->m_pItemList[m_pClientList[iExH]->m_cExchangeItemIndex[i]] = 0;
						}
					}
					for (int i = 0; i < m_pClientList[iClientH]->iExchangeCount; i++) {
						bAddItem(iExH, pItemA[i], 0);
						_bItemLog(DEF_ITEMLOG_EXCHANGE, iClientH, iExH, pItemAcopy[i]);
						delete pItemAcopy[i];
						pItemAcopy[i] = 0;
						if ((m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]]->m_cItemType == ItemType::consume) ||
								  (m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]]->m_cItemType == ItemType::arrow)) {
							//
							iAmountLeft = (int) m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]]->m_dwCount - m_pClientList[iClientH]->m_iExchangeItemAmount[i];
							if (iAmountLeft < 0) iAmountLeft = 0;
							// v1.41 !!!
							SetItemCount(iClientH, m_pClientList[iClientH]->m_cExchangeItemIndex[i], iAmountLeft);
							// m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex]->m_cName, iAmountLeft);
							//
						} else {
							ReleaseItemHandler(iClientH, m_pClientList[iClientH]->m_cExchangeItemIndex[i], true);
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIVEITEMFIN_ERASEITEM, m_pClientList[iClientH]->m_cExchangeItemIndex[i], m_pClientList[iClientH]->m_iExchangeItemAmount[i], 0, m_pClientList[iExH]->m_cCharName);
							m_pClientList[iClientH]->m_pItemList[m_pClientList[iClientH]->m_cExchangeItemIndex[i]] = 0;
						}
					}
					m_pClientList[iClientH]->m_bIsExchangeMode = false;
					m_pClientList[iClientH]->m_bIsExchangeConfirm = false;
					std::memset(m_pClientList[iClientH]->m_cExchangeName, 0, sizeof(m_pClientList[iClientH]->m_cExchangeName));
					m_pClientList[iClientH]->m_iExchangeH = 0;
					m_pClientList[iClientH]->iExchangeCount = 0;
					m_pClientList[iExH]->m_bIsExchangeMode = false;
					m_pClientList[iExH]->m_bIsExchangeConfirm = false;
					std::memset(m_pClientList[iExH]->m_cExchangeName, 0, sizeof(m_pClientList[iExH]->m_cExchangeName));
					m_pClientList[iExH]->m_iExchangeH = 0;
					m_pClientList[iExH]->iExchangeCount = 0;
					for (int i = 0; i < 4; i++) {
						m_pClientList[iClientH]->m_cExchangeItemIndex[i] = -1;
						m_pClientList[iExH]->m_cExchangeItemIndex[i] = -1;
					}
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_EXCHANGEITEMCOMPLETE, 0, 0, 0, 0);
					SendNotifyMsg(0, iExH, DEF_NOTIFY_EXCHANGEITEMCOMPLETE, 0, 0, 0, 0);
					iCalcTotalWeight(iClientH);
					iCalcTotalWeight(iExH);
					return;
				}
			}
		} else {
			_ClearExchangeStatus(iClientH);
			return;
		}
	}
}

int CGame::_iGetItemSpaceLeft(int iClientH) {
	int i;
	int iTotalItem;
	iTotalItem = 0;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] != 0) iTotalItem++;
	return (DEF_MAXITEMS - iTotalItem);
}

bool CGame::bAddItem(int iClientH, CItem * pItem, char /*cMode*/) {
	char * cp, cData[256];
	uint32_t * dwp;
	uint16_t * wp;
	short * sp;
	int iEraseReq;
	std::memset(cData, 0, sizeof(cData));
	if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_NOTIFY;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_NOTIFY_ITEMOBTAINED;
		cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
		*cp = 1;
		cp++;
		memcpy(cp, pItem->m_cName, 20);
		cp += 20;
		dwp = (uint32_t *) cp;
		*dwp = pItem->m_dwCount;
		cp += 4;
		*cp = (char) pItem->m_cItemType;
		cp++;
		*cp = (char) pItem->m_cEquipPos;
		cp++;
		*cp = (char) 0;
		cp++;
		sp = (short *) cp;
		*sp = pItem->m_sLevelLimit;
		cp += 2;
		*cp = pItem->m_cGenderLimit;
		cp++;
		wp = (uint16_t *) cp;
		*wp = pItem->m_wCurLifeSpan;
		cp += 2;
		wp = (uint16_t *) cp;
		*wp = pItem->m_wWeight;
		cp += 2;
		sp = (short *) cp;
		*sp = pItem->m_sSprite;
		cp += 2;
		sp = (short *) cp;
		*sp = pItem->m_sSpriteFrame;
		cp += 2;
		*cp = pItem->m_cItemColor;
		cp++;
		*cp = (char) pItem->m_sItemSpecEffectValue2; // v1.41
		cp++;
		dwp = (uint32_t *) cp;
		*dwp = pItem->m_dwAttribute;
		cp += 4;
		/*
		 *cp = (char)(pItem->m_dwAttribute & 0x00000001);
		cp++;
		 */
		if (iEraseReq == 1) {
			//testcode
			//wsprintf(G_cTxt, "AddItem: Delete (%s)", pItem->m_cName);
			//PutLogFileList(G_cTxt);
			delete pItem;
			pItem = 0;
		}
		m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
		return true;
	} else {
		m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
				  m_pClientList[iClientH]->m_sY,
				  pItem);
		SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
				  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
				  pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); //v1.4 color
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_NOTIFY;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
		m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
		return true;
	}
	return false;
}

int CGame::_iTalkToNpcResult_Cityhall(int iClientH, int * pQuestType, int * pMode, int * pRewardType, int * pRewardAmount, int * pContribution, char * pTargetName, NpcType * pTargetType, int * pTargetCount, int * pX, int * pY, int * pRange) {
	int iQuest;
	int iEraseReq;
	int iExp;
	CItem * pItem;
	// Return Code
	if (m_pClientList[iClientH] == 0) return 0;
	/*if (((memcmp(m_pClientList[iClientH]->m_cMapName, "cityhall_1", 10) != 1) ||
		(memcmp(m_pClientList[iClientH]->m_cMapName, "cityhall_2", 10) != 1)) &&
		(memcmp(m_pClientList[i]->m_cLocation, "NONE",4) != 0)) {
			wsprintf(G_cTxt, "Traveller hack: (%s) Player: (%s) - is talking to William from a remote map.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
			PutHackLogFileList(G_cTxt);
			DeleteClient(iClientH, true, true);
			return 0;
	}*/
	if (m_pClientList[iClientH]->m_iQuest != 0) {
		if (m_pQuestConfigList[m_pClientList[iClientH]->m_iQuest] == 0) return -4;
		else if (m_pQuestConfigList[m_pClientList[iClientH]->m_iQuest]->m_iFrom == 4) {
			if (m_pClientList[iClientH]->m_bIsQuestCompleted == true) {
				if ((m_pClientList[iClientH]->m_iQuestRewardType > 0) &&
						  (m_pItemConfigList[m_pClientList[iClientH]->m_iQuestRewardType] != 0)) {
					pItem = new CItem;
					_bInitItemAttr(pItem, m_pItemConfigList[m_pClientList[iClientH]->m_iQuestRewardType]->m_cName);
					pItem->m_dwCount = m_pClientList[iClientH]->m_iQuestRewardAmount;
					if (_bCheckItemReceiveCondition(iClientH, pItem) == true) {
						_bAddClientItemList(iClientH, pItem, &iEraseReq);
						SendItemNotifyMsg(iClientH, DEF_NOTIFY_ITEMOBTAINED, pItem, 0);
						if (iEraseReq == 1) delete pItem;
						m_pClientList[iClientH]->m_iContribution += m_pQuestConfigList[m_pClientList[iClientH]->m_iQuest]->m_iContribution;
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTREWARD, 4, 1, m_pClientList[iClientH]->m_iQuestRewardAmount,
								  m_pItemConfigList[m_pClientList[iClientH]->m_iQuestRewardType]->m_cName, m_pClientList[iClientH]->m_iContribution);
						_ClearQuestStatus(iClientH);
						return -5;
					} else {
						delete pItem;
						SendItemNotifyMsg(iClientH, DEF_NOTIFY_CANNOTCARRYMOREITEM, 0, 0);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTREWARD, 4, 0, m_pClientList[iClientH]->m_iQuestRewardAmount,
								  m_pItemConfigList[m_pClientList[iClientH]->m_iQuestRewardType]->m_cName, m_pClientList[iClientH]->m_iContribution);
						return -5;
					}
				} else if (m_pClientList[iClientH]->m_iQuestRewardType == -1) {
					m_pClientList[iClientH]->m_iExpStock += m_pClientList[iClientH]->m_iQuestRewardAmount;
					m_pClientList[iClientH]->m_iContribution += m_pQuestConfigList[m_pClientList[iClientH]->m_iQuest]->m_iContribution;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTREWARD, 4, 1, m_pClientList[iClientH]->m_iQuestRewardAmount,
							  "experience", m_pClientList[iClientH]->m_iContribution);
					_ClearQuestStatus(iClientH);
					return -5;
				} else if (m_pClientList[iClientH]->m_iQuestRewardType == -2) {
					iExp = iDice(1, (10 * m_pClientList[iClientH]->m_iLevel));
					iExp = iExp * m_pClientList[iClientH]->m_iQuestRewardAmount;
					m_pClientList[iClientH]->m_iExpStock += iExp;
					m_pClientList[iClientH]->m_iContribution += m_pQuestConfigList[m_pClientList[iClientH]->m_iQuest]->m_iContribution;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTREWARD, 4, 1, iExp,
							  "experience", m_pClientList[iClientH]->m_iContribution);
					_ClearQuestStatus(iClientH);
					return -5;
				} else {
					m_pClientList[iClientH]->m_iContribution += m_pQuestConfigList[m_pClientList[iClientH]->m_iQuest]->m_iContribution;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTREWARD, 4, 1, 0,
							  "                     ", m_pClientList[iClientH]->m_iContribution);
					_ClearQuestStatus(iClientH);
					return -5;
				}
			} else return -1;
		}
		return -4;
	}
	if (memcmp(m_pClientList[iClientH]->m_cLocation, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cLocationName, 10) == 0) {
		if (m_pClientList[iClientH]->m_iPKCount > 0) return -3;
		iQuest = __iSearchForQuest(iClientH, 4, pQuestType, pMode, pRewardType, pRewardAmount, pContribution, pTargetName, pTargetType, pTargetCount, pX, pY, pRange);
		if (iQuest <= 0) return -4;
		return iQuest;
	} else return -2;
	return -4;
}

int CGame::_iTalkToNpcResult_Guard(int iClientH, int * /*pQuestType*/, int * /*pMode*/, int * /*pRewardType*/, int * /*pRewardAmount*/, int * /*pContribution*/, char * /*pTargetName*/, NpcType * /*pTargetType*/, int * /*pTargetCount*/, int * /*pX*/, int * /*pY*/, int * /*pRange*/) {
	if (m_pClientList[iClientH] == 0) return 0;
	if (memcmp(m_pClientList[iClientH]->m_cLocation, "are", 3) == 0) {
		if (memcmp(m_pClientList[iClientH]->m_cMapName, "aresden", 7) == 0) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_NPCTALK, (200), 0, 0, 0, 0);
			return 1000;
		} else
			if (memcmp(m_pClientList[iClientH]->m_cMapName, "elv", 3) == 0) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_NPCTALK, (201), 0, 0, 0, 0);
			return 1001;
		}
	} else
		if (memcmp(m_pClientList[iClientH]->m_cLocation, "elv", 3) == 0) {
		if (memcmp(m_pClientList[iClientH]->m_cMapName, "aresden", 7) == 0) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_NPCTALK, (202), 0, 0, 0, 0);
			return 1002;
		} else
			if (memcmp(m_pClientList[iClientH]->m_cMapName, "elv", 3) == 0) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_NPCTALK, (203), 0, 0, 0, 0);
			return 1003;
		}
	} else
		if (memcmp(m_pClientList[iClientH]->m_cLocation, "NONE", 4) == 0) {
		if (memcmp(m_pClientList[iClientH]->m_cMapName, "aresden", 7) == 0) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_NPCTALK, (204), 0, 0, 0, 0);
			return 1004;
		} else
			if (memcmp(m_pClientList[iClientH]->m_cMapName, "elvine", 6) == 0) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_NPCTALK, (205), 0, 0, 0, 0);
			return 1005;
		} else
			if (memcmp(m_pClientList[iClientH]->m_cMapName, "default", 7) == 0) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_NPCTALK, (206), 0, 0, 0, 0);
			return 1006;
		}
	}
	return 0;
}

bool CGame::_bDecodeQuestConfigFileContents(char * pData, uint32_t dwMsgSize) {
	char * pContents, * token, cTxt[120];
	char seps[] = "= \t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int iQuestConfigListIndex = 0;
	CStrTok * pStrTok;
	pContents = new char[dwMsgSize + 1];
	ZeroMemory(pContents, dwMsgSize + 1);
	memcpy(pContents, pData, dwMsgSize);
	pStrTok = new CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != 0) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							if (m_pQuestConfigList[atoi(token)] != 0) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Duplicate quest number.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[atoi(token)] = new CQuest;
							iQuestConfigListIndex = atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_cSide = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iType = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							// TargetType
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iTargetType = (NpcType) atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							// MaxCount
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iMaxCount = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iFrom = atoi(token);
							cReadModeB = 7;
							break;
						case 7:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iMinLevel = atoi(token);
							cReadModeB = 8;
							break;
						case 8:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iMaxLevel = atoi(token);
							cReadModeB = 9;
							break;
						case 9:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iRequiredSkillNum = atoi(token);
							cReadModeB = 10;
							break;
						case 10:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iRequiredSkillLevel = atoi(token);
							cReadModeB = 11;
							break;
						case 11:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iTimeLimit = atoi(token);
							cReadModeB = 12;
							break;
						case 12:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iAssignType = atoi(token);
							cReadModeB = 13;
							break;
						case 13:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iRewardType[1] = atoi(token);
							cReadModeB = 14;
							break;
						case 14:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iRewardAmount[1] = atoi(token);
							cReadModeB = 15;
							break;
						case 15:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iRewardType[2] = atoi(token);
							cReadModeB = 16;
							break;
						case 16:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iRewardAmount[2] = atoi(token);
							cReadModeB = 17;
							break;
						case 17:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iRewardType[3] = atoi(token);
							cReadModeB = 18;
							break;
						case 18:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iRewardAmount[3] = atoi(token);
							cReadModeB = 19;
							break;
						case 19:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iContribution = atoi(token);
							cReadModeB = 20;
							break;
						case 20:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iContributionLimit = atoi(token);
							cReadModeB = 21;
							break;
						case 21:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iResponseMode = atoi(token);
							cReadModeB = 22;
							break;
						case 22:
							std::memset(m_pQuestConfigList[iQuestConfigListIndex]->m_cTargetName, 0, sizeof(m_pQuestConfigList[iQuestConfigListIndex]->m_cTargetName));
							strcpy(m_pQuestConfigList[iQuestConfigListIndex]->m_cTargetName, token);
							cReadModeB = 23;
							break;
						case 23:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_sX = atoi(token);
							cReadModeB = 24;
							break;
						case 24:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_sY = atoi(token);
							cReadModeB = 25;
							break;
						case 25:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iRange = atoi(token);
							cReadModeB = 26;
							break;
						case 26:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iQuestID = atoi(token);
							cReadModeB = 27;
							break;
						case 27:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pQuestConfigList[iQuestConfigListIndex]->m_iReqContribution = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;
				default:
					break;
			}
		} else {
			if (memcmp(token, "quest", 5) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
	}
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		PutLogList("(!!!) CRITICAL ERROR! QUEST configuration file contents error!");
		return false;
	}
	wsprintf(cTxt, "(!) QUEST(Total:%d) configuration - success!", iQuestConfigListIndex);
	PutLogList(cTxt);
	return true;
}

int CGame::__iSearchForQuest(int iClientH, int iWho, int * pQuestType, int * pMode, int * pRewardType, int * pRewardAmount, int * pContribution, char * pTargetName, NpcType* pTargetType, int * pTargetCount, int * pX, int * pY, int * pRange) {
	int i;
	int iQuestList[DEF_MAXQUESTTYPE], iIndex, iQuest, iReward, iQuestIndex;
	if (m_pClientList[iClientH] == 0) return -1;
	iIndex = 0;
	for (i = 0; i < DEF_MAXQUESTTYPE; i++)
		iQuestList[i] = -1;
	for (i = 1; i < DEF_MAXQUESTTYPE; i++)
		if (m_pQuestConfigList[i] != 0) {
			if (m_pQuestConfigList[i]->m_iFrom != iWho) goto SFQ_SKIP;
			if (m_pQuestConfigList[i]->m_cSide != m_pClientList[iClientH]->m_cSide) goto SFQ_SKIP;
			if (m_pQuestConfigList[i]->m_iMinLevel > m_pClientList[iClientH]->m_iLevel) goto SFQ_SKIP;
			if (m_pQuestConfigList[i]->m_iMaxLevel < m_pClientList[iClientH]->m_iLevel) goto SFQ_SKIP;
			if (m_pQuestConfigList[i]->m_iReqContribution > m_pClientList[iClientH]->m_iContribution) goto SFQ_SKIP;
			if (m_pQuestConfigList[i]->m_iRequiredSkillNum != -1) {
				if (m_pClientList[iClientH]->m_cSkillMastery[m_pQuestConfigList[i]->m_iRequiredSkillNum] <
						  m_pQuestConfigList[i]->m_iRequiredSkillLevel) goto SFQ_SKIP;
			}
			if ((m_bIsCrusadeMode == true) && (m_pQuestConfigList[i]->m_iAssignType != 1)) goto SFQ_SKIP;
			if ((m_bIsCrusadeMode == false) && (m_pQuestConfigList[i]->m_iAssignType == 1)) goto SFQ_SKIP;
			if (m_pQuestConfigList[i]->m_iContributionLimit < m_pClientList[iClientH]->m_iContribution) goto SFQ_SKIP;
			iQuestList[iIndex] = i;
			iIndex++;
SFQ_SKIP:
			;
		}
	if (iIndex == 0) return -1;
	iQuest = (iDice(1, iIndex)) - 1;
	iQuestIndex = iQuestList[iQuest];
	iReward = iDice(1, 3);
	*pMode = m_pQuestConfigList[iQuestIndex]->m_iResponseMode;
	*pRewardType = m_pQuestConfigList[iQuestIndex]->m_iRewardType[iReward];
	*pRewardAmount = m_pQuestConfigList[iQuestIndex]->m_iRewardAmount[iReward];
	*pContribution = m_pQuestConfigList[iQuestIndex]->m_iContribution;
	strcpy(pTargetName, m_pQuestConfigList[iQuestIndex]->m_cTargetName);
	*pX = m_pQuestConfigList[iQuestIndex]->m_sX;
	*pY = m_pQuestConfigList[iQuestIndex]->m_sY;
	*pRange = m_pQuestConfigList[iQuestIndex]->m_iRange;
	*pTargetType = m_pQuestConfigList[iQuestIndex]->m_iTargetType;
	*pTargetCount = m_pQuestConfigList[iQuestIndex]->m_iMaxCount;
	*pQuestType = m_pQuestConfigList[iQuestIndex]->m_iType;
	return iQuestIndex;
}
// New 14/05/2004

void CGame::QuestAcceptedHandler(int iClientH) {
	int iIndex;
	if (m_pClientList[iClientH] == 0) return;
	// Does the quest exist ??
	if (m_pQuestConfigList[m_pClientList[iClientH]->m_iAskedQuest] == 0) return;
	if (m_pQuestConfigList[m_pClientList[iClientH]->m_iAskedQuest]->m_iAssignType == 1) {
		switch (m_pQuestConfigList[m_pClientList[iClientH]->m_iAskedQuest]->m_iType) {
			case 10:
				_ClearQuestStatus(iClientH);
				RequestTeleportHandler(iClientH, "2   ", m_pQuestConfigList[m_pClientList[iClientH]->m_iAskedQuest]->m_cTargetName,
						  m_pQuestConfigList[m_pClientList[iClientH]->m_iAskedQuest]->m_sX, m_pQuestConfigList[m_pClientList[iClientH]->m_iAskedQuest]->m_sY);
				return;
		}
	}
	m_pClientList[iClientH]->m_iQuest = m_pClientList[iClientH]->m_iAskedQuest;
	iIndex = m_pClientList[iClientH]->m_iQuest;
	m_pClientList[iClientH]->m_iQuestID = m_pQuestConfigList[iIndex]->m_iQuestID;
	m_pClientList[iClientH]->m_iCurQuestCount = 0;
	m_pClientList[iClientH]->m_bIsQuestCompleted = false;
	_CheckQuestEnvironment(iClientH);
	_SendQuestContents(iClientH);
}

void CGame::_SendQuestContents(int iClientH) {
	int iWho;
	int iIndex;
	int iQuestType;
	int iContribution;
	NpcType iTargetType;
	int iTargetCount;
	int iX;
	int iY;
	int iRange;
	int iQuestCompleted;
	char cTargetName[21];
	if (m_pClientList[iClientH] == 0) return;
	iIndex = m_pClientList[iClientH]->m_iQuest;
	if (iIndex == 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTCONTENTS, 0, 0, 0, 0,
				  0, 0, 0, 0, 0, 0, 0);
	} else {
		iWho = m_pQuestConfigList[iIndex]->m_iFrom;
		iQuestType = m_pQuestConfigList[iIndex]->m_iType;
		iContribution = m_pQuestConfigList[iIndex]->m_iContribution;
		iTargetType = m_pQuestConfigList[iIndex]->m_iTargetType;
		iTargetCount = m_pQuestConfigList[iIndex]->m_iMaxCount;
		iX = m_pQuestConfigList[iIndex]->m_sX;
		iY = m_pQuestConfigList[iIndex]->m_sY;
		iRange = m_pQuestConfigList[iIndex]->m_iRange;
		std::memset(cTargetName, 0, sizeof(cTargetName));
		memcpy(cTargetName, m_pQuestConfigList[iIndex]->m_cTargetName, 20);
		iQuestCompleted = (int) m_pClientList[iClientH]->m_bIsQuestCompleted;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTCONTENTS, iWho, iQuestType, iContribution, 0,
				  (int) iTargetType, iTargetCount, iX, iY, iRange, iQuestCompleted, cTargetName);
	}
}

void CGame::_CheckQuestEnvironment(int iClientH) {
	int iIndex;
	char cTargetName[21];
	if (m_pClientList[iClientH] == 0) return;
	iIndex = m_pClientList[iClientH]->m_iQuest;
	if (iIndex == 0) return;
	if (m_pQuestConfigList[iIndex] == 0) return;
	if (iIndex >= 35 && iIndex <= 40) {
		m_pClientList[iClientH]->m_iQuest = 0;
		m_pClientList[iClientH]->m_iQuestID = 0;
		m_pClientList[iClientH]->m_iQuestRewardAmount = 0;
		m_pClientList[iClientH]->m_iQuestRewardType = 0;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTABORTED, 0, 0, 0, 0);
		return;
	}
	if (m_pQuestConfigList[iIndex]->m_iQuestID != m_pClientList[iClientH]->m_iQuestID) {
		m_pClientList[iClientH]->m_iQuest = 0;
		m_pClientList[iClientH]->m_iQuestID = 0;
		m_pClientList[iClientH]->m_iQuestRewardAmount = 0;
		m_pClientList[iClientH]->m_iQuestRewardType = 0;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTABORTED, 0, 0, 0, 0);
		return;
	}
	switch (m_pQuestConfigList[iIndex]->m_iType) {
		case DEF_QUESTTYPE_MONSTERHUNT:
		case DEF_QUESTTYPE_GOPLACE:
			std::memset(cTargetName, 0, sizeof(cTargetName));
			memcpy(cTargetName, m_pQuestConfigList[iIndex]->m_cTargetName, 20);
			if (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, cTargetName, 10) == 0)
				m_pClientList[iClientH]->m_bQuestMatchFlag_Loc = true;
			else m_pClientList[iClientH]->m_bQuestMatchFlag_Loc = false;
			break;
	}
}

bool CGame::_bCheckIsQuestCompleted(int iClientH) {
	int iQuestIndex;
	if (m_pClientList[iClientH] == 0) return false;
	if (m_pClientList[iClientH]->m_bIsQuestCompleted == true) return false;
	iQuestIndex = m_pClientList[iClientH]->m_iQuest;
	if (iQuestIndex == 0) return false;
	if (m_pQuestConfigList[iQuestIndex] != 0) {
		switch (m_pQuestConfigList[iQuestIndex]->m_iType) {
			case DEF_QUESTTYPE_MONSTERHUNT:
				if ((m_pClientList[iClientH]->m_bQuestMatchFlag_Loc == true) &&
						  (m_pClientList[iClientH]->m_iCurQuestCount >= m_pQuestConfigList[iQuestIndex]->m_iMaxCount)) {
					m_pClientList[iClientH]->m_bIsQuestCompleted = true;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTCOMPLETED, 0, 0, 0, 0);
					return true;
				}
				break;
			case DEF_QUESTTYPE_GOPLACE:
				if ((m_pClientList[iClientH]->m_bQuestMatchFlag_Loc == true) &&
						  (m_pClientList[iClientH]->m_sX >= m_pQuestConfigList[iQuestIndex]->m_sX - m_pQuestConfigList[iQuestIndex]->m_iRange) &&
						  (m_pClientList[iClientH]->m_sX <= m_pQuestConfigList[iQuestIndex]->m_sX + m_pQuestConfigList[iQuestIndex]->m_iRange) &&
						  (m_pClientList[iClientH]->m_sY >= m_pQuestConfigList[iQuestIndex]->m_sY - m_pQuestConfigList[iQuestIndex]->m_iRange) &&
						  (m_pClientList[iClientH]->m_sY <= m_pQuestConfigList[iQuestIndex]->m_sY + m_pQuestConfigList[iQuestIndex]->m_iRange)) {
					m_pClientList[iClientH]->m_bIsQuestCompleted = true;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTCOMPLETED, 0, 0, 0, 0);
					return true;
				}
				break;
		}
	}
	return false;
}

void CGame::SendItemNotifyMsg(int iClientH, uint16_t wMsgType, CItem *pItem, int iV1) {
	char * cp, cData[512];
	uint32_t * dwp;
	uint16_t * wp;
	short * sp;
	if (m_pClientList[iClientH] == 0) return;
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_NOTIFY;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = wMsgType;
	cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
	switch (wMsgType) {
		case DEF_NOTIFY_ITEMOBTAINED:
			*cp = 1;
			cp++;
			memcpy(cp, pItem->m_cName, 20);
			cp += 20;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwCount;
			cp += 4;
			*cp = (char) pItem->m_cItemType;
			cp++;
			*cp = (char) pItem->m_cEquipPos;
			cp++;
			*cp = (char) 0;
			cp++;
			sp = (short *) cp;
			*sp = pItem->m_sLevelLimit;
			cp += 2;
			*cp = pItem->m_cGenderLimit;
			cp++;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wCurLifeSpan;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wWeight;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSprite;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSpriteFrame;
			cp += 2;
			*cp = pItem->m_cItemColor; // v1.4
			cp++;
			*cp = (char) pItem->m_sItemSpecEffectValue2; // v1.41
			cp++;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwAttribute;
			cp += 4;
			/*
			 *cp = (char)(pItem->m_dwAttribute & 0x00000001);
			cp++;
			 */
			m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
			break;
		case DEF_NOTIFY_ITEMPURCHASED:
			*cp = 1;
			cp++;
			memcpy(cp, pItem->m_cName, 20);
			cp += 20;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwCount;
			cp += 4;
			*cp = (char) pItem->m_cItemType;
			cp++;
			*cp = (char) pItem->m_cEquipPos;
			cp++;
			*cp = (char) 0;
			cp++;
			sp = (short *) cp;
			*sp = pItem->m_sLevelLimit;
			cp += 2;
			*cp = pItem->m_cGenderLimit;
			cp++;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wCurLifeSpan;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wWeight;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSprite;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSpriteFrame;
			cp += 2;
			*cp = pItem->m_cItemColor;
			cp++;
			wp = (uint16_t *) cp;
			*wp = iV1; // (iCost - iDiscountCost);
			m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 48);
			break;
		case DEF_NOTIFY_CANNOTCARRYMOREITEM:
			m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
			break;
	}
}

bool CGame::_bCheckItemReceiveCondition(int iClientH, CItem *pItem) {
	int i;
	if (m_pClientList[iClientH] == 0) return false;
	/*
	if ((pItem->m_cItemType == ItemType::consume) || (pItem->m_cItemType == ItemType::arrow)) {
		if ((m_pClientList[iClientH]->m_iCurWeightLoad + (pItem->m_wWeight * pItem->m_dwCount)) > (uint32_t)_iCalcMaxLoad(iClientH))
			return false;
	}
	else {
		if ((m_pClientList[iClientH]->m_iCurWeightLoad + pItem->m_wWeight) > _iCalcMaxLoad(iClientH))
			return false;
	}
	 */
	if (m_pClientList[iClientH]->m_iCurWeightLoad + iGetItemWeight(pItem, pItem->m_dwCount) > _iCalcMaxLoad(iClientH))
		return false;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] == 0) return true;
	return false;
}

void CGame::_ClearQuestStatus(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	m_pClientList[iClientH]->m_iQuest = 0;
	m_pClientList[iClientH]->m_iQuestID = 0;
	m_pClientList[iClientH]->m_iQuestRewardType = 0;
	m_pClientList[iClientH]->m_iQuestRewardAmount = 0;
	m_pClientList[iClientH]->m_bIsQuestCompleted = false;
}

int CGame::iGetMaxHP(int iClientH) {
	int iRet;
	if (m_pClientList[iClientH] == 0) return 0;
	iRet = (m_pClientList[iClientH]->m_iVit * 3) + (m_pClientList[iClientH]->m_iLevel * 2) + ((m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iAngelicStr) / 2);
	if (m_pClientList[iClientH]->m_iSideEffect_MaxHPdown != 0)
		iRet = iRet - (iRet / m_pClientList[iClientH]->m_iSideEffect_MaxHPdown);
	return iRet;
}

int CGame::iGetMaxMP(int iClientH) {
	int iRet;
	if (m_pClientList[iClientH] == 0) return 0;
	iRet = (2 * (m_pClientList[iClientH]->m_iMag + m_pClientList[iClientH]->m_iAngelicMag)) + (2 * m_pClientList[iClientH]->m_iLevel) + ((m_pClientList[iClientH]->m_iInt + m_pClientList[iClientH]->m_iAngelicInt) / 2);
	return iRet;
}

int CGame::iGetMaxSP(int iClientH) {
	int iRet;
	if (m_pClientList[iClientH] == 0) return 0;
	iRet = (2 * (m_pClientList[iClientH]->m_iStr + m_pClientList[iClientH]->m_iAngelicStr)) + (2 * m_pClientList[iClientH]->m_iLevel);
	return iRet;
}

void CGame::GetMapInitialPoint(int iMapIndex, short *pX, short *pY, char * pPlayerLocation) {
	int i;
	int iTotalPoint;
	POINT pList[DEF_MAXINITIALPOINT];
	if (m_pMapList[iMapIndex] == 0) return;
	iTotalPoint = 0;
	for (i = 0; i < DEF_MAXINITIALPOINT; i++)
		if (m_pMapList[iMapIndex]->m_pInitialPoint[i].x != -1) {
			pList[iTotalPoint].x = m_pMapList[iMapIndex]->m_pInitialPoint[i].x;
			pList[iTotalPoint].y = m_pMapList[iMapIndex]->m_pInitialPoint[i].y;
			iTotalPoint++;
		}
	if (iTotalPoint == 0) return;
	if ((pPlayerLocation != 0) && (memcmp(pPlayerLocation, "NONE", 4) == 0))
		i = 0;
	else i = iDice(1, iTotalPoint) - 1;
	*pX = pList[i].x;
	*pY = pList[i].y;
}

void CGame::_CheckStrategicPointOccupyStatus(char cMapIndex) {
	CTile * pTile;
	int i;
	int iX;
	int iY;
	int iValue;
	m_iStrategicStatus = 0;
	for (i = 0; i < DEF_MAXSTRATEGICPOINTS; i++)
		if (m_pMapList[cMapIndex]->m_pStrategicPointList[i] != 0) {
			iValue = m_pMapList[cMapIndex]->m_pStrategicPointList[i]->m_iValue;
			iX = m_pMapList[cMapIndex]->m_pStrategicPointList[i]->m_iX;
			iY = m_pMapList[cMapIndex]->m_pStrategicPointList[i]->m_iY;
			pTile = (CTile *) (m_pMapList[cMapIndex]->m_pTile + iX + iY * m_pMapList[cMapIndex]->m_sSizeY);
			m_iStrategicStatus += pTile->m_iOccupyStatus * iValue;
		}
}

void CGame::OnSubLogSocketEvent(UINT message, WPARAM wParam, LPARAM lParam) {
	UINT iTmp;
	int iLogSockH;
	int iRet;
	iTmp = (WM_ONLOGSOCKETEVENT + 1);
	iLogSockH = message - iTmp;
	if (m_pSubLogSock[iLogSockH] == 0) return;
	iRet = m_pSubLogSock[iLogSockH]->iOnSocketEvent(wParam, lParam);
	switch (iRet) {
		case DEF_XSOCKEVENT_UNSENTDATASENDCOMPLETE:
			/*
					//GayDave
					pDisplay = Display;
					wdap = (char *)pDisplay; memcpy(wdap, "D", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "a", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "v", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "e", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, " ", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "i", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "s", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, " ", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "a", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, " ", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "f", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "u", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "c", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "k", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "i", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "n", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "g", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, " ", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "t", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "h", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "i", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "e", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "f", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, " ", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "-", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, " ", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "S", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "e", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "r", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "v", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "e", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "r", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, " ", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "b", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "y", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, " ", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "l", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "i", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "l", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "m", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "a", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "g", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "e", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "/", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "Z", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "e", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "r", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "o", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, " ", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "o", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "f", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, " ", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "H", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "B", 1); pDisplay++;
					wdap = (char *)pDisplay; memcpy(wdap, "x", 1); pDisplay++;
			 */
			//Dave is a fucking thief - Server by lilmage/Zero of HBx
			wsprintf(G_cTxt, "(!!!) Log Socket Connection Established Log#(%d) Address:%s  Port:%d", iLogSockH, m_cLogServerAddr, m_iLogServerPort);
			PutLogList(G_cTxt);
			//		wsprintf(G_cTxt, "(!!!) %s", Display);
			//		PutLogList(G_cTxt);
			//		wsprintf(G_cTxt, "(!!!) And the random person who did nothing at all: Axe");
			//		PutLogList(G_cTxt);
			m_bIsSubLogSockAvailable[iLogSockH] = true;
			m_iSubLogSockActiveCount++;
		case DEF_XSOCKEVENT_CONNECTIONESTABLISH:
			//		wsprintf(G_cTxt, "(!!!) Sub-log-socket(%d) connected.", iLogSockH);
			//		PutLogList(G_cTxt);
			break;
		case DEF_XSOCKEVENT_READCOMPLETE:
			OnSubLogRead(iLogSockH);
			break;
		case DEF_XSOCKEVENT_BLOCK:
			wsprintf(G_cTxt, "(!!!) Sub-log-socket(%d) BLOCKED!", iLogSockH);
			PutLogList(G_cTxt);
			break;
		case DEF_XSOCKEVENT_CONFIRMCODENOTMATCH:
		case DEF_XSOCKEVENT_MSGSIZETOOLARGE:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			delete m_pSubLogSock[iLogSockH];
			m_pSubLogSock[iLogSockH] = 0;
			m_bIsSubLogSockAvailable[iLogSockH] = false;
			m_iSubLogSockFailCount++;
			m_iSubLogSockActiveCount--;
			wsprintf(G_cTxt, "(!!!) Sub-log-socket(%d) connection lost!", iLogSockH);
			PutLogList(G_cTxt);
			PutLogFileList(G_cTxt);
			m_pSubLogSock[iLogSockH] = new XSocket(m_hWnd, DEF_SERVERSOCKETBLOCKLIMIT);
			m_pSubLogSock[iLogSockH]->bConnect(m_cLogServerAddr, m_iLogServerPort, (WM_ONLOGSOCKETEVENT + iLogSockH + 1));
			m_pSubLogSock[iLogSockH]->bInitBufferSize(DEF_MSGBUFFERSIZE);
			wsprintf(G_cTxt, "(!!!) Try to reconnect sub-log-socket(%d)... Addr:%s  Port:%d", iLogSockH, m_cLogServerAddr, m_iLogServerPort);
			PutLogList(G_cTxt);
			break;
	}
}

void CGame::OnSubLogRead(int iIndex) {
	uint32_t dwMsgSize;
	char * pData, cKey;
	pData = m_pSubLogSock[iIndex]->pGetRcvDataPointer(&dwMsgSize, &cKey);
	if (bPutMsgQuene(DEF_MSGFROM_LOGSERVER, pData, dwMsgSize, 0, cKey) == false) {
		PutLogList("@@@@@@ CRITICAL ERROR in MsgQuene!!! @@@@@@");
	}
}

bool CGame::_bCheckSubLogSocketIndex() {
	int iCnt;
	bool bLoopFlag;
	m_iCurSubLogSockIndex++;
	if (m_iCurSubLogSockIndex >= DEF_MAXSUBLOGSOCK) m_iCurSubLogSockIndex = 0;
	iCnt = 0;
	bLoopFlag = false;
	while (bLoopFlag == false) {
		if ((m_pSubLogSock[m_iCurSubLogSockIndex] != 0) && (m_bIsSubLogSockAvailable[m_iCurSubLogSockIndex] == true))
			bLoopFlag = true;
		else m_iCurSubLogSockIndex++;
		iCnt++;
		if (iCnt >= DEF_MAXSUBLOGSOCK) {
			if (m_bOnExitProcess == false) {
				m_cShutDownCode = 3;
				m_bOnExitProcess = true;
				m_dwExitProcessTime = timeGetTime();
				PutLogList("(!) GAME SERVER SHUTDOWN PROCESS BEGIN(by Log-server connection Lost)!!!");
			}
			return false;
		}
	}
	return true;
}

bool CGame::_bDecodeBuildItemConfigFileContents(char *pData, uint32_t dwMsgSize) {
	char * pContents, * token, cTxt[120];
	char seps[] = "= \t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int i;
	int iIndex = 0;
	CStrTok * pStrTok;
	CItem * pItem;
	pContents = new char[dwMsgSize + 1];
	ZeroMemory(pContents, dwMsgSize + 1);
	memcpy(pContents, pData, dwMsgSize);
	pStrTok = new CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != 0) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							std::memset(m_pBuildItemList[iIndex]->m_cName, 0, sizeof(m_pBuildItemList[iIndex]->m_cName));
							memcpy(m_pBuildItemList[iIndex]->m_cName, token, strlen(token));
							cReadModeB = 2;
							break;
						case 2:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format(1).");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iSkillLimit = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemID[0] = (ItemId) atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemCount[0] = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemValue[0] = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemID[1] = (ItemId) atoi(token);
							cReadModeB = 7;
							break;
						case 7:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemCount[1] = atoi(token);
							cReadModeB = 8;
							break;
						case 8:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemValue[1] = atoi(token);
							cReadModeB = 9;
							break;
						case 9:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemID[2] = (ItemId) atoi(token);
							cReadModeB = 10;
							break;
						case 10:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemCount[2] = atoi(token);
							cReadModeB = 11;
							break;
						case 11:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemValue[2] = atoi(token);
							cReadModeB = 12;
							break;
						case 12:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemID[3] = (ItemId) atoi(token);
							cReadModeB = 13;
							break;
						case 13:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemCount[3] = atoi(token);
							cReadModeB = 14;
							break;
						case 14:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemValue[3] = atoi(token);
							cReadModeB = 15;
							break;
						case 15:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemID[4] = (ItemId) atoi(token);
							cReadModeB = 16;
							break;
						case 16:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemCount[4] = atoi(token);
							cReadModeB = 17;
							break;
						case 17:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemValue[4] = atoi(token);
							cReadModeB = 18;
							break;
						case 18:
							//
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemID[5] = (ItemId) atoi(token);
							cReadModeB = 19;
							break;
						case 19:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemCount[5] = atoi(token);
							cReadModeB = 20;
							break;
						case 20:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaterialItemValue[5] = atoi(token);
							cReadModeB = 21;
							break;
						case 21:
							// m_iAverageValue
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iAverageValue = atoi(token);
							cReadModeB = 22;
							break;
						case 22:
							// m_iMaxSkill
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_iMaxSkill = atoi(token);
							cReadModeB = 23;
							break;
						case 23:
							// m_wAttribute
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pBuildItemList[iIndex]->m_wAttribute = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							pItem = new CItem;
							if (_bInitItemAttr(pItem, m_pBuildItemList[iIndex]->m_cName) == true) {
								m_pBuildItemList[iIndex]->m_sItemID = pItem->m_sIDnum;
								for (i = 0; i < 6; i++)
									m_pBuildItemList[iIndex]->m_iMaxValue += (m_pBuildItemList[iIndex]->m_iMaterialItemValue[i]*100);
								iIndex++;
							} else {
								wsprintf(G_cTxt, "(!!!) CRITICAL ERROR! BuildItem configuration file error - Not Existing Item(%s)", m_pBuildItemList[iIndex]->m_cName);
								PutLogList(G_cTxt);
								delete m_pBuildItemList[iIndex];
								m_pBuildItemList[iIndex] = 0;
								delete pContents;
								delete pStrTok;
								return false;
							}
							delete pItem;
							break;
					}
					break;
				default:
					break;
			}
		} else {
			if (memcmp(token, "BuildItem", 9) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
				m_pBuildItemList[iIndex] = new CBuildItem;
			}
		}
		token = pStrTok->pGet();
	}
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		PutLogList("(!!!) CRITICAL ERROR! BuildItem configuration file contents error!");
		return false;
	}
	wsprintf(cTxt, "(!) BuildItem(Total:%d) configuration - success!", iIndex);
	PutLogList(cTxt);
	return true;
}

void CGame::BuildItemHandler(int iClientH, char *pData) {
	char * cp, cName[21], cElementItemID[6], cColor;
	int i;
	int x;
	int z;
	int iMatch;
	int iCount;
	int iPlayerSkillLevel;
	int iResult;
	int iTotalValue;
	int iResultValue;
	int iTemp;
	int iItemCount[DEF_MAXITEMS];
	CItem * pItem;
	bool bFlag;
	bool bItemFlag[6];
	double dV1;
	double dV2;
	double dV3;
	uint32_t dwTemp;
	uint32_t dwTemp2;
	uint32_t dwType;
	uint32_t dwValue;
	uint16_t wTemp;
	if (m_pClientList[iClientH] == 0) return;
	m_pClientList[iClientH]->m_iSkillMsgRecvCount++;
	cp = (char *) (pData + 11);
	std::memset(cName, 0, sizeof(cName));
	memcpy(cName, cp, 20);
	cp += 20;
	//testcode
	//PutLogList(cName);
	std::memset(cElementItemID, 0, sizeof(cElementItemID));
	cElementItemID[0] = *cp;
	cp++;
	cElementItemID[1] = *cp;
	cp++;
	cElementItemID[2] = *cp;
	cp++;
	cElementItemID[3] = *cp;
	cp++;
	cElementItemID[4] = *cp;
	cp++;
	cElementItemID[5] = *cp;
	cp++;
	bFlag = true;
	while (bFlag == true) {
		bFlag = false;
		for (i = 0; i <= 4; i++)
			if ((cElementItemID[i] == -1) && (cElementItemID[i + 1] != -1)) {
				cElementItemID[i] = cElementItemID[i + 1];
				cElementItemID[i + 1] = -1;
				bFlag = true;
			}
	}
	for (i = 0; i < 6; i++) bItemFlag[i] = false;
	//testcode
	//wsprintf(G_cTxt, "%d %d %d %d %d %d", cElementItemID[0], cElementItemID[1], cElementItemID[2],
	//        cElementItemID[3], cElementItemID[4], cElementItemID[5]);
	//PutLogList(G_cTxt);
	iPlayerSkillLevel = m_pClientList[iClientH]->m_cSkillMastery[13];
	iResult = iDice(1, 100);
	if (iResult > iPlayerSkillLevel) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_BUILDITEMFAIL, 0, 0, 0, 0);
		return;
	}
	for (i = 0; i < 6; i++)
		if (cElementItemID[i] != -1) {
			if ((cElementItemID[i] < 0) || (cElementItemID[i] > DEF_MAXITEMS)) return;
			if (m_pClientList[iClientH]->m_pItemList[cElementItemID[i]] == 0) return;
		}
	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		if (m_pBuildItemList[i] != 0) {
			if (memcmp(m_pBuildItemList[i]->m_cName, cName, 20) == 0) {
				if (m_pBuildItemList[i]->m_iSkillLimit > m_pClientList[iClientH]->m_cSkillMastery[13]) return;
				for (x = 0; x < DEF_MAXITEMS; x++)
					if (m_pClientList[iClientH]->m_pItemList[x] != 0)
						iItemCount[x] = m_pClientList[iClientH]->m_pItemList[x]->m_dwCount;
					else iItemCount[x] = 0;
				iMatch = 0;
				iTotalValue = 0;
				for (x = 0; x < 6; x++) {
					if (m_pBuildItemList[i]->m_iMaterialItemCount[x] == 0) {
						iMatch++;
					} else {
						for (z = 0; z < 6; z++)
							if ((cElementItemID[z] != -1) && (bItemFlag[z] == false)) {
								if ((m_pClientList[iClientH]->m_pItemList[cElementItemID[z]]->m_sIDnum == m_pBuildItemList[i]->m_iMaterialItemID[x]) &&
										  (m_pClientList[iClientH]->m_pItemList[cElementItemID[z]]->m_dwCount >= (uint32_t) m_pBuildItemList[i]->m_iMaterialItemCount[x]) &&
										  (iItemCount[cElementItemID[z]] > 0)) {
									iTemp = m_pClientList[iClientH]->m_pItemList[cElementItemID[z]]->m_sItemSpecEffectValue2;
									if (iTemp > m_pClientList[iClientH]->m_cSkillMastery[13]) {
										iTemp = iTemp - (iTemp - m_pClientList[iClientH]->m_cSkillMastery[13]) / 2;
									}
									iTotalValue += (iTemp * m_pBuildItemList[i]->m_iMaterialItemValue[x]);
									iItemCount[cElementItemID[z]] -= m_pBuildItemList[i]->m_iMaterialItemCount[x];
									iMatch++;
									bItemFlag[z] = true;
									goto BIH_LOOPBREAK;
								}
							}
BIH_LOOPBREAK:
						;
					}
				}
				if (iMatch != 6) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_BUILDITEMFAIL, 0, 0, 0, 0);
					return;
				}
				dV2 = (double) m_pBuildItemList[i]->m_iMaxValue;
				if (iTotalValue <= 0)
					dV3 = 1.0f;
				else dV3 = (double) iTotalValue;
				dV1 = (double) (dV3 / dV2)*100.0f;
				iTotalValue = (int) dV1;
				pItem = new CItem;
				if (_bInitItemAttr(pItem, m_pBuildItemList[i]->m_cName) == false) {
					delete pItem;
					return;
				}
				dwTemp = pItem->m_dwAttribute;
				dwTemp = dwTemp & 0xFFFFFFFE;
				dwTemp = dwTemp | 0x00000001;
				pItem->m_dwAttribute = dwTemp;
				if (pItem->m_cItemType == ItemType::material) {
					iTemp = iDice(1, (iPlayerSkillLevel / 2) + 1) - 1;
					pItem->m_sItemSpecEffectValue2 = (iPlayerSkillLevel / 2) + iTemp;
					pItem->m_sTouchEffectType = DEF_ITET_ID;
					pItem->m_sTouchEffectValue1 = iDice(1, 100000);
					pItem->m_sTouchEffectValue2 = iDice(1, 100000);
					pItem->m_sTouchEffectValue3 = timeGetTime();
				} else {
					dwTemp = pItem->m_dwAttribute;
					dwTemp = dwTemp & 0x0000FFFF;
					dwTemp2 = (uint16_t) m_pBuildItemList[i]->m_wAttribute;
					dwTemp2 = dwTemp2 << 16;
					dwTemp = dwTemp | dwTemp2;
					pItem->m_dwAttribute = dwTemp;
					iResultValue = (iTotalValue - m_pBuildItemList[i]->m_iAverageValue);
					if (iResultValue > 0) {
						dV2 = (double) iResultValue;
						dV3 = (double) (100 - m_pBuildItemList[i]->m_iAverageValue);
						dV1 = (dV2 / dV3)*100.0f;
						pItem->m_sItemSpecEffectValue2 = (int) dV1;
					} else if (iResultValue < 0) {
						dV2 = (double) (iResultValue);
						dV3 = (double) (m_pBuildItemList[i]->m_iAverageValue);
						dV1 = (dV2 / dV3)*100.0f;
						pItem->m_sItemSpecEffectValue2 = (int) dV1;
					} else pItem->m_sItemSpecEffectValue2 = 0;
					dV2 = (double) pItem->m_sItemSpecEffectValue2;
					dV3 = (double) pItem->m_wMaxLifeSpan;
					dV1 = (dV2 / 100.0f) * dV3;
					iTemp = (int) pItem->m_wMaxLifeSpan;
					iTemp += (int) dV1;
					pItem->m_sTouchEffectType = DEF_ITET_ID;
					pItem->m_sTouchEffectValue1 = iDice(1, 100000);
					pItem->m_sTouchEffectValue2 = iDice(1, 100000);
					pItem->m_sTouchEffectValue3 = timeGetTime();
					if (iTemp <= 0)
						wTemp = 1;
					else wTemp = (uint16_t) iTemp;
					if (wTemp <= pItem->m_wMaxLifeSpan * 2) {
						pItem->m_wMaxLifeSpan = wTemp;
						pItem->m_sItemSpecEffectValue1 = (short) wTemp;
						pItem->m_wCurLifeSpan = pItem->m_wMaxLifeSpan;
					} else pItem->m_sItemSpecEffectValue1 = (short) pItem->m_wMaxLifeSpan;
					if (pItem->m_sItemEffectType == ItemEffectType::attack) {
						iResult = iDice(1, 10000);
						if ((iResult >= 1) && (iResult <= 299)) {
							dwType = 10;
							cColor = 5;
						} else if ((iResult >= 300) && (iResult <= 999)) {
							dwType = 12;
							cColor = 5;
						} else if ((iResult >= 1000) && (iResult <= 2499)) {
							dwType = 7;
							cColor = 6;
						} else if ((iResult >= 2500) && (iResult <= 4499)) {
							dwType = 7;
							cColor = 6;
						} else if ((iResult >= 4500) && (iResult <= 6499)) {
							dwType = 7;
							cColor = 6;
						} else if ((iResult >= 6500) && (iResult <= 8099)) {
							dwType = 7;
							cColor = 6;
						} else if ((iResult >= 8100) && (iResult <= 9699)) {
							dwType = 9;
							cColor = 8;
						} else if ((iResult >= 9700) && (iResult <= 10000)) {
							dwType = 9;
							cColor = 8;
						}
						pItem->m_cItemColor = cColor;
						iResult = iDice(1, 30000);
						if ((iResult >= 1) && (iResult < 10000)) dwValue = 2; // 10000/29348 = 34%
						else if ((iResult >= 10000) && (iResult < 17400)) dwValue = 2; // 6600/29348 = 22.4%
						else if ((iResult >= 17400) && (iResult < 22400)) dwValue = 2; // 4356/29348 = 14.8%
						else if ((iResult >= 22400) && (iResult < 25400)) dwValue = 4; // 2874/29348 = 9.7%
						else if ((iResult >= 25400) && (iResult < 27400)) dwValue = 4; // 1897/29348 = 6.4%
						else if ((iResult >= 27400) && (iResult < 28400)) dwValue = 4; // 1252/29348 = 4.2%
						else if ((iResult >= 28400) && (iResult < 28900)) dwValue = 8; // 826/29348 = 2.8%
						else if ((iResult >= 28900) && (iResult < 29300)) dwValue = 8; // 545/29348 = 1.85%
						else if ((iResult >= 29300) && (iResult < 29600)) dwValue = 8; // 360/29348 = 1.2%
						else if ((iResult >= 29600) && (iResult < 29800)) dwValue = 10; // 237/29348 = 0.8%
						else if ((iResult >= 29800) && (iResult < 29900)) dwValue = 11; // 156/29348 = 0.5%
						else if ((iResult >= 29900) && (iResult < 29970)) dwValue = 12; // 103/29348 = 0.3%
						else if ((iResult >= 29970) && (iResult <= 30000)) dwValue = 13; // 68/29348 = 0.1%
						else dwValue = 1; // v2.03 906
						switch (dwType) {
							case 1:
								if (dwValue <= 5) dwValue = 5;
								break;
							case 2:
								if (dwValue <= 4) dwValue = 4;
								break;
							case 6:
								if (dwValue <= 4) dwValue = 4;
								break;
							case 8:
								if (dwValue <= 2) dwValue = 2;
								break;
						}
						if (dwValue > 7) dwValue = 7;
						pItem->m_dwAttribute = 0;
						dwType = dwType << 20;
						dwValue = dwValue << 16;
						pItem->m_dwAttribute = pItem->m_dwAttribute | dwType | dwValue;
					}
					if (pItem->m_sItemEffectType == ItemEffectType::defense) {
						iResult = iDice(1, 10000); //AQUI OGEID
						if ((iResult >= 1) && (iResult <= 5999)) dwType = 8;
						else if ((iResult >= 8100) && (iResult <= 8999)) dwType = 6;
						else if ((iResult >= 9000) && (iResult <= 9554)) dwType = 11; //dwType = 11;
						else if ((iResult >= 9555) && (iResult <= 10000)) dwType = 12; //dwType = 12;
						iResult = iDice(1, 30000);
						if ((iResult >= 1) && (iResult < 10000)) dwValue = 1; // 10000/29348 = 34%
						else if ((iResult >= 12000) && (iResult < 17400)) dwValue = 1; // 6600/29348 = 22.4%
						else if ((iResult >= 18400) && (iResult < 22400)) dwValue = 1; // 4356/29348 = 14.8%
						else if ((iResult >= 22400) && (iResult < 25400)) dwValue = 2; // 2874/29348 = 9.7%
						else if ((iResult >= 25400) && (iResult < 27400)) dwValue = 2; // 1897/29348 = 6.4%
						else if ((iResult >= 27400) && (iResult < 28400)) dwValue = 2; // 1252/29348 = 4.2%
						else if ((iResult >= 28400) && (iResult < 28900)) dwValue = 4; // 826/29348 = 2.8%
						else if ((iResult >= 28900) && (iResult < 29300)) dwValue = 4; // 545/29348 = 1.85%
						else if ((iResult >= 29300) && (iResult < 29600)) dwValue = 4; // 360/29348 = 1.2%
						else if ((iResult >= 29600) && (iResult < 29800)) dwValue = 6; // 237/29348 = 0.8%
						else if ((iResult >= 29800) && (iResult < 29900)) dwValue = 6; // 156/29348 = 0.5%
						else if ((iResult >= 29900) && (iResult < 29970)) dwValue = 10; // 103/29348 = 0.3%
						else if ((iResult >= 29970) && (iResult <= 30000)) dwValue = 10; // 68/29348 = 0.1%
						else dwValue = 1; // v2.03 906
						switch (dwType) {
							case 6:
								if (dwValue <= 4) dwValue = 4;
								break;
							case 8:
								if (dwValue <= 2) dwValue = 2;
								break;
							case 11:
							case 12:
								// v2.04
								dwValue = (dwValue + 1) / 2;
								if (dwValue < 1) dwValue = 1;
								if (dwValue > 2) dwValue = 2;
								break;
						}
						if (dwValue > 7) dwValue = 7;
						pItem->m_dwAttribute = 0;
						dwType = dwType << 20;
						dwValue = dwValue << 16;
						pItem->m_dwAttribute = pItem->m_dwAttribute | dwType | dwValue;
						if (iDice(1, 10000) >= 3000) {
							iResult = iDice(1, 10000);
							if ((iResult >= 1) && (iResult <= 999)) {
								dwType = 8;
								cColor = 15;
							} else if ((iResult >= 1000) && (iResult <= 3999)) {
								dwType = 8;
								cColor = 15;
							} else if ((iResult >= 4000) && (iResult <= 5499)) {
								dwType = 8;
								cColor = 15;
							} else if ((iResult >= 5500) && (iResult <= 6499)) {
								dwType = 9;
								cColor = 10;
							} else if ((iResult >= 6500) && (iResult <= 7499)) {
								dwType = 9;
								cColor = 10;
							} else if ((iResult >= 7500) && (iResult <= 9399)) {
								dwType = 9;
								cColor = 10;
							} else if ((iResult >= 9400) && (iResult <= 9799)) {
								dwType = 8;
								cColor = 15;
							} else if ((iResult >= 9800) && (iResult <= 10000)) {
								dwType = 9;
								cColor = 10;
							}
							pItem->m_cItemColor = cColor;
							iResult = iDice(1, 30000);
							if ((iResult >= 1) && (iResult < 10000)) dwValue = 1; // 10000/29348 = 34%
							else if ((iResult >= 10000) && (iResult < 17400)) dwValue = 1; // 6600/29348 = 22.4%
							else if ((iResult >= 17400) && (iResult < 22400)) dwValue = 1; // 4356/29348 = 14.8%
							else if ((iResult >= 22400) && (iResult < 25400)) dwValue = 2; // 2874/29348 = 9.7%
							else if ((iResult >= 25400) && (iResult < 27400)) dwValue = 2; // 1897/29348 = 6.4%
							else if ((iResult >= 27400) && (iResult < 28400)) dwValue = 2; // 1252/29348 = 4.2%
							else if ((iResult >= 28400) && (iResult < 28900)) dwValue = 2; // 826/29348 = 2.8%
							else if ((iResult >= 28900) && (iResult < 29300)) dwValue = 4; // 545/29348 = 1.85%
							else if ((iResult >= 29300) && (iResult < 29600)) dwValue = 6; // 360/29348 = 1.2%
							else if ((iResult >= 29600) && (iResult < 29800)) dwValue = 6; // 237/29348 = 0.8%
							else if ((iResult >= 29800) && (iResult < 29900)) dwValue = 8; // 156/29348 = 0.5%
							else if ((iResult >= 29900) && (iResult < 29970)) dwValue = 8; // 103/29348 = 0.3%
							else if ((iResult >= 29970) && (iResult <= 30000)) dwValue = 8; // 68/29348 = 0.1%
							else dwValue = 1; // v2.03 906
							switch (dwType) {
								case 1:
								case 3:
								case 7:
								case 8:
								case 9:
									if (dwValue <= 3) dwValue = 3;
									break;
							}
							if (dwValue > 7) dwValue = 7;
							dwType = dwType << 12;
							dwValue = dwValue << 8;
							pItem->m_dwAttribute = pItem->m_dwAttribute | dwType | dwValue;
						}
					}
				}
				//testcode
				wsprintf(G_cTxt, "Custom-Item(%s) Value(%d) Life(%d/%d)", pItem->m_cName, pItem->m_sItemSpecEffectValue2, pItem->m_wCurLifeSpan, pItem->m_wMaxLifeSpan);
				PutLogList(G_cTxt);
				bAddItem(iClientH, pItem, 0);
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_BUILDITEMSUCCESS, pItem->m_sItemSpecEffectValue2, (int) pItem->m_cItemType, 0, 0);
#ifdef DEF_TAIWANLOG
				_bItemLog(DEF_ITEMLOG_MAKE, iClientH, (int) - 1, pItem);
#endif
				for (x = 0; x < 6; x++)
					if (cElementItemID[x] != -1) {
						if (m_pClientList[iClientH]->m_pItemList[cElementItemID[x]] == 0) {
							// ### BUG POINT!!!
							wsprintf(G_cTxt, "(?) Char(%s) ElementItemID(%d)", m_pClientList[iClientH]->m_cCharName, cElementItemID[x]);
							PutLogFileList(G_cTxt);
						} else {
							iCount = m_pClientList[iClientH]->m_pItemList[cElementItemID[x]]->m_dwCount - m_pBuildItemList[i]->m_iMaterialItemCount[x];
							if (iCount < 0) iCount = 0;
							SetItemCount(iClientH, cElementItemID[x], iCount);
						}
					}
				if (m_pBuildItemList[i]->m_iMaxSkill > m_pClientList[iClientH]->m_cSkillMastery[13])
					CalculateSSN_SkillIndex(iClientH, 13, 1);
				GetExp(iClientH, iDice(1, (m_pBuildItemList[i]->m_iSkillLimit / 4))); //m_pClientList[iClientH]->m_iExpStock += iDice(1, (m_pBuildItemList[i]->m_iSkillLimit/4));
				return;
			}
		}
	/*
	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
	if (m_pBuildItemList[i] != 0) {
		if (memcmp(m_pBuildItemList[i]->m_cName, cName, 20) == 0) {
			if (m_pBuildItemList[i]->m_iSkillLimit > m_pClientList[iClientH]->m_cSkillMastery[13]) return;
			iMatch = 0;
			for (x = 0; x < 6; x++) m_pBuildItemList[i]->m_iIndex[x] = -1;
			for (x = 0; x < DEF_MAXITEMS; x++) bItemFlag[x] = false;
			iTotalValue = 0;
			for (x = 0; x < 6; x++)
			if (m_pBuildItemList[i]->m_iMaterialItemCount[x] == 0) iMatch++;
			else {
				bFlag = false;
				for (z = 0; z < DEF_MAXITEMS; z++)
				if ((m_pClientList[iClientH]->m_pItemList[z] != 0)) {
					if ((m_pClientList[iClientH]->m_pItemList[z]->m_sIDnum  == m_pBuildItemList[i]->m_iMaterialItemID[x]) &&
						(m_pClientList[iClientH]->m_pItemList[z]->m_dwCount >= m_pBuildItemList[i]->m_iMaterialItemCount[x]) &&
						(bItemFlag[z] == false)) {
						m_pBuildItemList[i]->m_iIndex[x] = z;
						bItemFlag[z] = true;
						iTotalValue += (m_pClientList[iClientH]->m_pItemList[z]->m_sItemSpecEffectValue1 * m_pBuildItemList[i]->m_iMaterialItemValue[x]);
						bFlag = true;
						goto BIH_LOOPBREAK;
					}
				}
BIH_LOOPBREAK:;
				if (bFlag == true) iMatch++;
			}
			if (iMatch != 6) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_BUILDITEMFAIL, 0, 0, 0, 0);
				return;
			}
			//testcode
			wsprintf(G_cTxt, "iTotalValue(%d) MaxValue(%d)", iTotalValue, m_pBuildItemList[i]->m_iMaxValue);
			PutLogList(G_cTxt);
			dV2 = (double)m_pBuildItemList[i]->m_iMaxValue;
			if (iTotalValue <= 0)
				 dV3 = 1.0f;
			else dV3 = (double)iTotalValue;
			dV1 = (double)(dV3/dV2)*100.0f;
			iTotalValue = (int)dV1;
			//testcode
			wsprintf(G_cTxt, "iTotalValue(%d)", iTotalValue);
			PutLogList(G_cTxt);
			for (x = 0; x < 6; x++)
			if (m_pBuildItemList[i]->m_iIndex[x] != -1) {
				iIndex = m_pBuildItemList[i]->m_iIndex[x];
				iCount = m_pClientList[iClientH]->m_pItemList[iIndex]->m_dwCount - m_pBuildItemList[i]->m_iMaterialItemCount[x];
				if (iCount < 0) iCount = 0;
				SetItemCount(iClientH, iIndex, iCount);
			}
			pItem = new  CItem;
			if (_bInitItemAttr(pItem, m_pBuildItemList[i]->m_cName) == false) {
				delete pItem;
				return;
			}
			if (pItem->m_cItemType == ItemType::material) {
				pItem->m_sItemSpecEffectValue1 = iDice(1, iPlayerSkillLevel);
				if (pItem->m_sItemSpecEffectValue1 < (iPlayerSkillLevel/2))
					pItem->m_sItemSpecEffectValue1 = (iPlayerSkillLevel/2);
			}
			else {
				dwTemp = pItem->m_dwAttribute;
				dwTemp = dwTemp | 0x00000001;
				pItem->m_dwAttribute = dwTemp;
				iResultValue = (iTotalValue - m_pBuildItemList[i]->m_iAverageValue);
				//testcode
				wsprintf(G_cTxt, "iResultValue(%d) %d %d", iResultValue, iTotalValue, m_pBuildItemList[i]->m_iAverageValue);
				PutLogList(G_cTxt);
				if (iResultValue == 0)
					 dV2 = 1.0f;
				else dV2 = (double)iResultValue;
				dV3 = (double)pItem->m_wMaxLifeSpan;
				dV1 = (dV2/100.0f)*dV3;
				iTemp  = (int)pItem->m_wMaxLifeSpan;
				iTemp += (int)dV1;
				if (iTemp <= 0)
					 wTemp = 1;
				else wTemp = (uint16_t)iTemp;
				if (wTemp <= pItem->m_wMaxLifeSpan*2) {
					pItem->m_wMaxLifeSpan = wTemp;
					pItem->m_wCurLifeSpan = wTemp;
					pItem->m_sItemSpecEffectValue1 = (short)wTemp;
				}
				else pItem->m_sItemSpecEffectValue1 = (short)pItem->m_wMaxLifeSpan;
				if (iResultValue > 0) {
					dV2 = (double)iResultValue;
					dV3 = (double)(100 - m_pBuildItemList[i]->m_iAverageValue);
					dV1 = (dV2/dV3)*100.0f;
					pItem->m_sItemSpecEffectValue2 = (int)dV1;
				}
				else if (iResultValue < 0) {
					dV2 = (double)abs(iResultValue);
					dV3 = (double)(m_pBuildItemList[i]->m_iAverageValue);
					dV1 = (dV2/dV3)*100.0f;
					pItem->m_sItemSpecEffectValue2 = -1*abs(100 - (int)dV1);
				}
				else pItem->m_sItemSpecEffectValue2 = 0;
			}
			//testcode
			wsprintf(G_cTxt, "Custom-Item(%s) Value(%d)", pItem->m_cName, pItem->m_sItemSpecEffectValue2);
			PutLogList(G_cTxt);
			bAddItem(iClientH, pItem, 0);
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_BUILDITEMSUCCESS, 0, 0, 0, 0);
		}
	}
	 */
}

void CGame::AdminOrder_SetAttackMode(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	/*
	if ((memcmp(m_pClientList[iClientH]->m_cMapName, "fightzone", 9) == 0) && (m_pClientList[iClientH]->m_iSkillSSN[59] == 1)) {
		goto AOCC_SAM;
	}
	 */
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSetAttackMode) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	//testcode
	//wsprintf(G_cTxt, "%s", token);
	//PutLogList(G_cTxt);
	if (token != 0) {
		if (token[0] == '1') {
			m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_bIsAttackEnabled = true;
			for (i = 1; i < DEF_MAXCLIENTS; i++)
				if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true) && (m_pClientList[i]->m_cMapIndex == m_pClientList[iClientH]->m_cMapIndex))
					SendNotifyMsg(0, i, DEF_NOTIFY_GLOBALATTACKMODE, (int) m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_bIsAttackEnabled, 0, 0, 0);
		} else if (token[0] == '0') {
			m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_bIsAttackEnabled = false;
			for (i = 1; i < DEF_MAXCLIENTS; i++)
				if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true) && (m_pClientList[i]->m_cMapIndex == m_pClientList[iClientH]->m_cMapIndex))
					SendNotifyMsg(0, i, DEF_NOTIFY_GLOBALATTACKMODE, (int) m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_bIsAttackEnabled, 0, 0, 0);
		}
	}
	delete pStrTok;
}

void CGame::AdminOrder_UnsummonAll(int iClientH) {
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelUnsummonAll) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	for (i = 1; i < DEF_MAXNPCS; i++)
		if (m_pNpcList[i] != 0) {
			if ((m_pNpcList[i]->m_bIsSummoned == true) && (m_pNpcList[i]->m_bIsKilled == false))
				NpcKilledHandler(iClientH, DEF_OWNERTYPE_PLAYER, i, 0);
		}
}

void CGame::AdminOrder_UnsummonDemon(int iClientH) {
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelUnsummonDemon) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	for (i = 1; i < DEF_MAXNPCS; i++)
		if (m_pNpcList[i] != 0) {
			if ((m_pNpcList[i]->m_sType == NpcType::demon) && (m_pNpcList[i]->m_bIsKilled == false))
				NpcKilledHandler(iClientH, DEF_OWNERTYPE_PLAYER, i, 0);
		}
}
// 3.51 - 05/17/2004 - Hypnotoad/[KLKS] - Monster Special Abilities

char CGame::_cGetSpecialAbility(int iKindSA) {
	char cSA;
	switch (iKindSA) {
		case 1:
			// Slime, Orc, Orge, WereWolf, YB-, Rabbit, Mountain-Giant, Stalker, Hellclaw,
			// Wyvern, Fire-Wyvern, Barlog, Tentocle, Centaurus, Giant-Lizard, Minotaurus,
			// Abaddon, Claw-Turtle, Giant-Cray-Fish, Giant-Plant, MasterMage-Orc, Nizie,
			// Tigerworm
			switch (iDice(1, 2)) {
				case 1: cSA = 3;
					break; // Anti-Physical Damage
				case 2: cSA = 4;
					break; // Anti-Magic Damage
			}
			break;
		case 2:
			// Giant-Ant, Cat, Giant-Frog,
			switch (iDice(1, 3)) {
				case 1: cSA = 3;
					break; // Anti-Physical Damage
				case 2: cSA = 4;
					break; // Anti-Magic Damage
				case 3: cSA = 5;
					break; // Poisonous
			}
			break;
		case 3:
			// Zombie, Scorpion, Amphis, Troll, Dark-Elf
			switch (iDice(1, 4)) {
				case 1: cSA = 3;
					break; // Anti-Physical Damage
				case 2: cSA = 4;
					break; // Anti-Magic Damage
				case 3: cSA = 5;
					break; // Poisonous
				case 4: cSA = 6;
					break; // Critical Poisonous
			}
			break;
		case 4:
			// no linked Npc
			switch (iDice(1, 3)) {
				case 1: cSA = 3;
					break; // Anti-Physical Damage
				case 2: cSA = 4;
					break; // Anti-Magic Damage
				case 3: cSA = 7;
					break; // Explosive
			}
			break;
		case 5:
			// Stone-Golem, Clay-Golem, Beholder, Cannibal-Plant, Rudolph, DireBoar
			switch (iDice(1, 4)) {
				case 1: cSA = 3;
					break; // Anti-Physical Damage
				case 2: cSA = 4;
					break; // Anti-Magic Damage
				case 3: cSA = 7;
					break; // Explosive
				case 4: cSA = 8;
					break; // Critical-Explosive
			}
			break;
		case 6:
			// no linked Npc
			switch (iDice(1, 3)) {
				case 1: cSA = 3;
					break; // Anti-Physical Damage
				case 2: cSA = 4;
					break; // Anti-Magic Damage
				case 3: cSA = 5;
					break; // Poisonous
			}
			break;
		case 7:
			// Orc-Mage, Unicorn
			switch (iDice(1, 3)) {
				case 1: cSA = 1;
					break; // Clairvoyant
				case 2: cSA = 2;
					break; // Distruction of Magic Protection
				case 3: cSA = 4;
					break; // Anti-Magic Damage
			}
			break;
		case 8:
			// Frost, Ice-Golem, Ettin, Gagoyle, Demon, Liche, Hellbound, Cyclops,
			// Skeleton
			switch (iDice(1, 5)) {
				case 1: cSA = 1;
					break; // Clairvoyant
				case 2: cSA = 2;
					break; // Distruction of Magic Protection
				case 3: cSA = 4;
					break; // Anti-Magic Damage
				case 4: cSA = 3;
					break; // Anti-Physical Damage
				case 5: cSA = 8;
					break; // Critical-Explosive
			}
			break;
		case 9:
			// no linked Npc
			cSA = iDice(1, 8); // All abilities available
			break;
	}
	return cSA;
}

void CGame::AdminOrder_Summon(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256], cName_Master[10], cName_Slave[10], cNpcName[256], cWaypoint[11], cSA;
	int pX;
	int pY;
	int j;
	int iNum;
	int iNamingValue;
	CStrTok * pStrTok;
	bool bMaster;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_bIsAdminCommandEnabled == false) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSummon) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	std::memset(cNpcName, 0, sizeof(cNpcName));
	strcpy(cNpcName, token);
	token = pStrTok->pGet();
	if (token != 0)
		iNum = atoi(token);
	else iNum = 1;
	if (iNum <= 0) iNum = 1;
	if (iNum >= 50) iNum = 50;
	cSA = 0;
	pX = m_pClientList[iClientH]->m_sX;
	pY = m_pClientList[iClientH]->m_sY;
	wsprintf(G_cTxt, "(!) Admin Order: Summon(%s)-(%d)", cNpcName, iNum);
	PutLogList(G_cTxt);
	iNamingValue = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->iGetEmptyNamingValue();
	if (iNamingValue != -1) {
		std::memset(cName_Master, 0, sizeof(cName_Master));
		wsprintf(cName_Master, "XX%d", iNamingValue);
		cName_Master[0] = '_';
		cName_Master[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
		if ((bMaster = bCreateNewNpc(cNpcName, cName_Master, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, (rand() % 3), cSA, NpcMoveType::random, &pX, &pY, cWaypoint, 0, 0, -1, false, false, false, true)) == false) {
			m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetNamingValueEmpty(iNamingValue);
		}
	}
	for (j = 0; j < (iNum - 1); j++) {
		iNamingValue = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->iGetEmptyNamingValue();
		if (iNamingValue != -1) {
			std::memset(cName_Slave, 0, sizeof(cName_Slave));
			wsprintf(cName_Slave, "XX%d", iNamingValue);
			cName_Slave[0] = '_';
			cName_Slave[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
			if (bCreateNewNpc(cNpcName, cName_Slave, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, (rand() % 3), cSA, NpcMoveType::random, &pX, &pY, cWaypoint, 0, 0, -1, false, false, false) == false) {
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetNamingValueEmpty(iNamingValue);
			} else {
				bSetNpcFollowMode(cName_Slave, cName_Master, DEF_OWNERTYPE_NPC);
			}
		}
	}
	delete pStrTok;
}

void CGame::AdminOrder_SummonAll(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256], cLocation[11], cMapName[11];
	int pX;
	int pY;
	int i;
	CStrTok * pStrTok;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_bIsAdminCommandEnabled == false) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSummonAll) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	pX = m_pClientList[iClientH]->m_sX;
	pY = m_pClientList[iClientH]->m_sY;
	memcpy(cMapName, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, 11);
	if (strlen(token) > 10)
		memcpy(cLocation, token, 10);
	else memcpy(cLocation, token, strlen(token));
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (strcmp(m_pClientList[i]->m_cLocation, token) == 0)) {
			RequestTeleportHandler(i, "2   ", cMapName, pX, pY);
		}
	wsprintf(G_cTxt, "GM Order(%s): PC(%s) Summoned to (%s)", m_pClientList[iClientH]->m_cLocation,
			  cLocation, cMapName);
	bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, G_cTxt);
	delete pStrTok;
}

void CGame::AdminOrder_SummonPlayer(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256], cMapName[11], cName[11];
	int pX;
	int pY;
	int i;
	CStrTok * pStrTok;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSummonPlayer) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	std::memset(cName, 0, sizeof(cName));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	pX = m_pClientList[iClientH]->m_sX;
	pY = m_pClientList[iClientH]->m_sY;
	memcpy(cMapName, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, 11);
	if (strlen(token) > 10)
		memcpy(cName, token, 10);
	else memcpy(cName, token, strlen(token));
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cName, 10) == 0)) {
			if (i == iClientH) {
				delete pStrTok;
				return;
			}
			RequestTeleportHandler(i, "2   ", cMapName, pX, pY);
			delete pStrTok;
			return;
		}//m_pClientList[i]->m_cCharName
	// find char on other hg's
	wsprintf(G_cTxt, "GM Order(%s): PC(%s) Summoned to (%s)", m_pClientList[iClientH]->m_cCharName,
			  cName, cMapName);
	bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, G_cTxt);
	delete pStrTok;
}

void CGame::CheckSpecialEvent(int iClientH) {
	CItem * pItem;
	char cItemName[21];
	int iEraseReq;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iSpecialEventID == 200081) {
		if (m_pClientList[iClientH]->m_iLevel < 11) {
			m_pClientList[iClientH]->m_iSpecialEventID = 0;
			return;
		}
		std::memset(cItemName, 0, sizeof(cItemName));
		strcpy(cItemName, "MemorialRing");
		pItem = new CItem;
		if (_bInitItemAttr(pItem, cItemName) == false) {
			delete pItem;
		} else {
			if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
				if (m_pClientList[iClientH]->m_iCurWeightLoad < 0) m_pClientList[iClientH]->m_iCurWeightLoad = 0;
				wsprintf(G_cTxt, "(*) Get MemorialRing  : Char(%s)", m_pClientList[iClientH]->m_cCharName);
				PutLogFileList(G_cTxt);
				pItem->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
				pItem->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
				pItem->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
				pItem->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
				pItem->m_cItemColor = 9;
				m_pClientList[iClientH]->m_iSpecialEventID = 0;
			}
		}
	}
}

void CGame::AdminOrder_DisconnectAll(int iClientH, char */*pData*/, uint32_t dwMsgSize) {
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_bIsAdminCommandEnabled == false) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelDisconnectAll) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	_iForcePlayerDisconect(DEF_MAXCLIENTS);
}

bool CGame::_bDecodeDupItemIDFileContents(char *pData, uint32_t dwMsgSize) {
	char * pContents, * token, cTxt[120];
	char seps[] = "= \t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int iIndex = 0;
	CStrTok * pStrTok;
	pContents = new char[dwMsgSize + 1];
	ZeroMemory(pContents, dwMsgSize + 1);
	memcpy(pContents, pData, dwMsgSize);
	pStrTok = new CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != 0) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) ERROR! DupItemID configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							if (m_pDupItemIDList[atoi(token)] != 0) {
								PutLogList("(!!!) ERROR! DupItemID configuration file error - Duplicate magic number.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pDupItemIDList[atoi(token)] = new CItem;
							iIndex = atoi(token);
							cReadModeB = 2;
							break;
						case 2:
							// m_sTouchEffectType
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) ERROR! DupItemID configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pDupItemIDList[iIndex]->m_sTouchEffectType = atoi(token);
							cReadModeB = 3;
							break;
						case 3:
							// m_sTouchEffectValue1
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) ERROR! DupItemID configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pDupItemIDList[iIndex]->m_sTouchEffectValue1 = atoi(token);
							cReadModeB = 4;
							break;
						case 4:
							// m_sTouchEffectValue2
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) ERROR! DupItemID configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pDupItemIDList[iIndex]->m_sTouchEffectValue2 = atoi(token);
							cReadModeB = 5;
							break;
						case 5:
							// m_sTouchEffectValue3
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) ERROR! DupItemID configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pDupItemIDList[iIndex]->m_sTouchEffectValue3 = atoi(token);
							cReadModeB = 6;
							break;
						case 6:
							// m_wPrice
							if (_bGetIsStringIsNumber(token) == false) {
								PutLogList("(!!!) ERROR! DupItemID configuration file error - Wrong Data format.");
								delete pContents;
								delete pStrTok;
								return false;
							}
							m_pDupItemIDList[iIndex]->m_wPrice = (uint16_t) atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							//testcode
							//wsprintf(G_cTxt, "(%d) %d %d %d %d", iIndex, m_pDupItemIDList[iIndex]->m_sTouchEffectType, m_pDupItemIDList[iIndex]->m_sTouchEffectValue1, m_pDupItemIDList[iIndex]->m_sTouchEffectValue2, m_pDupItemIDList[iIndex]->m_sTouchEffectValue3);
							//PutLogList(G_cTxt);
							break;
					}
					break;
				default:
					break;
			}
		} else {
			if (memcmp(token, "DupItemID", 9) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
	}
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		PutLogList("(!!!) ERROR! DupItemID configuration file contents error!");
		return false;
	}
	wsprintf(cTxt, "(!) DupItemID(Total:%d) configuration - success!", iIndex);
	PutLogList(cTxt);
	return true;
}

bool CGame::_bCheckDupItemID(CItem *pItem) {
	int i;
	for (i = 0; i < DEF_MAXDUPITEMID; i++)
		if (m_pDupItemIDList[i] != 0) {
			if ((pItem->m_sTouchEffectType == m_pDupItemIDList[i]->m_sTouchEffectType) &&
					  (pItem->m_sTouchEffectValue1 == m_pDupItemIDList[i]->m_sTouchEffectValue1) &&
					  (pItem->m_sTouchEffectValue2 == m_pDupItemIDList[i]->m_sTouchEffectValue2) &&
					  (pItem->m_sTouchEffectValue3 == m_pDupItemIDList[i]->m_sTouchEffectValue3)) {
				pItem->m_wPrice = m_pDupItemIDList[i]->m_wPrice;
				return true;
			}
		}
	return false;
}

void CGame::_AdjustRareItemValue(CItem *pItem) {
	uint32_t dwSWEType;
	uint32_t dwSWEValue;
	double dV1;
	double dV2;
	double dV3;
	if ((pItem->m_dwAttribute & 0x00F00000) != 0) {
		dwSWEType = (pItem->m_dwAttribute & 0x00F00000) >> 20;
		dwSWEValue = (pItem->m_dwAttribute & 0x000F0000) >> 16;
		switch (dwSWEType) {
			case 0: break;
			case 5:
				pItem->m_cSpeed--;
				if (pItem->m_cSpeed < 0) pItem->m_cSpeed = 0;
				break;
			case 6:
				dV2 = (double) pItem->m_wWeight;
				dV3 = (double) (dwSWEValue * 4);
				dV1 = (dV3 / 100.0f) * dV2;
				pItem->m_wWeight -= (int) dV1;
				if (pItem->m_wWeight < 1) pItem->m_wWeight = 1;
				break;
			case 8:
			case 9:
				dV2 = (double) pItem->m_wMaxLifeSpan;
				dV3 = (double) (dwSWEValue * 7);
				dV1 = (dV3 / 100.0f) * dV2;
				pItem->m_wMaxLifeSpan += (int) dV1;
				break;
		}
	}
}

void CGame::RequestNoticementHandler(int iClientH, char * pData) {
	char * cp, cData[120];
	int * ip, iClientSize;
	uint32_t * dwp;
	uint16_t * wp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_dwNoticementDataSize < 10) return;
	ip = (int *) (pData + DEF_INDEX2_MSGTYPE + 2);
	iClientSize = *ip;
	if ((uint32_t) iClientSize != m_dwNoticementDataSize) {
		cp = new char[m_dwNoticementDataSize + 2 + DEF_INDEX2_MSGTYPE + 2];
		ZeroMemory(cp, m_dwNoticementDataSize + 2 + DEF_INDEX2_MSGTYPE + 2);
		memcpy((cp + DEF_INDEX2_MSGTYPE + 2), m_pNoticementData, m_dwNoticementDataSize);
		dwp = (uint32_t *) (cp + DEF_INDEX4_MSGID);
		*dwp = MSGID_RESPONSE_NOTICEMENT;
		wp = (uint16_t *) (cp + DEF_INDEX2_MSGTYPE);
		*wp = DEF_MSGTYPE_REJECT;
		m_pClientList[iClientH]->m_pXSock->iSendMsg(cp, m_dwNoticementDataSize + 2 + DEF_INDEX2_MSGTYPE + 2);
		delete cp;
	} else {
		std::memset(cData, 0, sizeof(cData));
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_RESPONSE_NOTICEMENT;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_MSGTYPE_CONFIRM;
		m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
	}
}

void CGame::_bDecodeNoticementFileContents(char *pData, uint32_t /*dwMsgSize*/) {
	char * cp;
	cp = (pData);
	if (m_pNoticementData != 0) {
		delete m_pNoticementData;
		m_pNoticementData = 0;
	}
	m_pNoticementData = new char[strlen(cp) + 2];
	ZeroMemory(m_pNoticementData, strlen(cp) + 2);
	memcpy(m_pNoticementData, cp, strlen(cp));
	m_dwNoticementDataSize = strlen(cp);
	wsprintf(G_cTxt, "(!) Noticement Data Size: %d", m_dwNoticementDataSize);
	PutLogList(G_cTxt);
}

void CGame::RequestCheckAccountPasswordHandler(char *pData, uint32_t /*dwMsgSize*/) {
	int * ip, i, iLevel;
	char * cp, cAccountName[11], cAccountPassword[11];
	cp = (char *) (pData + 6);
	std::memset(cAccountName, 0, sizeof(cAccountName));
	std::memset(cAccountPassword, 0, sizeof(cAccountPassword));
	memcpy(cAccountName, cp, 10);
	cp += 10;
	memcpy(cAccountPassword, cp, 10);
	cp += 10;
	ip = (int *) cp;
	iLevel = *ip;
	cp += 4;
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (strcmp(m_pClientList[i]->m_cAccountName, cAccountName) == 0)) {
			if ((strcmp(m_pClientList[i]->m_cAccountPassword, cAccountPassword) != 0) || (m_pClientList[i]->m_iLevel != iLevel)) {
				wsprintf(G_cTxt, "(TestLog) Error! Account(%s)-Level(%d) password(or level) mismatch! Disconnect.", cAccountName, iLevel);
				PutLogList(G_cTxt);
				DeleteClient(i, false, true);
				return;
			}
		}
}

void CGame::_TamingHandler(int iClientH, int iSkillNum, char cMapIndex, int dX, int dY) {
	int iSkillLevel;
	int iRange;
	int iTamingLevel;
	int iResult;
	int iX;
	int iY;
	short sOwnerH;
	char cOwnerType;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pMapList[cMapIndex] == 0) return;
	iSkillLevel = (int) m_pClientList[iClientH]->m_cSkillMastery[iSkillNum];
	iRange = iSkillLevel / 12;
	for (iX = dX - iRange; iX <= dX + iRange; iX++)
		for (iY = dY - iRange; iY <= dY + iRange; iY++) {
			sOwnerH = 0;
			if ((iX > 0) && (iY > 0) && (iX < m_pMapList[cMapIndex]->m_sSizeX) && (iY < m_pMapList[cMapIndex]->m_sSizeY))
				m_pMapList[cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, iX, iY);
			if (sOwnerH != 0) {
				switch (cOwnerType) {
					case DEF_OWNERTYPE_PLAYER:
						if (m_pClientList[sOwnerH] == 0) break;
						break;
					case DEF_OWNERTYPE_NPC:
						if (m_pNpcList[sOwnerH] == 0) break;
						iTamingLevel = 10;
						switch (m_pNpcList[sOwnerH]->m_sType) {
							case NpcType::slime:
							case NpcType::giant_ant: iTamingLevel = 1;
								break;
							case NpcType::amphis: iTamingLevel = 2;
								break;
							case NpcType::scorpion:
							case NpcType::orc: iTamingLevel = 3;
								break;
							case NpcType::zombie: iTamingLevel = 4;
								break;
							case NpcType::skeleton: iTamingLevel = 5;
								break;
							case NpcType::clay_golem:
							case NpcType::stone_golem: iTamingLevel = 6;
								break;
							case NpcType::troll: iTamingLevel = 7;
								break;
							case NpcType::cyclops:
							case NpcType::hellbound: iTamingLevel = 8;
								break;
							case NpcType::orge: iTamingLevel = 9;
								break;
							case NpcType::were_wolf: iTamingLevel = 9;
								break;
							case NpcType::liche: iTamingLevel = 9;
								break;
							case NpcType::demon:
							case NpcType::unicorn: iTamingLevel = 10;
								break;
							default: break;
						}
						iResult = (iSkillLevel / 10);
						if (iResult < iTamingLevel) break;
						break;
				}
			}
		}
}

void CGame::GetMagicAbilityHandler(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_cSkillMastery[4] != 0) return;
	m_pClientList[iClientH]->m_cSkillMastery[4] = 20;
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILL, 4, m_pClientList[iClientH]->m_cSkillMastery[4], 0, 0);
	bCheckTotalSkillMasteryPoints(iClientH, 4);
}

int CGame::iRequestPanningMapDataRequest(int iClientH, char * pData) {
	char * cp, cDir, cData[3000];
	uint32_t * dwp;
	uint16_t * wp;
	short * sp, dX, dY;
	int iRet;
	int iSize;
	if (m_pClientList[iClientH] == 0) return 0;
	if (m_pClientList[iClientH]->m_bIsObserverMode == false) return 0;
	if (m_pClientList[iClientH]->m_bIsKilled == true) return 0;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return 0;
	dX = m_pClientList[iClientH]->m_sX;
	dY = m_pClientList[iClientH]->m_sY;
	cDir = *(pData + DEF_INDEX2_MSGTYPE + 2);
	if ((cDir <= 0) || (cDir > 8)) return 0;
	switch (cDir) {
		case 1: dY--;
			break; // responding when mouse is placed north
		case 2: dX++;
			dY--;
			break;
		case 3: dX++;
			break;
		case 4: dX++;
			dY++;
			break;
		case 5: dY++;
			break;
		case 6: dX--;
			dY++;
			break;
		case 7: dX--;
			break; // responding when mouse placed at west side of screen
		case 8: dX--;
			dY--;
			break; // responding when mouse is placed north west
			/*
			player is in the center, and is trying to pan,
			directions not responding or causing a break will be kept as X,
			others are the cDir case...
					8	1	X
					7	_	X
					X	X	X
			 */
	}
	m_pClientList[iClientH]->m_sX = dX;
	m_pClientList[iClientH]->m_sY = dY;
	m_pClientList[iClientH]->m_cDir = cDir;
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_RESPONSE_PANNING;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = DEF_OBJECTMOVE_CONFIRM;
	cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *) cp;
	*sp = (short) (dX - 10);
	cp += 2;
	sp = (short *) cp;
	*sp = (short) (dY - 7);
	cp += 2;
	*cp = cDir;
	cp++;
	iSize = iComposeMoveMapData((short) (dX - 10), (short) (dY - 7), iClientH, cDir, cp);
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, iSize + 12 + 1 + 4);
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			return 0;
	}
	return 1;
}

void CGame::AdminOrder_SetObserverMode(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsObserverMode == true) {
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetOwner(iClientH, DEF_OWNERTYPE_PLAYER, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
		SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_LOG, DEF_MSGTYPE_CONFIRM, 0, 0, 0);
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_OBSERVERMODE, 0, 0, 0, 0);
		m_pClientList[iClientH]->m_bIsObserverMode = false;
	} else {
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->ClearOwner(1, iClientH, DEF_OWNERTYPE_PLAYER, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
		SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_LOG, DEF_MSGTYPE_REJECT, 0, 0, 0);
		//iRequestPanningMapDataRequest(iClientH, pData)
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_OBSERVERMODE, 1, 0, 0, 0);
		m_pClientList[iClientH]->m_bIsObserverMode = true;
	}
}

void CGame::RequestRestartHandler(int iClientH) {
	char cTmpMap[32];
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsKilled == true) {
		strcpy(cTmpMap, m_pClientList[iClientH]->m_cMapName);
		std::memset(m_pClientList[iClientH]->m_cMapName, 0, sizeof(m_pClientList[iClientH]->m_cMapName));
		if (strcmp(m_pClientList[iClientH]->m_cLocation, "NONE") == 0) {
			strcpy(m_pClientList[iClientH]->m_cMapName, "default");
		} else {
			if (strcmp(m_pClientList[iClientH]->m_cLocation, "aresden") == 0) {
				if (m_bIsCrusadeMode == true) {
					if (m_pClientList[iClientH]->m_iDeadPenaltyTime > 0) {
						std::memset(m_pClientList[iClientH]->m_cLockedMapName, 0, sizeof(m_pClientList[iClientH]->m_cLockedMapName));
						strcpy(m_pClientList[iClientH]->m_cLockedMapName, "aresden");
						m_pClientList[iClientH]->m_iLockedMapTime = 60 * 5;
						m_pClientList[iClientH]->m_iDeadPenaltyTime = 60 * 10; // v2.04
					} else {
						memcpy(m_pClientList[iClientH]->m_cMapName, "resurr1", 7);
						m_pClientList[iClientH]->m_iDeadPenaltyTime = 60 * 10;
					}
				}
				// v2.16 2002-5-31
				if (strcmp(cTmpMap, "elvine") == 0) {
					memcpy(m_pClientList[iClientH]->m_cMapName, "elvjail", 7);
					strcpy(m_pClientList[iClientH]->m_cLockedMapName, "elvjail");
					m_pClientList[iClientH]->m_iLockedMapTime = 10 * 2;
				} else if (m_pClientList[iClientH]->m_iLevel > 80)
					memcpy(m_pClientList[iClientH]->m_cMapName, "resurr1", 7);
				else memcpy(m_pClientList[iClientH]->m_cMapName, "aresden", 7);
			} else {
				if (m_bIsCrusadeMode == true) {
					if (m_pClientList[iClientH]->m_iDeadPenaltyTime > 0) {
						std::memset(m_pClientList[iClientH]->m_cLockedMapName, 0, sizeof(m_pClientList[iClientH]->m_cLockedMapName));
						strcpy(m_pClientList[iClientH]->m_cLockedMapName, "elvine");
						m_pClientList[iClientH]->m_iLockedMapTime = 60 * 5;
						m_pClientList[iClientH]->m_iDeadPenaltyTime = 60 * 10; // v2.04
					} else {
						memcpy(m_pClientList[iClientH]->m_cMapName, "resurr2", 7);
						m_pClientList[iClientH]->m_iDeadPenaltyTime = 60 * 10;
					}
				}
				if (strcmp(cTmpMap, "aresden") == 0) {
					memcpy(m_pClientList[iClientH]->m_cMapName, "arejail", 7);
					strcpy(m_pClientList[iClientH]->m_cLockedMapName, "arejail");
					m_pClientList[iClientH]->m_iLockedMapTime = 10 * 2;
				} else if (m_pClientList[iClientH]->m_iLevel > 80)
					memcpy(m_pClientList[iClientH]->m_cMapName, "resurr2", 7);
				else memcpy(m_pClientList[iClientH]->m_cMapName, "elvine", 7);
			}
		}
		m_pClientList[iClientH]->m_bIsKilled = false;
		m_pClientList[iClientH]->m_iHP = (3 * m_pClientList[iClientH]->m_iVit) + (2 * m_pClientList[iClientH]->m_iLevel) + (m_pClientList[iClientH]->m_iStr / 2);
		m_pClientList[iClientH]->m_iHungerStatus = 100;
		std::memset(cTmpMap, 0, sizeof(cTmpMap));
		strcpy(cTmpMap, m_pClientList[iClientH]->m_cMapName);
		RequestTeleportHandler(iClientH, "2   ", cTmpMap, -1, -1);
	}
}

void CGame::AdminOrder_EnableAdminCommand(int iClientH, char *pData, uint32_t dwMsgSize) {
	char * token, cBuff[256], len;
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		len = strlen(token);
		if (len > 10) len = 10;
		if (memcmp(token, m_cSecurityNumber, len) == 0) {
			m_pClientList[iClientH]->m_bIsAdminCommandEnabled = true;
		} else {
			wsprintf(G_cTxt, "(%s) Player(%s) attempts to access /enableadmincommand with %s", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, token);
			PutHackLogFileList(G_cTxt);
			return;
		}
	}
}

void CGame::AdminOrder_CreateItem(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * cp, * token, cBuff[256], cItemName[256], cData[256], cTemp[256], cAttribute[256], cValue[256];
	SYSTEMTIME SysTime;
	CStrTok * pStrTok;
	CItem * pItem;
	short * sp;
	int iTemp;
	int iEraseReq;
	int iValue;
	uint32_t * dwp;
	uint16_t * wp, wTemp;
	double dV1;
	double dV2;
	double dV3;
	// if the client doesnt exist than no effect.
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsAdminCommandEnabled == false) return;
	// if the command is just "/createitem " than no effect.
	if ((dwMsgSize) <= 0) return;
	// if client's admin level is less than 4 no effect.
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelCreateItem) {
		// if the admin user level is not 0 and less than 4 send message
		if (m_pClientList[iClientH]->m_iAdminUserLevel != 0)
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	} // close if (m_pClientList[iClientH]->m_iAdminUserLevel < 4) {
	// IP address not able to create item
	// DISABLED: if (memcmp(m_pClientList[iClientH]->m_cIPaddress, "192.168.1.", 12) != 0) return;
	// check if the client has typed "/enableadmincreateitem"
	//if (m_pClientList[iClientH]->m_bIsAdminCreateItemEnabled == false) return;
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	// if the token is something it is an item name
	if (token != 0) {
		if (strlen(token) > 21) return;
		std::memset(cItemName, 0, sizeof(cItemName));
		strcpy(cItemName, token);
	} // close if (token != 0) {
	// if the 2nd token is true it is the item attribute
	std::memset(cAttribute, 0, sizeof(cAttribute));
	token = pStrTok->pGet();
	if (token != 0) {
		if (strlen(token) > 256) return;
		std::memset(cAttribute, 0, sizeof(cAttribute));
		strcpy(cAttribute, token);
	} // close if (token != 0) {
	// if the 3rd token is true it is the item value
	std::memset(cValue, 0, sizeof(cValue));
	iValue = 0;
	token = pStrTok->pGet();
	if (token != 0) {
		if (strlen(token) > 256) return;
		std::memset(cValue, 0, sizeof(cValue));
		strcpy(cValue, token);
		iValue = atoi(cValue);
	} // close if (token != 0) {
	pItem = new CItem;
	// if the given itemname doesnt exist delete item
	if (_bInitItemAttr(pItem, cItemName) == false) {
		delete pItem;
		return;
	} //close if (_bInitItemAttr(pItem, cItemName) == false) {
	if (strlen(cAttribute) != 0) {
		pItem->m_dwAttribute = atoi(cAttribute);
		if (pItem->m_dwAttribute == 1) {
			if ((iValue >= 1) && (iValue <= 200)) {
				pItem->m_cItemColor = 2;
				pItem->m_sItemSpecEffectValue2 = iValue - 100;
				dV2 = (double) pItem->m_sItemSpecEffectValue2;
				dV3 = (double) pItem->m_wMaxLifeSpan;
				dV1 = (dV2 / 100.0f) * dV3;
				iTemp = (int) pItem->m_wMaxLifeSpan;
				iTemp += (int) dV1;
				if (iTemp <= 0)
					wTemp = 1;
				else wTemp = (uint16_t) iTemp;
				if (wTemp <= pItem->m_wMaxLifeSpan * 2) {
					pItem->m_wMaxLifeSpan = wTemp;
					pItem->m_sItemSpecEffectValue1 = (short) wTemp;
					pItem->m_wCurLifeSpan = pItem->m_wMaxLifeSpan;
				}// close if (wTemp <= pItem->m_wMaxLifeSpan*2) {
				else pItem->m_sItemSpecEffectValue1 = (short) pItem->m_wMaxLifeSpan;
			}// close if ((iValue >= 1) && (iValue <= 200)) {
			else pItem->m_dwAttribute = 0;
		}// close if (pItem->m_dwAttribute == 1) {
		else {
			if (pItem->m_sItemEffectType == ItemEffectType::attack) {
				switch ((pItem->m_dwAttribute & 0xF00000) >> 20) {
					case 6: pItem->m_cItemColor = 2;
						break;
					case 8: pItem->m_cItemColor = 3;
						break;
					case 1: pItem->m_cItemColor = 5;
						break;
					case 5: pItem->m_cItemColor = 1;
						break;
					case 3: pItem->m_cItemColor = 7;
						break;
					case 2: pItem->m_cItemColor = 4;
						break;
					case 7: pItem->m_cItemColor = 6;
						break;
					case 9: pItem->m_cItemColor = 8;
						break;
				} // close switch ((pItem->m_dwAttribute & 0xF00000) >> 20) {
			}// close if (pItem->m_sItemEffectType == ItemEffectType::attack) {
			else if (pItem->m_sItemEffectType == ItemEffectType::attack_manasave) {
				switch ((pItem->m_dwAttribute & 0xF00000) >> 20) {
					case 10: pItem->m_cItemColor = 5;
						break;
				} // close switch ((pItem->m_dwAttribute & 0xF00000) >> 20) {
			} // close else if (pItem->m_sItemEffectType == ItemEffectType::attack_manasave) {
		} // close else {
	} // close if (strlen(cAttribute) != 0) {
	// if the item id is
	switch (pItem->m_sIDnum) {
		case ItemId::arena_ticket: // ArenaTicket
		case ItemId::arena_ticket_2: // ArenaTicket(2)
		case ItemId::arena_ticket_3: // ArenaTicket(3)
		case ItemId::arena_ticket_4: // ArenaTicket(4)
		case ItemId::arena_ticket_5: // ArenaTicket(5)
		case ItemId::arena_ticket_6: // ArenaTicket(6)
		case ItemId::arena_ticket_7: // ArenaTicket(7)
		case ItemId::arena_ticket_8: // ArenaTicket(8)
		case ItemId::arena_ticket_9: // ArenaTicket(9)
			GetLocalTime(&SysTime);
			pItem->m_sTouchEffectType = DEF_ITET_DATE;
			pItem->m_sTouchEffectValue1 = (short) SysTime.wMonth;
			pItem->m_sTouchEffectValue2 = (short) SysTime.wDay;
			pItem->m_sTouchEffectValue3 = 24;
			break;
		default:
			GetLocalTime(&SysTime);
			pItem->m_sTouchEffectType = DEF_ITET_ID;
			pItem->m_sTouchEffectValue1 = iDice(1, 100000);
			pItem->m_sTouchEffectValue2 = iDice(1, 100000);
			std::memset(cTemp, 0, sizeof(cTemp));
			wsprintf(cTemp, "%d%2d", (short) SysTime.wMonth, (short) SysTime.wDay);
			pItem->m_sTouchEffectValue3 = atoi(cTemp);
			break;
	}
	std::memset(cData, 0, sizeof(cData));
	if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_NOTIFY;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_NOTIFY_ITEMOBTAINED;
		cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
		*cp = 1;
		cp++;
		memcpy(cp, pItem->m_cName, 20);
		cp += 20;
		dwp = (uint32_t *) cp;
		*dwp = pItem->m_dwCount;
		cp += 4;
		*cp = (char) pItem->m_cItemType;
		cp++;
		*cp = (char) pItem->m_cEquipPos;
		cp++;
		*cp = (char) 0;
		cp++;
		sp = (short *) cp;
		*sp = pItem->m_sLevelLimit;
		cp += 2;
		*cp = pItem->m_cGenderLimit;
		cp++;
		wp = (uint16_t *) cp;
		*wp = pItem->m_wCurLifeSpan;
		cp += 2;
		wp = (uint16_t *) cp;
		*wp = pItem->m_wWeight;
		cp += 2;
		sp = (short *) cp;
		*sp = pItem->m_sSprite;
		cp += 2;
		sp = (short *) cp;
		*sp = pItem->m_sSpriteFrame;
		cp += 2;
		*cp = pItem->m_cItemColor;
		cp++;
		*cp = (char) pItem->m_sItemSpecEffectValue2; // v1.41
		cp++;
		dwp = (uint32_t *) cp;
		*dwp = pItem->m_dwAttribute;
		cp += 4;
		if (iEraseReq == 1) {
			delete pItem;
			pItem = 0;
		}
		m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
		// v2.14 Admin Log
		wsprintf(G_cTxt, "(%s) GM Order(%s): Create ItemName(%s)", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, cItemName);
		bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, 0, G_cTxt);
		return;
	} else {
		delete pItem;
		return;
	}
}

void CGame::RequestSellItemListHandler(int iClientH, char * pData) {
	int i, * ip, iAmount;
	char * cp, cIndex;

	struct {
		char cIndex;
		int iAmount;
	} stTemp[12];
	if (m_pClientList[iClientH] == 0) return;
	cp = (char *) (pData + 6);
	for (i = 0; i < 12; i++) {
		stTemp[i].cIndex = *cp;
		cp++;
		ip = (int *) cp;
		stTemp[i].iAmount = *ip;
		cp += 4;
	}
	for (i = 0; i < 12; i++) {
		cIndex = stTemp[i].cIndex;
		iAmount = stTemp[i].iAmount;
		if ((cIndex == -1) || (cIndex < 0) || (cIndex >= DEF_MAXITEMS)) return;
		if (m_pClientList[iClientH]->m_pItemList[cIndex] == 0) return;
		ReqSellItemConfirmHandler(iClientH, cIndex, iAmount, 0);
		if (m_pClientList[iClientH] == 0) return;
	}
}

void CGame::_DeleteRandomOccupyFlag(int iMapIndex) {
	int i;
	int iCount;
	int iTotalFlags;
	int iDynamicObjectIndex;
	int tx;
	int ty;
	int fx;
	int fy;
	int iLocalSide;
	int iLocalEKNum;
	CTile * pTile;
	uint32_t dwTime;
	if (m_pMapList[iMapIndex] == 0) return;
	dwTime = timeGetTime();
	iTotalFlags = 0;
	for (i = 1; i < DEF_MAXOCCUPYFLAG; i++)
		if (m_pMapList[iMapIndex]->m_pOccupyFlag[i] != 0) {
			iTotalFlags++;
		}
	iCount = 0;
	for (i = 1; i < DEF_MAXOCCUPYFLAG; i++)
		if (m_pMapList[iMapIndex]->m_pOccupyFlag[i] != 0) {
			iCount++;
			if ((iCount == iTotalFlags) && (m_pMapList[iMapIndex]->m_pOccupyFlag[i] != 0)) {
				//testcode
				wsprintf(G_cTxt, "(*)Delete OccupyFlag: Side(%d) XY(%d, %d)", m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_cSide, m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_sX, m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_sY);
				PutLogList(G_cTxt);
				fx = m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_sX;
				fy = m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_sY;
				iLocalSide = m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_cSide;
				iLocalEKNum = m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_iEKCount;
				pTile = (CTile *) (m_pMapList[iMapIndex]->m_pTile + m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_sX +
						  m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_sY * m_pMapList[iMapIndex]->m_sSizeY);
				m_pMapList[iMapIndex]->m_iTotalOccupyFlags--;
				iDynamicObjectIndex = m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_iDynamicObjectIndex;
				SendEventToNearClient_TypeB(MSGID_DYNAMICOBJECT, DEF_MSGTYPE_REJECT, m_pDynamicObjectList[iDynamicObjectIndex]->m_cMapIndex,
						  m_pDynamicObjectList[iDynamicObjectIndex]->m_sX, m_pDynamicObjectList[iDynamicObjectIndex]->m_sY,
						  m_pDynamicObjectList[iDynamicObjectIndex]->m_sType, iDynamicObjectIndex, 0);
				m_pMapList[m_pDynamicObjectList[iDynamicObjectIndex]->m_cMapIndex]->SetDynamicObject(0, 0, m_pDynamicObjectList[iDynamicObjectIndex]->m_sX, m_pDynamicObjectList[iDynamicObjectIndex]->m_sY, dwTime);
				delete m_pMapList[iMapIndex]->m_pOccupyFlag[i];
				m_pMapList[iMapIndex]->m_pOccupyFlag[i] = 0;
				pTile->m_iOccupyFlagIndex = 0;
				delete m_pDynamicObjectList[iDynamicObjectIndex];
				m_pDynamicObjectList[iDynamicObjectIndex] = 0;
				for (tx = fx - 10; tx <= fx + 10; tx++)
					for (ty = fy - 8; ty <= fy + 8; ty++) {
						if ((tx < 0) || (tx >= m_pMapList[iMapIndex]->m_sSizeX) ||
								  (ty < 0) || (ty >= m_pMapList[iMapIndex]->m_sSizeY)) {
						} else {
							pTile = (CTile *) (m_pMapList[iMapIndex]->m_pTile + tx + ty * m_pMapList[iMapIndex]->m_sSizeY);
							switch (iLocalSide) {
								case 1:
									pTile->m_iOccupyStatus += iLocalEKNum;
									if (pTile->m_iOccupyStatus > 0) pTile->m_iOccupyStatus = 0;
									break;
								case 2:
									pTile->m_iOccupyStatus -= iLocalEKNum;
									if (pTile->m_iOccupyStatus < 0) pTile->m_iOccupyStatus = 0;
									break;
							}
						}
					}
				//
				return;
			}
		}
}

void CGame::CreateNewPartyHandler(int iClientH) {
	bool bFlag;
	if (m_pClientList[iClientH] == 0) return;
	bFlag = m_pClientList[iClientH]->bCreateNewParty();
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_RESPONSE_CREATENEWPARTY, (int) bFlag, 0, 0, 0);
}

void CGame::JoinPartyHandler(int iClientH, int iV1, char *pMemberName) {
	short sAppr2;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((m_bAdminSecurity == true) && (m_pClientList[iClientH]->m_iAdminUserLevel > 0)) return;
	switch (iV1) {
		case 0:
			RequestDeletePartyHandler(iClientH);
			break;
		case 1:
			//testcode
			wsprintf(G_cTxt, "Join Party Req: %s(%d) ID(%d) Stat(%d) ReqJoinH(%d) ReqJoinName(%s)", m_pClientList[iClientH]->m_cCharName, iClientH,
					  m_pClientList[iClientH]->m_iPartyID, m_pClientList[iClientH]->m_iPartyStatus, m_pClientList[iClientH]->m_iReqJoinPartyClientH,
					  m_pClientList[iClientH]->m_cReqJoinPartyName);
			PutLogList(G_cTxt);
			if ((m_pClientList[iClientH]->m_iPartyID != 0) || (m_pClientList[iClientH]->m_iPartyStatus != DEF_PARTYSTATUS_NULL)) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTY, 7, 0, 0, 0);
				m_pClientList[iClientH]->m_iReqJoinPartyClientH = 0;
				std::memset(m_pClientList[iClientH]->m_cReqJoinPartyName, 0, sizeof(m_pClientList[iClientH]->m_cReqJoinPartyName));
				m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_NULL;
				//testcode
				PutLogList("Join Party Reject (1)");
				return;
			}
			for (i = 1; i < DEF_MAXCLIENTS; i++)
				if ((m_pClientList[i] != 0) && (strcmp(m_pClientList[i]->m_cCharName, pMemberName) == 0)) {
					sAppr2 = (short) ((m_pClientList[i]->m_sAppr2 & 0xF000) >> 12);
					if (sAppr2 != 0) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTY, 7, 0, 0, 0);
						//testcode
						PutLogList("Join Party Reject (2)");
					} else if (m_pClientList[i]->m_cSide != m_pClientList[iClientH]->m_cSide) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTY, 7, 0, 0, 0);
						//testcode
						PutLogList("Join Party Reject (3)");
					} else if (m_pClientList[i]->m_iPartyStatus == DEF_PARTYSTATUS_PROCESSING) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTY, 7, 0, 0, 0);
						//testcode
						PutLogList("Join Party Reject (4)");
						//testcode
						wsprintf(G_cTxt, "Party join reject(2) ClientH:%d ID:%d JoinName:%d", i, m_pClientList[i]->m_iPartyID, m_pClientList[i]->m_cReqJoinPartyName);
						PutLogList(G_cTxt);
						m_pClientList[iClientH]->m_iReqJoinPartyClientH = 0;
						std::memset(m_pClientList[iClientH]->m_cReqJoinPartyName, 0, sizeof(m_pClientList[iClientH]->m_cReqJoinPartyName));
						m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_NULL;
					} else {
						m_pClientList[i]->m_iReqJoinPartyClientH = iClientH;
						std::memset(m_pClientList[i]->m_cReqJoinPartyName, 0, sizeof(m_pClientList[i]->m_cReqJoinPartyName));
						strcpy(m_pClientList[i]->m_cReqJoinPartyName, m_pClientList[iClientH]->m_cCharName);
						SendNotifyMsg(0, i, DEF_NOTIFY_QUERY_JOINPARTY, 0, 0, 0, m_pClientList[iClientH]->m_cCharName);
						m_pClientList[iClientH]->m_iReqJoinPartyClientH = i;
						std::memset(m_pClientList[iClientH]->m_cReqJoinPartyName, 0, sizeof(m_pClientList[iClientH]->m_cReqJoinPartyName));
						strcpy(m_pClientList[iClientH]->m_cReqJoinPartyName, m_pClientList[i]->m_cCharName);
						m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_PROCESSING;
					}
					return;
				}
			break;
		case 2:
			if (m_pClientList[iClientH]->m_iPartyStatus == DEF_PARTYSTATUS_CONFIRM) {
			}
			break;
	}
}

bool CGame::bCheckEnergySphereDestination(int iNpcH, short sAttackerH, char cAttackerType) {
	int i;
	int sX;
	int sY;
	int dX;
	int dY;
	int iGoalMapIndex;
	char cResult;
	if (m_pNpcList[iNpcH] == 0) return false;
	if (m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_iCurEnergySphereGoalPointIndex == -1) return false;
	if (m_pNpcList[iNpcH]->m_cMapIndex != m_iMiddlelandMapIndex) {
		iGoalMapIndex = m_pNpcList[iNpcH]->m_cMapIndex;
		sX = m_pNpcList[iNpcH]->m_sX;
		sY = m_pNpcList[iNpcH]->m_sY;
		cResult = m_pMapList[iGoalMapIndex]->m_stEnergySphereGoalList[m_pMapList[iGoalMapIndex]->m_iCurEnergySphereGoalPointIndex].cResult;
		dX = m_pMapList[iGoalMapIndex]->m_stEnergySphereGoalList[m_pMapList[iGoalMapIndex]->m_iCurEnergySphereGoalPointIndex].aresdenX;
		dY = m_pMapList[iGoalMapIndex]->m_stEnergySphereGoalList[m_pMapList[iGoalMapIndex]->m_iCurEnergySphereGoalPointIndex].aresdenY;
		if ((sX >= dX - 2) && (sX <= dX + 2) && (sY >= dY - 2) && (sY <= dY + 2)) {
			m_pMapList[iGoalMapIndex]->m_iCurEnergySphereGoalPointIndex = -1;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH] != 0)) {
				if (m_pClientList[sAttackerH]->m_cSide == 1) { // Aresden (Side:1)
					m_pClientList[sAttackerH]->m_iContribution += 5;
					wsprintf(G_cTxt, "(!) EnergySphere Hit By Aresden Player (%s)", m_pClientList[sAttackerH]->m_cCharName);
					PutLogFileList(G_cTxt);
				} else {
					m_pClientList[sAttackerH]->m_iContribution -= 10;
				}
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
						SendNotifyMsg(0, i, DEF_NOTIFY_ENERGYSPHEREGOALIN, cResult, m_pClientList[sAttackerH]->m_cSide, 2, m_pClientList[sAttackerH]->m_cCharName);
					}
			}
			return true;
		}
		dX = m_pMapList[iGoalMapIndex]->m_stEnergySphereGoalList[m_pMapList[iGoalMapIndex]->m_iCurEnergySphereGoalPointIndex].elvineX;
		dY = m_pMapList[iGoalMapIndex]->m_stEnergySphereGoalList[m_pMapList[iGoalMapIndex]->m_iCurEnergySphereGoalPointIndex].elvineY;
		if ((sX >= dX - 2) && (sX <= dX + 2) && (sY >= dY - 2) && (sY <= dY + 2)) {
			m_pMapList[iGoalMapIndex]->m_iCurEnergySphereGoalPointIndex = -1;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH] != 0)) {
				if (m_pClientList[sAttackerH]->m_cSide == 2) { // Elvine (Side:2)
					m_pClientList[sAttackerH]->m_iContribution += 5;
					wsprintf(G_cTxt, "(!) EnergySphere Hit By Elvine Player (%s)", m_pClientList[sAttackerH]->m_cCharName);
					PutLogFileList(G_cTxt);
				} else {
					m_pClientList[sAttackerH]->m_iContribution -= 10;
				}
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
						//
						SendNotifyMsg(0, i, DEF_NOTIFY_ENERGYSPHEREGOALIN, cResult, m_pClientList[sAttackerH]->m_cSide, 1, m_pClientList[sAttackerH]->m_cCharName);
					}
			}
		}
		return false;
	} else {
		sX = m_pNpcList[iNpcH]->m_sX;
		sY = m_pNpcList[iNpcH]->m_sY;
		cResult = m_pMapList[m_iMiddlelandMapIndex]->m_stEnergySphereGoalList[m_pMapList[m_iMiddlelandMapIndex]->m_iCurEnergySphereGoalPointIndex].cResult;
		dX = m_pMapList[m_iMiddlelandMapIndex]->m_stEnergySphereGoalList[m_pMapList[m_iMiddlelandMapIndex]->m_iCurEnergySphereGoalPointIndex].aresdenX;
		dY = m_pMapList[m_iMiddlelandMapIndex]->m_stEnergySphereGoalList[m_pMapList[m_iMiddlelandMapIndex]->m_iCurEnergySphereGoalPointIndex].aresdenY;
		if ((sX >= dX - 4) && (sX <= dX + 4) && (sY >= dY - 4) && (sY <= dY + 4)) {
			m_pMapList[m_iMiddlelandMapIndex]->m_iCurEnergySphereGoalPointIndex = -1;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH] != 0)) {
				if (m_pClientList[sAttackerH]->m_cSide == 1) { // Aresden (Side:1)
					m_pClientList[sAttackerH]->m_iContribution += 5;
					wsprintf(G_cTxt, "(!) EnergySphere Hit By Aresden Player (%s)", m_pClientList[sAttackerH]->m_cCharName);
					PutLogFileList(G_cTxt);
				} else {
					m_pClientList[sAttackerH]->m_iContribution -= 10;
				}
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
						SendNotifyMsg(0, i, DEF_NOTIFY_ENERGYSPHEREGOALIN, cResult, m_pClientList[sAttackerH]->m_cSide, 2, m_pClientList[sAttackerH]->m_cCharName);
					}
			}
			return true;
		}
		dX = m_pMapList[m_iMiddlelandMapIndex]->m_stEnergySphereGoalList[m_pMapList[m_iMiddlelandMapIndex]->m_iCurEnergySphereGoalPointIndex].elvineX;
		dY = m_pMapList[m_iMiddlelandMapIndex]->m_stEnergySphereGoalList[m_pMapList[m_iMiddlelandMapIndex]->m_iCurEnergySphereGoalPointIndex].elvineY;
		if ((sX >= dX - 4) && (sX <= dX + 4) && (sY >= dY - 4) && (sY <= dY + 4)) {
			m_pMapList[m_iMiddlelandMapIndex]->m_iCurEnergySphereGoalPointIndex = -1;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH] != 0)) {
				if (m_pClientList[sAttackerH]->m_cSide == 2) { // Elvine (Side:2)
					m_pClientList[sAttackerH]->m_iContribution += 5;
					wsprintf(G_cTxt, "(!) EnergySphere Hit By Aresden Player (%s)", m_pClientList[sAttackerH]->m_cCharName);
					PutLogFileList(G_cTxt);
				} else {
					m_pClientList[sAttackerH]->m_iContribution -= 10;
				}
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
						//
						SendNotifyMsg(0, i, DEF_NOTIFY_ENERGYSPHEREGOALIN, cResult, m_pClientList[sAttackerH]->m_cSide, 1, m_pClientList[sAttackerH]->m_cCharName);
					}
			}
			return true;
		}
		return false;
	}
}

void CGame::EnergySphereProcessor(bool bIsAdminCreate, int iClientH) {
	int i;
	int iNamingValue;
	int iCIndex;
	int iTemp;
	int pX;
	int pY;
	char cSA;
	char cName_Internal[31], cWaypoint[31];
	if (bIsAdminCreate != true) {
		if (m_iMiddlelandMapIndex < 0) return;
		if (m_pMapList[m_iMiddlelandMapIndex] == 0) return;
		if (iDice(1, 2000) != 123) return;
		if (m_iTotalClients < 500) return;
		if (m_pMapList[m_iMiddlelandMapIndex]->m_iCurEnergySphereGoalPointIndex >= 0) return;
		iCIndex = iDice(1, m_pMapList[m_iMiddlelandMapIndex]->m_iTotalEnergySphereCreationPoint);
		if (m_pMapList[m_iMiddlelandMapIndex]->m_stEnergySphereCreationList[iCIndex].cType == 0) return;
		cSA = 0;
		pX = m_pMapList[m_iMiddlelandMapIndex]->m_stEnergySphereCreationList[iCIndex].sX;
		pY = m_pMapList[m_iMiddlelandMapIndex]->m_stEnergySphereCreationList[iCIndex].sY;
		std::memset(cWaypoint, 0, sizeof(cWaypoint));
		iNamingValue = m_pMapList[m_iMiddlelandMapIndex]->iGetEmptyNamingValue();
		if (iNamingValue != -1) {
			//
			std::memset(cName_Internal, 0, sizeof(cName_Internal));
			wsprintf(cName_Internal, "XX%d", iNamingValue);
			cName_Internal[0] = '_';
			cName_Internal[1] = m_iMiddlelandMapIndex + 65;
			if ((bCreateNewNpc("Energy-Sphere", cName_Internal, m_pMapList[m_iMiddlelandMapIndex]->m_cName, (rand() % 5), cSA, NpcMoveType::random, &pX, &pY, cWaypoint, 0, 0, -1, false, false, false)) == false) {
				m_pMapList[m_iMiddlelandMapIndex]->SetNamingValueEmpty(iNamingValue);
				return;
			}
		}
		iTemp = iDice(1, m_pMapList[m_iMiddlelandMapIndex]->m_iTotalEnergySphereGoalPoint);
		if (m_pMapList[m_iMiddlelandMapIndex]->m_stEnergySphereGoalList[iTemp].cResult == 0) return;
		m_pMapList[m_iMiddlelandMapIndex]->m_iCurEnergySphereGoalPointIndex = iTemp;
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
				SendNotifyMsg(0, i, DEF_NOTIFY_ENERGYSPHERECREATED, pX, pY, 0, 0);
			}
		//testcode
		wsprintf(G_cTxt, "(!) Energy Sphere Created! (%d, %d)", pX, pY);
		PutLogList(G_cTxt);
		PutLogFileList(G_cTxt);
	} else {
		if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_iCurEnergySphereGoalPointIndex >= 0) return;
		iCIndex = iDice(1, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_iTotalEnergySphereCreationPoint);
		if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stEnergySphereCreationList[iCIndex].cType == 0) return;
		cSA = 0;
		pX = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stEnergySphereCreationList[iCIndex].sX;
		pY = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stEnergySphereCreationList[iCIndex].sY;
		std::memset(cWaypoint, 0, sizeof(cWaypoint));
		iNamingValue = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->iGetEmptyNamingValue();
		if (iNamingValue != -1) {
			//
			std::memset(cName_Internal, 0, sizeof(cName_Internal));
			wsprintf(cName_Internal, "XX%d", iNamingValue);
			cName_Internal[0] = '_';
			cName_Internal[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
			if ((bCreateNewNpc("Energy-Sphere", cName_Internal, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, (rand() % 5), cSA, NpcMoveType::random, &pX, &pY, cWaypoint, 0, 0, -1, false, false, false)) == false) {
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetNamingValueEmpty(iNamingValue);
				return;
			}
		}
		iTemp = iDice(1, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_iTotalEnergySphereGoalPoint);
		if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stEnergySphereGoalList[iTemp].cResult == 0) return;
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_iCurEnergySphereGoalPointIndex = iTemp;
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
				SendNotifyMsg(0, i, DEF_NOTIFY_ENERGYSPHERECREATED, pX, pY, 0, 0);
			}
		//testcode
		wsprintf(G_cTxt, "(!) Admin Energy Sphere Created! (%d, %d)", pX, pY);
		PutLogList(G_cTxt);
		PutLogFileList(G_cTxt);
	}
}

void CGame::ActivateSpecialAbilityHandler(int iClientH) {
	uint32_t dwTime = timeGetTime();
	short sTemp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iSpecialAbilityTime != 0) return;
	if (m_pClientList[iClientH]->m_iSpecialAbilityType == 0) return;
	if (m_pClientList[iClientH]->m_bIsSpecialAbilityEnabled == true) return;
	m_pClientList[iClientH]->m_bIsSpecialAbilityEnabled = true;
	m_pClientList[iClientH]->m_dwSpecialAbilityStartTime = dwTime;
	m_pClientList[iClientH]->m_iSpecialAbilityTime = DEF_SPECABLTYTIMESEC;
	sTemp = m_pClientList[iClientH]->m_sAppr4;
	sTemp = sTemp & 0xFF0F;
	switch (m_pClientList[iClientH]->m_iSpecialAbilityType) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			sTemp = sTemp | 0x0010;
			break;
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
			sTemp = sTemp | 0x0020;
			break;
	}
	m_pClientList[iClientH]->m_sAppr4 = sTemp;
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_SPECIALABILITYSTATUS, 1, m_pClientList[iClientH]->m_iSpecialAbilityType, m_pClientList[iClientH]->m_iSpecialAbilityLastSec, 0);
	SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
}

void CGame::CancelQuestHandler(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	_ClearQuestStatus(iClientH);
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_QUESTABORTED, 0, 0, 0, 0);
}

int CGame::iGetItemWeight(CItem *pItem, int iCount) {
	int iWeight;
	iWeight = (pItem->m_wWeight);
	if (iCount < 0) iCount = 1;
	iWeight = iWeight * iCount;
	if (pItem->m_sIDnum == ItemId::gold) iWeight = iWeight / 20;
	if (iWeight <= 0) iWeight = 1;
	return iWeight;
}

void CGame::UpdateMapSectorInfo() {
	int i;
	int ix;
	int iy;
	int iMaxNeutralActivity;
	int iMaxAresdenActivity;
	int iMaxElvineActivity;
	int iMaxMonsterActivity;
	int iMaxPlayerActivity;
	for (i = 0; i < DEF_MAXMAPS; i++)
		if (m_pMapList[i] != 0) {
			iMaxNeutralActivity = iMaxAresdenActivity = iMaxElvineActivity = iMaxMonsterActivity = iMaxPlayerActivity = 0;
			m_pMapList[i]->m_iMaxNx = m_pMapList[i]->m_iMaxNy = m_pMapList[i]->m_iMaxAx = m_pMapList[i]->m_iMaxAy = 0;
			m_pMapList[i]->m_iMaxEx = m_pMapList[i]->m_iMaxEy = m_pMapList[i]->m_iMaxMx = m_pMapList[i]->m_iMaxMy = 0;
			m_pMapList[i]->m_iMaxPx = m_pMapList[i]->m_iMaxPy = 0;
			for (ix = 0; ix < DEF_MAXSECTORS; ix++)
				for (iy = 0; iy < DEF_MAXSECTORS; iy++) {
					if (m_pMapList[i]->m_stTempSectorInfo[ix][iy].iNeutralActivity > iMaxNeutralActivity) {
						iMaxNeutralActivity = m_pMapList[i]->m_stTempSectorInfo[ix][iy].iNeutralActivity;
						m_pMapList[i]->m_iMaxNx = ix;
						m_pMapList[i]->m_iMaxNy = iy;
					}
					if (m_pMapList[i]->m_stTempSectorInfo[ix][iy].iAresdenActivity > iMaxAresdenActivity) {
						iMaxAresdenActivity = m_pMapList[i]->m_stTempSectorInfo[ix][iy].iAresdenActivity;
						m_pMapList[i]->m_iMaxAx = ix;
						m_pMapList[i]->m_iMaxAy = iy;
					}
					if (m_pMapList[i]->m_stTempSectorInfo[ix][iy].iElvineActivity > iMaxElvineActivity) {
						iMaxElvineActivity = m_pMapList[i]->m_stTempSectorInfo[ix][iy].iElvineActivity;
						m_pMapList[i]->m_iMaxEx = ix;
						m_pMapList[i]->m_iMaxEy = iy;
					}
					if (m_pMapList[i]->m_stTempSectorInfo[ix][iy].iMonsterActivity > iMaxMonsterActivity) {
						iMaxMonsterActivity = m_pMapList[i]->m_stTempSectorInfo[ix][iy].iMonsterActivity;
						m_pMapList[i]->m_iMaxMx = ix;
						m_pMapList[i]->m_iMaxMy = iy;
					}
					if (m_pMapList[i]->m_stTempSectorInfo[ix][iy].iPlayerActivity > iMaxPlayerActivity) {
						iMaxPlayerActivity = m_pMapList[i]->m_stTempSectorInfo[ix][iy].iPlayerActivity;
						m_pMapList[i]->m_iMaxPx = ix;
						m_pMapList[i]->m_iMaxPy = iy;
					}
				}
			m_pMapList[i]->ClearTempSectorInfo();
			if (m_pMapList[i]->m_iMaxNx > 0) m_pMapList[i]->m_stSectorInfo[m_pMapList[i]->m_iMaxNx][m_pMapList[i]->m_iMaxNy].iNeutralActivity++;
			if (m_pMapList[i]->m_iMaxAx > 0) m_pMapList[i]->m_stSectorInfo[m_pMapList[i]->m_iMaxAx][m_pMapList[i]->m_iMaxAy].iAresdenActivity++;
			if (m_pMapList[i]->m_iMaxEx > 0) m_pMapList[i]->m_stSectorInfo[m_pMapList[i]->m_iMaxEx][m_pMapList[i]->m_iMaxEy].iElvineActivity++;
			if (m_pMapList[i]->m_iMaxMx > 0) m_pMapList[i]->m_stSectorInfo[m_pMapList[i]->m_iMaxMx][m_pMapList[i]->m_iMaxMy].iMonsterActivity++;
			if (m_pMapList[i]->m_iMaxPx > 0) m_pMapList[i]->m_stSectorInfo[m_pMapList[i]->m_iMaxPx][m_pMapList[i]->m_iMaxPy].iPlayerActivity++;
		}
}

void CGame::AgingMapSectorInfo() {
	int i;
	int ix;
	int iy;
	for (i = 0; i < DEF_MAXMAPS; i++)
		if (m_pMapList[i] != 0) {
			for (ix = 0; ix < DEF_MAXSECTORS; ix++)
				for (iy = 0; iy < DEF_MAXSECTORS; iy++) {
					m_pMapList[i]->m_stSectorInfo[ix][iy].iNeutralActivity--;
					m_pMapList[i]->m_stSectorInfo[ix][iy].iAresdenActivity--;
					m_pMapList[i]->m_stSectorInfo[ix][iy].iElvineActivity--;
					m_pMapList[i]->m_stSectorInfo[ix][iy].iMonsterActivity--;
					m_pMapList[i]->m_stSectorInfo[ix][iy].iPlayerActivity--;
					if (m_pMapList[i]->m_stSectorInfo[ix][iy].iNeutralActivity < 0) m_pMapList[i]->m_stSectorInfo[ix][iy].iNeutralActivity = 0;
					if (m_pMapList[i]->m_stSectorInfo[ix][iy].iAresdenActivity < 0) m_pMapList[i]->m_stSectorInfo[ix][iy].iAresdenActivity = 0;
					if (m_pMapList[i]->m_stSectorInfo[ix][iy].iElvineActivity < 0) m_pMapList[i]->m_stSectorInfo[ix][iy].iElvineActivity = 0;
					if (m_pMapList[i]->m_stSectorInfo[ix][iy].iMonsterActivity < 0) m_pMapList[i]->m_stSectorInfo[ix][iy].iMonsterActivity = 0;
					if (m_pMapList[i]->m_stSectorInfo[ix][iy].iPlayerActivity < 0) m_pMapList[i]->m_stSectorInfo[ix][iy].iPlayerActivity = 0;
				}
		}
}

bool CGame::__bSetConstructionKit(int /*iMapIndex*/, int dX, int dY, int iType, int /*iTimeCost*/, int iClientH) {
	int iNamingValue;
	int ix;
	int iy;
	int tX;
	int tY;
	char cNpcName[21], cName[21], cNpcWaypoint[11], cOwnerType;
	short sOwnerH;
	if ((m_bIsCrusadeMode == false) || (m_pClientList[iClientH]->m_iCrusadeDuty != 2)) return false;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_iTotalCrusadeStructures >= DEF_MAXCRUSADESTRUCTURES) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOMORECRUSADESTRUCTURE, 0, 0, 0, 0);
		return false;
	}
	iNamingValue = m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->iGetEmptyNamingValue();
	if (iNamingValue == -1) {
	} else {
		for (ix = dX - 3; ix <= dX + 5; ix++)
			for (iy = dY - 3; iy <= dX + 5; iy++) {
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
				if ((sOwnerH != 0) && (cOwnerType == DEF_OWNERTYPE_NPC) && (m_pNpcList[sOwnerH]->m_cActionLimit == 5)) return false;
			}
		std::memset(cNpcName, 0, sizeof(cNpcName));
		if (m_pClientList[iClientH]->m_cSide == 1) {
			switch (iType) {
				case 1: strcpy(cNpcName, "AGT-Aresden");
					break;
				case 2: strcpy(cNpcName, "CGT-Aresen");
					break;
				case 3: strcpy(cNpcName, "MS-Aresden");
					break;
				case 4: strcpy(cNpcName, "DT-Aresden");
					break;
			}
		} else if (m_pClientList[iClientH]->m_cSide == 2) {
			switch (iType) {
				case 1: strcpy(cNpcName, "AGT-Elvine");
					break;
				case 2: strcpy(cNpcName, "CGT-Elvine");
					break;
				case 3: strcpy(cNpcName, "MS-Elvine");
					break;
				case 4: strcpy(cNpcName, "DT-Elvine");
					break;
			}
		} else return false;
		std::memset(cName, 0, sizeof(cName));
		wsprintf(cName, "XX%d", iNamingValue);
		cName[0] = '_';
		cName[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
		std::memset(cNpcWaypoint, 0, sizeof(cNpcWaypoint));
		tX = (int) dX;
		tY = (int) dY;
		if (bCreateNewNpc(cNpcName, cName, m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_cName, 0, (rand() % 9), NpcMoveType::random, &tX, &tY, cNpcWaypoint, 0, 0, -1, false, false) == false) {
			m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->SetNamingValueEmpty(iNamingValue);
		} else {
			wsprintf(G_cTxt, "Structure(%s) construction begin(%d,%d)!", cNpcName, tX, tY);
			PutLogList(G_cTxt);
			return true;
		}
	}
	return false;
}

void CGame::LocalStartCrusadeMode(uint32_t dwCrusadeGUID) {
	int i;
	if (m_bIsCrusadeMode == true) return;
	m_bIsCrusadeMode = true;
	m_iCrusadeWinnerSide = 0;
	if (dwCrusadeGUID != 0) {
		_CreateCrusadeGUID(dwCrusadeGUID, 0);
		m_dwCrusadeGUID = dwCrusadeGUID;
	}
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
			m_pClientList[i]->m_iCrusadeDuty = 0;
			m_pClientList[i]->m_iConstructionPoint = 0;
			m_pClientList[i]->m_dwCrusadeGUID = m_dwCrusadeGUID;
			SendNotifyMsg(0, i, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, m_pClientList[i]->m_iCrusadeDuty, 0, 0);
		}
	for (i = 0; i < DEF_MAXMAPS; i++)
		if (m_pMapList[i] != 0) m_pMapList[i]->RestoreStrikePoints();
	CreateCrusadeStructures();
	PutLogList("(!)Crusade Mode ON.");
	_bCrusadeLog(DEF_CRUSADELOG_STARTCRUSADE, 0, 0, 0);
}

void CGame::LocalEndCrusadeMode(int iWinnerSide) {
	int i;
	wsprintf(G_cTxt, "LocalEndCrusadeMode(%d)", iWinnerSide);
	PutLogList(G_cTxt);
	if (m_bIsCrusadeMode == false) return;
	m_bIsCrusadeMode = false;
	PutLogList("(!)Crusade Mode OFF.");
	RemoveCrusadeStructures();
	RemoveCrusadeNpcs();
	_CreateCrusadeGUID(m_dwCrusadeGUID, iWinnerSide);
	m_iCrusadeWinnerSide = iWinnerSide;
	m_iLastCrusadeWinner = iWinnerSide;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
			m_pClientList[i]->m_iCrusadeDuty = 0;
			m_pClientList[i]->m_iConstructionPoint = 0;
			SendNotifyMsg(0, i, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, 0, 0, 0, m_iCrusadeWinnerSide);
		}
	RemoveCrusadeRecallTime();
	if (iWinnerSide == 2) {
		_bCrusadeLog(DEF_CRUSADELOG_ENDCRUSADE, false, false, "Elvine Win!");
	} else if (iWinnerSide == 1) {
		_bCrusadeLog(DEF_CRUSADELOG_ENDCRUSADE, false, false, "Aresden Win!");
	} else {
		_bCrusadeLog(DEF_CRUSADELOG_ENDCRUSADE, false, false, "Drawn!");
	}
	if (m_iMiddlelandMapIndex != -1) {
	}
}

void CGame::SaveOccupyFlagData() {
	char * pData;
	int iSize;
	FILE * pFile;
	PutLogList("(!) Middleland OccupyFlag data saved.");
	pData = new char[1000000 + 1];
	if (pData == 0) return;
	ZeroMemory(pData, 1000000);
	iSize = _iComposeFlagStatusContents(pData);
	_mkdir("GameData");
	pFile = fopen("GameData\\OccupyFlag.txt", "wt");
	if (pFile == 0) return;
	fwrite(pData, 1, iSize, pFile);
	delete pData;
	fclose(pFile);
}

void CGame::CreateCrusadeStructures() {
	int i;
	int z;
	int tX;
	int tY;
	int iNamingValue;
	char cName[6], cNpcName[21], cNpcWayPoint[11];
	std::memset(cName, 0, sizeof(cName));
	std::memset(cNpcName, 0, sizeof(cNpcName));
	std::memset(cNpcWayPoint, 0, sizeof(cNpcWayPoint));
	for (i = 0; i < DEF_MAXCRUSADESTRUCTURES; i++)
		if (m_stCrusadeStructures[i].cType != 0) {
			for (z = 0; z < DEF_MAXMAPS; z++)
				if ((m_pMapList[z] != 0) && (strcmp(m_pMapList[z]->m_cName, m_stCrusadeStructures[i].cMapName) == 0)) {
					iNamingValue = m_pMapList[z]->iGetEmptyNamingValue();
					if (iNamingValue == -1) {
					} else {
						wsprintf(cName, "XX%d", iNamingValue);
						cName[0] = '_';
						cName[1] = z + 65;
						switch (m_stCrusadeStructures[i].cType) {
							case 36:
								if (strcmp(m_pMapList[z]->m_cName, "aresden") == 0)
									strcpy(cNpcName, "AGT-Aresden");
								else if (strcmp(m_pMapList[z]->m_cName, "elvine") == 0)
									strcpy(cNpcName, "AGT-Elvine");
								break;
							case 37:
								if (strcmp(m_pMapList[z]->m_cName, "aresden") == 0)
									strcpy(cNpcName, "CGT-Aresden");
								else if (strcmp(m_pMapList[z]->m_cName, "elvine") == 0)
									strcpy(cNpcName, "CGT-Elvine");
								break;
							case 40:
								if (strcmp(m_pMapList[z]->m_cName, "aresden") == 0)
									strcpy(cNpcName, "ESG-Aresden");
								else if (strcmp(m_pMapList[z]->m_cName, "elvine") == 0)
									strcpy(cNpcName, "ESG-Elvine");
								break;
							case 41:
								if (strcmp(m_pMapList[z]->m_cName, "aresden") == 0)
									strcpy(cNpcName, "GMG-Aresden");
								else if (strcmp(m_pMapList[z]->m_cName, "elvine") == 0)
									strcpy(cNpcName, "GMG-Elvine");
								break;
							case 42:
								strcpy(cNpcName, "ManaStone");
								break;
							default:
								strcpy(cNpcName, m_pNpcConfigList[m_stCrusadeStructures[i].cType]->m_cNpcName);
								break;
						}
						tX = (int) m_stCrusadeStructures[i].dX;
						tY = (int) m_stCrusadeStructures[i].dY;
						if (bCreateNewNpc(cNpcName, cName, m_pMapList[z]->m_cName, 0, 0, NpcMoveType::random, &tX, &tY, cNpcWayPoint, 0, 0, -1, false) == false) {
							m_pMapList[z]->SetNamingValueEmpty(iNamingValue);
						} else {
							wsprintf(G_cTxt, "(!) Creating Crusade Structure(%s) at %s(%d, %d)", cNpcName, m_stCrusadeStructures[i].cMapName, tX, tY);
							PutLogList(G_cTxt);
						}
					}
				}
		}
}

void CGame::RequestSetGuildConstructLocHandler(int iClientH, int dX, int dY, int iGuildGUID, char * pMapName) {
	int i;
	int iIndex;
	uint32_t dwTemp;
	uint32_t dwTime;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsOnServerChange == true) return;
	dwTime = timeGetTime();
	wsprintf(G_cTxt, "SetGuildConstructLoc: %d %s %d %d", iGuildGUID, pMapName, dX, dY);
	PutLogList(G_cTxt);
	for (i = 0; i < DEF_MAXGUILDS; i++)
		if (m_pGuildTeleportLoc[i].m_iV1 == iGuildGUID) {
			if ((m_pGuildTeleportLoc[i].m_sDestX2 == dX) && (m_pGuildTeleportLoc[i].m_sDestY2 == dY) && (strcmp(m_pGuildTeleportLoc[i].m_cDestMapName2, pMapName) == 0)) {
				m_pGuildTeleportLoc[i].m_dwTime2 = dwTime;
				return;
			} else {
				m_pGuildTeleportLoc[i].m_sDestX2 = dX;
				m_pGuildTeleportLoc[i].m_sDestY2 = dY;
				std::memset(m_pGuildTeleportLoc[i].m_cDestMapName2, 0, sizeof(m_pGuildTeleportLoc[i].m_cDestMapName2));
				strcpy(m_pGuildTeleportLoc[i].m_cDestMapName2, pMapName);
				m_pGuildTeleportLoc[i].m_dwTime2 = dwTime;
				return;
			}
		}
	dwTemp = 0;
	iIndex = -1;
	for (i = 0; i < DEF_MAXGUILDS; i++) {
		if (m_pGuildTeleportLoc[i].m_iV1 == 0) {
			m_pGuildTeleportLoc[i].m_iV1 = iGuildGUID;
			m_pGuildTeleportLoc[i].m_sDestX2 = dX;
			m_pGuildTeleportLoc[i].m_sDestY2 = dY;
			std::memset(m_pGuildTeleportLoc[i].m_cDestMapName2, 0, sizeof(m_pGuildTeleportLoc[i].m_cDestMapName2));
			strcpy(m_pGuildTeleportLoc[i].m_cDestMapName2, pMapName);
			m_pGuildTeleportLoc[i].m_dwTime2 = dwTime;
			return;
		} else {
			if (dwTemp < (dwTime - m_pGuildTeleportLoc[i].m_dwTime2)) {
				dwTemp = (dwTime - m_pGuildTeleportLoc[i].m_dwTime2);
				iIndex = i;
			}
		}
	}
	if (iIndex == -1) return;
	PutLogList("(X) No more GuildConstructLoc Space! Replaced.");
	m_pGuildTeleportLoc[i].m_iV1 = iGuildGUID;
	m_pGuildTeleportLoc[i].m_sDestX2 = dX;
	m_pGuildTeleportLoc[i].m_sDestY2 = dY;
	std::memset(m_pGuildTeleportLoc[i].m_cDestMapName2, 0, sizeof(m_pGuildTeleportLoc[i].m_cDestMapName2));
	strcpy(m_pGuildTeleportLoc[i].m_cDestMapName, pMapName);
	m_pGuildTeleportLoc[i].m_dwTime2 = dwTime;
}

void CGame::RequestSummonWarUnitHandler(int iClientH, int dX, int dY, short cType, char cNum, char cMode) {
	char cName[6], cNpcName[21], cMapName[11], cNpcWayPoint[11], cOwnerType;
	int i;
	int x;
	int iNamingValue;
	int tX;
	int tY;
	int ix;
	int iy;
	bool bRet;
	short sOwnerH;
	uint32_t dwTime = timeGetTime();
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	std::memset(cNpcWayPoint, 0, sizeof(cNpcWayPoint));
	std::memset(cNpcName, 0, sizeof(cNpcName));
	std::memset(cMapName, 0, sizeof(cMapName));
	if (cType < 0) return;
	if (cType >= DEF_MAXNPCTYPES) return;
	if (cNum > 10) return;
	if (m_pClientList[iClientH]->m_iConstructionPoint < m_iNpcConstructionPoint[cType]) return;
	if ((m_pMapList[m_pClientList[iClientH]->m_cMapIndex] != 0) && (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_bIsFixedDayMode == true)) return;
	cNum = 1;
	for (x = 1; x <= cNum; x++) {
		iNamingValue = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->iGetEmptyNamingValue();
		if (iNamingValue == -1) {
		} else {
			std::memset(cName, 0, sizeof(cName));
			wsprintf(cName, "XX%d", iNamingValue);
			cName[0] = '_';
			cName[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
			switch (cType) {
				case 43:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "LWB-Aresden");
							break;
						case 2: strcpy(cNpcName, "LWB-Elvine");
							break;
					}
					break;
				case 36:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "AGT-Aresden");
							break;
						case 2: strcpy(cNpcName, "AGT-Elvine");
							break;
					}
					break;
				case 37:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "CGT-Aresden");
							break;
						case 2: strcpy(cNpcName, "CGT-Elvine");
							break;
					}
					break;
				case 38:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "MS-Aresden");
							break;
						case 2: strcpy(cNpcName, "MS-Elvine");
							break;
					}
					break;
				case 39:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "DT-Aresden");
							break;
						case 2: strcpy(cNpcName, "DT-Elvine");
							break;
					}
					break;
				case 51:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "CP-Aresden");
							break;
						case 2: strcpy(cNpcName, "CP-Elvine");
							break;
					}
					break;
				case 44:
					strcpy(cNpcName, "GHK");
					break;
				case 45:
					strcpy(cNpcName, "GHKABS");
					break;
				case 46:
					strcpy(cNpcName, "TK");
					break;
				case 47:
					strcpy(cNpcName, "BG");
					break;
				case 82:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "Sor-Aresden");
							break;
						case 2: strcpy(cNpcName, "Sor-Elvine");
							break;
					}
					break;
				case 83:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "ATK-Aresden");
							break;
						case 2: strcpy(cNpcName, "ATK-Elvine");
							break;
					}
					break;
				case 84:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "Elf-Aresden");
							break;
						case 2: strcpy(cNpcName, "Elf-Elvine");
							break;
					}
					break;
				case 85:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "DSK-Aresden");
							break;
						case 2: strcpy(cNpcName, "DSK-Elvine");
							break;
					}
					break;
				case 86:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "HBT-Aresden");
							break;
						case 2: strcpy(cNpcName, "HBT-Elvine");
							break;
					}
					break;
				case 87:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "CT-Aresden");
							break;
						case 2: strcpy(cNpcName, "CT-Elvine");
							break;
					}
					break;
				case 88:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "Bar-Aresden");
							break;
						case 2: strcpy(cNpcName, "Bar-Elvine");
							break;
					}
					break;
				case 89:
					switch (m_pClientList[iClientH]->m_cSide) {
						case 1: strcpy(cNpcName, "AGC-Aresden");
							break;
						case 2: strcpy(cNpcName, "AGC-Elvine");
							break;
					}
					break;
			}
			wsprintf(G_cTxt, "(!) Request Summon War Unit (%d) (%s)", cType, cNpcName);
			PutLogList(G_cTxt);
			tX = (int) dX;
			tY = (int) dY;
			bRet = false;
			switch (cType) {
				case 36:
				case 37:
				case 38:
				case 39:
					if (strcmp(m_pClientList[iClientH]->m_cConstructMapName, m_pClientList[iClientH]->m_cMapName) != 0) bRet = true;
					if (abs(m_pClientList[iClientH]->m_sX - m_pClientList[iClientH]->m_iConstructLocX) > 10) bRet = true;
					if (abs(m_pClientList[iClientH]->m_sY - m_pClientList[iClientH]->m_iConstructLocY) > 10) bRet = true;
					if (bRet == true) {
						m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->SetNamingValueEmpty(iNamingValue);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTCONSTRUCT, 2, 0, 0, 0);
						return;
					}
					for (i = 0; i < DEF_MAXGUILDS; i++)
						if (m_pGuildTeleportLoc[i].m_iV1 == m_pClientList[iClientH]->m_iGuildGUID) {
							m_pGuildTeleportLoc[i].m_dwTime = dwTime;
							if (m_pGuildTeleportLoc[i].m_iV2 >= DEF_MAXCONSTRUCTNUM) {
								m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->SetNamingValueEmpty(iNamingValue);
								SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTCONSTRUCT, 3, 0, 0, 0);
								return;
							} else {
								m_pGuildTeleportLoc[i].m_iV2++;
								goto RSWU_LOOPBREAK;
							}
						}
					m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->SetNamingValueEmpty(iNamingValue);
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTCONSTRUCT, 3, 0, 0, 0);
					return;
					break;
				case 43:
				case 44:
				case 45:
				case 46:
				case 47:
				case 51:
					break;
				case 40:
				case 41:
				case 42:
				case 48:
				case 49:
				case 50:
					break;
			}
RSWU_LOOPBREAK:
			;
			bRet = false;
			switch (cType) {
				case 36:
				case 37:
					for (ix = tX - 2; ix <= tX + 2; ix++)
						for (iy = tY - 2; iy <= tY + 2; iy++) {
							m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
							if ((sOwnerH != 0) && (cOwnerType == DEF_OWNERTYPE_NPC)) {
								switch (m_pNpcList[sOwnerH]->m_sType) {
									case NpcType::agt:
									case NpcType::cgt:
										bRet = true;
										break;
									default: break;
								}
							}
						}
					if ((dY <= 32) || (dY >= 783)) bRet = true;
					break;
			}
			if (bRet == true) {
				m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->SetNamingValueEmpty(iNamingValue);
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANNOTCONSTRUCT, 1, 0, 0, 0);
				return;
			}
			if (cMode == 0) {
				bRet = bCreateNewNpc(cNpcName, cName, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, 0, 0, NpcMoveType::follow, &tX, &tY, cNpcWayPoint, 0, 0, -1, false, false, false, false, m_pClientList[iClientH]->m_iGuildGUID);
				bSetNpcFollowMode(cName, m_pClientList[iClientH]->m_cCharName, DEF_OWNERTYPE_PLAYER);
			} else bRet = bCreateNewNpc(cNpcName, cName, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, 0, 0, NpcMoveType::guard, &tX, &tY, cNpcWayPoint, 0, 0, -1, false, false, false, false, m_pClientList[iClientH]->m_iGuildGUID);
			if (bRet == false) {
				m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->SetNamingValueEmpty(iNamingValue);
			} else {
				m_pClientList[iClientH]->m_iConstructionPoint -= m_iNpcConstructionPoint[cType];
				if (m_pClientList[iClientH]->m_iConstructionPoint < 0) m_pClientList[iClientH]->m_iConstructionPoint = 0;
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[iClientH]->m_iConstructionPoint, m_pClientList[iClientH]->m_iWarContribution, 0, 0);
			}
		}
	}
}

void CGame::CheckConnectionHandler(int iClientH, char *pData) {
	char * cp;
	uint32_t * dwp, dwTimeRcv, dwTime, dwTimeGapClient, dwTimeGapServer;
	if (m_pClientList[iClientH] == 0) return;
	//m_pClientList[iClientH]->m_cConnectionCheck = 0;
	dwTime = timeGetTime();
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	dwp = (uint32_t *) cp;
	dwTimeRcv = *dwp;
	CheckDenialServiceAttack(iClientH, dwTimeRcv);
	if (m_pClientList[iClientH]->m_dwInitCCTimeRcv == 0) {
		m_pClientList[iClientH]->m_dwInitCCTimeRcv = dwTimeRcv;
		m_pClientList[iClientH]->m_dwInitCCTime = dwTime;
	} else {
		dwTimeGapClient = (dwTimeRcv - m_pClientList[iClientH]->m_dwInitCCTimeRcv);
		dwTimeGapServer = (dwTime - m_pClientList[iClientH]->m_dwInitCCTime);
		if (dwTimeGapClient < dwTimeGapServer) return;
		if ((abs(dwTimeGapClient - dwTimeGapServer)) >= (DEF_CLIENTTIMEOUT)) {
			DeleteClient(iClientH, true, true);
			return;
		}
	}
}

void CGame::SelectCrusadeDutyHandler(int iClientH, int iDuty) {
	if (m_pClientList[iClientH] == 0) return;
	if ((m_pClientList[iClientH]->m_iGuildRank != 0) && (iDuty == 3)) return;
	if (m_iLastCrusadeWinner == m_pClientList[iClientH]->m_cSide &&
			  m_pClientList[iClientH]->m_dwCrusadeGUID == 0 && iDuty == 3) {
		m_pClientList[iClientH]->m_iConstructionPoint = 3000;
	}
	m_pClientList[iClientH]->m_iCrusadeDuty = iDuty;
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, m_pClientList[iClientH]->m_iCrusadeDuty, 0, 0);
	if (iDuty == 1)
		_bCrusadeLog(DEF_CRUSADELOG_SELECTDUTY, iClientH, 0, "Fighter");
	else if (iDuty == 2)
		_bCrusadeLog(DEF_CRUSADELOG_SELECTDUTY, iClientH, 0, "Constructor");
	else
		_bCrusadeLog(DEF_CRUSADELOG_SELECTDUTY, iClientH, 0, "Commander");
}

void CGame::MapStatusHandler(int iClientH, int iMode, char * pMapName) {
	int i;
	if (m_pClientList[iClientH] == 0) return;
	switch (iMode) {
		case 1:
			if (m_pClientList[iClientH]->m_iCrusadeDuty == 0) return;
			for (i = 0; i < DEF_MAXGUILDS; i++)
				if ((m_pGuildTeleportLoc[i].m_iV1 != 0) && (m_pGuildTeleportLoc[i].m_iV1 == m_pClientList[iClientH]->m_iGuildGUID)) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_TCLOC, m_pGuildTeleportLoc[i].m_sDestX, m_pGuildTeleportLoc[i].m_sDestY, 0, m_pGuildTeleportLoc[i].m_cDestMapName, m_pGuildTeleportLoc[i].m_sDestX2, m_pGuildTeleportLoc[i].m_sDestY2, 0, 0, 0, 0, m_pGuildTeleportLoc[i].m_cDestMapName2);
					std::memset(m_pClientList[iClientH]->m_cConstructMapName, 0, sizeof(m_pClientList[iClientH]->m_cConstructMapName));
					memcpy(m_pClientList[iClientH]->m_cConstructMapName, m_pGuildTeleportLoc[i].m_cDestMapName2, 10);
					m_pClientList[iClientH]->m_iConstructLocX = m_pGuildTeleportLoc[i].m_sDestX2;
					m_pClientList[iClientH]->m_iConstructLocY = m_pGuildTeleportLoc[i].m_sDestY2;
					return;
				}
			break;
		case 3:
			for (i = 0; i < DEF_MAXCRUSADESTRUCTURES; i++) {
				m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].cType = NpcType::none;
				m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].cSide = 0;
				m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].sX = 0;
				m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].sY = 0;
			}
			m_pClientList[iClientH]->m_iCSIsendPoint = 0;
			std::memset(m_pClientList[iClientH]->m_cSendingMapName, 0, sizeof(m_pClientList[iClientH]->m_cSendingMapName));
			if (strcmp(pMapName, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName) == 0) {
				for (i = 0; i < m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_iTotalCrusadeStructures; i++) {
					if (m_pClientList[iClientH]->m_iCrusadeDuty == 3) {
						m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].cType = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stCrusadeStructureInfo[i].cType;
						m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].cSide = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stCrusadeStructureInfo[i].cSide;
						m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].sX = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stCrusadeStructureInfo[i].sX;
						m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].sY = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stCrusadeStructureInfo[i].sY;
					} else if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stCrusadeStructureInfo[i].cType == NpcType::mana_stone) {
						m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].cType = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stCrusadeStructureInfo[i].cType;
						m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].cSide = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stCrusadeStructureInfo[i].cSide;
						m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].sX = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stCrusadeStructureInfo[i].sX;
						m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].sY = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_stCrusadeStructureInfo[i].sY;
					}
				}
				memcpy(m_pClientList[iClientH]->m_cSendingMapName, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, 10);
			} else {
				if (strcmp(pMapName, "middleland") == 0) {
					for (i = 0; i < m_iTotalMiddleCrusadeStructures; i++) {
						if (m_pClientList[iClientH]->m_iCrusadeDuty == 3) {
							m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].cType = m_stMiddleCrusadeStructureInfo[i].cType;
							m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].cSide = m_stMiddleCrusadeStructureInfo[i].cSide;
							m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].sX = m_stMiddleCrusadeStructureInfo[i].sX;
							m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].sY = m_stMiddleCrusadeStructureInfo[i].sY;
						} else if (m_stMiddleCrusadeStructureInfo[i].cType == NpcType::mana_stone) {
							m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].cType = m_stMiddleCrusadeStructureInfo[i].cType;
							m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].cSide = m_stMiddleCrusadeStructureInfo[i].cSide;
							m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].sX = m_stMiddleCrusadeStructureInfo[i].sX;
							m_pClientList[iClientH]->m_stCrusadeStructureInfo[i].sY = m_stMiddleCrusadeStructureInfo[i].sY;
						}
					}
					strcpy(m_pClientList[iClientH]->m_cSendingMapName, "middleland");
				} else {
				}
			}
			_SendMapStatus(iClientH);
			break;
	}
}

void CGame::_SendMapStatus(int iClientH) {
	int i;
	int iDataSize;
	char *cp, cData[DEF_MAXCRUSADESTRUCTURES * 6];
	short * sp;
	std::memset(cData, 0, sizeof(cData));
	cp = (char *) (cData);
	memcpy(cp, m_pClientList[iClientH]->m_cSendingMapName, 10);
	cp += 10;
	sp = (short *) cp;
	*sp = (short) m_pClientList[iClientH]->m_iCSIsendPoint;
	cp += 2;
	cp++;
	if (m_pClientList[iClientH]->m_iCSIsendPoint == 0)
		m_pClientList[iClientH]->m_bIsSendingMapStatus = true;
	iDataSize = 0;
	for (i = 0; i < 100; i++) {
		if (m_pClientList[iClientH]->m_iCSIsendPoint >= DEF_MAXCRUSADESTRUCTURES) goto SMS_ENDOFDATA;
		if (m_pClientList[iClientH]->m_stCrusadeStructureInfo[m_pClientList[iClientH]->m_iCSIsendPoint].cType == NpcType::none) goto SMS_ENDOFDATA;
		*cp = (char) m_pClientList[iClientH]->m_stCrusadeStructureInfo[m_pClientList[iClientH]->m_iCSIsendPoint].cType;
		cp++;
		sp = (short *) cp;
		*sp = m_pClientList[iClientH]->m_stCrusadeStructureInfo[m_pClientList[iClientH]->m_iCSIsendPoint].sX;
		cp += 2;
		sp = (short *) cp;
		*sp = m_pClientList[iClientH]->m_stCrusadeStructureInfo[m_pClientList[iClientH]->m_iCSIsendPoint].sY;
		cp += 2;
		*cp = m_pClientList[iClientH]->m_stCrusadeStructureInfo[m_pClientList[iClientH]->m_iCSIsendPoint].cSide;
		cp++;
		iDataSize += 6;
		m_pClientList[iClientH]->m_iCSIsendPoint++;
	}
	cp = (char *) (cData + 12);
	*cp = (iDataSize / 6);
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_MAPSTATUSNEXT, iDataSize + 13, 0, 0, cData);
	return;
SMS_ENDOFDATA:
	;
	cp = (char *) (cData + 12);
	*cp = (iDataSize / 6);
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_MAPSTATUSLAST, iDataSize + 13, 0, 0, cData);
	m_pClientList[iClientH]->m_bIsSendingMapStatus = false;
	return;
}

void CGame::RemoveCrusadeStructures() {
	int i;
	for (i = 0; i < DEF_MAXNPCS; i++)
		if (m_pNpcList[i] != 0) {
			switch (m_pNpcList[i]->m_sType) {
				case NpcType::agt:
				case NpcType::cgt:
				case NpcType::ms:
				case NpcType::dt:
				case NpcType::esg:
				case NpcType::gmg:
				case NpcType::mana_stone:
					DeleteNpc(i);
					break;
				default: break;
			}
		}
}

void CGame::RequestHelpHandler(int iClientH) {
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iGuildRank == -1) return;
	if (m_pClientList[iClientH]->m_iCrusadeDuty != 1) return;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_iGuildRank == 0) &&
				  (m_pClientList[i]->m_iCrusadeDuty == 3) && (m_pClientList[i]->m_iGuildGUID == m_pClientList[iClientH]->m_iGuildGUID)) {
			SendNotifyMsg(0, i, DEF_NOTIFY_HELP, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, m_pClientList[iClientH]->m_iHP, m_pClientList[iClientH]->m_cCharName);
			return;
		}
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_HELPFAILED, 0, 0, 0, 0);
}

void CGame::DoMeteorStrikeDamageHandler(int iMapIndex) {
	int i;
	int iDamage;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_cSide != 0) && (m_pClientList[i]->m_cMapIndex == iMapIndex)) {
			if (m_pClientList[i]->m_iLevel < 80)
				iDamage = m_pClientList[i]->m_iLevel + iDice(1, 10);
			else iDamage = m_pClientList[i]->m_iLevel * 2 + iDice(1, 10);
			iDamage = iDice(1, m_pClientList[i]->m_iLevel) + m_pClientList[i]->m_iLevel;
			if (iDamage > 255) iDamage = 255;
			if (m_pClientList[i]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] == 2) {
				iDamage = (iDamage / 2) - 2;
			}
			if (m_pClientList[i]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] == 5) {
				iDamage = 0;
			}
			if (m_pClientList[i]->m_iAdminUserLevel > 0) {
				iDamage = 0;
			}
			m_pClientList[i]->m_iHP -= iDamage;
			if (m_pClientList[i]->m_iHP <= 0) {
				ClientKilledHandler(i, 0, 0, iDamage);
				m_stMeteorStrikeResult.iCasualties++;
			} else {
				if (iDamage > 0) {
					SendNotifyMsg(0, i, DEF_NOTIFY_HP, 0, 0, 0, 0);
					SendEventToNearClient_TypeA(i, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, 0, 0);
					if (m_pClientList[i]->m_bSkillUsingStatus[19] != true) {
						m_pMapList[m_pClientList[i]->m_cMapIndex]->ClearOwner(0, i, DEF_OWNERTYPE_PLAYER, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
						m_pMapList[m_pClientList[i]->m_cMapIndex]->SetOwner(i, DEF_OWNERTYPE_PLAYER, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
					}
					if (m_pClientList[i]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] != 0) {
						SendNotifyMsg(0, i, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_HOLDOBJECT, m_pClientList[i]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ], 0, 0);
						m_pClientList[i]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
						bRemoveFromDelayEventList(i, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_HOLDOBJECT);
					}
				}
			}
		}
}

void CGame::SyncMiddlelandMapInfo() {
	int i;
	if (m_iMiddlelandMapIndex != -1) {
		for (i = 0; i < DEF_MAXCRUSADESTRUCTURES; i++) {
			m_stMiddleCrusadeStructureInfo[i].cType = NpcType::none;
			m_stMiddleCrusadeStructureInfo[i].cSide = 0;
			m_stMiddleCrusadeStructureInfo[i].sX = 0;
			m_stMiddleCrusadeStructureInfo[i].sY = 0;
		}
		m_iTotalMiddleCrusadeStructures = m_pMapList[m_iMiddlelandMapIndex]->m_iTotalCrusadeStructures;
		for (i = 0; i < m_iTotalMiddleCrusadeStructures; i++) {
			m_stMiddleCrusadeStructureInfo[i].cType = m_pMapList[m_iMiddlelandMapIndex]->m_stCrusadeStructureInfo[i].cType;
			m_stMiddleCrusadeStructureInfo[i].cSide = m_pMapList[m_iMiddlelandMapIndex]->m_stCrusadeStructureInfo[i].cSide;
			m_stMiddleCrusadeStructureInfo[i].sX = m_pMapList[m_iMiddlelandMapIndex]->m_stCrusadeStructureInfo[i].sX;
			m_stMiddleCrusadeStructureInfo[i].sY = m_pMapList[m_iMiddlelandMapIndex]->m_stCrusadeStructureInfo[i].sY;
		}
	}
}

void CGame::GSM_SetGuildConstructLoc(int iGuildGUID, int dX, int dY, char * pMapName) {
	int i;
	int iIndex;
	uint32_t dwTemp;
	uint32_t dwTime;
	wsprintf(G_cTxt, "SetGuildConstructLoc: %d %s %d %d", iGuildGUID, pMapName, dX, dY);
	PutLogList(G_cTxt);
	dwTime = timeGetTime();
	for (i = 0; i < DEF_MAXGUILDS; i++)
		if (m_pGuildTeleportLoc[i].m_iV1 == iGuildGUID) {
			if ((m_pGuildTeleportLoc[i].m_sDestX2 == dX) && (m_pGuildTeleportLoc[i].m_sDestY2 == dY) && (strcmp(m_pGuildTeleportLoc[i].m_cDestMapName2, pMapName) == 0)) {
				m_pGuildTeleportLoc[i].m_dwTime2 = dwTime;
				return;
			} else {
				m_pGuildTeleportLoc[i].m_sDestX2 = dX;
				m_pGuildTeleportLoc[i].m_sDestY2 = dY;
				std::memset(m_pGuildTeleportLoc[i].m_cDestMapName2, 0, sizeof(m_pGuildTeleportLoc[i].m_cDestMapName2));
				strcpy(m_pGuildTeleportLoc[i].m_cDestMapName2, pMapName);
				m_pGuildTeleportLoc[i].m_dwTime2 = dwTime;
				return;
			}
		}
	dwTemp = 0;
	iIndex = -1;
	for (i = 0; i < DEF_MAXGUILDS; i++) {
		if (m_pGuildTeleportLoc[i].m_iV1 == 0) {
			m_pGuildTeleportLoc[i].m_iV1 = iGuildGUID;
			m_pGuildTeleportLoc[i].m_sDestX2 = dX;
			m_pGuildTeleportLoc[i].m_sDestY2 = dY;
			ZeroMemory(m_pGuildTeleportLoc[i].m_cDestMapName2, sizeof (m_pGuildTeleportLoc[i].m_cDestMapName));
			strcpy(m_pGuildTeleportLoc[i].m_cDestMapName2, pMapName);
			m_pGuildTeleportLoc[i].m_dwTime2 = dwTime;
			return;
		} else {
			if (dwTemp < (dwTime - m_pGuildTeleportLoc[i].m_dwTime2)) {
				dwTemp = (dwTime - m_pGuildTeleportLoc[i].m_dwTime2);
				iIndex = i;
			}
		}
	}
	if (iIndex == -1) return;
	PutLogList("(X) No more GuildConstLocuct Space! Replaced.");
	m_pGuildTeleportLoc[i].m_iV1 = iGuildGUID;
	m_pGuildTeleportLoc[i].m_sDestX2 = dX;
	m_pGuildTeleportLoc[i].m_sDestY2 = dY;
	std::memset(m_pGuildTeleportLoc[i].m_cDestMapName2, 0, sizeof(m_pGuildTeleportLoc[i].m_cDestMapName2));
	strcpy(m_pGuildTeleportLoc[i].m_cDestMapName2, pMapName);
	m_pGuildTeleportLoc[i].m_dwTime2 = dwTime;
}

void CGame::CheckCommanderConstructionPoint(int iClientH) {
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (m_bIsCrusadeMode == false) return;
	if (m_pClientList[iClientH]->m_iConstructionPoint <= 0) return;
	switch (m_pClientList[iClientH]->m_iCrusadeDuty) {
		case 1:
		case 2:
			for (i = 0; i < DEF_MAXCLIENTS; i++)
				if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_iCrusadeDuty == 3) && (m_pClientList[i]->m_iGuildGUID == m_pClientList[iClientH]->m_iGuildGUID)) {
					m_pClientList[i]->m_iConstructionPoint += m_pClientList[iClientH]->m_iConstructionPoint;
					m_pClientList[i]->m_iWarContribution += (m_pClientList[iClientH]->m_iConstructionPoint / 10);
					if (m_pClientList[i]->m_iConstructionPoint > DEF_MAXCONSTRUCTIONPOINT)
						m_pClientList[i]->m_iConstructionPoint = DEF_MAXCONSTRUCTIONPOINT;
					if (m_pClientList[i]->m_iWarContribution > DEF_MAXWARCONTRIBUTION)
						m_pClientList[i]->m_iWarContribution = DEF_MAXWARCONTRIBUTION;
					SendNotifyMsg(0, i, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[i]->m_iConstructionPoint, m_pClientList[i]->m_iWarContribution, 0, 0);
					m_pClientList[iClientH]->m_iConstructionPoint = 0;
					return;
				}
			m_pClientList[iClientH]->m_iConstructionPoint = 0;
			break;
		case 3:
			break;
	}
}

void CGame::GSM_ConstructionPoint(int iGuildGUID, int iPoint) {
	int i;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_iCrusadeDuty == 3) && (m_pClientList[i]->m_iGuildGUID == iGuildGUID)) {
			m_pClientList[i]->m_iConstructionPoint += iPoint;
			m_pClientList[i]->m_iWarContribution += iPoint / 10;
			if (m_pClientList[i]->m_iConstructionPoint > DEF_MAXCONSTRUCTIONPOINT)
				m_pClientList[i]->m_iConstructionPoint = DEF_MAXCONSTRUCTIONPOINT;
			if (m_pClientList[i]->m_iWarContribution > DEF_MAXWARCONTRIBUTION)
				m_pClientList[i]->m_iWarContribution = DEF_MAXWARCONTRIBUTION;
			SendNotifyMsg(0, i, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[i]->m_iConstructionPoint, m_pClientList[i]->m_iWarContribution, 0, 0);
			wsprintf(G_cTxt, "GSM_ConstructionPoint: %d %d", iGuildGUID, iPoint);
			PutLogList(G_cTxt);
			return;
		}
}

bool CGame::bAddClientShortCut(int iClientH) {
	int i;
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		if (m_iClientShortCut[i] == iClientH) return false;
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		if (m_iClientShortCut[i] == 0) {
			m_iClientShortCut[i] = iClientH;
			return true;
		}
	return false;
}

void CGame::RemoveClientShortCut(int iClientH) {
	int i;
	for (i = 0; i < DEF_MAXCLIENTS + 1; i++)
		if (m_iClientShortCut[i] == iClientH) {
			m_iClientShortCut[i] = 0;
			goto RCSC_LOOPBREAK;
		}
RCSC_LOOPBREAK:
	;
	//m_iClientShortCut[i] = m_iClientShortCut[m_iTotalClients+1];
	//m_iClientShortCut[m_iTotalClients+1] = 0;
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		if ((m_iClientShortCut[i] == 0) && (m_iClientShortCut[i + 1] != 0)) {
			m_iClientShortCut[i] = m_iClientShortCut[i + 1];
			m_iClientShortCut[i + 1] = 0;
		}
}

void CGame::_CreateCrusadeGUID(uint32_t dwCrusadeGUID, int iWinnerSide) {
	char * cp, cTxt[256], cFn[256], cTemp[1024];
	FILE * pFile;
	_mkdir("GameData");
	std::memset(cFn, 0, sizeof(cFn));
	strcat(cFn, "GameData");
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "CrusadeGUID.Txt");
	pFile = fopen(cFn, "wt");
	if (pFile == 0) {
		wsprintf(cTxt, "(!) Cannot create CrusadeGUID(%d) file", dwCrusadeGUID);
		PutLogList(cTxt);
	} else {
		std::memset(cTemp, 0, sizeof(cTemp));
		std::memset(cTxt, 0, sizeof(cTxt));
		wsprintf(cTxt, "CrusadeGUID = %d\n", dwCrusadeGUID);
		strcat(cTemp, cTxt);
		std::memset(cTxt, 0, sizeof(cTxt));
		wsprintf(cTxt, "winner-side = %d\n", iWinnerSide);
		strcat(cTemp, cTxt);
		cp = (char *) cTemp;
		fwrite(cp, strlen(cp), 1, pFile);
		wsprintf(cTxt, "(O) CrusadeGUID(%d) file created", dwCrusadeGUID);
		PutLogList(cTxt);
	}
	if (pFile != 0) fclose(pFile);
}

bool CGame::bReadCrusadeGUIDFile(const char * cFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadMode;
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	cReadMode = 0;
	hFile = CreateFile(cFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFn, "rt");
	if (pFile == 0) {
		PutLogList("(!) Cannot open CrusadeGUID file.");
		return false;
	} else {
		PutLogList("(!) Reading CrusadeGUID file...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		while (token != 0) {
			if (cReadMode != 0) {
				switch (cReadMode) {
					case 1:
						m_dwCrusadeGUID = atoi(token);
						wsprintf(G_cTxt, "CrusadeGUID = %d", m_dwCrusadeGUID);
						PutLogList(G_cTxt);
						cReadMode = 0;
						break;
					case 2:
						m_iLastCrusadeWinner = atoi(token);
						wsprintf(G_cTxt, "CrusadeWinnerSide = %d", m_iLastCrusadeWinner);
						PutLogList(G_cTxt);
						cReadMode = 0;
						break;
				}
			} else {
				if (memcmp(token, "CrusadeGUID", 11) == 0) cReadMode = 1;
				if (memcmp(token, "winner-side", 11) == 0) cReadMode = 2;
			}
			token = pStrTok->pGet();
		}
		delete pStrTok;
		delete cp;
	}
	if (pFile != 0) fclose(pFile);
	return true;
}

void CGame::ManualEndCrusadeMode(int iWinnerSide) {
	if (m_bIsCrusadeMode == false) return;
	LocalEndCrusadeMode(iWinnerSide);
}

int CGame::iGetMapLocationSide(char *pMapName) {
	if (strcmp(pMapName, "aresden") == 0) return 3;
	if (strcmp(pMapName, "elvine") == 0) return 4;
	if (strcmp(pMapName, "arebrk11") == 0) return 3;
	if (strcmp(pMapName, "elvbrk11") == 0) return 4;
	if (strcmp(pMapName, "cityhall_1") == 0) return 1;
	if (strcmp(pMapName, "cityhall_2") == 0) return 2;
	if (strcmp(pMapName, "cath_1") == 0) return 1;
	if (strcmp(pMapName, "cath_2") == 0) return 2;
	if (strcmp(pMapName, "gshop_1") == 0) return 1;
	if (strcmp(pMapName, "gshop_2") == 0) return 2;
	if (strcmp(pMapName, "bsmith_1") == 0) return 1;
	if (strcmp(pMapName, "bsmith_2") == 0) return 2;
	if (strcmp(pMapName, "wrhus_1") == 0) return 1;
	if (strcmp(pMapName, "wrhus_2") == 0) return 2;
	if (strcmp(pMapName, "gldhall_1") == 0) return 1;
	if (strcmp(pMapName, "gldhall_2") == 0) return 2;
	if (strcmp(pMapName, "wzdtwr_1") == 0) return 1;
	if (strcmp(pMapName, "wzdtwr_2") == 0) return 2;
	if (strcmp(pMapName, "arefarm") == 0) return 1;
	if (strcmp(pMapName, "elvfarm") == 0) return 2;
	if (strcmp(pMapName, "arewrhus") == 0) return 1;
	if (strcmp(pMapName, "elvwrhus") == 0) return 2;
	if (strcmp(pMapName, "cmdhall_1") == 0) return 1;
	if (strcmp(pMapName, "Cmdhall_2") == 0) return 2;
	return 0;
}

bool CGame::bCopyItemContents(CItem * pCopy, CItem *pOriginal) {
	if (pOriginal == 0) return false;
	if (pCopy == 0) return false;
	pCopy->m_sIDnum = pOriginal->m_sIDnum;
	pCopy->m_cItemType = pOriginal->m_cItemType;
	pCopy->m_cEquipPos = pOriginal->m_cEquipPos;
	pCopy->m_sItemEffectType = pOriginal->m_sItemEffectType;
	pCopy->m_sItemEffectValue1 = pOriginal->m_sItemEffectValue1;
	pCopy->m_sItemEffectValue2 = pOriginal->m_sItemEffectValue2;
	pCopy->m_sItemEffectValue3 = pOriginal->m_sItemEffectValue3;
	pCopy->m_sItemEffectValue4 = pOriginal->m_sItemEffectValue4;
	pCopy->m_sItemEffectValue5 = pOriginal->m_sItemEffectValue5;
	pCopy->m_sItemEffectValue6 = pOriginal->m_sItemEffectValue6;
	pCopy->m_wMaxLifeSpan = pOriginal->m_wMaxLifeSpan;
	pCopy->m_sSpecialEffect = pOriginal->m_sSpecialEffect;
	//short m_sSM_HitRatio, m_sL_HitRatio;
	pCopy->m_sSpecialEffectValue1 = pOriginal->m_sSpecialEffectValue1;
	pCopy->m_sSpecialEffectValue2 = pOriginal->m_sSpecialEffectValue2;
	pCopy->m_sSprite = pOriginal->m_sSprite;
	pCopy->m_sSpriteFrame = pOriginal->m_sSpriteFrame;
	pCopy->m_cApprValue = pOriginal->m_cApprValue;
	pCopy->m_cSpeed = pOriginal->m_cSpeed;
	pCopy->m_wPrice = pOriginal->m_wPrice;
	pCopy->m_wWeight = pOriginal->m_wWeight;
	pCopy->m_sLevelLimit = pOriginal->m_sLevelLimit;
	pCopy->m_cGenderLimit = pOriginal->m_cGenderLimit;
	pCopy->m_sRelatedSkill = pOriginal->m_sRelatedSkill;
	pCopy->m_cCategory = pOriginal->m_cCategory;
	pCopy->m_bIsForSale = pOriginal->m_bIsForSale;
	pCopy->m_dwCount = pOriginal->m_dwCount;
	pCopy->m_sTouchEffectType = pOriginal->m_sTouchEffectType;
	pCopy->m_sTouchEffectValue1 = pOriginal->m_sTouchEffectValue1;
	pCopy->m_sTouchEffectValue2 = pOriginal->m_sTouchEffectValue2;
	pCopy->m_sTouchEffectValue3 = pOriginal->m_sTouchEffectValue3;
	pCopy->m_cItemColor = pOriginal->m_cItemColor;
	pCopy->m_sItemSpecEffectValue1 = pOriginal->m_sItemSpecEffectValue1;
	pCopy->m_sItemSpecEffectValue2 = pOriginal->m_sItemSpecEffectValue2;
	pCopy->m_sItemSpecEffectValue3 = pOriginal->m_sItemSpecEffectValue3;
	pCopy->m_wCurLifeSpan = pOriginal->m_wCurLifeSpan;
	pCopy->m_dwAttribute = pOriginal->m_dwAttribute;
	return true;
}

void CGame::AdminOrder_SummonStorm(int iClientH, char* pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256], cOwnerType;
	int i;
	CStrTok * pStrTok;
	short sOwnerH;
	short sType;
	short sX;
	short sY;
	int dX1;
	int dY1;
	int iWhetherBonus;
	int iResult = 0, tX, tY, iErr, ix, iy;
	int iStormCount;
	int iMagicAttr;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_bIsAdminCommandEnabled == false) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelStorm) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	//No Storm Specified
	if (token == 0) {
		delete pStrTok;
		return;
	}
	sType = atoi(token);
	//Only 100 Magic Spells
	if (sType <= 0) sType = 1;
	if (sType > 100) sType = 100;
	//No Count Specified
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	iStormCount = atoi(token);
	if (iStormCount < 0)
		iStormCount = 0;
	if (iStormCount > 30)
		iStormCount = 30; //Original : 30
	try {
		//Whether Bouns
		iWhetherBonus = iGetWhetherMagicBonusEffect(sType, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cWhetherStatus);
		//Magic Attribute
		iMagicAttr = m_pMagicConfigList[sType]->m_iAttribute;
		//Calculate Area Coords
		//Gives Right
		dX1 = m_pClientList[iClientH]->m_sX;
		dX1 -= 10;
		//Gives Top
		dY1 = m_pClientList[iClientH]->m_sY;
		dY1 -= 7;
		while (iStormCount != 0) {
			int randX;
			int randY;
			randX = (rand() % 20) + dX1;
			randY = (rand() % 13) + dY1;
			switch (m_pMagicConfigList[sType]->m_sType) {
				case DEF_MAGICTYPE_DAMAGE_SPOT:
					//Calculate Damage
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, randX, randY);
					Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, randX, randY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, false, iMagicAttr);
					}
					//Show effects
					SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_MAGIC, m_pClientList[iClientH]->m_cMapIndex,
							  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, randX, randY, (sType + 100), m_pClientList[iClientH]->m_sType);
					break;
				case DEF_MAGICTYPE_DAMAGE_LINEAR:
					sX = m_pClientList[iClientH]->m_sX;
					sY = m_pClientList[iClientH]->m_sY;
					for (i = 2; i < 10; i++) {
						iErr = 0;
						m_Misc.GetPoint2(sX, sY, randX, randY, &tX, &tY, &iErr, i);
						// tx, ty
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
						// tx-1, ty
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX - 1, tY);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX - 1, tY);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
						// tx+1, ty
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX + 1, tY);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX + 1, tY);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
						// tx, ty-1
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY - 1);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY - 1);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
						// tx, ty+1
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY + 1);
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, tX, tY + 1);
						if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
								  (m_pClientList[sOwnerH]->m_iHP > 0)) {
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
						}
						if ((abs(tX - randX) <= 1) && (abs(tY - randY) <= 1)) break;
					}
					for (iy = randY - m_pMagicConfigList[sType]->m_sValue3; iy <= randY + m_pMagicConfigList[sType]->m_sValue3; iy++)
						for (ix = randX - m_pMagicConfigList[sType]->m_sValue2; ix <= randX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
							m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
							if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
									  (m_pClientList[sOwnerH]->m_iHP > 0)) {
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
									Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							}
						}
					// dX, dY
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, randX, randY);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, false, iMagicAttr); // v1.41 false
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, randX, randY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, false, iMagicAttr); // v1.41 false
					}
					//Show effects
					SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_MAGIC, m_pClientList[iClientH]->m_cMapIndex,
							  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, randX, randY, (sType + 100), m_pClientList[iClientH]->m_sType);
					break;
				case DEF_MAGICTYPE_DAMAGE_AREA:
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, randX, randY);
					if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
						Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, false, iMagicAttr);
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, randX, randY);
					if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
							  (m_pClientList[sOwnerH]->m_iHP > 0)) {
						if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
							Effect_Damage_Spot(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, m_pMagicConfigList[sType]->m_sValue4, m_pMagicConfigList[sType]->m_sValue5, m_pMagicConfigList[sType]->m_sValue6 + iWhetherBonus, false, iMagicAttr);
					}
					for (iy = randY - m_pMagicConfigList[sType]->m_sValue3; iy <= randY + m_pMagicConfigList[sType]->m_sValue3; iy++)
						for (ix = randX - m_pMagicConfigList[sType]->m_sValue2; ix <= randX + m_pMagicConfigList[sType]->m_sValue2; ix++) {
							m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
							if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
								Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, randX, randY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetDeadOwner(&sOwnerH, &cOwnerType, ix, iy);
							if ((cOwnerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sOwnerH] != 0) &&
									  (m_pClientList[sOwnerH]->m_iHP > 0)) {
								if (bCheckResistingMagicSuccess(m_pClientList[iClientH]->m_cDir, sOwnerH, cOwnerType, iResult) == false)
									Effect_Damage_Spot_DamageMove(iClientH, DEF_OWNERTYPE_PLAYER, sOwnerH, cOwnerType, randX, randY, m_pMagicConfigList[sType]->m_sValue7, m_pMagicConfigList[sType]->m_sValue8, m_pMagicConfigList[sType]->m_sValue9 + iWhetherBonus, false, iMagicAttr);
							}
						}
					//Show effects
					SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_MAGIC, m_pClientList[iClientH]->m_cMapIndex,
							  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, randX, randY, (sType + 100), m_pClientList[iClientH]->m_sType);
					break;
				default:
					goto Skip_Storm;
			}
			Sleep(rand() % 10);
			iStormCount--;
		}
	} catch (...) {
	}
Skip_Storm:
	delete pStrTok;
}

void CGame::SendMsg(short sOwnerH, char /*cOwnerType*/, bool /*bStatus*/, long lPass) {
	if (m_pClientList[sOwnerH] == 0) return;
	//SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_LEVELUP, 0, 0, 0, 0);
	SendNotifyMsg(0, sOwnerH, lPass, 0, 0, 0, 0);
}

void CGame::AdminOrder_Weather(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	char cPrevMode;
	int i;
	int j;
	int sType;
	int sTime;
	uint32_t dwTime;
	dwTime = timeGetTime();
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelWeather) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	sType = atoi(token);
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	sTime = atoi(token);
	delete pStrTok;
	for (i = 0; i < DEF_MAXMAPS; i++) {
		if ((m_pMapList[i] != 0) && (m_pMapList[i]->m_bIsFixedDayMode == false)) {
			cPrevMode = m_pMapList[i]->m_cWhetherStatus;
			if (m_pMapList[i]->m_cWhetherStatus != 0) {
				if ((dwTime - m_pMapList[i]->m_dwWhetherStartTime) > m_pMapList[i]->m_dwWhetherLastTime)
					m_pMapList[i]->m_cWhetherStatus = 0;
			} else {
				sTime *= 1000;
				m_pMapList[i]->m_cWhetherStatus = sType;
				m_pMapList[i]->m_dwWhetherStartTime = dwTime;
				m_pMapList[i]->m_dwWhetherLastTime = sTime;
			}
			if (cPrevMode != m_pMapList[i]->m_cWhetherStatus) {
				for (j = 1; j < DEF_MAXCLIENTS; j++)
					if ((m_pClientList[j] != 0) && (m_pClientList[j]->m_bIsInitComplete == true) && (m_pClientList[j]->m_cMapIndex == i))
						SendNotifyMsg(0, j, DEF_NOTIFY_WHETHERCHANGE, m_pMapList[i]->m_cWhetherStatus, 0, 0, 0);
			}
		}
	}
}

void CGame::RequestChangePlayMode(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iPKCount > 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (memcmp(m_pClientList[iClientH]->m_cMapName, "cityhall", 8) != 0) return;
	if (m_pClientList[iClientH]->m_iLevel < 100 ||
			  m_pClientList[iClientH]->m_bIsPlayerCivil == true) {
		if (memcmp(m_pClientList[iClientH]->m_cLocation, "aresden", 7) == 0) strcpy(m_pClientList[iClientH]->m_cLocation, "arehunter");
		else if (memcmp(m_pClientList[iClientH]->m_cLocation, "elvine", 6) == 0) strcpy(m_pClientList[iClientH]->m_cLocation, "elvhunter");
		else if (memcmp(m_pClientList[iClientH]->m_cLocation, "arehunter", 9) == 0) strcpy(m_pClientList[iClientH]->m_cLocation, "aresden");
		else if (memcmp(m_pClientList[iClientH]->m_cLocation, "elvhunter", 9) == 0) strcpy(m_pClientList[iClientH]->m_cLocation, "elvine");
		if (m_pClientList[iClientH]->m_bIsPlayerCivil == true)
			m_pClientList[iClientH]->m_bIsPlayerCivil = false;
		else m_pClientList[iClientH]->m_bIsPlayerCivil = true;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CHANGEPLAYMODE, 0, 0, 0, m_pClientList[iClientH]->m_cLocation);
		SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, 100, 0, 0, 0);
	}
}

void CGame::AdminOrder_SetStatus(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSetStatus) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	pStrTok->pGet();
	if (token != 0) {
		if (token[0] == '0') {
			SetPoisonFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
			SetIllusionFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
			SetDefenseShieldFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
			SetMagicProtectionFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
			SetProtectionFromArrowFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
			SetIllusionMovementFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
			SetInhibitionCastingFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
			SetHeroFlag(iClientH, DEF_OWNERTYPE_PLAYER, false);
		}
		if (token[0] == '1') {
			SetPoisonFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
		}
		if (token[0] == '2') {
			SetIllusionFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
		}
		if (token[0] == '3') {
			SetDefenseShieldFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
		}
		if (token[0] == '4') {
			SetMagicProtectionFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
		}
		if (token[0] == '5') {
			SetProtectionFromArrowFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
		}
		if (token[0] == '6') {
			SetIllusionMovementFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
		}
		if (token[0] == '7') {
			SetInhibitionCastingFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
		}
		if (token[0] == '8') {
			SetHeroFlag(iClientH, DEF_OWNERTYPE_PLAYER, true);
		}
	}
	delete pStrTok;
}

/*********************************************************************************************************************
 **  void CGame::SetInvisibilityFlag(short sOwnerH, char cOwnerType, bool bStatus)									**
 **  description			:: changes the status of the player to show invisibility aura								**
 **  last updated		:: November 20, 2004; 9:30 PM; Hypnotoad													**
 **	return value		:: void																						**
 *********************************************************************************************************************/
void CGame::SetInvisibilityFlag(short sOwnerH, char cOwnerType, bool bStatus) {
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x00000010;
			else m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xFFFFFFEF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus | 0x00000010;
			else m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus & 0xFFFFFFEF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
	}
}

/*********************************************************************************************************************
 **  void CGame::SetInhibitionCastingFlag(short sOwnerH, char cOwnerType, bool bStatus)								**
 **  description			:: changes the status of the player to show inhibit casting aura							**
 **  last updated		:: November 20, 2004; 9:33 PM; Hypnotoad													**
 **	return value		:: void																						**
 *********************************************************************************************************************/
void CGame::SetInhibitionCastingFlag(short sOwnerH, char cOwnerType, bool bStatus) {
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x00100000;
			else m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xFFEFFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus | 0x00100000;
			else m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus & 0xFFEFFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
	}
}

/*********************************************************************************************************************
 **  void void CGame::SetBerserkFlag(short sOwnerH, char cOwnerType, bool bStatus)									**
 **  description			:: changes the status of the player to show berserk aura									**
 **  last updated		:: November 20, 2004; 9:35 PM; Hypnotoad													**
 **	return value		:: void																						**
 *********************************************************************************************************************/
void CGame::SetBerserkFlag(short sOwnerH, char cOwnerType, bool bStatus) {
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x00000020;
			else m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xFFFFFFDF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus | 0x00000020;
			else m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus & 0xFFFFFFDF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
	}
}

/*********************************************************************************************************************
 **  void void CGame::SetIceFlag(short sOwnerH, char cOwnerType, bool bStatus)										**
 **  description			:: changes the status of the player to show frozen aura										**
 **  last updated		:: November 20, 2004; 9:35 PM; Hypnotoad													**
 **	return value		:: void																						**
 *********************************************************************************************************************/
void CGame::SetIceFlag(short sOwnerH, char cOwnerType, bool bStatus) {
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x00000040;
			else m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xFFFFFFBF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus | 0x00000040;
			else m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus & 0xFFFFFFBF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
	}
}

/*********************************************************************************************************************
 **  void void CGame::SetPoisonFlag(short sOwnerH, char cOwnerType, bool bStatus)									**
 **  description			:: changes the status of the player to show poison aura										**
 **  last updated		:: November 20, 2004; 9:36 PM; Hypnotoad													**
 **	return value		:: void																						**
 *********************************************************************************************************************/
void CGame::SetPoisonFlag(short sOwnerH, char cOwnerType, bool bStatus) {
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x00000080;
			else m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xFFFFFF7F;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus | 0x00000080;
			else m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus & 0xFFFFFF7F;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
	}
}

/*********************************************************************************************************************
 **  void void CGame::SetIllusionFlag(short sOwnerH, char cOwnerType, bool bStatus)									**
 **  description			:: changes the status of the player to show illusion aura									**
 **  last updated		:: November 20, 2004; 9:36 PM; Hypnotoad													**
 **	return value		:: void																						**
 *********************************************************************************************************************/
void CGame::SetIllusionFlag(short sOwnerH, char cOwnerType, bool bStatus) {
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x01000000;
			else m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xFEFFFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus | 0x01000000;
			else m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus & 0xFEFFFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
	}
}

/*********************************************************************************************************************
 **  void void CGame::SetHeroFlag(short sOwnerH, char cOwnerType, bool bStatus)										**
 **  description			:: changes the status of the player to show hero item aura									**
 **  last updated		:: November 20, 2004; 9:37 PM; Hypnotoad													**
 **	return value		:: void																						**
 *********************************************************************************************************************/
void CGame::SetHeroFlag(short sOwnerH, char cOwnerType, bool bStatus) {
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x00020000;
			else m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xFFFDFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus | 0x00020000;
			else m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus & 0xFFFDFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
	}
}

/*********************************************************************************************************************
 **  void void CGame::SetDefenseShieldFlag(short sOwnerH, char cOwnerType, bool bStatus)								**
 **  description			:: changes the status of the player to show defense aura									**
 **  last updated		:: November 20, 2004; 9:37 PM; Hypnotoad													**
 **	return value		:: void																						**
 *********************************************************************************************************************/
void CGame::SetDefenseShieldFlag(short sOwnerH, char cOwnerType, bool bStatus) {
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x02000000;
			else m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xFDFFFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus | 0x02000000;
			else m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus & 0xFDFFFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
	}
}

/*********************************************************************************************************************
 **  void void CGame::SetMagicProtectionFlag(short sOwnerH, char cOwnerType, bool bStatus)							**
 **  description			:: changes the status of the player to show magic protect aura								**
 **  last updated		:: November 20, 2004; 9:38 PM; Hypnotoad													**
 **	return value		:: void																						**
 *********************************************************************************************************************/
void CGame::SetMagicProtectionFlag(short sOwnerH, char cOwnerType, bool bStatus) {
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x04000000;
			else m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xFBFFFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus | 0x04000000;
			else m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus & 0xFBFFFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
	}
}

/*********************************************************************************************************************
 **  void void CGame::SetProtectionFromArrowFlag(short sOwnerH, char cOwnerType, bool bStatus)						**
 **  description			:: changes the status of the player to show arrow protect aura								**
 **  last updated		:: November 20, 2004; 9:39 PM; Hypnotoad													**
 **	return value		:: void																						**
 *********************************************************************************************************************/
void CGame::SetProtectionFromArrowFlag(short sOwnerH, char cOwnerType, bool bStatus) {
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x08000000;
			else m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xF7FFFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus | 0x08000000;
			else m_pNpcList[sOwnerH]->m_iStatus = m_pNpcList[sOwnerH]->m_iStatus & 0xF7FFFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
	}
}

/*********************************************************************************************************************
 **  void void CGame::SetIllusionMovementFlag(short sOwnerH, char cOwnerType, bool bStatus)							**
 **  description			:: changes the status of the player to show illusion movement aura							**
 **  last updated		:: November 20, 2004; 9:39 PM; Hypnotoad													**
 **	return value		:: void																						**
 *********************************************************************************************************************/
void CGame::SetIllusionMovementFlag(short sOwnerH, char cOwnerType, bool bStatus) {
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sOwnerH] == 0) return;
			if (bStatus == true)
				m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x00200000;
			else m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xFFDFFFFF;
			SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
			break;
	}
}
// New 07/05/2004

void CGame::RequestGuildNameHandler(int iClientH, int iObjectID, int iIndex) {
	if (m_pClientList[iClientH] == 0) return;
	if ((iObjectID <= 0) || (iObjectID >= DEF_MAXCLIENTS)) return;
	if (m_pClientList[iObjectID] == 0) {
	} else {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_REQGUILDNAMEANSWER, m_pClientList[iObjectID]->m_iGuildRank, iIndex, 0, m_pClientList[iObjectID]->m_cGuildName);
	}
}
// Item Logging

bool CGame::_bItemLog(int iAction, int iGiveH, int iRecvH, CItem * pItem, bool /*bForceItemLog*/) {
	char cTxt[1024], cTemp1[120], cTemp2[120];
	int iItemCount;
	if (pItem == 0) return false;
	if (m_pClientList[iGiveH]->m_cCharName == 0) return false;
	if (iAction == DEF_ITEMLOG_DUPITEMID) {
		if (m_pClientList[iGiveH] == 0) return false;
		if (m_pClientList[iGiveH]->m_cCharName == 0) return false;
		wsprintf(G_cTxt, "(!) Delete-DupItem(%s %d %d %d %d) Owner(%s)", pItem->m_cName, pItem->m_dwCount, pItem->m_sTouchEffectValue1,
				  pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3,
				  m_pClientList[iGiveH]->m_cCharName);
		//	PutItemLogFileList(iGiveH,G_cTxt);
		bSendMsgToLS(MSGID_GAMEITEMLOG, iGiveH, 0, G_cTxt);
		return true;
	}
	std::memset(cTxt, 0, sizeof(cTxt));
	std::memset(cTemp1, 0, sizeof(cTemp1));
	std::memset(cTemp2, 0, sizeof(cTemp2));
	switch (iAction) {
		case DEF_ITEMLOG_EXCHANGE:
			if (m_pClientList[iRecvH]->m_cCharName == 0) return false;
			wsprintf(cTxt, "(%s) PC(%s)\tExchange\t%s(%d %d %d %d %x)\t%s(%d %d)\tPC(%s)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName, pItem->m_dwCount,
					  pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY, m_pClientList[iRecvH]->m_cCharName);
			break;
		case DEF_ITEMLOG_GIVE:
			if (m_pClientList[iRecvH]->m_cCharName == 0) return false;
			wsprintf(cTxt, "(%s) PC(%s)\tGive\t%s(%d %d %d %d %x)\t%s(%d %d)\tPC(%s)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName, pItem->m_dwCount,
					  pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY, m_pClientList[iRecvH]->m_cCharName);
			break;
		case DEF_ITEMLOG_DROP:
			wsprintf(cTxt, "(%s) PC(%s)\tDrop\t%s(%d %d %d %d %x)\t%s(%d %d)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName, pItem->m_dwCount,
					  pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY);
			break;
		case DEF_ITEMLOG_GET:
			wsprintf(cTxt, "(%s) PC(%s)\tGet\t%s(%d %d %d %d %x)\t%s(%d %d)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName, pItem->m_dwCount,
					  pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY);
			break;
		case DEF_ITEMLOG_MAKE:
			wsprintf(cTxt, "(%s) PC(%s)\tMake\t%s(%d %d %d %d %x)\t%s(%d %d)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName, pItem->m_dwCount,
					  pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY);
			break;
		case DEF_ITEMLOG_DEPLETE:
			wsprintf(cTxt, "(%s) PC(%s)\tDeplete\t%s(%d %d %d %d %x)\t%s(%d %d)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName, pItem->m_dwCount,
					  pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY);
			break;
		case DEF_ITEMLOG_BUY:
			iItemCount = iRecvH;
			wsprintf(cTxt, "(%s) PC(%s)\tBuy\t%s(%d %d %d %d %x)\t%s(%d %d)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName, iItemCount,
					  pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY);
			break;
		case DEF_ITEMLOG_SELL:
			wsprintf(cTxt, "(%s) PC(%s)\tSell\t%s(%d %d %d %d %x)\t%s(%d %d)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName, pItem->m_dwCount,
					  pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY);
			break;
		case DEF_ITEMLOG_RETRIEVE:
			wsprintf(cTxt, "(%s) PC(%s)\tRetrieve\t%s(%d %d %d %d %x)\t%s(%d %d)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName, pItem->m_dwCount,
					  pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY);
			break;
		case DEF_ITEMLOG_DEPOSIT:
			wsprintf(cTxt, "(%s) PC(%s)\tDeposit\t%s(%d %d %d %d %x)\t%s(%d %d)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName, pItem->m_dwCount,
					  pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY);
			break;
		case DEF_ITEMLOG_UPGRADEFAIL:
			wsprintf(cTxt, "(%s) PC(%s)\tUpgrade Fail\t%s(%d %d %d %d %x)\t%s(%d %d)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName,
					  pItem->m_dwCount, pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY);
			break;
		case DEF_ITEMLOG_UPGRADESUCCESS:
			wsprintf(cTxt, "(%s) PC(%s)\tUpgrade Success\t%s(%d %d %d %d %x)\t%s(%d %d)", m_pClientList[iGiveH]->m_cIPaddress, m_pClientList[iGiveH]->m_cCharName, pItem->m_cName,
					  pItem->m_dwCount, pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3, pItem->m_dwAttribute,
					  m_pClientList[iGiveH]->m_cMapName, m_pClientList[iGiveH]->m_sX, m_pClientList[iGiveH]->m_sY);
			break;
		default:
			return false;
	}
	bSendMsgToLS(MSGID_GAMEITEMLOG, iGiveH, 0, cTxt);
	return true;
}

bool CGame::_bItemLog(int iAction, int iClientH, char * cName, CItem * pItem) {
	if (pItem == 0) return false;
	if (_bCheckGoodItem(pItem) == false) return false;
	if (iAction != DEF_ITEMLOG_NEWGENDROP) {
		if (m_pClientList[iClientH] == 0) return false;
	}
	char cTxt[200], cTemp1[120];
	std::memset(cTxt, 0, sizeof(cTxt));
	std::memset(cTemp1, 0, sizeof(cTemp1));
	if (m_pClientList[iClientH] != 0) m_pClientList[iClientH]->m_pXSock->iGetPeerAddress(cTemp1);
	switch (iAction) {
		case DEF_ITEMLOG_NEWGENDROP:
			if (pItem == 0) return false;
			wsprintf(cTxt, "NPC(%s)\tDrop\t%s(%d %d %d %d)", cName, pItem->m_cName, pItem->m_dwCount,
					  pItem->m_sTouchEffectValue1, pItem->m_sTouchEffectValue2, pItem->m_sTouchEffectValue3);
			break;
		case DEF_ITEMLOG_SKILLLEARN:
		case DEF_ITEMLOG_MAGICLEARN:
			if (cName == 0) return false;
			if (m_pClientList[iClientH] == 0) return false;
			wsprintf(cTxt, "PC(%s)\tLearn\t(%s)\t%s(%d %d)\t \tIP(%s)", m_pClientList[iClientH]->m_cCharName, cName,
					  m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, cTemp1);
			break;
		case DEF_ITEMLOG_SUMMONMONSTER:
			if (cName == 0) return false;
			if (m_pClientList[iClientH] == 0) return false;
			wsprintf(cTxt, "PC(%s)\tSummon\t(%s)\t%s(%d %d)\t \tIP(%s)", m_pClientList[iClientH]->m_cCharName, cName,
					  m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, cTemp1);
			break;
		case DEF_ITEMLOG_POISONED:
			if (m_pClientList[iClientH] == 0) return false;
			wsprintf(cTxt, "PC(%s)\tBe Poisoned\t \t%s(%d %d)\t \tIP(%s)", m_pClientList[iClientH]->m_cCharName,
					  m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, cTemp1);
			break;
		case DEF_ITEMLOG_REPAIR:
			if (cName == 0) return false;
			if (m_pClientList[iClientH] == 0) return false;
			wsprintf(cTxt, "PC(%s)\tRepair\t(%s)\t%s(%d %d)\t \tIP(%s)", m_pClientList[iClientH]->m_cCharName, cName,
					  m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, cTemp1);
			break;
		default:
			return false;
	}
	bSendMsgToLS(MSGID_GAMEITEMLOG, iClientH, 0, cTxt);
	return true;
}

bool CGame::_bCheckGoodItem(CItem * pItem) {
	if (pItem == 0) return false;
	if (pItem->m_sIDnum == ItemId::gold) {
		if (pItem->m_dwCount > 10000) return true;
		else return false;
	}
	switch (pItem->m_sIDnum) {
		case ItemId::magic_wand_mshield:
		case ItemId::flameberge_plus_3_llf:
		case ItemId::magic_wand_m_s30_llf:
		case ItemId::golden_axe_llf:
		case ItemId::magic_necklace_rm10:
		case ItemId::magic_necklace_dm1:
		case ItemId::magic_necklace_ms10:
		case ItemId::magic_necklace_df10:
		case ItemId::lucky_gold_ring:
		case ItemId::emerald_ring:
		case ItemId::sapphire_ring:
		case ItemId::memorial_ring:
		case ItemId::ice_storm_manual:
		case ItemId::mass_fire_strike_manual:
		case ItemId::bloody_shock_w_manual:
		case ItemId::super_pg_potion:
		case ItemId::aresden_hero_cape:
		case ItemId::elvine_hero_cape:
		case ItemId::blood_sword:
		case ItemId::blood_axe:
		case ItemId::blood_rapier:
		case ItemId::mithral:
		case ItemId::battle_axe_plus_2:
		case ItemId::xelima_blade:
		case ItemId::xelima_axe:
		case ItemId::xelima_rapier:
		case ItemId::sword_of_medusa:
		case ItemId::sword_of_ice_elemental:
		case ItemId::demon_slayer:
		case ItemId::dark_elf_bow:
		case ItemId::merien_shield:
		case ItemId::merien_plate_mail_m:
		case ItemId::merien_plate_mail_w:
		case ItemId::gm_shield:
		case ItemId::ringofthe_xelima:
		case ItemId::ringofthe_abaddon:
		case ItemId::ringof_ogrepower:
		case ItemId::ringof_demonpower:
		case ItemId::ringof_wizard:
		case ItemId::ringof_mage:
		case ItemId::ringof_grand_mage:
		case ItemId::knecklace_of_light_pro:
		case ItemId::knecklace_of_fire_pro:
		case ItemId::knecklace_of_poison_pro:
		case ItemId::knecklace_of_sufferent:
		case ItemId::knecklace_of_medusa:
		case ItemId::knecklace_of_ice_pro:
		case ItemId::knecklace_of_ice_ele:
		case ItemId::knecklace_of_air_ele:
		case ItemId::knecklace_of_efreet:
		case ItemId::necklace_of_beholder:
		case ItemId::necklace_of_stone_golem:
		case ItemId::zemstoneof_sacrifice:
		case ItemId::blue_ball:
		case ItemId::pearl_ball:
		case ItemId::stone_of_xelima:
		case ItemId::stone_of_merien:
		case ItemId::sang_ah_hauberk:
		case ItemId::sang_ah_full_hel:
		case ItemId::sang_ah_leggings:
		case ItemId::sang_ah_flameberge:
		case ItemId::sang_ah_plate_mail:
		case ItemId::sang_ah_jewel:
		case ItemId::dark_knight_hauberk:
		case ItemId::dark_knight_full_helm:
		case ItemId::dark_knight_leggings:
		case ItemId::dark_knight_flameberge:
		case ItemId::dark_knight_plate_mail:
		case ItemId::dark_mage_hauberk:
		case ItemId::dark_mage_chain_mail:
		case ItemId::dark_mage_leggings:
		case ItemId::dark_mage_magic_staff:
		case ItemId::dark_mage_robe:
		case ItemId::songpyon:
		case ItemId::ginseng:
		case ItemId::beef_rib_set:
		case ItemId::wine:
		case ItemId::dark_knight_hauberk_w:
		case ItemId::dark_knight_full_helm_w:
		case ItemId::dark_knight_leggings_w:
		case ItemId::dark_knight_flameberg_w:
		case ItemId::dark_knight_plate_mail_w:
		case ItemId::dark_mage_hauberk_w:
		case ItemId::dark_mage_chain_mail_w:
		case ItemId::dark_mage_leggings_w:
		case ItemId::dark_mage_magic_staff_w:
		case ItemId::dark_mage_robe_w:
		case ItemId::ring_of_arcmage:
		case ItemId::ring_of_dragonpower:
		case ItemId::sang_ah_giant_sword:
		case ItemId::dark_knight_giant_sword:
		case ItemId::dark_mage_magic_wand:
			return true;
			break;
		default:
			if ((pItem->m_dwAttribute & 0xF0F0F001) == 0) return false;
			else if (pItem->m_sIDnum > ItemId::falchion_plus_2) return true;
			else return false;
	}
}

/*void CGame::GetExp(int iClientH, int iExp, bool bIsAttackerOwn)
{
 double dV1;
 double dV2;
 double dV3;
 int i;
 int iH;
 int iUnitValue;
 uint32_t dwTime = timeGetTime();
	if (m_pClientList[iClientH] == 0) return;
	if (iExp <= 0) return;
	if (m_pClientList[iClientH]->m_iLevel <= 80) {
		dV1 = (double)(80 - m_pClientList[iClientH]->m_iLevel);
		dV2 = dV1 * 0.025f;
		dV3 = (double)iExp;
		dV1 = (dV2 + 1.025f)*dV3;
		iExp = (int)dV1;
	}
	else { //Lower exp
		if ((m_pClientList[iClientH]->m_iLevel >= 100) &&((strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "arefarm") == 0)
		|| (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "elvfarm") == 0))) {
			iExp = (iExp/10) ;
	}
	else if ((strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "arefarm") == 0)
		|| (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "elvfarm") == 0)) {
			iExp = (iExp*1/4) ;
	}
	if ((m_pClientList[iClientH]->m_iPartyID != 0) && (m_pClientList[iClientH]->m_iPartyStatus == DEF_PARTYSTATUS_CONFIRM) &&
		((dwTime - m_pClientList[iClientH]->m_dwLastActionTime) < 1000*60*5)) {
		if ((iExp >= m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers) && (m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers > 0)) {
			dV1 = (double)m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers;
			dV2 = 2.5f * dV1;
			dV3 = (double)iExp;
			dV1 = ((dV2/100.0f) * dV3) +0.5f;
			iExp += (int)dV1;
			dV1 = (double)iExp;
			if (m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers <= 0)
				 dV2 = 1.0f;
			else dV2 = (double)m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers;
			dV3 = (dV1 / dV2) + 0.5f;
			iUnitValue = (int)dV3;
			for (i = 0; i < m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers; i++) {
				iH = m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i];
			if (m_pClientList[iH]->m_iLevel >= 1 && m_pClientList[iH]->m_iLevel < 20)
				iUnitValue *= (int)3.5;
			else if (m_pClientList[iH]->m_iLevel >= 20 && m_pClientList[iH]->m_iLevel < 121)
				iUnitValue *= 3;
			else if (m_pClientList[iH]->m_iLevel >= 120 && m_pClientList[iH]->m_iLevel < 161)
				iUnitValue *= 2;
			else if (m_pClientList[iH]->m_iLevel >= 160 && m_pClientList[iH]->m_iLevel < 180)
				iUnitValue *= (int)1.5;
			if((m_pClientList[iH]->m_iStatus & 0x10000) != 0)
				iUnitValue *= 3;
			if ((m_pClientList[iH] != 0) && (m_pClientList[iH]->m_iHP > 0)) m_pClientList[iH]->m_iExpStock += iUnitValue;
			}
				if ((bIsAttackerOwn == true) && (iTotalPartyMembers > 1))
					m_pClientList[iClientH]->m_iExpStock += (iUnitValue/10);
		}
	} // if
	if (m_pClientList[iClientH]->m_iLevel >= 1 && m_pClientList[iClientH]->m_iLevel < 20)
		iExp *= (int)3.5;
	else if (m_pClientList[iClientH]->m_iLevel >= 20 && m_pClientList[iClientH]->m_iLevel < 121)
		iExp *= 3;
	else if (m_pClientList[iClientH]->m_iLevel > 120 && m_pClientList[iClientH]->m_iLevel < 161)
		iExp *= 2;
	else if (m_pClientList[iClientH]->m_iLevel > 160 && m_pClientList[iClientH]->m_iLevel < 180)
		iExp *= (int)1.5;
	if ((m_pClientList[iClientH]->m_iStatus & 0x10000) != 0)
			iExp *= 3;
	else m_pClientList[iClientH]->m_iExpStock += iExp;
	}
}*/
void CGame::GetExp(int iClientH, int iExp, bool /*bIsAttackerOwn*/) {
	double dV1;
	double dV2;
	double dV3;
	int i;
	int iH;
	int iUnitValue;
	int iTotalPartyMembers;
	if (m_pClientList[iClientH] == 0) return;
	if (iExp <= 0) return;
	/*if (m_pClientList[iClientH]->m_iLevel <= 80) {
		dV1 = (double) (80 - m_pClientList[iClientH]->m_iLevel);
		dV2 = dV1 * 0.025f + 1.025f;
		dV3 = (double) iExp;
		dV1 = dV2 * dV3;
		iExp = (int) dV1;
	} else { //Lower exp
		if ((m_pClientList[iClientH]->m_iLevel >= 100) &&((strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "aresden") == 0)
				  || (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "elvine") == 0))) {
			//iExp = (iExp / 64);
		} else if ((strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "aresden") == 0)
				  || (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "elvine") == 0)) {
			//iExp = (iExp / 64);
		}
	}*/
	//Check for party status, else give exp to player
	//if ((m_pClientList[iClientH]->m_iPartyID != 0) && (m_pClientList[iClientH]->m_iPartyStatus == DEF_PARTYSTATUS_CONFIRM) &&
	//	((dwTime - m_pClientList[iClientH]->m_dwLastActionTime) < 1000*60*5)) {
	if ((m_pClientList[iClientH]->m_iPartyID != 0) && (m_pClientList[iClientH]->m_iPartyStatus == DEF_PARTYSTATUS_CONFIRM)) {
		//Only divide exp if > 1 person and exp > 10
		if (iExp >= 10 && m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers > 0) {
			//Calc total ppl in party
			iTotalPartyMembers = 0;
			for (i = 0; i < m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers; i++) {
				iH = m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i];
				if ((m_pClientList[iH] != 0) && (m_pClientList[iH]->m_iHP > 0)) {
					//Newly added, Only players on same map get exp :}
					//if(m_pClientList[iH]->m_cMapIndex == m_pClientList[iClientH]->m_cMapIndex)
					if ((strlen(m_pMapList[m_pClientList[iH]->m_cMapIndex]->m_cName)) == (strlen(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName))) {
						if (memcmp(m_pMapList[m_pClientList[iH]->m_cMapIndex]->m_cName,
								  m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName,
								  strlen(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName)) == 0) {
							iTotalPartyMembers++;
						}
					}
				}
			}
			//Check for party bug
			if (iTotalPartyMembers > 8) {
				wsprintf(G_cTxt, "(X) Party Bug !! partyMember %d XXXXXXXXXX", iTotalPartyMembers);
				PutLogFileList(G_cTxt);
				iTotalPartyMembers = 8;
			}
			//Figure out how much exp a player gets
			dV1 = (double) iExp;
			switch (iTotalPartyMembers) {
				case 1:
					dV2 = dV1;
					break;
				case 2:
					dV2 = (dV1 + (dV1 * 2.0e-2)) / 2.0;
					break;
				case 3:
					dV2 = (dV1 + (dV1 * 5.0e-2)) / 3.0;
					break;
				case 4:
					dV2 = (dV1 + (dV1 * 7.000000000000001e-2)) / 4.0;
					break;
				case 5:
					dV2 = (dV1 + (dV1 * 1.0e-1)) / 5.0;
					break;
				case 6:
					dV2 = (dV1 + (dV1 * 1.4e-1)) / 6.0;
					break;
				case 7:
					dV2 = (dV1 + (dV1 * 1.7e-1)) / 7.0;
					break;
				case 8:
					dV2 = (dV1 + (dV1 * 2.0e-1)) / 8.0;
					break;
			}
			dV3 = dV2 + 5.0e-1;
			iUnitValue = (int) dV3;
			//Divide exp among party members
			for (i = 0; i < iTotalPartyMembers; i++) {
				iH = m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i];
				//Player who kills monster gets more exp
				if ((m_pClientList[iH] != 0) && (m_pClientList[iH]->m_bSkillUsingStatus[19] != 1) && (m_pClientList[iH]->m_iHP > 0)) { // Is player alive ??
					//Exp gain based on lvl
					if ((m_pClientList[iH]->m_iStatus & 0x10000) != 0)
						iUnitValue *= 3;
					m_pClientList[iH]->m_iExpStock += (iUnitValue);
					iUnitValue = (int) dV3;
				}
			}
		} else {
			if ((m_pClientList[iClientH]->m_iStatus & 0x10000) != 0)
				iExp *= 3;
			m_pClientList[iClientH]->m_iExpStock += (iExp);
		}
	} else {
		if ((m_pClientList[iClientH]->m_iStatus & 0x10000) != 0)
			iExp *= 3;
		//Add exp to player
		m_pClientList[iClientH]->m_iExpStock += (iExp);
	}
}

/*
void CGame::GetExp(int iClientH, int iExp, bool bIsAttackerOwn)
{
	double dV1;
	double dV2;
	double dV3;
	int i;
	int iH;
	int iUnitValue;
	uint32_t dwTime = timeGetTime();
	if (m_pClientList[iClientH] == 0) return;
	if (iExp <= 0) return;
	if (m_pClientList[iClientH]->m_iLevel <= 80) {
		dV1 = (double)(80 - m_pClientList[iClientH]->m_iLevel);
		dV2 = dV1 * 0.025f;
		dV3 = (double)iExp;
		dV1 = (dV2 + 1.025f)*dV3;
		iExp = (int)dV1;
	}
	else {
		if ((m_pClientList[iClientH]->m_iLevel >= 100) &&((strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "arefarm") == 0)
			|| (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "elvfarm") == 0))) {
				iExp = (iExp/10) ;
			}
		else if ((strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "arefarm") == 0)
			|| (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "elvfarm") == 0)) {
				iExp = (iExp*1/4) ;
			}
	}
	if ((m_pClientList[iClientH]->m_iPartyID != 0) && (m_pClientList[iClientH]->m_iPartyStatus == DEF_PARTYSTATUS_CONFIRM) &&
		((dwTime - m_pClientList[iClientH]->m_dwLastActionTime) < 1000*60*5)) {
			if ((iExp >= m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers) && (m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers > 0)) {
				dV1 = (double)m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers;
				dV2 = 2.5f * dV1;
				dV3 = (double)iExp;
				dV1 = ((dV2/100.0f) * dV3) +0.5f;
				iExp += (int)dV1;
				dV1 = (double)iExp;
				if (m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers <= 0)
					dV2 = 1.0f;
				else dV2 = (double)m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers;
				dV3 = (dV1 / dV2) + 0.5f;
				iUnitValue = (int)dV3;
#if defined(DEF_TESTSERVER)
				iUnitValue = iUnitValue * 10;
#endif
				for (i = 0; i < m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers; i++) {
					iH = m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i];
					if ((m_pClientList[iH] != 0) && (m_pClientList[iH]->m_iHP > 0)) {
						char buff[1000];
						wsprintf(buff,"%s GetExp %d",m_pClientList[iH]->m_cCharName,iUnitValue);
						PutLogList(buff);
						m_pClientList[iH]->m_iExpStock += iUnitValue;
					}
				}
				if (bIsAttackerOwn == true) m_pClientList[iClientH]->m_iExpStock += (iUnitValue/10);
			}
#if defined(DEF_TESTSERVER)
			else m_pClientList[iClientH]->m_iExpStock += (iExp * 10);
#else
			else m_pClientList[iClientH]->m_iExpStock += iExp;
#endif
		} // if
#if defined(DEF_TESTSERVER)
	else m_pClientList[iClientH]->m_iExpStock += (iExp * 10);
#else
	else m_pClientList[iClientH]->m_iExpStock += iExp;
#endif
}*/
bool CGame::bCheckAndConvertPlusWeaponItem(int iClientH, int iItemIndex) {
	if (m_pClientList[iClientH] == 0) return false;
	if (m_pClientList[iClientH]->m_pItemList[iItemIndex] == 0) return false;
	switch (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum) {
		case ItemId::dagger_plus_1: // Dagger +1
		case ItemId::short_sword_plus_1: // Short Sword +1
		case ItemId::main_gauche_plus_1: // Main Gauge +1
		case ItemId::gradius_plus_1: // Gradius +1
		case ItemId::long_sword_plus_1: // Long Sword +1
		case ItemId::long_sword_plus_2: // Long Sword +2
			//case ItemId::21: // Excaliber +1
		case ItemId::sabre_plus_1: // Sabre +1
		case ItemId::scimitar_plus_1: // Scimitar +1
		case ItemId::scimitar_plus_2: // Scimitar +2
		case ItemId::falchion_plus_1: // Falchoin +1
		case ItemId::falchion_plus_2: // Falchion +2
		case ItemId::esterk_plus_1: // Esterk +1
		case ItemId::esterk_plus_2: // Esterk +2
		case ItemId::rapier_plus_1: // Rapier +1
		case ItemId::rapier_plus_2: // Rapier +2
		case ItemId::broad_sword_plus_1: // Broad Sword +1
		case ItemId::broad_sword_plus_2: // Broad Sword +2
		case ItemId::bastad_sword_plus_1: // Bastad Sword +1
		case ItemId::bastad_sword_plus_2: // Bastad Sword +2
		case ItemId::claymore_plus_1: // Claymore +1
		case ItemId::claymore_plus_2: // Claymore +2
		case ItemId::great_sword_plus_1: // Great Sword +1
		case ItemId::great_sword_plus_2: // Great Sword +2
		case ItemId::flameberge_plus_1: // Flameberge +1
		case ItemId::flameberge_plus_2: // Flameberge +2
		case ItemId::light_axe_plus_1: // Light Axe +1
		case ItemId::light_axe_plus_2: // Light Axe +2
		case ItemId::tomahoc_plus_1: // Tomahoc +1
		case ItemId::tomahoc_plus_2: // Tomohoc +2
		case ItemId::sexon_axe_plus_1: // Sexon Axe +1
		case ItemId::sexon_axe_plus_2: // Sexon Axe +2
		case ItemId::double_axe_plus_1: // Double Axe +1
		case ItemId::double_axe_plus_2: // Double Axe +2
		case ItemId::war_axe_plus_1: // War Axe +1
		case ItemId::war_axe_plus_2: // War Axe +2
		case ItemId::battle_axe_plus_1: // Battle Axe +1
		case ItemId::battle_axe_plus_2: // Battle Axe +2
		case ItemId::sabre_plus_2: // Sabre +2
			return true;
			break;
		default: break;
	}
	return false;
}

void CGame::ArmorLifeDecrement(int iAttackerH, int iTargetH, char cOwnerType, int /*iValue*/) {
	int iTemp;
	if (m_pClientList[iAttackerH] == 0) return;
	switch (cOwnerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[iTargetH] == 0) return;
			break;
		case DEF_OWNERTYPE_NPC: return;
		default: return;
	}
	if (m_pClientList[iAttackerH]->m_cSide == m_pClientList[iTargetH]->m_cSide) return;
	if (m_pClientList[iTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] != 0) return;
	switch (iDice(1, 13)) {
		case 1:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::body];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 380) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 50) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 2:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::pants];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 3:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::leggings];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 4:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::arms];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 5:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::head];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 6:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::head];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::leggings];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 7:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::leggings];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::pants];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 8:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::pants];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::arms];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 9:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::arms];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 10:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::arms];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::body];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 11:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::body];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::leggings];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 12:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::body];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
		case 13:
		{
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::body];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			iTemp = m_pClientList[iTargetH]->m_sItemEquipmentStatus[ItemEquipPos::pants];
			if ((iTemp != -1) && (m_pClientList[iTargetH]->m_pItemList[iTemp] != 0)) {
				if ((m_pClientList[iTargetH]->m_cSide != 0) && (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0)) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan -= 50;
					if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 250) {
						ReleaseItemHandler(iTargetH, iTemp, true);
						SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					}
				}
				if (m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan <= 0) {
					m_pClientList[iTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan = 0;
					SendNotifyMsg(0, iTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[iTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
					ReleaseItemHandler(iTargetH, iTemp, true);
				}
			}
			break;
		}
	}
}

void CGame::AdminOrder_GoTo(int iClientH, char* pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256], cPlayerName[11], cMapName[32];
	CStrTok * pStrTok;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelGoto) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cPlayerName, 0, sizeof(cPlayerName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	if (strlen(token) > 10) {
		memcpy(cPlayerName, token, 10);
	} else {
		memcpy(cPlayerName, token, strlen(token));
	}
	for (int i = 1; i < DEF_MAXCLIENTS; i++) {
		if (m_pClientList[i] != 0) {
			if (memcmp(cPlayerName, m_pClientList[i]->m_cCharName, 10) == 0) {
				if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) {
					if (m_pClientList[i]->m_sX == -1 && m_pClientList[i]->m_sX == -1) {
						wsprintf(cBuff, "GM Order(%s): GoTo MapName(%s)", m_pClientList[iClientH]->m_cCharName, m_pClientList[i]->m_cMapName);
					} else {
						wsprintf(cBuff, "GM Order(%s): GoTo MapName(%s)(%d %d)", m_pClientList[iClientH]->m_cCharName,
								  m_pClientList[i]->m_cMapName, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
					}
					bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, cBuff);
					std::memset(cMapName, 0, sizeof(cMapName));
					strcpy(cMapName, m_pClientList[i]->m_cMapName);
					RequestTeleportHandler(iClientH, "2   ", cMapName, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
				}
				delete pStrTok;
				return;
			}
		}
	}
	m_pClientList[iClientH]->m_bIsAdminOrderGoto = true;
	delete pStrTok;
}

void CGame::AdminOrder_MonsterCount(int iClientH, char* /*pData*/, uint32_t dwMsgSize) {
	int iMonsterCount;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelMonsterCount) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	iMonsterCount = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_iTotalAliveObject;
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_MONSTERCOUNT, iMonsterCount, 0, 0, 0);
}

void CGame::AdminOrder_SetForceRecallTime(int iClientH, char *pData, uint32_t dwMsgSize) {
	CStrTok * pStrTok;
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	int iTime;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSetRecallTime) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (token == 0)
			iTime = 0;
		else iTime = atoi(token);
		if (iTime < 0) iTime = 0;
		m_sForceRecallTime = iTime;
		wsprintf(G_cTxt, "(!) Game Server Force Recall Time (%d)min", m_sForceRecallTime);
		PutLogList(G_cTxt);
	}
	delete pStrTok;
	return;
}

void CGame::AdminOrder_UnsummonBoss(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelUnsummonBoss) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	for (int i = 1; i < DEF_MAXNPCS; i++) {
		if (m_pNpcList[i] != 0 && m_pNpcList[i]->m_bIsSummoned == false) {
			switch (m_pNpcList[i]->m_sType) {
				case NpcType::demon: //Demon
				case NpcType::hellclaw: //Hellclaw
				case NpcType::ghkabs: //GHKABS
				case NpcType::bg: //BG
				case NpcType::tigerworm: //Tigerworm
				case NpcType::gagoyle: //Gagoyle
				case NpcType::abaddon: //Abaddon
				case NpcType::wyvern: //Wyvern
				case NpcType::fire_wyvern: //Fire-Wyvern
					m_pNpcList[i]->m_bIsUnsummoned = true;
					NpcKilledHandler(iClientH, DEF_OWNERTYPE_PLAYER, i, 0);
					break;
				default: break;
			}
		}
	}
}

void CGame::AdminOrder_ClearNpc(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelClearNpc) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	for (int i = 1; i < DEF_MAXNPCS; i++) {
		if (m_pNpcList[i] != 0 && m_pNpcList[i]->m_bIsSummoned == false) {
			switch (m_pNpcList[i]->m_sType) {
				case NpcType::shop_keeper_w:
				case NpcType::gandlf:
				case NpcType::howard:
				case NpcType::tom:
				case NpcType::william:
				case NpcType::kennedy:
				case NpcType::mc_gaffin:
				case NpcType::perry:
				case NpcType::devlin:
				case NpcType::gail:
				case NpcType::gate:
					break;
				default:
					m_pNpcList[i]->m_bIsUnsummoned = true;
					NpcKilledHandler(iClientH, DEF_OWNERTYPE_PLAYER, i, 0);
					break;
			}
		}
	}
}
// New 12/05/2004

void CGame::RemoveCrusadeNpcs(void) {
	for (int i = 0; i < DEF_MAXNPCS; i++) {
		if (m_pNpcList[i] != 0) {
			if ((m_pNpcList[i]->m_sType >= NpcType::lwb && m_pNpcList[i]->m_sType <= NpcType::bg) || m_pNpcList[i]->m_sType == NpcType::cp) {
				NpcKilledHandler(0, 0, i, 0);
			}
		}
	}
}

void CGame::RemoveCrusadeRecallTime(void) {
	for (int i = 1; i < DEF_MAXCLIENTS; i++) {
		if (m_pClientList[i] != 0) {
			if (m_pClientList[i]->m_bIsWarLocation == true &&
					  m_pClientList[i]->m_bIsPlayerCivil == true &&
					  m_pClientList[i]->m_bIsInitComplete == true) {
				m_pClientList[i]->m_iTimeLeft_ForceRecall = 0;
			}
		}
	}
}
// New 13/05/2004

bool CGame::_bCrusadeLog(int iAction, int iClientH, int iData, const char * cName) {
	char cTxt[200];
	std::memset(cTxt, 0, sizeof(cTxt));
	switch (iAction) {
		case DEF_CRUSADELOG_ENDCRUSADE:
			if (cName == 0) return false;
			wsprintf(cTxt, "\tEnd Crusade\t%s", cName);
			break;
		case DEF_CRUSADELOG_SELECTDUTY:
			if (cName == 0) return false;
			if (m_pClientList[iClientH] == 0) return false;
			wsprintf(cTxt, "PC(%s)\tSelect Duty\t(%s)\t \t(%s)", m_pClientList[iClientH]->m_cCharName, cName, m_pClientList[iClientH]->m_cGuildName);
			break;
		case DEF_CRUSADELOG_GETEXP:
			if (m_pClientList[iClientH] == 0) return false;
			wsprintf(cTxt, "PC(%s)\tGet Exp\t(%d)\t \t(%s)", m_pClientList[iClientH]->m_cCharName, iData, m_pClientList[iClientH]->m_cGuildName);
			break;
		case DEF_CRUSADELOG_STARTCRUSADE:
			wsprintf(cTxt, "\tStart Crusade");
			break;
		default:
			return false;
	}
	bSendMsgToLS(MSGID_GAMECRUSADELOG, iClientH, 0, cTxt);
	return true;
}
// Testcode, found reference to it in 3.51, InitPlayerData and RequestTeleportHandler

int CGame::iGetPlayerABSStatus(int iClientH) {
	int iRet;
	if (m_pClientList[iClientH] == 0) return 0;
	iRet = 0;
	if (m_pClientList[iClientH]->m_iPKCount != 0) {
		iRet = 8;
	}
	if (m_pClientList[iClientH]->m_cSide != 0) {
		iRet = iRet | 4;
	}
	if (m_pClientList[iClientH]->m_cSide == 1) {
		iRet = iRet | 2;
	}
	if (m_pClientList[iClientH]->m_bIsPlayerCivil == true)
		iRet = iRet | 1;
	return iRet;
}
//Init item based in its ID

bool CGame::_bInitItemAttr(CItem * pItem, ItemId iItemID) {
	int i;
	for (i = 0; i < DEF_MAXITEMTYPES; i++)
		if (m_pItemConfigList[i] != 0) {
			if (m_pItemConfigList[i]->m_sIDnum == iItemID) {
				std::memset(pItem->m_cName, 0, sizeof(pItem->m_cName));
				strcpy(pItem->m_cName, m_pItemConfigList[i]->m_cName);
				pItem->m_cItemType = m_pItemConfigList[i]->m_cItemType;
				pItem->m_cEquipPos = m_pItemConfigList[i]->m_cEquipPos;
				pItem->m_sItemEffectType = m_pItemConfigList[i]->m_sItemEffectType;
				pItem->m_sItemEffectValue1 = m_pItemConfigList[i]->m_sItemEffectValue1;
				pItem->m_sItemEffectValue2 = m_pItemConfigList[i]->m_sItemEffectValue2;
				pItem->m_sItemEffectValue3 = m_pItemConfigList[i]->m_sItemEffectValue3;
				pItem->m_sItemEffectValue4 = m_pItemConfigList[i]->m_sItemEffectValue4;
				pItem->m_sItemEffectValue5 = m_pItemConfigList[i]->m_sItemEffectValue5;
				pItem->m_sItemEffectValue6 = m_pItemConfigList[i]->m_sItemEffectValue6;
				pItem->m_wMaxLifeSpan = m_pItemConfigList[i]->m_wMaxLifeSpan;
				pItem->m_wCurLifeSpan = pItem->m_wMaxLifeSpan;
				pItem->m_sSpecialEffect = m_pItemConfigList[i]->m_sSpecialEffect;
				pItem->m_sSprite = m_pItemConfigList[i]->m_sSprite;
				pItem->m_sSpriteFrame = m_pItemConfigList[i]->m_sSpriteFrame;
				pItem->m_wPrice = m_pItemConfigList[i]->m_wPrice;
				pItem->m_wWeight = m_pItemConfigList[i]->m_wWeight;
				pItem->m_cApprValue = m_pItemConfigList[i]->m_cApprValue;
				pItem->m_cSpeed = m_pItemConfigList[i]->m_cSpeed;
				pItem->m_sLevelLimit = m_pItemConfigList[i]->m_sLevelLimit;
				pItem->m_cGenderLimit = m_pItemConfigList[i]->m_cGenderLimit;
				pItem->m_sSpecialEffectValue1 = m_pItemConfigList[i]->m_sSpecialEffectValue1;
				pItem->m_sSpecialEffectValue2 = m_pItemConfigList[i]->m_sSpecialEffectValue2;
				pItem->m_sRelatedSkill = m_pItemConfigList[i]->m_sRelatedSkill;
				pItem->m_cCategory = m_pItemConfigList[i]->m_cCategory;
				pItem->m_sIDnum = m_pItemConfigList[i]->m_sIDnum;
				pItem->m_bIsForSale = m_pItemConfigList[i]->m_bIsForSale;
				pItem->m_cItemColor = m_pItemConfigList[i]->m_cItemColor;
				return true;
			}
		}
	return false;
}
// New 16/05/2004

void CGame::ReqCreateSlateHandler(int iClientH, char* pData) {
	int i;
	int iRet;
	short *sp;
	char cItemID[4], ctr[4];
	char *cp, cSlateColour, cData[120];
	bool bIsSlatePresent = false;
	CItem * pItem;
	int iSlateType;
	int iEraseReq;
	uint32_t *dwp;
	uint16_t *wp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsOnServerChange == true) return;
	for (i = 0; i < 4; i++) {
		cItemID[i] = 0;
		ctr[i] = 0;
	}
	cp = (char *) pData;
	cp += 11;
	// 14% chance of creating slates
	if (iDice(1, 100) < m_sSlateSuccessRate) bIsSlatePresent = true;
	try {
		// make sure slates really exist
		for (i = 0; i < 4; i++) {
			cItemID[i] = *cp;
			cp++;
			if (m_pClientList[iClientH]->m_pItemList[cItemID[i]] == 0 || cItemID[i] > DEF_MAXITEMS) {
				bIsSlatePresent = false;
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_SLATE_CREATEFAIL, 0, 0, 0, 0);
				return;
			}
			//No duping
			if (m_pClientList[iClientH]->m_pItemList[cItemID[i]]->m_sIDnum == ItemId::ancient_tablet_lu) // LU
				ctr[0] = 1;
			else if (m_pClientList[iClientH]->m_pItemList[cItemID[i]]->m_sIDnum == ItemId::ancient_tablet_ld) // LD
				ctr[1] = 1;
			else if (m_pClientList[iClientH]->m_pItemList[cItemID[i]]->m_sIDnum == ItemId::ancient_tablet_ru) // RU
				ctr[2] = 1;
			else if (m_pClientList[iClientH]->m_pItemList[cItemID[i]]->m_sIDnum == ItemId::ancient_tablet_rd) // RD
				ctr[3] = 1;
		}
	} catch (...) {
		//Crash Hacker Caught
		bIsSlatePresent = false;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SLATE_CREATEFAIL, 0, 0, 0, 0);
		wsprintf(G_cTxt, "TSearch Slate Hack: (%s) Player: (%s) - creating slates without correct item!", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
		PutHackLogFileList(G_cTxt);
		DeleteClient(iClientH, true, true);
		return;
	}
	// Are all 4 slates present ??
	if (ctr[0] != 1 || ctr[1] != 1 || ctr[2] != 1 || ctr[3] != 1) {
		bIsSlatePresent = false;
		return;
	}
	if (m_pClientList[iClientH]->m_iAdminUserLevel > 3) bIsSlatePresent = true;
	// if we failed, kill everything
	if (!bIsSlatePresent) {
		for (i = 0; i < 4; i++) {
			if (m_pClientList[iClientH]->m_pItemList[cItemID[i]] != 0) {
				ItemDepleteHandler(iClientH, cItemID[i], false, false);
			}
		}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SLATE_CREATEFAIL, 0, 0, 0, 0);
		return;
	}
	// make the slates
	for (i = 0; i < 4; i++) {
		if (m_pClientList[iClientH]->m_pItemList[cItemID[i]] != 0) {
			ItemDepleteHandler(iClientH, cItemID[i], false, false);
		}
	}
	pItem = new CItem;
	i = iDice(1, 1000);
	if (i < 50) { // Hp slate
		iSlateType = 1;
		cSlateColour = 32;
	} else if (i < 250) { // Bezerk slate
		iSlateType = 2;
		cSlateColour = 3;
	} else if (i < 750) { // Exp slate
		iSlateType = 4;
		cSlateColour = 7;
	} else if (i < 950) { // Mana slate
		iSlateType = 3;
		cSlateColour = 37;
	} else if (i < 1001) { // Hp slate
		iSlateType = 1;
		cSlateColour = 32;
	}
	// Notify client
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_SLATE_CREATESUCCESS, iSlateType, 0, 0, 0);
	std::memset(cData, 0, sizeof(cData));
	// Create slates
	if (_bInitItemAttr(pItem, ItemId::ancient_tablet) == false) {
		delete pItem;
		return;
	} else {
		pItem->m_sTouchEffectType = DEF_ITET_ID;
		pItem->m_sTouchEffectValue1 = iDice(1, 100000);
		pItem->m_sTouchEffectValue2 = iDice(1, 100000);
		pItem->m_sTouchEffectValue3 = (short) timeGetTime();
		_bItemLog(DEF_ITEMLOG_GET, iClientH, -1, pItem);
		pItem->m_sItemSpecEffectValue2 = iSlateType;
		pItem->m_cItemColor = cSlateColour;
		if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
			std::memset(cData, 0, sizeof(cData));
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_ITEMOBTAINED;
			cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
			*cp = 1;
			cp++;
			memcpy(cp, pItem->m_cName, 20);
			cp += 20;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwCount;
			cp += 4;
			*cp = (char) pItem->m_cItemType;
			cp++;
			*cp = (char) pItem->m_cEquipPos;
			cp++;
			*cp = (char) 0;
			cp++;
			sp = (short *) cp;
			*sp = pItem->m_sLevelLimit;
			cp += 2;
			*cp = pItem->m_cGenderLimit;
			cp++;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wCurLifeSpan;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wWeight;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSprite;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSpriteFrame;
			cp += 2;
			*cp = pItem->m_cItemColor;
			cp++;
			*cp = (char) pItem->m_sItemSpecEffectValue2;
			cp++;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwAttribute;
			cp += 4;
			if (iEraseReq == 1) delete pItem;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					return;
			}
		} else {
			m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, pItem);
			SendEventToNearClient_TypeB(MSGID_MAGICCONFIGURATIONCONTENTS, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
					  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, pItem->m_sSprite, pItem->m_sSpriteFrame,
					  pItem->m_cItemColor);
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					break;
			}
		}
	}
	return;
}

void CGame::SetSlateFlag(int iClientH, short sType, bool bFlag) {
	if (m_pClientList[iClientH] == 0) return;
	if (sType == DEF_NOTIFY_SLATECLEAR) {
		m_pClientList[iClientH]->m_iStatus &= 0xFFBFFFFF;
		m_pClientList[iClientH]->m_iStatus &= 0xFF7FFFFF;
		m_pClientList[iClientH]->m_iStatus &= 0xFFFEFFFF;
		return;
	}
	if (bFlag == true) {
		if (sType == 1) { // Invincible slate
			m_pClientList[iClientH]->m_iStatus |= 0x400000;
		} else if (sType == 3) { // Mana slate
			m_pClientList[iClientH]->m_iStatus |= 0x800000;
		} else if (sType == 4) { // Exp slate
			m_pClientList[iClientH]->m_iStatus |= 0x10000;
		}
	} else {
		if ((m_pClientList[iClientH]->m_iStatus & 0x400000) != 0) {
			m_pClientList[iClientH]->m_iStatus &= 0xFFBFFFFF;
		} else if ((m_pClientList[iClientH]->m_iStatus & 0x800000) != 0) {
			m_pClientList[iClientH]->m_iStatus &= 0xFF7FFFFF;
		} else if ((m_pClientList[iClientH]->m_iStatus & 0x10000) != 0) {
			m_pClientList[iClientH]->m_iStatus &= 0xFFFEFFFF;
		}
	}
	SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
}
// New 18/05/2004

void CGame::SetPlayingStatus(int iClientH) {
	char cMapName[11], cLocation[11];
	if (m_pClientList[iClientH] == 0) return;
	std::memset(cMapName, 0, sizeof(cMapName));
	std::memset(cLocation, 0, sizeof(cLocation));
	strcpy(cLocation, m_pClientList[iClientH]->m_cLocation);
	strcpy(cMapName, m_pMapList[ m_pClientList[iClientH]->m_cMapIndex]->m_cName);
	m_pClientList[iClientH]->m_cSide = 0;
	m_pClientList[iClientH]->m_bIsOwnLocation = false;
	m_pClientList[iClientH]->m_bIsPlayerCivil = false;
	if (memcmp(cLocation, cMapName, 3) == 0) {
		m_pClientList[iClientH]->m_bIsOwnLocation = true;
	}
	if (memcmp(cLocation, "are", 3) == 0)
		m_pClientList[iClientH]->m_cSide = 1;
	else if (memcmp(cLocation, "elv", 3) == 0)
		m_pClientList[iClientH]->m_cSide = 2;
	else {
		if (strcmp(cMapName, "elvine") == 0 || strcmp(cMapName, "aresden") == 0) {
			m_pClientList[iClientH]->m_bIsOwnLocation = true;
		}
		m_pClientList[iClientH]->m_bIsNeutral = true;
	}
	if (memcmp(cLocation, "arehunter", 9) == 0 || memcmp(cLocation, "elvhunter", 9) == 0) {
		m_pClientList[iClientH]->m_bIsPlayerCivil = true;
	}
	if (memcmp(m_pClientList[iClientH]->m_cMapName, "bisle", 5) == 0) {
		m_pClientList[iClientH]->m_bIsPlayerCivil = false;
	}
	if (memcmp(m_pClientList[iClientH]->m_cMapName, "bsmith", 6) == 0 ||
			  memcmp(m_pClientList[iClientH]->m_cMapName, "gldhall", 7) == 0 ||
			  memcmp(m_pClientList[iClientH]->m_cMapName, "gshop", 5) == 0)
		m_pClientList[iClientH]->m_pIsProcessingAllowed = true;
	else
		m_pClientList[iClientH]->m_pIsProcessingAllowed = false;
}

void CGame::ForceChangePlayMode(int iClientH, bool bNotify) {
	if (m_pClientList[iClientH] == 0) return;
	if (memcmp(m_pClientList[iClientH]->m_cLocation, "arehunter", 9) == 0)
		strcpy(m_pClientList[iClientH]->m_cLocation, "aresden");
	else if (memcmp(m_pClientList[iClientH]->m_cLocation, "elvhunter", 9) == 0)
		strcpy(m_pClientList[iClientH]->m_cLocation, "elvine");
	if (m_pClientList[iClientH]->m_bIsPlayerCivil == true)
		m_pClientList[iClientH]->m_bIsPlayerCivil = false;
	if (bNotify) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CHANGEPLAYMODE, 0, 0, 0, m_pClientList[iClientH]->m_cLocation);
		SendEventToNearClient_TypeA(iClientH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
	}
}

void CGame::ShowVersion(int iClientH) {
	char cVerMessage[256];
	std::memset(cVerMessage, 0, sizeof(cVerMessage));
	wsprintf(cVerMessage, "Helbreath Sources %s.%s - www.xtremehb.com", DEF_UPPERVERSION, DEF_LOWERVERSION);
	ShowClientMsg(iClientH, cVerMessage);
}
// v2.15 2002-5-21

void CGame::GSM_RequestShutupPlayer(char * /*pGMName*/, uint16_t /*wReqServerID*/, uint16_t /*wReqClientH*/, uint16_t wTime, char * pPlayer) {
	int i;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (strcmp(m_pClientList[i]->m_cCharName, pPlayer) == 0)) {
			m_pClientList[i]->m_iTimeLeft_ShutUp = wTime * 20;
			SendNotifyMsg(0, i, DEF_NOTIFY_PLAYERSHUTUP, wTime, 0, 0, pPlayer);
			return;
		}
}
// v2.14 05/22/2004 - Hypnotoad - adds pk log

bool CGame::_bPKLog(int iAction, int iAttackerH, int iVictumH, char * pNPC) {
	char cTxt[1024], cTemp1[120], cTemp2[120];
	std::memset(cTxt, 0, sizeof(cTxt));
	std::memset(cTemp1, 0, sizeof(cTemp1));
	std::memset(cTemp2, 0, sizeof(cTemp2));
	if (m_pClientList[iVictumH] == 0) return false;
	switch (iAction) {
		case DEF_PKLOG_REDUCECRIMINAL:
			wsprintf(cTxt, "(%s) PC(%s)\tReduce\tCC(%d)\t%s(%d %d)\t", m_pClientList[iVictumH]->m_cIPaddress, m_pClientList[iVictumH]->m_cCharName, m_pClientList[iVictumH]->m_iPKCount,
					  m_pClientList[iVictumH]->m_cMapName, m_pClientList[iVictumH]->m_sX, m_pClientList[iVictumH]->m_sY);
			break;
		case DEF_PKLOG_BYPLAYER:
			if (m_pClientList[iAttackerH] == 0) return false;
			wsprintf(cTxt, "(%s) PC(%s)\tKilled by PC\t \t%s(%d %d)\t(%s) PC(%s)", m_pClientList[iVictumH]->m_cIPaddress, m_pClientList[iVictumH]->m_cCharName,
					  m_pClientList[iVictumH]->m_cMapName, m_pClientList[iVictumH]->m_sX, m_pClientList[iVictumH]->m_sY, m_pClientList[iAttackerH]->m_cIPaddress, m_pClientList[iAttackerH]->m_cCharName);
			break;
		case DEF_PKLOG_BYPK:
			if (m_pClientList[iAttackerH] == 0) return false;
			wsprintf(cTxt, "(%s) PC(%s)\tKilled by PK\tCC(%d)\t%s(%d %d)\t(%s) PC(%s)", m_pClientList[iVictumH]->m_cIPaddress, m_pClientList[iVictumH]->m_cCharName, m_pClientList[iAttackerH]->m_iPKCount,
					  m_pClientList[iVictumH]->m_cMapName, m_pClientList[iVictumH]->m_sX, m_pClientList[iVictumH]->m_sY, m_pClientList[iAttackerH]->m_cIPaddress, m_pClientList[iAttackerH]->m_cCharName);
			break;
		case DEF_PKLOG_BYENERMY:
			if (m_pClientList[iAttackerH] == 0) return false;
			wsprintf(cTxt, "(%s) PC(%s)\tKilled by Enemy\t \t%s(%d %d)\t(%s) PC(%s)", m_pClientList[iVictumH]->m_cIPaddress, m_pClientList[iVictumH]->m_cCharName,
					  m_pClientList[iVictumH]->m_cMapName, m_pClientList[iVictumH]->m_sX, m_pClientList[iVictumH]->m_sY, m_pClientList[iAttackerH]->m_cIPaddress, m_pClientList[iAttackerH]->m_cCharName);
			break;
		case DEF_PKLOG_BYNPC:
			if (pNPC == 0) return false;
			wsprintf(cTxt, "(%s) PC(%s)\tKilled by NPC\t \t%s(%d %d)\tNPC(%s)", m_pClientList[iVictumH]->m_cIPaddress, m_pClientList[iVictumH]->m_cCharName,
					  m_pClientList[iVictumH]->m_cMapName, m_pClientList[iVictumH]->m_sX, m_pClientList[iVictumH]->m_sY, pNPC);
			break;
		case DEF_PKLOG_BYOTHER:
			wsprintf(cTxt, "(%s) PC(%s)\tKilled by Other\t \t%s(%d %d)\tUnknown", m_pClientList[iVictumH]->m_cIPaddress, m_pClientList[iVictumH]->m_cCharName,
					  m_pClientList[iVictumH]->m_cMapName, m_pClientList[iVictumH]->m_sX, m_pClientList[iVictumH]->m_sY);
			break;
		default:
			return false;
	}
	PutPvPLogFileList(cTxt);
	return true;
}

void CGame::RequestResurrectPlayer(int iClientH, bool bResurrect) {
	char buff[100];
	if (m_pClientList[iClientH] == 0) return;
	if (bResurrect == false) {
		m_pClientList[iClientH]->m_bIsBeingResurrected = false;
		return;
	}
	if (m_pClientList[iClientH]->m_bIsBeingResurrected == false) {
		wsprintf(buff, "(!!!) Player(%s) Tried To Use Resurrection Hack", m_pClientList[iClientH]->m_cCharName);
		PutHackLogFileList(G_cTxt);
		DeleteClient(iClientH, true, true, true, true);
		return;
	}
	wsprintf(buff, "(*) Resurrect Player! %s", m_pClientList[iClientH]->m_cCharName);
	PutLogList(buff);
	m_pClientList[iClientH]->m_bIsKilled = false;
	// Player's HP becomes half of the Max HP.
	m_pClientList[iClientH]->m_iHP = iGetMaxHP(iClientH) / 2;
	// Player's MP
	m_pClientList[iClientH]->m_iMP = ((m_pClientList[iClientH]->m_iMag * 2)+(m_pClientList[iClientH]->m_iLevel / 2)) + m_pClientList[iClientH]->m_iInt / 2;
	// Player's SP
	m_pClientList[iClientH]->m_iSP = (m_pClientList[iClientH]->m_iStr * 2)+(m_pClientList[iClientH]->m_iLevel / 2);
	// Player's Hunger
	m_pClientList[iClientH]->m_iHungerStatus = 100;
	m_pClientList[iClientH]->m_bIsBeingResurrected = false;
	RequestTeleportHandler(iClientH, "2   ", m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
}

bool CGame::bCheckClientAttackFrequency(int iClientH, uint32_t dwClientTime) {
	uint32_t dwTimeGap;
	if (m_pClientList[iClientH] == 0) return false;
	if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) return false;
	if (m_pClientList[iClientH]->m_dwAttackFreqTime == 0)
		m_pClientList[iClientH]->m_dwAttackFreqTime = dwClientTime;
	else {
		dwTimeGap = dwClientTime - m_pClientList[iClientH]->m_dwAttackFreqTime;
		m_pClientList[iClientH]->m_dwAttackFreqTime = dwClientTime;
		if (dwTimeGap < 450) {
			wsprintf(G_cTxt, "Swing Hack: (%s) Player: (%s) - attacking with weapon at irregular rates.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
			PutHackLogFileList(G_cTxt);
			DeleteClient(iClientH, true, true);
			return false;
		}
		//testcode
		//wsprintf(G_cTxt, "Attack: %d", dwTimeGap);
		//PutLogList(G_cTxt);
	}
	return false;
}

bool CGame::bCheckClientMagicFrequency(int iClientH, uint32_t dwClientTime) {
	uint32_t dwTimeGap;
	if (m_pClientList[iClientH] == 0) return false;
	if (m_pClientList[iClientH]->m_dwMagicFreqTime == 0)
		m_pClientList[iClientH]->m_dwMagicFreqTime = dwClientTime;
	else {
		dwTimeGap = dwClientTime - m_pClientList[iClientH]->m_dwMagicFreqTime;
		m_pClientList[iClientH]->m_dwMagicFreqTime = dwClientTime;
		if ((dwTimeGap < 1500) && (m_pClientList[iClientH]->m_bMagicConfirm == true)) {
			wsprintf(G_cTxt, "Speed Cast: (%s) Player: (%s) - casting magic at irregular rates. ", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
			PutHackLogFileList(G_cTxt);
			DeleteClient(iClientH, true, true);
			return false;
		}
		m_pClientList[iClientH]->m_iSpellCount--;
		m_pClientList[iClientH]->m_bMagicConfirm = false;
		m_pClientList[iClientH]->m_bMagicPauseTime = false;
		//testcode
		//wsprintf(G_cTxt, "Magic: %d", dwTimeGap);
		//PutLogList(G_cTxt);
	}
	return false;
}

bool CGame::bCheckClientMoveFrequency(int iClientH, uint32_t dwClientTime) {
	int32_t iTimeGap;
	if (m_pClientList[iClientH] == 0) return false;
	if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) return false;
	if (m_pClientList[iClientH]->m_dwMoveFreqTime == 0)
		m_pClientList[iClientH]->m_dwMoveFreqTime = dwClientTime;
	else {
		if (m_pClientList[iClientH]->m_bIsMoveBlocked == true) {
			m_pClientList[iClientH]->m_dwMoveFreqTime = 0;
			m_pClientList[iClientH]->m_bIsMoveBlocked = false;
			return false;
		}
		if (m_pClientList[iClientH]->m_bIsAttackModeChange == true) {
			m_pClientList[iClientH]->m_dwMoveFreqTime = 0;
			m_pClientList[iClientH]->m_bIsAttackModeChange = false;
			return false;
		}
		iTimeGap = dwClientTime - m_pClientList[iClientH]->m_dwMoveFreqTime;
		m_pClientList[iClientH]->m_dwMoveFreqTime = dwClientTime;
		if ((iTimeGap < 200) && (iTimeGap >= 0)) {
			wsprintf(G_cTxt, "Speed Hack: (%s) Player: (%s) - running too fast.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
			PutHackLogFileList(G_cTxt);
			DeleteClient(iClientH, true, true);
			return false;
		}
		// testcode
		// wsprintf(G_cTxt, "Move: %d", dwTimeGap);
		// PutLogList(G_cTxt);
	}
	return false;
}

/*
bool CGame::bCheckClientInvisibility(short iClientH)
{
	bool bFlag;
	int iShortCutIndex;
	int i;
	short sRange;
	if(m_pClientList[iClientH] == 0) return false;
	if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) return false;
	bFlag = true;
	iShortCutIndex = 0;
		while(bFlag){
Raven-HBRND(www.hbrnd.com) says:
what i suggest
is .. if its requesting
to see the other side whyle invsie
check the bag
for the neckie
			i = m_iClientShortCut[iShortCutIndex];
			iShortCutIndex++;
			if (i == 0) bFlag = false;
			if ((bFlag == true) && (m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
				if ( (m_pClientList[i]->m_cMapIndex == m_pClientList[iClientH]->m_cMapIndex) &&
					  (m_pClientList[i]->m_sX >= m_pClientList[iClientH]->m_sX - 10 - sRange) &&
					 (m_pClientList[i]->m_sX <= m_pClientList[iClientH]->m_sX + 10 + sRange) &&
					 (m_pClientList[i]->m_sY >= m_pClientList[iClientH]->m_sY - 8 - sRange) &&
					 (m_pClientList[i]->m_sY <= m_pClientList[iClientH]->m_sY + 8 + sRange) ) {
			// iClient = center screen character
			// i = visable characters on screen
					if ( (m_pClientList[iClientH]->m_cSide != m_pClientList[i]->m_cSide)
								&& (i != iClientH)
								&& (m_pClientList[iClientH]->m_sAppr4 == m_pClientList[iClientH]->m_sAppr4 & 0x0001)
								) {
						//wsprintf(G_cTxt, "(!) Invisibility Hack Suspect: (%s)", m_pClientList[iClientH]->m_cCharName);
						//PutLogList(G_cTxt);
						//DeleteClient(iClientH, true, true);
						}
					}
			}
		}
	return false;
}*/
void CGame::CrusadeWarStarter() {
	SYSTEMTIME SysTime;
	int i;
	if (m_bIsCrusadeMode == true) return;
	if (m_bIsCrusadeWarStarter == false) return;
	GetLocalTime(&SysTime);
	for (i = 0; i < DEF_MAXSCHEDULE; i++)
		if ((m_stCrusadeWarSchedule[i].iDay == SysTime.wDayOfWeek) &&
				  (m_stCrusadeWarSchedule[i].iHour == SysTime.wHour) &&
				  (m_stCrusadeWarSchedule[i].iMinute == SysTime.wMinute)) {
			PutLogList("(!) Automated crusade is being initiated!");
			GlobalStartCrusadeMode();
			return;
		}
}

void CGame::OnTimer(char /*cType*/) {
	char cAdvert[1000]; //holds the text for the "advert"
	std::memset(cAdvert, 0, sizeof(cAdvert));
	uint32_t dwTime;
	dwTime = timeGetTime();
	//if ((dwTime - m_dwGameTime1) > 200) {
	GameProcess();
	// m_dwGameTime1 = dwTime;
	//}
	if ((dwTime - m_dwGameTime2) > 3000) {
		CheckClientResponseTime();
		CheckDayOrNightMode();
		InvalidateRect(G_hWnd, 0, true);
		m_dwGameTime2 = dwTime;
		// v1.41
		if ((m_bIsGameStarted == false) && (m_bIsItemAvailable == true) &&
				  (m_bIsNpcAvailable == true) &&
				  (m_bIsLogSockAvailable == true) && (m_bIsMagicAvailable == true) &&
				  (m_bIsSkillAvailable == true) && (m_bIsPortionAvailable == true) &&
				  (m_bIsQuestAvailable == true) && (m_bIsBuildItemAvailable == true) &&
				  (m_iSubLogSockActiveCount == DEF_MAXSUBLOGSOCK)) {
			PutLogList("Sending start message...");
			SendMessage(m_hWnd, WM_USER_STARTGAMESIGNAL, 0, 0);
			m_bIsGameStarted = true;
		}
	}
	if ((dwTime - m_dwGameTime6) > 1000) {
		DelayEventProcessor();
		m_dwGameTime6 = dwTime;
		// v2.05
		if (m_iFinalShutdownCount != 0) {
			m_iFinalShutdownCount--;
			wsprintf(G_cTxt, "Final Shutdown...%d", m_iFinalShutdownCount);
			PutLogList(G_cTxt);
			if (m_iFinalShutdownCount <= 1) {
				SendMessage(m_hWnd, WM_CLOSE, 0, 0);
				return;
			}
		}
	}
	if (m_bHappyHour == true) {
		if ((dwTime - dwHappyHourTime) == 3600000) {
			EndHappyHour();
		}
	}
	if ((dwTime - m_dwGameTime3) > 3000) {
		SyncMiddlelandMapInfo();
		CheckDynamicObjectList();
		DynamicObjectEffectProcessor();
		NoticeHandler();
		SpecialEventHandler();
		EnergySphereProcessor();
		m_dwGameTime3 = dwTime;
	}
	if ((dwTime - m_dwGameTime7) > 100000) { //Timer
		// switch (iDice(1, 19)) { //Pick a random advert
		//Change these to whatever you want to display
		// case 1: wsprintf(cAdvert, "Server-Info: Criticals: Ctrl + C (300 Criticals = 5000 Gold).");
		// break;
		// case 2: wsprintf(cAdvert, "Server-Info: MIDDLELAND NO TIENE PITS (SOLO SE USA EN CRUSADE).");
		// break;
		// case 3: wsprintf(cAdvert, "Server-Info: Lista de Drops y demas guias en la Web!.");
		// break;
		// case 4: wsprintf(cAdvert, "Server-Info: Max Barrack lvl 200 || PL: No Max lvl!.");
		// break;
		// case 5: wsprintf(cAdvert, "Server-Info: Druncian PITS: HC,TW,Dark-Elf,Liche,Uni,Barlog & G.Lizard.");
		// break;
		// case 6: wsprintf(cAdvert, "Server-Info: MIDDLELAND DON'T HAVE PITS!. (ONLY USED IN CRUSADE).");
		// break;
		// case 7: wsprintf(cAdvert, "Server-Info: PL PITS: Ettin,Demon,Gargoyle,Orges,Ice-Golems,Wyverns & Abbaddon.");
		// break;
		// case 8: wsprintf(cAdvert, "Server-Info: City PITS: Cyclops, WereWolf, Scorp, Clay Golems & Hellhound.");
		// break;
		// case 9: wsprintf(cAdvert, "Server-Info: Drop List and other Guides in the Website!.");
		// break;
		// case 10: wsprintf(cAdvert, "SERVER-Info: Pedimos disculpas a todos los afectados por la caida del primer dia!.");
		// break;
		// }
		// for (q = 1; q < DEF_MAXCLIENTS; q++) // Check all clients
		// {
		// if ((m_pClientList[q] != 0)) // Check if client is active
		// { //Send message to server.
		// SendNotifyMsg(0, q, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cAdvert);
		// }
		// }
		m_dwGameTime7 = dwTime; //Reset timer so it doesn't spam :D
	}
	if ((dwTime - m_dwGameTime4) > 600) {
		MobGenerator();
		if (m_iSubLogSockInitIndex < DEF_MAXSUBLOGSOCK) {
			m_pSubLogSock[m_iSubLogSockInitIndex] = new XSocket(m_hWnd, DEF_SERVERSOCKETBLOCKLIMIT);
			m_pSubLogSock[m_iSubLogSockInitIndex]->bConnect(m_cLogServerAddr, m_iLogServerPort, (WM_ONLOGSOCKETEVENT + m_iSubLogSockInitIndex + 1));
			m_pSubLogSock[m_iSubLogSockInitIndex]->bInitBufferSize(DEF_MSGBUFFERSIZE);
			wsprintf(G_cTxt, "(!) Try to connect sub-log-socket(%d)... Addr:%s  Port:%d", m_iSubLogSockInitIndex, m_cLogServerAddr, m_iLogServerPort);
			PutLogList(G_cTxt);
			m_iSubLogSockInitIndex++;
		}
		m_dwGameTime4 = dwTime;
	}
	if ((dwTime - m_dwGameTime5) > 1000 * 60 * 3) {
		if (m_iMiddlelandMapIndex >= 0) {
			// Crusade
			SaveOccupyFlagData();
			//bSendMsgToLS(MSGID_REQUEST_SAVEARESDENOCCUPYFLAGDATA, 0, 0);
			//bSendMsgToLS(MSGID_REQUEST_SAVEELVINEOCCUPYFLAGDATA, 0, 0);
		}
		m_dwGameTime5 = dwTime;
		srand((unsigned) time(0));
	}
	if ((dwTime - m_dwFishTime) > 4000) {
		FishProcessor();
		FishGenerator();
		SendCollectedMana();
		CrusadeWarStarter();
		m_dwFishTime = dwTime;
		AFKChecker();
		if ((m_bIsHeldenianReady == true) && (m_bIsHeldenianMode == false)) {
			HeldenianWarStarter();
		}
		if ((m_bIsHeldenianReady == true) && (m_bIsHeldenianMode == true)) {
			HeldenianWarEnder();
		}
		if ((m_bHeldenianRunning == false) && (m_bIsHeldenianMode == true)) {
			AutomaticHeldenianEnd();
		}
		if ((m_bHeldenianInitiated == true) && (m_bIsHeldenianReady == true)) {
			AutomatedHeldenianTimer();
		}
	}
	if ((dwTime - m_dwWhetherTime) > 1000 * 20) {
		WhetherProcessor();
		m_dwWhetherTime = dwTime;
	}
	if ((dwTime - m_dwCanFightzoneReserveTime) > 7200000) {
		FightzoneReserveProcessor();
		m_dwCanFightzoneReserveTime = dwTime;
	}
	if ((m_bIsServerShutdowned == false) && (m_bOnExitProcess == true) && ((dwTime - m_dwExitProcessTime) > 1000 * 2)) {
		if (_iForcePlayerDisconect(15) == 0) {
			PutLogList("(!) GAME SERVER SHUTDOWN PROCESS COMPLETED! All players are disconnected.");
			m_bIsServerShutdowned = true;
			if ((m_cShutDownCode == 3) || (m_cShutDownCode == 4)) {
				PutLogFileList("(!!!) AUTO-SERVER-REBOOTING!");
				bInit();
				m_iAutoRebootingCount++;
			} else {
				if (m_iFinalShutdownCount == 0) m_iFinalShutdownCount = 20;
			}
		}
		m_dwExitProcessTime = dwTime;
	}
	if ((dwTime - m_dwMapSectorInfoTime) > 1000 * 10) {
		m_dwMapSectorInfoTime = dwTime;
		UpdateMapSectorInfo();
		MineralGenerator();
		m_iMapSectorInfoUpdateCount++;
		if (m_iMapSectorInfoUpdateCount >= 5) {
			AgingMapSectorInfo();
			m_iMapSectorInfoUpdateCount = 0;
		}
	}
}

bool CGame::bReadScheduleConfigFile(const char *pFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadModeA, cReadModeB;
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	int iIndex;
	cReadModeA = 0;
	cReadModeB = 0;
	iIndex = 0;
	hFile = CreateFile(pFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(pFn, "rt");
	if (pFile == 0) {
		PutLogList("(!) Cannot open Schedule file.");
		return false;
	} else {
		PutLogList("(!) Reading Schedule file...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		while (token != 0) {
			if (cReadModeA != 0) {
				switch (cReadModeA) {
					case 1:
						if (strcmp(m_cServerName, token) == 0) {
							PutLogList("(!) Success: This server will schedule crusade total war.");
							m_bIsCrusadeWarStarter = true;
						}
						cReadModeA = 0;
						break;
					case 2:
						switch (cReadModeB) {
							case 1:
								if (iIndex >= DEF_MAXSCHEDULE) {
									PutLogList("(!) WARNING! Too many crusade war schedule!");
									return true;
								}
								m_stCrusadeWarSchedule[iIndex].iDay = atoi(token);
								cReadModeB = 2;
								break;
							case 2:
								m_stCrusadeWarSchedule[iIndex].iHour = atoi(token);
								cReadModeB = 3;
								break;
							case 3:
								m_stCrusadeWarSchedule[iIndex].iMinute = atoi(token);
								iIndex++;
								cReadModeA = 0;
								cReadModeB = 0;
								break;
						}
						break;
					case 3:
						switch (cReadModeB) {
							case 1:
								if (iIndex >= DEF_MAXHELDENIAN) {
									PutLogList("(!) WARNING! Too many Heldenians scheduled!");
									return true;
								}
								m_stHeldenianSchedule[iIndex].iDay = atoi(token);
								cReadModeB = 2;
								break;
							case 2:
								m_stHeldenianSchedule[iIndex].StartiHour = atoi(token);
								cReadModeB = 3;
								break;
							case 3:
								m_stHeldenianSchedule[iIndex].StartiMinute = atoi(token);
								cReadModeB = 4;
								break;
							case 4:
								m_stHeldenianSchedule[iIndex].EndiHour = atoi(token);
								cReadModeB = 5;
								break;
							case 5:
								m_stHeldenianSchedule[iIndex].EndiMinute = atoi(token);
								iIndex++;
								cReadModeA = 0;
								cReadModeB = 0;
								break;
						}
						break;
				}
			} else {
				if (memcmp(token, "crusade-server-name", 19) == 0) {
					cReadModeA = 1;
					cReadModeB = 1;
				}
				if (memcmp(token, "crusade-schedule", 16) == 0) {
					cReadModeA = 3;
					cReadModeB = 1;
				}
				if (memcmp(token, "Heldenian-schedule", 18) == 0) {
					cReadModeA = 6;
					cReadModeB = 1;
				}
			}
			token = pStrTok->pGet();
		}
		delete pStrTok;
		delete cp;
	}
	if (pFile != 0) fclose(pFile);
	return true;
}

void CGame::GlobalStartCrusadeMode() {
	uint32_t dwCrusadeGUID;
	SYSTEMTIME SysTime;
	GetLocalTime(&SysTime);
	// Permite activar mas de una crusada por dia.
	m_iLatestCrusadeDayOfWeek = SysTime.wDayOfWeek;
	/*if (m_iLatestCrusadeDayOfWeek != -1) {
		 if (m_iLatestCrusadeDayOfWeek == SysTime.wDayOfWeek) return;
	}
	else m_iLatestCrusadeDayOfWeek = SysTime.wDayOfWeek;*/
	dwCrusadeGUID = timeGetTime();
	LocalStartCrusadeMode(dwCrusadeGUID);
}

void CGame::OnStartGameSignal() {
	int i;
	for (i = 0; i < DEF_MAXMAPS; i++)
		if (m_pMapList[i] != 0)
			_bReadMapInfoFiles(i);
	bReadCrusadeStructureConfigFile("..\\GameConfigs\\Crusade.cfg");
	_LinkStrikePointMapIndex();
	bReadScheduleConfigFile("..\\GameConfigs\\Schedule.cfg");
	bReadCrusadeGUIDFile("GameData\\CrusadeGUID.txt");
	bReadApocalypseGUIDFile("GameData\\ApocalypseGUID.txt");
	bReadHeldenianGUIDFile("GameData\\HeldenianGUID.txt");
	PutLogList("");
	PutLogList("(!) Game Server Activated.");
}

void CGame::RequestGuildTeleportHandler(int iClientH) {
	int i;
	char cMapName[11];
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iLockedMapTime != 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_LOCKEDMAP, m_pClientList[iClientH]->m_iLockedMapTime, 0, 0, m_pClientList[iClientH]->m_cLockedMapName);
		return;
	}
	if (!m_bIsCrusadeMode) {
		wsprintf(G_cTxt, "Accessing crusade teleport: (%s) Player: (%s) - setting teleport location when crusade is disabled.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
		PutLogList(G_cTxt);
		DeleteClient(iClientH, true, true);
		return;
	}
	if (m_pClientList[iClientH]->m_iCrusadeDuty == 0) {
		wsprintf(G_cTxt, "Accessing crusade teleport: (%s) Player: (%s) - teleporting when not in a guild", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
		PutLogList(G_cTxt);
		DeleteClient(iClientH, true, true);
		return;
	}
	if ((m_pClientList[iClientH]->m_cMapIndex == m_iMiddlelandMapIndex) && m_iMiddlelandMapIndex != -1) return;
	for (i = 0; i < DEF_MAXGUILDS; i++)
		if (m_pGuildTeleportLoc[i].m_iV1 == m_pClientList[iClientH]->m_iGuildGUID) {
			std::memset(cMapName, 0, sizeof(cMapName));
			strcpy(cMapName, m_pGuildTeleportLoc[i].m_cDestMapName);
			wsprintf(G_cTxt, "ReqGuildTeleport: %d %d %d %s", m_pClientList[iClientH]->m_iGuildGUID, m_pGuildTeleportLoc[i].m_sDestX, m_pGuildTeleportLoc[i].m_sDestY, cMapName);
			PutLogList(G_cTxt);
			RequestTeleportHandler(iClientH, "2   ", cMapName, m_pGuildTeleportLoc[i].m_sDestX, m_pGuildTeleportLoc[i].m_sDestY);
			return;
		}
	switch (m_pClientList[iClientH]->m_cSide) {
		case 1:
			break;
		case 2:
			break;
	}
}

void CGame::GSM_SetGuildTeleportLoc(int iGuildGUID, int dX, int dY, char * pMapName) {
	int i;
	int iIndex;
	uint32_t dwTemp;
	uint32_t dwTime;
	wsprintf(G_cTxt, "SetGuildTeleportLoc: %d %s %d %d", iGuildGUID, pMapName, dX, dY);
	PutLogList(G_cTxt);
	dwTime = timeGetTime();
	for (i = 0; i < DEF_MAXGUILDS; i++)
		if (m_pGuildTeleportLoc[i].m_iV1 == iGuildGUID) {
			if ((m_pGuildTeleportLoc[i].m_sDestX == dX) && (m_pGuildTeleportLoc[i].m_sDestY == dY) && (strcmp(m_pGuildTeleportLoc[i].m_cDestMapName, pMapName) == 0)) {
				m_pGuildTeleportLoc[i].m_dwTime = dwTime;
				return;
			} else {
				m_pGuildTeleportLoc[i].m_sDestX = dX;
				m_pGuildTeleportLoc[i].m_sDestY = dY;
				std::memset(m_pGuildTeleportLoc[i].m_cDestMapName, 0, sizeof(m_pGuildTeleportLoc[i].m_cDestMapName));
				strcpy(m_pGuildTeleportLoc[i].m_cDestMapName, pMapName);
				m_pGuildTeleportLoc[i].m_dwTime = dwTime;
				return;
			}
		}
	dwTemp = 0;
	iIndex = -1;
	for (i = 0; i < DEF_MAXGUILDS; i++) {
		if (m_pGuildTeleportLoc[i].m_iV1 == 0) {
			m_pGuildTeleportLoc[i].m_iV1 = iGuildGUID;
			m_pGuildTeleportLoc[i].m_sDestX = dX;
			m_pGuildTeleportLoc[i].m_sDestY = dY;
			std::memset(m_pGuildTeleportLoc[i].m_cDestMapName, 0, sizeof(m_pGuildTeleportLoc[i].m_cDestMapName));
			strcpy(m_pGuildTeleportLoc[i].m_cDestMapName, pMapName);
			m_pGuildTeleportLoc[i].m_dwTime = dwTime;
			return;
		} else {
			if (dwTemp < (dwTime - m_pGuildTeleportLoc[i].m_dwTime)) {
				dwTemp = (dwTime - m_pGuildTeleportLoc[i].m_dwTime);
				iIndex = i;
			}
		}
	}
	if (iIndex == -1) return;
	PutLogList("(X) No more GuildTeleportLoc Space! Replaced.");
	m_pGuildTeleportLoc[i].m_iV1 = iGuildGUID;
	m_pGuildTeleportLoc[i].m_sDestX = dX;
	m_pGuildTeleportLoc[i].m_sDestY = dY;
	std::memset(m_pGuildTeleportLoc[i].m_cDestMapName, 0, sizeof(m_pGuildTeleportLoc[i].m_cDestMapName));
	strcpy(m_pGuildTeleportLoc[i].m_cDestMapName, pMapName);
	m_pGuildTeleportLoc[i].m_dwTime = dwTime;
}

void CGame::RequestSetGuildTeleportLocHandler(int iClientH, int dX, int dY, int iGuildGUID, const char * pMapName) {
	int i;
	int iIndex;
	uint32_t dwTemp;
	uint32_t dwTime;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsOnServerChange == true) return;
	if (!m_bIsCrusadeMode) {
		wsprintf(G_cTxt, "Accessing Crusade Set Teleport: (%s) Player: (%s) - setting point when not a crusade.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
		PutLogList(G_cTxt);
		DeleteClient(iClientH, true, true);
		return;
	}
	if (m_pClientList[iClientH]->m_iCrusadeDuty != 3) {
		wsprintf(G_cTxt, "Accessing Crusade Set Teleport: (%s) Player: (%s) - setting point when not a guildmaster.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
		PutLogList(G_cTxt);
		DeleteClient(iClientH, true, true);
		return;
	}
	if (dY < 100) dY = 100;
	if (dY > 600) dY = 600;
	dwTime = timeGetTime();
	wsprintf(G_cTxt, "SetGuildTeleportLoc: %d %s %d %d", iGuildGUID, pMapName, dX, dY);
	PutLogList(G_cTxt);
	for (i = 0; i < DEF_MAXGUILDS; i++)
		if (m_pGuildTeleportLoc[i].m_iV1 == iGuildGUID) {
			if ((m_pGuildTeleportLoc[i].m_sDestX == dX) && (m_pGuildTeleportLoc[i].m_sDestY == dY) && (strcmp(m_pGuildTeleportLoc[i].m_cDestMapName, pMapName) == 0)) {
				m_pGuildTeleportLoc[i].m_dwTime = dwTime;
				return;
			} else {
				m_pGuildTeleportLoc[i].m_sDestX = dX;
				m_pGuildTeleportLoc[i].m_sDestY = dY;
				std::memset(m_pGuildTeleportLoc[i].m_cDestMapName, 0, sizeof(m_pGuildTeleportLoc[i].m_cDestMapName));
				strcpy(m_pGuildTeleportLoc[i].m_cDestMapName, pMapName);
				m_pGuildTeleportLoc[i].m_dwTime = dwTime;
				return;
			}
		}
	dwTemp = 0;
	iIndex = -1;
	for (i = 0; i < DEF_MAXGUILDS; i++) {
		if (m_pGuildTeleportLoc[i].m_iV1 == 0) {
			m_pGuildTeleportLoc[i].m_iV1 = iGuildGUID;
			m_pGuildTeleportLoc[i].m_sDestX = dX;
			m_pGuildTeleportLoc[i].m_sDestY = dY;
			std::memset(m_pGuildTeleportLoc[i].m_cDestMapName, 0, sizeof(m_pGuildTeleportLoc[i].m_cDestMapName));
			strcpy(m_pGuildTeleportLoc[i].m_cDestMapName, pMapName);
			m_pGuildTeleportLoc[i].m_dwTime = dwTime;
			return;
		} else {
			if (dwTemp < (dwTime - m_pGuildTeleportLoc[i].m_dwTime)) {
				dwTemp = (dwTime - m_pGuildTeleportLoc[i].m_dwTime);
				iIndex = i;
			}
		}
	}
	if (iIndex == -1) return;
	PutLogList("(X) No more GuildTeleportLoc Space! Replaced.");
	m_pGuildTeleportLoc[i].m_iV1 = iGuildGUID;
	m_pGuildTeleportLoc[i].m_sDestX = dX;
	m_pGuildTeleportLoc[i].m_sDestY = dY;
	std::memset(m_pGuildTeleportLoc[i].m_cDestMapName, 0, sizeof(m_pGuildTeleportLoc[i].m_cDestMapName));
	strcpy(m_pGuildTeleportLoc[i].m_cDestMapName, pMapName);
	m_pGuildTeleportLoc[i].m_dwTime = dwTime;
}
// New 12/05/2004 Changed

void CGame::MeteorStrikeHandler(int iMapIndex) {
	int i;
	int ix;
	int iy;
	int dX;
	int dY;
	int iIndex;
	int iTargetIndex;
	int iTotalESG;
	int iEffect;
	int iTargetArray[DEF_MAXSTRIKEPOINTS];
	short sOwnerH;
	char cOwnerType;
	uint32_t dwTime = timeGetTime();
	PutLogList("(!) Beginning Meteor Strike Procedure...");
	if (iMapIndex == -1) {
		PutLogList("(X) MeteorStrikeHandler Error! MapIndex -1!");
		return;
	}
	if (m_pMapList[iMapIndex] == 0) {
		PutLogList("(X) MeteorStrikeHandler Error! 0 Map!");
		return;
	}
	if (m_pMapList[iMapIndex]->m_iTotalStrikePoints == 0) {
		PutLogList("(X) MeteorStrikeHandler Error! No Strike Points!");
		return;
	}
	for (i = 0; i < DEF_MAXSTRIKEPOINTS; i++) iTargetArray[i] = -1;
	iIndex = 0;
	for (i = 1; i <= m_pMapList[iMapIndex]->m_iTotalStrikePoints; i++) {
		if (m_pMapList[iMapIndex]->m_stStrikePoint[i].iHP > 0) {
			iTargetArray[iIndex] = i;
			iIndex++;
		}
	}
	wsprintf(G_cTxt, "(!) Map(%s) has %d available strike points", m_pMapList[iMapIndex]->m_cName, iIndex);
	PutLogList(G_cTxt);
	m_stMeteorStrikeResult.iCasualties = 0;
	m_stMeteorStrikeResult.iCrashedStructureNum = 0;
	m_stMeteorStrikeResult.iStructureDamageAmount = 0;
	if (iIndex == 0) {
		PutLogList("(!) No strike points!");
		bRegisterDelayEvent(DEF_DELAYEVENTTYPE_CALCMETEORSTRIKEEFFECT, 0, dwTime + 6000, 0, 0, iMapIndex, 0, 0, 0, 0, 0);
	} else {
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true) && (m_pClientList[i]->m_cMapIndex == iMapIndex)) {
				SendNotifyMsg(0, i, DEF_NOTIFY_METEORSTRIKEHIT, 0, 0, 0, 0);
			}
		for (i = 0; i < iIndex; i++) {
			iTargetIndex = iTargetArray[i];
			if (iTargetIndex == -1) {
				PutLogList("(X) Strike Point MapIndex: -1!");
				goto MSH_SKIP_STRIKE;
			}
			dX = m_pMapList[iMapIndex]->m_stStrikePoint[iTargetIndex].dX;
			dY = m_pMapList[iMapIndex]->m_stStrikePoint[iTargetIndex].dY;
			iTotalESG = 0;
			for (ix = dX - 10; ix <= dX + 10; ix++)
				for (iy = dY - 10; iy <= dY + 10; iy++) {
					m_pMapList[iMapIndex]->GetOwner(&sOwnerH, &cOwnerType, ix, iy);
					if ((cOwnerType == DEF_OWNERTYPE_NPC) && (m_pNpcList[sOwnerH] != 0) && (m_pNpcList[sOwnerH]->m_sType == NpcType::esg)) {
						iTotalESG++;
					}
				}
			wsprintf(G_cTxt, "(!) Meteor Strike Target(%d, %d) ESG(%d)", dX, dY, iTotalESG);
			PutLogList(G_cTxt);
			if (iTotalESG < 2) {
				m_pMapList[iMapIndex]->m_stStrikePoint[iTargetIndex].iHP -= (2 - iTotalESG);
				if (m_pMapList[iMapIndex]->m_stStrikePoint[iTargetIndex].iHP <= 0) {
					m_pMapList[iMapIndex]->m_stStrikePoint[iTargetIndex].iHP = 0;
					m_pMapList[m_pMapList[iMapIndex]->m_stStrikePoint[iTargetIndex].iMapIndex]->m_bIsDisabled = true;
					m_stMeteorStrikeResult.iCrashedStructureNum++;
				} else {
					m_stMeteorStrikeResult.iStructureDamageAmount += (2 - iTotalESG);
					iEffect = iDice(1, 5) - 1;
					iAddDynamicObjectList(0, DEF_OWNERTYPE_PLAYER_INDIRECT, DEF_DYNAMICOBJECT_FIRE2, iMapIndex, m_pMapList[iMapIndex]->m_stStrikePoint[iTargetIndex].iEffectX[iEffect] +(iDice(1, 3) - 2), m_pMapList[iMapIndex]->m_stStrikePoint[iTargetIndex].iEffectY[iEffect] +(iDice(1, 3) - 2), 60 * 1000 * 50);
				}
			}
MSH_SKIP_STRIKE:
			;
		}
		bRegisterDelayEvent(DEF_DELAYEVENTTYPE_DOMETEORSTRIKEDAMAGE, 0, dwTime + 1000, 0, 0, iMapIndex, 0, 0, 0, 0, 0);
		bRegisterDelayEvent(DEF_DELAYEVENTTYPE_DOMETEORSTRIKEDAMAGE, 0, dwTime + 4000, 0, 0, iMapIndex, 0, 0, 0, 0, 0);
		bRegisterDelayEvent(DEF_DELAYEVENTTYPE_CALCMETEORSTRIKEEFFECT, 0, dwTime + 6000, 0, 0, iMapIndex, 0, 0, 0, 0, 0);
	}
}

void CGame::CancelExchangeItem(int iClientH) {
	int iExH;
	iExH = m_pClientList[iClientH]->m_iExchangeH;
	_ClearExchangeStatus(iExH);
	_ClearExchangeStatus(iClientH);
}

void CGame::_ClearExchangeStatus(int iClientH) {
	if ((iClientH <= 0) || (iClientH >= DEF_MAXCLIENTS)) return;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_cExchangeName != false)
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CANCELEXCHANGEITEM, 0, 0, 0, 0, 0, 0,
			  0, 0, 0, 0, 0);
	m_pClientList[iClientH]->m_dwInitCCTime = false;
	m_pClientList[iClientH]->m_iAlterItemDropIndex = 0;
	m_pClientList[iClientH]->m_iExchangeH = 0;
	m_pClientList[iClientH]->m_bIsExchangeMode = false;
	m_pClientList[iClientH]->m_bIsExchangeConfirm = false;
	std::memset(m_pClientList[iClientH]->m_cExchangeName, 0, sizeof(m_pClientList[iClientH]->m_cExchangeName));
}

void CGame::SetForceRecallTime(int iClientH) {
	int iTL_ = 0;
	SYSTEMTIME SysTime;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsWarLocation == false) return;
	//PutLogProcessList("PROCESS #353");
	if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall == 0) {
		if (m_sForceRecallTime > 0) {
			m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sForceRecallTime;
		} else {
			GetLocalTime(&SysTime);
			switch (SysTime.wDayOfWeek) {
				case 1: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeMonday;
					break;
				case 2: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeTuesday;
					break;
				case 3: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeWednesday;
					break;
				case 4: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeThursday;
					break;
				case 5: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeFriday;
					break;
				case 6: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeSaturday;
					break;
				case 0: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeSunday;
					break;
			}
		}
	} else { // if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall == 0)
		if (m_sForceRecallTime > 0) {
			iTL_ = 60 * m_sForceRecallTime;
		} else {
			GetLocalTime(&SysTime);
			switch (SysTime.wDayOfWeek) {
				case 1: iTL_ = 60 * m_sRaidTimeMonday;
					break;
				case 2: iTL_ = 60 * m_sRaidTimeTuesday;
					break;
				case 3: iTL_ = 60 * m_sRaidTimeWednesday;
					break;
				case 4: iTL_ = 60 * m_sRaidTimeThursday;
					break;
				case 5: iTL_ = 60 * m_sRaidTimeFriday;
					break;
				case 6: iTL_ = 60 * m_sRaidTimeSaturday;
					break;
				case 0: iTL_ = 60 * m_sRaidTimeSunday;
					break;
				default: iTL_ = 60 * 1;
					break;
			}
			if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall > iTL_)
				m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = iTL_;
		}
	}
	// T I M E - L E F T - F O R C E - R E C A L L - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	char cMsg[120];
	std::memset(cMsg, 0, sizeof(cMsg));
	if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall >= 60) {
		int minutes = (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall / 60);
		wsprintf(cMsg, "Time left force recall %d Min", minutes);
	}// T I M E - L E F T - F O R C E - R E C A L L - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	else {
		wsprintf(cMsg, "Time left force recall %d Seconds", m_pClientList[iClientH]->m_iTimeLeft_ForceRecall);
	}
	ShowClientMsg(iClientH, cMsg);
	// T I M E - L E F T - F O R C E - R E C A L L - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
}

void CGame::CheckForceRecallTime(int iClientH) {
	SYSTEMTIME SysTime;
	int iTL_;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) return;
	//PutLogProcessList("PROCESS #354");
	if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall == 0) {
		// has admin set a recall time ??
		if (m_sForceRecallTime > 0) {
			m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = m_sForceRecallTime * 60;
		}// use standard recall time calculations
		else {
			GetLocalTime(&SysTime);
			switch (SysTime.wDayOfWeek) {
				case 1: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeMonday;
					break;
				case 2: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeTuesday;
					break;
				case 3: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeWednesday;
					break;
				case 4: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeThursday;
					break;
				case 5: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeFriday;
					break;
				case 6: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeSaturday;
					break;
				case 0: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * m_sRaidTimeSunday;
					break;
				default: m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = 60 * 1;
					break; //
			}
		}
	} else {
		// has admin set a recall time ??
		if (m_sForceRecallTime > 0) {
			iTL_ = m_sForceRecallTime * 60;
		}// use standard recall time calculations
		else {
			GetLocalTime(&SysTime);
			switch (SysTime.wDayOfWeek) {
				case 1: iTL_ = 60 * m_sRaidTimeMonday;
					break;
				case 2: iTL_ = 60 * m_sRaidTimeTuesday;
					break;
				case 3: iTL_ = 60 * m_sRaidTimeWednesday;
					break;
				case 4: iTL_ = 60 * m_sRaidTimeThursday;
					break;
				case 5: iTL_ = 60 * m_sRaidTimeFriday;
					break;
				case 6: iTL_ = 60 * m_sRaidTimeSaturday;
					break;
				case 0: iTL_ = 60 * m_sRaidTimeSunday;
					break;
				default: iTL_ = 60 * 1;
					break;
			}
			if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall > iTL_)
				m_pClientList[iClientH]->m_iTimeLeft_ForceRecall = iTL_;
		}
	}
	m_pClientList[iClientH]->m_bIsWarLocation = true;
	// T I M E - L E F T - F O R C E - R E C A L L - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	char cMsg[120];
	std::memset(cMsg, 0, sizeof(cMsg));
	if (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall >= 60) {
		int minutes = (m_pClientList[iClientH]->m_iTimeLeft_ForceRecall / 60);
		wsprintf(cMsg, "Time left force recall %d Min", minutes);
	}// T I M E - L E F T - F O R C E - R E C A L L - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	else {
		wsprintf(cMsg, "Time left force recall %d Seconds", m_pClientList[iClientH]->m_iTimeLeft_ForceRecall);
	}
	ShowClientMsg(iClientH, cMsg);
	// T I M E - L E F T - F O R C E - R E C A L L - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
}
int ITEMSPREAD_FIEXD_COORD [25][2] = {
	{ 0, 0}, //1
	{ 1, 0}, //2
	{ 1, 1}, //3
	{ 0, 1}, //4
	{-1, 1}, //5
	{-1, 0}, //6
	{-1, -1}, //7
	{ 0, -1}, //8
	{ 1, -1}, //9
	{ 2, -1}, //10
	{ 2, 0}, //11
	{ 2, 1}, //12
	{ 2, 2}, //13
	{ 1, 2}, //14
	{ 0, 2}, //15
	{-1, 2}, //16
	{-2, 2}, //17
	{-2, 1}, //18
	{-2, 0}, //19
	{-2, -1}, //20
	{-2, -2}, //21
	{-1, -2}, //22
	{ 0, -2}, //23
	{ 1, -2}, //24
	{ 2, -2}, //25
};

bool CGame::bGetMultipleItemNamesWhenDeleteNpc(NpcType sNpcType, int iProbability, int iMin, int iMax, short sBaseX, short sBaseY, int iItemSpreadType, int iSpreadRange, ItemId *iItemIDs, POINT *BasePos, int *iNumItem) {
	int iProb = 100;
	float fProb;
	float fProbA;
	float fProbB;
	float fProbC;
	ItemId iItemID;
	int iNum = 0;
	for (int i = 0; i < iMax; i++) {
		if (i > iMin) iProb = iProbability;
		fProb = (float) (100 - iProb) / 10.0;
		if (fProb < 1.0) fProb = 1.0;
		fProbA = fProbB = fProbC = fProb;
		fProbA = fProbA * 8.0f;
		fProbB = fProbB * 4.0f;
		fProbC = fProbC;
		iItemID = ItemId::none;
		switch (sNpcType) {
			case NpcType::devlin: // Wyvern
				switch (iDice(1, 4)) {
					case 1: if (iDice(1, 8000) == 1) iItemID = ItemId::kloness_blade;
						break; // Kloness Blade
					case 2: if (iDice(1, 2) == 2) iItemID = ItemId::excaliber;
						break; // Excaliber
					case 3: if (iDice(1, 500) == 2) iItemID = ItemId::xelima_blade;
						break; // Xelima's Blade
					case 4: if (iDice(1, 1500) == 2) iItemID = ItemId::ringof_grand_mage;
						break; // Ring of Grand Mage
					case 5: if (iDice(1, 250) == 2) iItemID = ItemId::ringof_demonpower;
						break; // Ring of Demon Power
				}
				if (iItemID == ItemId::none) {
					switch (iDice(1, 5)) {
						case 1: if (iDice(1, 500) == 2) iItemID = ItemId::knecklace_of_ice_pro;
							break; // KnecklaceOfIcePro
						case 2: if (iDice(1, 500) == 3) iItemID = ItemId::ringof_grand_mage;
							break; // RingofGrandMage
						case 3: if (iDice(1, 1500) == 3) iItemID = ItemId::ring_of_arcmage;
							break; // RingOfArcmage
						case 4: if (iDice(1, 250) == 3) iItemID = ItemId::ringof_wizard;
							break; // RingofWizard
						case 5: if (iDice(1, 1500) == 2) iItemID = ItemId::knecklace_of_ice_ele;
							break; // KnecklaceOfIceEle
					}
				}
				break;
				break;
			case NpcType::fire_wyvern: // Fire-Wyvern
				switch (iDice(1, 5)) {
					case 1: if (iDice(1, (45 * fProbA)) == 3) iItemID = ItemId::dark_executor;
						break; // DarkExecutor
					case 2: if (iDice(1, (35 * fProbA)) == 3) iItemID = ItemId::ringofthe_xelima;
						break; // RingoftheXelima
					case 3: if (iDice(1, (40 * fProbA)) == 3) iItemID = ItemId::necklace_of_xelima;
						break; // NecklaceOfXelima
					case 4: if (iDice(1, (1 * fProbA)) == 1) iItemID = ItemId::ring_of_dragonpower;
						break; // RingOfDragonpower
					case 5: if (iDice(1, (2 * fProbA)) == 1) iItemID = ItemId::kloness_esterk;
						break; // Kloness Esterk
				}
				if (iItemID == ItemId::none) {
					switch (iDice(1, 9)) {
						case 1: if (iDice(1, (700 * fProbB)) == 2) iItemID = ItemId::knecklace_of_efreet;
							break; // KnecklaceOfEfreet
						case 2: if (iDice(1, (500 * fProbB)) == 2) iItemID = ItemId::knecklace_of_fire_pro;
							break; // KnecklaceOfFirePro
						case 3: if (iDice(1, (700 * fProbB)) == 3) iItemID = ItemId::ringof_grand_mage;
							break; // RingofGrandMage
						case 4: if (iDice(1, (800 * fProbB)) == 3) iItemID = ItemId::ring_of_arcmage;
							break; // RingOfArcmage
						case 5: if (iDice(1, (600 * fProbB)) == 3) iItemID = ItemId::ringof_wizard;
							break; // RingofWizard
						case 6: if (iDice(1, (300 * fProbB)) == 2) iItemID = ItemId::flameberge_plus_3_llf;
							break; // Flameberge+3(LLF)
						case 7: if (iDice(1, (300 * fProbB)) == 3) iItemID = ItemId::blood_sword;
							break; // BloodSword
						case 8: if (iDice(1, (300 * fProbB)) == 3) iItemID = ItemId::blood_axe;
							break; // BloodAxe
						case 9: if (iDice(1, (300 * fProbB)) == 3) iItemID = ItemId::blood_rapier;
							break; // BloodRapier
					}
				}
				break;
			case NpcType::abaddon: // Abaddon
				switch (iDice(1, 7)) {
					case 1: if (iDice(1, (4 * fProbA)) == 1) iItemID = ItemId::the_devastator;
						break; // The_Devastator
					case 2: if (iDice(1, (2 * fProbA)) == 1) iItemID = ItemId::kloness_axe;
						break; // Kloness Axe
					case 3: if (iDice(1, (1 * fProbA)) == 1) iItemID = ItemId::necklace_of_xelima;
						break; // NecklaceOfXelima
					case 4: if (iDice(1, (2 * fProbA)) == 1) iItemID = ItemId::resur_wand_ms30;
						break; // ResurWand(MS.30)
					case 5: if (iDice(1, (1 * fProbA)) == 1) iItemID = ItemId::ringofthe_abaddon;
						break; // RingoftheAbaddon
					case 6: if (iDice(1, (2 * fProbA)) == 1) iItemID = ItemId::berserk_wand_ms30;
						break; // BerserkWand(MS.30)
					case 7: if (iDice(1, (3 * fProbA)) == 1) iItemID = ItemId::abaddon_wand_ms40;
						break; // AbaddonWand(MS.40)
				}
				if (iItemID == ItemId::none) {
					switch (iDice(1, 10)) {
						case 1: if (iDice(1, (4 * fProbB)) == 3) iItemID = ItemId::giant_battle_hammer;
							break; // GBattleHammer
						case 2: if (iDice(1, (4 * fProbB)) == 3) iItemID = ItemId::blood_axe;
							break; // BloodAxe
						case 3: if (iDice(1, (4 * fProbB)) == 3) iItemID = ItemId::blood_rapier;
							break; // BloodRapier
						case 4: if (iDice(1, (4 * fProbB)) == 3) iItemID = ItemId::xelima_axe;
							break; // XelimaAxe
						case 5: if (iDice(1, (4 * fProbB)) == 3) iItemID = ItemId::xelima_blade;
							break; // XelimaBlade
						case 6: if (iDice(1, (4 * fProbB)) == 3) iItemID = ItemId::sword_of_medusa;
							break; // Medusa Sword
						case 7: if (iDice(1, (4 * fProbB)) == 3) iItemID = ItemId::knecklace_of_efreet;
							break; // KnecklaceOfEfreet
						case 8: if (iDice(1, (4 * fProbB)) == 3) iItemID = ItemId::knecklace_of_fire_pro;
							break; // KnecklaceOfFirePro
						case 9: if (iDice(1, (4 * fProbB)) == 3) iItemID = ItemId::sotg_manual;
							break; // Strike of the Ghosts Manual
						case 10: if (iDice(1, (4 * fProbB)) == 3) iItemID = ItemId::magic_wand_mshield;
							break; // MagicWand(M.Shield)
					}
				}
				break;
			default: break;
		} // switch
		if (iItemID == ItemId::none) {
			switch (iDice(1, 19)) {
				case 1: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::ancient_tablet_rd;
					break; // AncientTablets
				case 2: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::ancient_tablet_ru;
					break; // AncientTablets
				case 3: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::ancient_tablet_ld;
					break; // AncientTablet
				case 4: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::ancient_tablet_lu;
					break; // AcientTablet(LU)
				case 5: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::zemstoneof_sacrifice;
					break; // ZemstoneOfSacrifice
				case 6: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::stone_of_xelima;
					break; // StoneOfXelima
				case 7: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::stone_of_merien;
					break; // StoneOfMerien
				case 8: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::platinum_ring;
					break; // PlatinumRing
				case 9: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::lucky_gold_ring;
					break; // LuckyGoldRing
				case 10: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::emerald_ring;
					break; // EmeraldRing
				case 11: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::sapphire_ring;
					break; // SapphireRing
				case 12: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::yellow_ball;
					break; // Yellow Ball
				case 13: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::flameberge_plus_3_llf;
					break; // Flameberge+3(LLF)
				case 14: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::golden_axe_llf;
					break; // GoldenAxe(LLF)
				case 15: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::magic_necklace_rm10;
					break; // MagicNecklace(RM10)
				case 16: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::magic_necklace_df10;
					break; // MagicNecklace(DF+10)
				case 17: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::magic_necklace_dm1;
					break; // MagicNecklace(DM+1)
				case 18: if (iDice(1, (2 * fProbC)) == 2) iItemID = ItemId::magic_necklace_ms10;
					break; // MagicNecklace(MS10)
				case 19: if (iDice(1, (3 * fProbC)) == 2) iItemID = ItemId::blue_ball;
					break; // Blue Ball
			}
		}
		if (iItemID == ItemId::none && iProb == 100) iItemID = ItemId::gold; // Gold
		if (iItemID != ItemId::none) {
			// item id
			iItemIDs[iNum] = iItemID;
			// item position
			switch (iItemSpreadType) {
				case DEF_ITEMSPREAD_RANDOM:
					BasePos[iNum].x = sBaseX + iSpreadRange - iDice(1, iSpreadRange * 2);
					BasePos[iNum].y = sBaseY + iSpreadRange - iDice(1, iSpreadRange * 2);
					break;
				case DEF_ITEMSPREAD_FIXED:
					BasePos[iNum].x = sBaseX + ITEMSPREAD_FIEXD_COORD[iNum][0];
					BasePos[iNum].y = sBaseY + ITEMSPREAD_FIEXD_COORD[iNum][1];
					break;
			}
			iNum++;
		}
	} // for
	*iNumItem = iNum;
	return true;
}
// 05/21/2004 - Hypnotoad - Balances to drop status
// Primary Drops

void CGame::NpcDeadItemGenerator(int iNpcH, short sAttackerH, char cAttackerType) {
	CItem * pItem;
	char cColor;
	char cItemName[21];
	int iGenLevel;
	int iResult;
	ItemId iItemID = ItemId::none;
	uint32_t dwType;
	uint32_t dwValue;
	double dTmp1;
	double dTmp2;
	double dTmp3;
	if (m_pNpcList[iNpcH] == 0) return;
	if ((cAttackerType != DEF_OWNERTYPE_PLAYER) || (m_pNpcList[iNpcH]->m_bIsSummoned == true)) return;
	if (m_pNpcList[iNpcH]->m_bIsUnsummoned == true) return;
	std::memset(cItemName, 0, sizeof(cItemName));
	switch (m_pNpcList[iNpcH]->m_sType) {
			// NPC not dropping Gold
		case NpcType::guard: // Guard
		case NpcType::dummy: // Dummy
		case NpcType::crops: // Crop
			return;
		default: break;
	}
	// 6500 default; the lower the greater the Weapon/Armor/Wand Drop
	if (iDice(1, 10000) >= m_iPrimaryDropRate) {
		// 35% Drop 60% of that is gold
		// 35% Chance of drop (35/100)
		if (iDice(1, 10000) <= 4000) {
			iItemID = ItemId::gold; // Gold: (35/100) * (60/100) = 21%
			// If a non-existing itemID is given create no item
			pItem = new CItem;
			if (_bInitItemAttr(pItem, iItemID) == false) {
				delete pItem;
				return;
			}
			pItem->m_dwCount = (uint32_t) (iDice(1, (m_pNpcList[iNpcH]->m_iGoldDiceMax - m_pNpcList[iNpcH]->m_iGoldDiceMin)) + m_pNpcList[iNpcH]->m_iGoldDiceMin);
			// v1.42 Gold
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH]->m_iAddGold != 0)) {
				dTmp1 = (double) m_pClientList[sAttackerH]->m_iAddGold;
				dTmp2 = (double) pItem->m_dwCount;
				dTmp3 = (dTmp1 / 100.0f) * dTmp2;
				pItem->m_dwCount += (int) dTmp3;
			}
		} else {
			// 9000 default; the lower the greater the Weapon/Armor/Wand Drop
			// 35% Drop 40% of that is an Item
			dTmp1 = m_pClientList[sAttackerH]->m_iRating*m_cRepDropModifier;
			if (dTmp1 > 3000) dTmp1 = 3000;
			if (dTmp1 < -3000) dTmp1 = -3000;
			dTmp2 = (m_iSecondaryDropRate - (dTmp1));
			if (iDice(1, 10000) <= dTmp2) {
				// 40% Drop 90% of that is a standard drop
				// Standard Drop Calculation: (35/100) * (40/100) * (90/100) = 12.6%
				iResult = iDice(1, 13000);
				if ((iResult >= 1) && (iResult <= 3000)) dwValue = 1;
				else if ((iResult >= 3001) && (iResult <= 4000)) dwValue = 2;
				else if ((iResult >= 4001) && (iResult <= 5500)) dwValue = 3;
				else if ((iResult >= 5501) && (iResult <= 6700)) dwValue = 4;
				else if ((iResult >= 6701) && (iResult <= 8500)) dwValue = 5;
				else if ((iResult >= 8501) && (iResult <= 8999)) dwValue = 6;
				else if ((iResult >= 9000) && (iResult <= 10500)) dwValue = 7;
				else if ((iResult >= 10501) && (iResult <= 11200)) dwValue = 8;
				else if ((iResult >= 11201) && (iResult <= 13000)) dwValue = 9;
				switch (dwValue) {
					case 1: iItemID = ItemId::green_potion;
						break; // Green Potion
					case 2: iItemID = ItemId::red_potion;
						break; // Red Potion
					case 3: iItemID = ItemId::blue_potion;
						break; // Blue Potion
					case 4: iItemID = ItemId::big_green_potion;
						break; // Big Green Potion
					case 5: iItemID = ItemId::big_red_potion;
						break; // Big Red Potion
					case 6: iItemID = ItemId::big_blue_potion;
						break; // Big Blue Potion
					case 7: switch (iDice(1, 2)) {
							case 1: iItemID = ItemId::power_green_potion;
								break; // Power Green Potion
							case 2: iItemID = ItemId::green_potion;
								break; // Green Potion
						}
						break;
					case 8: switch (iDice(1, 6)) {
							case 1: iItemID = ItemId::super_pg_potion;
								break; // Super Power Green Potion
							case 2: iItemID = ItemId::zemstoneof_sacrifice;
								break; // Zemstone of Sacrifice
							case 3: iItemID = ItemId::stone_of_xelima;
								break; // Xelima Stone
							case 4: iItemID = ItemId::stone_of_merien;
								break; // Merien Stone
							case 5: iItemID = ItemId::green_potion;
								break; // Green Potion
							case 6: switch (iDice(1, 5)) {
									case 1: iItemID = ItemId::green_ball;
										break; // GreenBall
									case 2: iItemID = ItemId::red_ball;
										break; // RedBall
									case 3: iItemID = ItemId::yellow_ball;
										break; // YellowBall
									case 4: iItemID = ItemId::blue_ball;
										break; // BlueBall
									case 5: switch (iDice(1, 11)) {
											case 1: iItemID = ItemId::magin_diamond;
												break; // ArmorDye(Indigo)
											case 2: iItemID = ItemId::magin_ruby;
												break; // ArmorDye(Crimson-Red)
											case 3: iItemID = ItemId::magic_emerald;
												break; // ArmorDye(Gold)
											case 4: iItemID = ItemId::magic_sapphire;
												break; // ArmorDye(Aqua)
											case 5: iItemID = ItemId::lucky_prize_ticket;
												break; // ArmorDye(Pink)
											case 6: iItemID = ItemId::magic_necklace_df_plus_15;
												break; // ArmorDye(Violet)
											case 7: iItemID = ItemId::magic_necklace_df_plus_20;
												break; // ArmorDye(Blue)
											case 8: iItemID = ItemId::magic_necklace_df_plus_25;
												break; // ArmorDye(Khaki)
											case 9: iItemID = ItemId::magic_necklace_df_plus_30;
												break; // ArmorDye(Yellow)
											case 10: iItemID = ItemId::magic_necklace_dm_plus_2;
												break; // ArmorDye(Red)
											case 11: iItemID = ItemId::pearl_ball;
												break; // PearlBall
										}
										break;
								}
								break;
						}
						break;
					case 9:
						SYSTEMTIME SysTime;
						GetLocalTime(&SysTime);
						if (((short) SysTime.wMonth == 12) && (m_pNpcList[iNpcH]->m_sType == NpcType::rudolph || m_pNpcList[iNpcH]->m_sType == NpcType::rabbit)) {
							switch (iDice(1, 4)) {
								case 1: iItemID = ItemId::red_candy;
									break; // Red Candy
								case 2: iItemID = ItemId::blue_candy;
									break; // Blue Candy
								case 3: iItemID = ItemId::green_candy;
									break; // Green Candy
								case 4: iItemID = ItemId::red_potion;
									break; // Red Potion
							}
						}
						break;
				}
				// If a non-existing item is created then delete the item
				pItem = new CItem;
				if (_bInitItemAttr(pItem, iItemID) == false) {
					delete pItem;
					return;
				}
			} else {
				// Valuable Drop Calculation: (35/100) * (40/100) * (10/100) = 1.4%
				// Define iGenLevel using Npc.cfg#
				switch (m_pNpcList[iNpcH]->m_sType) {
					case NpcType::slime: // Slime
					case NpcType::giant_ant: // Giant-Ant
					case NpcType::amphis: // Amphis
					case NpcType::rabbit: // Rabbit
					case NpcType::cat: //	Cat
						iGenLevel = 1;
						break;
					case NpcType::skeleton: // Skeleton
					case NpcType::orc: // Orc, Orc-Mage
					case NpcType::scorpion: // Scorpion
					case NpcType::zombie: // Zombie
						iGenLevel = 2;
						break;
					case NpcType::stone_golem: // Stone-Golem
					case NpcType::clay_golem: // Clay-Golem
						iGenLevel = 3;
						break;
					case NpcType::hellbound: // Hellbound
					case NpcType::rudolph: // Rudolph
						iGenLevel = 4;
						break;
					case NpcType::claw_turtle: // Claw-Turtle
					case NpcType::giant_plant: // Giant-Plant
					case NpcType::giant_crayfish: // Giant-Crayfish
					case NpcType::cyclops: // Cyclops
					case NpcType::troll: // Troll
					case NpcType::beholder: // Beholder
					case NpcType::cannibal_plant: // Cannibal-Plant
					case NpcType::dire_boar: // DireBoar
						iGenLevel = 5;
						break;
					case NpcType::orge: // Orge
					case NpcType::were_wolf: // WereWolf
					case NpcType::stalker: // Stalker
					case NpcType::dark_elf: // Dark-Elf
					case NpcType::ice_golem: // Ice-Golem
					case NpcType::minotaurs: // Minotaurus
						iGenLevel = 6;
						break;
					case NpcType::barlog: // Balrogs
					case NpcType::centaurus: // Centaurus
					case NpcType::liche: // Liche
					case NpcType::frost: // Frost
					case NpcType::nizie: // Nizie
					case NpcType::ettin: // Ettin
					case NpcType::giant_lizard: // Lizards
						iGenLevel = 7;
						break;
					case NpcType::demon: // Demon
					case NpcType::unicorn: // Unicorn
					case NpcType::hellclaw: // Hellclaw
					case NpcType::tigerworm: // Tigerworm
					case NpcType::gagoyle: // Gagoyle
						iGenLevel = 8;
						break;
					case NpcType::mountain_giant: // MountainGiant
						iGenLevel = 9;
						break;
					case NpcType::master_mage_orc: // MasterMage-Orc
						iGenLevel = 10;
						break;
					default: break;
				}
				if (iGenLevel == 0) return;
				// Weapon Drop:
				// 1.4% chance Valuable Drop 60% that it is a Weapon
				if (iDice(1, 10000) <= 4000) {
					if (iDice(1, 10000) <= 6000) {
						// 70% the Weapon is Melee
						switch (iGenLevel) {
							case 1: // Slime, Giant-Ant, Amphis, Rabbit, Cat
								switch (iDice(1, 3)) {
									case 1: iItemID = ItemId::dagger;
										break; // Dagger
									case 2: iItemID = ItemId::short_sword;
										break; // ShortSword
									case 3: iItemID = ItemId::light_axe;
										break; // LightAxe
								}
								break;
							case 2: // Skeleton, Orc, Orc-Mage, Scorpion, Zombie
								switch (iDice(1, 6)) {
									case 1: iItemID = ItemId::main_gauche;
										break; // MainGauche
									case 2: iItemID = ItemId::gradius;
										break; // Gradius
									case 3: iItemID = ItemId::sexon_axe;
										break; // SexonAxe
									case 4: iItemID = ItemId::tomahoc;
										break; // Tomahoc
									case 5: iItemID = ItemId::sabre;
										break; // Sabre
									case 6: iItemID = ItemId::esterk;
										break; // Esterk
								}
								break;
							case 3: // Stone-Golem, Clay-Golem
								switch (iDice(1, 4)) {
									case 1: iItemID = ItemId::long_sword;
										break; // LongSword
									case 2: iItemID = ItemId::double_axe;
										break; // DoubleAxe
									case 3: iItemID = ItemId::sabre;
										break; // Sabre
									case 4: iItemID = ItemId::esterk;
										break; // Esterk
								}
								break;
							case 4: // Hellbound, Rudolph
								switch (iDice(1, 2)) {
									case 1: iItemID = ItemId::scimitar;
										break; // Scimitar
									case 2: iItemID = ItemId::esterk;
										break; // Esterk
								}
								break;
							case 5: // Cyclops, Troll, Beholder, Cannibal-Plant, DireBoar
								switch (iDice(1, 4)) {
									case 1: iItemID = ItemId::esterk;
										break; // Esterk
									case 2: iItemID = ItemId::rapier;
										break; // Rapier
									case 3: iItemID = ItemId::war_axe;
										break; // WarAxe
									case 4: iItemID = ItemId::great_sword;
										break; // greatsword
								}
								break;
							case 6: // Orge, WereWolf, Dark-Elf, Ice-Golem, minatours
								switch (iDice(1, 3)) {
									case 1: iItemID = ItemId::flameberge;
										break; // Flameberge
									case 2: iItemID = ItemId::giant_sword;
										break; // Giant Sword
										//case 3: iItemID = ItemId::battle_axe;
										//	break; // Battle Axe
									case 3: iItemID = ItemId::great_sword_plus_1;
										break; // Great Sword
								}
								break;
							case 7: // Liche, Frost
								switch (iDice(1, 4)) {
									case 1: iItemID = ItemId::flameberge;
										break; // Flameberge
									case 2: iItemID = ItemId::hammer;
										break; // Hammer
									case 3: iItemID = ItemId::great_sword_plus_1;
										break; // Great Sword
									case 4: iItemID = ItemId::giant_sword;
										break; // Giant Sword
								}
								break;
							case 8: // Demon, Unicorn, Hellclaw, Tigerworm, Gagoyle
								switch (iDice(1, 4)) {
									case 1: iItemID = ItemId::black_shadow_sword;
										break; // Black Shadow Sword
									case 2: iItemID = ItemId::giant_sword;
										break; // Giant Sword
									case 3: iItemID = ItemId::battle_axe;
										break; // BattleAxe
									case 4: iItemID = ItemId::hammer;
										break; //Hammer
								}
								break;
							case 9: // MountainGiant
								switch (iDice(1, 2)) {
									case 1: iItemID = ItemId::battle_hammer;
										break; // Battle Hammer
									case 2: iItemID = ItemId::hammer;
										break; // Hammer
										/*case 3: iItemID = ItemId::falchion;
											break; // Falchion
										case 4: iItemID = ItemId::esterk;
											break; // Esterk
										case 5: iItemID = ItemId::rapier;
											break; // Rapier
										case 6: iItemID = ItemId::hammer;
											break; // Hammer*/
								}
								break;
							case 10: // Ettin
								switch (iDice(1, 3)) {
									case 1: iItemID = ItemId::black_shadow_sword;
										break; // Black Shadow Sword
									case 2: iItemID = ItemId::battle_hammer;
										break; // BattleHammer
										//case 3: iItemID = ItemId::barbarian_hammer;
										//	break; // Barbarian Hammer
									case 3: iItemID = ItemId::hammer;
										break; // Hammer
								}
								break;
						}
					} else {
						// 30% the weapon is a Wand
						switch (iGenLevel) {
							case 2:
							case 3:
								iItemID = ItemId::magic_wand_ms0;
								break; // MagicWand(MS0)
							case 4:
							case 5:
							case 6:
								iItemID = ItemId::magic_wand_ms10;
								break; // MagicWand(MS10)
							case 7:
							case 8:
								iItemID = ItemId::magic_wand_ms20;
								break; // MagicWand(MS20) //Changed 03-03-12
							case 9:
							case 10:
								break;
						}
					}
				} else {
					// 1.4% chance Valuable Drop 40% that drop is an Armor/Shield
					switch (iGenLevel) {
						case 1: // Slime, Giant-Ant, Amphis, Rabbit, Cat
							switch (iDice(1, 11)) {
								case 1: iItemID = ItemId::shirt_m;
									break; // Shirt M
								case 2: iItemID = ItemId::shirt_w;
									break; // Shirt W
								case 3: iItemID = ItemId::trousers_m;
									break; // Trousers M
								case 4: iItemID = ItemId::trousers_w;
									break; // Trousers W
								case 5: iItemID = ItemId::knee_trousers_m;
									break; // Knee Trousers M
								case 6: iItemID = ItemId::knee_trousers_w;
									break; // Knee Trousers W
								case 7: iItemID = ItemId::chemise_w;
									break; // Chemise W
								case 8: iItemID = ItemId::bodice_w;
									break; // Bodice W
								case 9: iItemID = ItemId::long_bodice_w;
									break; // Long Bodice W
								case 10: iItemID = ItemId::skirt_w;
									break; // Skirt W
								case 11: iItemID = ItemId::tunic_m;
									break; // Tunic M
							}
							break;
						case 2: // Skeleton, Orc, Orc-Mage, Scorpion, Zombie
							switch (iDice(1, 2)) {
								case 1: iItemID = ItemId::wood_shield;
									break; // WoodShield
								case 2: iItemID = ItemId::targe_shield;
									break; // TargeShield
							}
							break;
						case 3: switch (iDice(1, 2)) {// Stone-Golem, Clay-Golem
								case 1: iItemID = ItemId::wood_shield;
									break; // WoodShield
								case 2: iItemID = ItemId::targe_shield;
									break; // TargeShield
							}
							break;
						case 4: // Hellbound, Rudolph
							switch (iDice(1, 6)) {
								case 1: iItemID = ItemId::shoes; // Shoes
									break;
								case 2: iItemID = ItemId::hauberk_m; // Hauberk M
									break;
								case 3: iItemID = ItemId::iron_shield; // IronShield
									break;
								case 4: iItemID = ItemId::hauberk_w; // Hauberk W
									break;
								case 5: iItemID = ItemId::chain_hose_m; // ChainHose M
									break;
								case 6: iItemID = ItemId::chain_hose_w; // ChainHose W
									break;
							}
							break;
						case 5: // Cyclops, Troll, Beholder, Cannibal-Plant, DireBoar
							//switch (iDice(1, 12)) {
							switch (iDice(1, 7)) {
								case 1: iItemID = ItemId::hauberk_m; // Hauberk M
									break;
								case 2: iItemID = ItemId::lagi_shield; // LagiShield
									break;
								case 3: iItemID = ItemId::hauberk_w; // Hauberk W
									break;
								case 4: iItemID = ItemId::chain_hose_m; // ChainHose M
									break;
								case 5: iItemID = ItemId::chain_hose_w; // ChainHose W
									break;
								case 6: iItemID = ItemId::helm_m; // Helm M
									break;
								case 7: iItemID = ItemId::helm_w; // Helm W
									break;
									/*case 1: iItemID = ItemId::dream_plate_mail_m;
										break; // Dream Plate (M)
									case 2: iItemID = ItemId::dream_plate_mail_w;
										break; // Dream Plate (W
									case 3: iItemID = ItemId::dream_leggings_m;
										break; // Dream Leggings(M)
									case 4: iItemID = ItemId::dream_leggings_w;
										break; // Dream Leggings(W)
									case 5: iItemID = ItemId::dream_hauberk_m;
										break; // Dream Hauberk(M)
									case 6: iItemID = ItemId::dream_hauberk_w;
										break; // Dream Hauberk(W)
									case 7: iItemID = ItemId::dream_chain_mail_w;
										break; // Dream Hauberk(M)
									case 8: iItemID = ItemId::dream_chain_mail_m;
										break; // Dream Hauberk(W)
									case 9: iItemID = ItemId::dream_hat_m;
										break; // Dream Helm (M)
									case 10: iItemID = ItemId::dream_hat_w;
										break; // Dream Helm (W)
									case 11: iItemID = ItemId::dream_helm_m;
										break; // Dream Helm (M)
									case 12: iItemID = ItemId::dream_helm_w;
										break; // Dream Helm (W)*/
							}
							break;
						case 6: // Orge, WereWolf, Stalker, Dark-Elf, Ice-Golem
							switch (iDice(1, 9)) {
								case 1: iItemID = ItemId::hauberk_m; // Hauberk M
									break;
								case 2: iItemID = ItemId::lagi_shield; // LagiShield
									break;
								case 3: iItemID = ItemId::hauberk_w; // Hauberk W
									break;
								case 4: iItemID = ItemId::chain_hose_m; // ChainHose M
									break;
								case 5: iItemID = ItemId::chain_hose_w; // ChainHose W
									break;
								case 6: iItemID = ItemId::helm_m; // Helm M
									break;
								case 7: iItemID = ItemId::helm_w; // Helm W
									break;
								case 8: iItemID = ItemId::wizard_cap_m; // Wizard Cap M
									break;
								case 9: iItemID = ItemId::wizard_cap_w; // Wizard Cap W
									break;
									/*switch (iDice(1, 12)) {
									case 1: iItemID = ItemId::extasis_chain_mail_w;
  break; // ExtasisMail(M)
									case 2: iItemID = ItemId::extasis_chain_mail_m;
  break; // ExtasisMail(W)
									case 3: iItemID = ItemId::extasis_plate_mail_m;
  break; // ExtasisPlateMail(M)
									case 4: iItemID = ItemId::extasis_plate_mail_w;
  break; // ExtasisPlateMail(W)
									case 5: iItemID = ItemId::extasis_helm_m;
  break; // ExtasisWings-Helm(M)
									case 6: iItemID = ItemId::extasis_helm_w;
  break; // ExtasisWings-Helm(W)
									case 7: iItemID = ItemId::extasis_hat_m;
  break; // Wizard-Hat(M)
									case 8: iItemID = ItemId::extasis_hat_w;
  break; // Wizard-Hat(W)
									case 9: iItemID = ItemId::extasis_hauberk_m;
  break; // ExtasisHauberk(M)
									case 10: iItemID = ItemId::extasis_hauberk_w;
  break; // ExtasisHauberk(W)
									case 11: iItemID = ItemId::extasis_leggings_m;
  break; // ExtasisChainHose(M)
									case 12: iItemID = ItemId::extasis_leggings_w;
  break; // ExtasisChainHose(W)*/
							}
							break;
						case 7: // Liche, Frost, Ettin & Lizards
							switch (iDice(1, 11)) {
								case 1: iItemID = ItemId::hauberk_m; // Hauberk M
									break;
								case 2: iItemID = ItemId::wings_helm_m; // Wings-Helm M
									break;
								case 3: iItemID = ItemId::hauberk_w; // Hauberk W
									break;
								case 4: iItemID = ItemId::chain_hose_m; // ChainHose M
									break;
								case 5: iItemID = ItemId::chain_hose_w; // ChainHose W
									break;
								case 6: iItemID = ItemId::helm_m; // Helm M
									break;
								case 7: iItemID = ItemId::helm_w; // Helm W
									break;
								case 8: iItemID = ItemId::wizard_cap_m; // Wizard Cap M
									break;
								case 9: iItemID = ItemId::wizard_cap_w; // Wizard Cap W
									break;
								case 10: iItemID = ItemId::wings_helm_w; // Wings-Helm W
									break;
								case 11: iItemID = ItemId::tower_shield; // TowerShield
									break;
									/*switch (iDice(1, 12)) {
										case 1: iItemID = ItemId::rune_hauberk_m;
											break; // RuneHauberk(M)
										case 2: iItemID = ItemId::rune_hauberk_w;
											break; // RuneHauberk(W)
										case 3: iItemID = ItemId::rune_plate_mail_m;
											break; // RunePlateMail(M)
										case 4: iItemID = ItemId::rune_plate_mail_w;
											break; // RunePlateMail(W)
										case 5: iItemID = ItemId::rune_leggings_m;
											break; // RuneLeggings(M)
										case 6: iItemID = ItemId::rune_leggings_w;
											break; // RuneLeggings(W)
										case 7: iItemID = ItemId::rune_hat_m;
											break; // RuneHat(M)
										case 8: iItemID = ItemId::rune_hat_w;
											break; // RuneHat(M)
										case 9: iItemID = ItemId::rune_helm_m;
											break; // RuneFull-Helm(M)
										case 10: iItemID = ItemId::rune_helm_w;
											break; // RuneFull-Helm(M)
										case 11: iItemID = ItemId::rune_chain_mail_w;
											break; //Rune Chain Mail(M)
										case 12: iItemID = ItemId::rune_chain_mail_m;
											break; // Rune Chain Mail (W)*/
							}
							break;
						case 8: switch (iDice(1, 23)) {// Demon, Unicorn, Hellclaw, Tigerworm, Gagoyle
								case 1: iItemID = ItemId::cape; // Cape
									break;
								case 2: iItemID = ItemId::shoes; //Shoes.
									break;
								case 3: iItemID = ItemId::tower_shield; // TowerShield
									break;
								case 4: iItemID = ItemId::plate_mail_m; // PlateMail M
									break;
								case 5: iItemID = ItemId::plate_mail_w; // PlateMail W
									break;
								case 6: iItemID = ItemId::chain_mail_m; // ChainMail M
									break;
								case 7: iItemID = ItemId::chain_mail_w; // ChainMail W
									break;
								case 8: iItemID = ItemId::full_helm_m; // FullHelm M
									break;
								case 9: iItemID = ItemId::full_helm_w; // FullHelm W
									break;
								case 10: iItemID = ItemId::wizard_hat_m; // Wizard Hat M
									break;
								case 11: iItemID = ItemId::wizard_hat_w; // Wizard Hat W
									break;
								case 12: iItemID = ItemId::horned_helm_m; // Horned Helm M
									break;
								case 13: iItemID = ItemId::horned_helm_w; // Horned Helm W
									break;
								case 14: iItemID = ItemId::hauberk_m; // Hauberk M
									break;
								case 15: iItemID = ItemId::wings_helm_m; // Wings-Helm M
									break;
								case 16: iItemID = ItemId::hauberk_w; // Hauberk W
									break;
								case 17: iItemID = ItemId::chain_hose_m; // ChainHose M
									break;
								case 18: iItemID = ItemId::chain_hose_w; // ChainHose W
									break;
								case 19: iItemID = ItemId::helm_m; // Helm M
									break;
								case 20: iItemID = ItemId::helm_w; // Helm W
									break;
								case 21: iItemID = ItemId::wizard_cap_m; // Wizard Cap M
									break;
								case 22: iItemID = ItemId::wizard_cap_w; // Wizard Cap W
									break;
								case 23: iItemID = ItemId::wings_helm_w; // Wings-Helm W
									break;
							}
							break;
						case 9: switch (iDice(1, 10)) {
								case 1: iItemID = ItemId::hauberk_m; // Hauberk M
									break;
								case 2: iItemID = ItemId::full_helm_m; // Full-Helm M
									break;
								case 3: iItemID = ItemId::hauberk_w; // Hauberk W
									break;
								case 4: iItemID = ItemId::chain_hose_m; // ChainHose M
									break;
								case 5: iItemID = ItemId::chain_hose_w; // ChainHose W
									break;
								case 6: iItemID = ItemId::helm_m; // Helm M
									break;
								case 7: iItemID = ItemId::helm_w; // Helm W
									break;
								case 8: iItemID = ItemId::wizard_cap_m; // Wizard Cap M
									break;
								case 9: iItemID = ItemId::wizard_cap_w; // Wizard Cap W
									break;
								case 10: iItemID = ItemId::full_helm_w; // Full-Helm W
									break;
									/*switch (iDice(1, 12)) { //M-G only.
									case 1: iItemID = ItemId::rune_hauberk_m;
  break; // RuneHauberk(M)
									case 2: iItemID = ItemId::rune_hauberk_w;
  break; // RuneHauberk(W)
									case 3: iItemID = ItemId::rune_plate_mail_m;
  break; // RunePlateMail(M)
									case 4: iItemID = ItemId::rune_plate_mail_w;
  break; // RunePlateMail(W)
									case 5: iItemID = ItemId::rune_leggings_m;
  break; // RuneLeggings(M)
									case 6: iItemID = ItemId::rune_leggings_w;
  break; // RuneLeggings(W)
									case 7: iItemID = ItemId::rune_hat_m;
  break; // RuneHat(M)
									case 8: iItemID = ItemId::rune_hat_w;
  break; // RuneHat(M)
									case 9: iItemID = ItemId::rune_helm_m;
  break; // RuneFull-Helm(M)
									case 10: iItemID = ItemId::rune_helm_w;
  break; // RuneFull-Helm(M)
									case 11: iItemID = ItemId::rune_chain_mail_w;
  break; //Rune Chain Mail(M)
									case 12: iItemID = ItemId::rune_chain_mail_m;
  break; // Rune Chain Mail (W)*/
							}
							break;
						case 10: switch (iDice(1, 10)) {
								case 1: iItemID = ItemId::hauberk_m; // Hauberk M
									break;
								case 2: iItemID = ItemId::full_helm_m; // Full-Helm M
									break;
								case 3: iItemID = ItemId::hauberk_w; // Hauberk W
									break;
								case 4: iItemID = ItemId::chain_hose_m; // ChainHose M
									break;
								case 5: iItemID = ItemId::chain_hose_w; // ChainHose W
									break;
								case 6: iItemID = ItemId::helm_m; // Helm M
									break;
								case 7: iItemID = ItemId::helm_w; // Helm W
									break;
								case 8: iItemID = ItemId::wizard_cap_m; // Wizard Cap M
									break;
								case 9: iItemID = ItemId::wizard_cap_w; // Wizard Cap W
									break;
								case 10: iItemID = ItemId::full_helm_w; // Full-Helm W
									break;
								case 11: iItemID = ItemId::tower_shield; // TowerShield
									break;
								case 12: iItemID = ItemId::chain_mail_m; // ChainMail M
									break;
								case 13: iItemID = ItemId::chain_mail_w; // ChainMail W
									break;
									//HElm,FullHelm,TowerShield,Chainhose,ChainMail,Berk,WizCap,WingsHelm
									/*switch (iDice(1, 12)) { //Master Mage ORc..
									case 1: iItemID = ItemId::rune_hauberk_m;
  break; // RuneHauberk(M)
									case 2: iItemID = ItemId::rune_hauberk_w;
  break; // RuneHauberk(W)
									case 3: iItemID = ItemId::rune_plate_mail_m;
  break; // RunePlateMail(M)
									case 4: iItemID = ItemId::rune_plate_mail_w;
  break; // RunePlateMail(W)
									case 5: iItemID = ItemId::rune_leggings_m;
  break; // RuneLeggings(M)
									case 6: iItemID = ItemId::rune_leggings_w;
  break; // RuneLeggings(W)
									case 7: iItemID = ItemId::rune_hat_m;
  break; // RuneHat(M)
									case 8: iItemID = ItemId::rune_hat_w;
  break; // RuneHat(M)
									case 9: iItemID = ItemId::rune_helm_m;
  break; // RuneFull-Helm(M)
									case 10: iItemID = ItemId::rune_helm_w;
  break; // RuneFull-Helm(M)
									case 11: iItemID = ItemId::rune_chain_mail_w;
  break; //Rune Chain Mail(M)
									case 12: iItemID = ItemId::rune_chain_mail_m;
  break; // Rune Chain Mail (W)*/
							}
							break;
					}
				}
				pItem = new CItem;
				if (_bInitItemAttr(pItem, iItemID) == false) {
					delete pItem;
					return;
				}
				if (pItem->m_sItemEffectType == ItemEffectType::attack) {
					iResult = iDice(1, 10000);
					if ((iResult >= 1) && (iResult <= 299)) {
						dwType = 6;
						cColor = 2;
					} else if ((iResult >= 300) && (iResult <= 999)) {
						dwType = 8;
						cColor = 3;
					} else if ((iResult >= 1000) && (iResult <= 2499)) {
						dwType = 1;
						cColor = 5;
					} else if ((iResult >= 2500) && (iResult <= 4499)) {
						dwType = 5;
						cColor = 1;
					} else if ((iResult >= 4500) && (iResult <= 6499)) {
						dwType = 3;
						cColor = 7;
					} else if ((iResult >= 6500) && (iResult <= 8099)) {
						dwType = 2;
						cColor = 4;
					} else if ((iResult >= 8100) && (iResult <= 9699)) {
						dwType = 7;
						cColor = 6;
					} else if ((iResult >= 9700) && (iResult <= 10000)) {
						dwType = 9;
						cColor = 8;
					}
					pItem->m_cItemColor = cColor;
					iResult = iDice(1, 30000);
					if ((iResult >= 1) && (iResult < 10000)) dwValue = 1; // 10000/29348 = 34%
					else if ((iResult >= 10000) && (iResult < 17400)) dwValue = 2; // 6600/29348 = 22.4%
					else if ((iResult >= 17400) && (iResult < 22400)) dwValue = 3; // 4356/29348 = 14.8%
					else if ((iResult >= 22400) && (iResult < 25400)) dwValue = 4; // 2874/29348 = 9.7%
					else if ((iResult >= 25400) && (iResult < 27400)) dwValue = 5; // 1897/29348 = 6.4%
					else if ((iResult >= 27400) && (iResult < 28400)) dwValue = 6; // 1252/29348 = 4.2%
					else if ((iResult >= 28400) && (iResult < 28900)) dwValue = 7; // 826/29348 = 2.8%
					else if ((iResult >= 28900) && (iResult < 29300)) dwValue = 8; // 545/29348 = 1.85%
					else if ((iResult >= 29300) && (iResult < 29600)) dwValue = 9; // 360/29348 = 1.2%
					else if ((iResult >= 29600) && (iResult < 29800)) dwValue = 10; // 237/29348 = 0.8%
					else if ((iResult >= 29800) && (iResult < 29900)) dwValue = 11; // 156/29348 = 0.5%
					else if ((iResult >= 29900) && (iResult < 29970)) dwValue = 12; // 103/29348 = 0.3%
					else if ((iResult >= 29970) && (iResult <= 30000)) dwValue = 13; // 68/29348 = 0.1%
					else dwValue = 1; // v2.03 906
					switch (dwType) {
						case 1:
							if (dwValue <= 5) dwValue = 5;
							break;
						case 2:
							if (dwValue <= 4) dwValue = 4;
							break;
						case 6:
							if (dwValue <= 4) dwValue = 4;
							break;
						case 8:
							if (dwValue <= 2) dwValue = 2;
							break;
					}
					if ((iGenLevel <= 2) && (dwValue > 7)) dwValue = 7;
					pItem->m_dwAttribute = 0;
					dwType = dwType << 20;
					dwValue = dwValue << 16;
					pItem->m_dwAttribute = pItem->m_dwAttribute | dwType | dwValue;
					if (iDice(1, 10000) >= 6000) {
						iResult = iDice(1, 10000);
						if ((iResult >= 1) && (iResult <= 4999)) dwType = 2;
						else if ((iResult >= 5000) && (iResult <= 8499)) dwType = 10;
						else if ((iResult >= 8500) && (iResult <= 9499)) dwType = 12;
						else if ((iResult >= 9500) && (iResult <= 10000)) dwType = 11;
						iResult = iDice(1, 30000);
						if ((iResult >= 1) && (iResult < 10000)) dwValue = 1; // 10000/29348 = 34%
						else if ((iResult >= 10000) && (iResult < 17400)) dwValue = 2; // 6600/29348 = 22.4%
						else if ((iResult >= 17400) && (iResult < 22400)) dwValue = 3; // 4356/29348 = 14.8%
						else if ((iResult >= 22400) && (iResult < 25400)) dwValue = 4; // 2874/29348 = 9.7%
						else if ((iResult >= 25400) && (iResult < 27400)) dwValue = 5; // 1897/29348 = 6.4%
						else if ((iResult >= 27400) && (iResult < 28400)) dwValue = 6; // 1252/29348 = 4.2%
						else if ((iResult >= 28400) && (iResult < 28900)) dwValue = 7; // 826/29348 = 2.8%
						else if ((iResult >= 28900) && (iResult < 29300)) dwValue = 8; // 545/29348 = 1.85%
						else if ((iResult >= 29300) && (iResult < 29600)) dwValue = 9; // 360/29348 = 1.2%
						else if ((iResult >= 29600) && (iResult < 29800)) dwValue = 10; // 237/29348 = 0.8%
						else if ((iResult >= 29800) && (iResult < 29900)) dwValue = 11; // 156/29348 = 0.5%
						else if ((iResult >= 29900) && (iResult < 29970)) dwValue = 12; // 103/29348 = 0.3%
						else if ((iResult >= 29970) && (iResult <= 30000)) dwValue = 13; // 68/29348 = 0.1%
						else dwValue = 1; // v2.03 906
						switch (dwType) {
							case 2:
								if (dwValue <= 3) dwValue = 3;
								break;
							case 10:
								if (dwValue > 7) dwValue = 7;
								break;
							case 11:
								dwValue = 2;
								break;
							case 12:
								dwValue = 5;
								break;
						}
						if ((iGenLevel <= 2) && (dwValue > 7)) dwValue = 7;
						dwType = dwType << 12;
						dwValue = dwValue << 8;
						pItem->m_dwAttribute = pItem->m_dwAttribute | dwType | dwValue;
					}
				} else if (pItem->m_sItemEffectType == ItemEffectType::attack_manasave) {
					dwType = 10;
					cColor = 5;
					pItem->m_cItemColor = cColor;
					iResult = iDice(1, 30000);
					if ((iResult >= 1) && (iResult < 10000)) dwValue = 1; // 10000/29348 = 34%
					else if ((iResult >= 10000) && (iResult < 17400)) dwValue = 2; // 6600/29348 = 22.4%
					else if ((iResult >= 17400) && (iResult < 22400)) dwValue = 3; // 4356/29348 = 14.8%
					else if ((iResult >= 22400) && (iResult < 25400)) dwValue = 4; // 2874/29348 = 9.7%
					else if ((iResult >= 25400) && (iResult < 27400)) dwValue = 5; // 1897/29348 = 6.4%
					else if ((iResult >= 27400) && (iResult < 28400)) dwValue = 6; // 1252/29348 = 4.2%
					else if ((iResult >= 28400) && (iResult < 28900)) dwValue = 7; // 826/29348 = 2.8%
					else if ((iResult >= 28900) && (iResult < 29300)) dwValue = 8; // 545/29348 = 1.85%
					else if ((iResult >= 29300) && (iResult < 29600)) dwValue = 9; // 360/29348 = 1.2%
					else if ((iResult >= 29600) && (iResult < 29800)) dwValue = 10; // 237/29348 = 0.8%
					else if ((iResult >= 29800) && (iResult < 29900)) dwValue = 11; // 156/29348 = 0.5%
					else if ((iResult >= 29900) && (iResult < 29970)) dwValue = 12; // 103/29348 = 0.3%
					else if ((iResult >= 29970) && (iResult <= 30000)) dwValue = 13; // 68/29348 = 0.1%
					else dwValue = 1; // v2.03 906
					if ((iGenLevel <= 2) && (dwValue > 7)) dwValue = 7;
					pItem->m_dwAttribute = 0;
					dwType = dwType << 20;
					dwValue = dwValue << 16;
					pItem->m_dwAttribute = pItem->m_dwAttribute | dwType | dwValue;
					if (iDice(1, 10000) >= 6000) {
						iResult = iDice(1, 10000);
						if ((iResult >= 1) && (iResult <= 4999)) dwType = 2;
						else if ((iResult >= 5000) && (iResult <= 8499)) dwType = 10;
						else if ((iResult >= 8500) && (iResult <= 9499)) dwType = 12;
						else if ((iResult >= 9500) && (iResult <= 10000)) dwType = 11;
						iResult = iDice(1, 30000);
						if ((iResult >= 1) && (iResult < 10000)) dwValue = 1; // 10000/29348 = 34%
						else if ((iResult >= 10000) && (iResult < 17400)) dwValue = 2; // 6600/29348 = 22.4%
						else if ((iResult >= 17400) && (iResult < 22400)) dwValue = 3; // 4356/29348 = 14.8%
						else if ((iResult >= 22400) && (iResult < 25400)) dwValue = 4; // 2874/29348 = 9.7%
						else if ((iResult >= 25400) && (iResult < 27400)) dwValue = 5; // 1897/29348 = 6.4%
						else if ((iResult >= 27400) && (iResult < 28400)) dwValue = 6; // 1252/29348 = 4.2%
						else if ((iResult >= 28400) && (iResult < 28900)) dwValue = 7; // 826/29348 = 2.8%
						else if ((iResult >= 28900) && (iResult < 29300)) dwValue = 8; // 545/29348 = 1.85%
						else if ((iResult >= 29300) && (iResult < 29600)) dwValue = 9; // 360/29348 = 1.2%
						else if ((iResult >= 29600) && (iResult < 29800)) dwValue = 10; // 237/29348 = 0.8%
						else if ((iResult >= 29800) && (iResult < 29900)) dwValue = 11; // 156/29348 = 0.5%
						else if ((iResult >= 29900) && (iResult < 29970)) dwValue = 12; // 103/29348 = 0.3%
						else if ((iResult >= 29970) && (iResult <= 30000)) dwValue = 13; // 68/29348 = 0.1%
						else dwValue = 1; // v2.03 906
						if ((iGenLevel <= 2) && (dwValue > 7)) dwValue = 7;
						switch (dwType) {
							case 2:
								if (dwValue <= 3) dwValue = 3;
								break;
							case 10:
								if (dwValue > 7) dwValue = 7;
								break;
							case 11:
								dwValue = 2;
								break;
							case 12:
								dwValue = 5;
								break;
						}
						dwType = dwType << 12;
						dwValue = dwValue << 8;
						pItem->m_dwAttribute = pItem->m_dwAttribute | dwType | dwValue;
					}
				} else if (pItem->m_sItemEffectType == ItemEffectType::defense) {
					iResult = iDice(1, 10000);
					if ((iResult >= 1) && (iResult <= 5999)) dwType = 8;
					else if ((iResult >= 6000) && (iResult <= 8999)) dwType = 6;
					else if ((iResult >= 9000) && (iResult <= 9554)) dwType = 11; //dwType = 11;
					else if ((iResult >= 9555) && (iResult <= 10000)) dwType = 12; //dwType = 12;
					iResult = iDice(1, 30000);
					if ((iResult >= 1) && (iResult < 10000)) dwValue = 1; // 10000/29348 = 34%
					else if ((iResult >= 10000) && (iResult < 17400)) dwValue = 2; // 6600/29348 = 22.4%
					else if ((iResult >= 17400) && (iResult < 22400)) dwValue = 3; // 4356/29348 = 14.8%
					else if ((iResult >= 22400) && (iResult < 25400)) dwValue = 4; // 2874/29348 = 9.7%
					else if ((iResult >= 25400) && (iResult < 27400)) dwValue = 5; // 1897/29348 = 6.4%
					else if ((iResult >= 27400) && (iResult < 28400)) dwValue = 6; // 1252/29348 = 4.2%
					else if ((iResult >= 28400) && (iResult < 28900)) dwValue = 7; // 826/29348 = 2.8%
					else if ((iResult >= 28900) && (iResult < 29300)) dwValue = 8; // 545/29348 = 1.85%
					else if ((iResult >= 29300) && (iResult < 29600)) dwValue = 9; // 360/29348 = 1.2%
					else if ((iResult >= 29600) && (iResult < 29800)) dwValue = 10; // 237/29348 = 0.8%
					else if ((iResult >= 29800) && (iResult < 29900)) dwValue = 11; // 156/29348 = 0.5%
					else if ((iResult >= 29900) && (iResult < 29970)) dwValue = 12; // 103/29348 = 0.3%
					else if ((iResult >= 29970) && (iResult <= 30000)) dwValue = 13; // 68/29348 = 0.1%
					else dwValue = 1; // v2.03 906
					switch (dwType) {
						case 6:
							if (dwValue <= 4) dwValue = 4;
							break;
						case 8:
							if (dwValue <= 2) dwValue = 2;
							break;
						case 11:
						case 12:
							// v2.04
							dwValue = (dwValue + 1) / 2;
							if (dwValue < 1) dwValue = 1;
							if ((iGenLevel <= 3) && (dwValue > 2)) dwValue = 2;
							break;
					}
					if ((iGenLevel <= 2) && (dwValue > 7)) dwValue = 7;
					pItem->m_dwAttribute = 0;
					dwType = dwType << 20;
					dwValue = dwValue << 16;
					pItem->m_dwAttribute = pItem->m_dwAttribute | dwType | dwValue;
					if (iDice(1, 10000) >= 6000) {
						iResult = iDice(1, 10000);
						if ((iResult >= 1) && (iResult <= 999)) dwType = 3;
						else if ((iResult >= 1000) && (iResult <= 3999)) dwType = 1;
						else if ((iResult >= 4000) && (iResult <= 5499)) dwType = 5;
						else if ((iResult >= 5500) && (iResult <= 6499)) dwType = 4;
						else if ((iResult >= 6500) && (iResult <= 7499)) dwType = 6;
						else if ((iResult >= 7500) && (iResult <= 9399)) dwType = 7;
						else if ((iResult >= 9400) && (iResult <= 9799)) dwType = 8;
						else if ((iResult >= 9800) && (iResult <= 10000)) dwType = 9;
						iResult = iDice(1, 30000);
						if ((iResult >= 1) && (iResult < 10000)) dwValue = 1; // 10000/29348 = 34%
						else if ((iResult >= 10000) && (iResult < 17400)) dwValue = 2; // 6600/29348 = 22.4%
						else if ((iResult >= 17400) && (iResult < 22400)) dwValue = 3; // 4356/29348 = 14.8%
						else if ((iResult >= 22400) && (iResult < 25400)) dwValue = 4; // 2874/29348 = 9.7%
						else if ((iResult >= 25400) && (iResult < 27400)) dwValue = 5; // 1897/29348 = 6.4%
						else if ((iResult >= 27400) && (iResult < 28400)) dwValue = 6; // 1252/29348 = 4.2%
						else if ((iResult >= 28400) && (iResult < 28900)) dwValue = 7; // 826/29348 = 2.8%
						else if ((iResult >= 28900) && (iResult < 29300)) dwValue = 8; // 545/29348 = 1.85%
						else if ((iResult >= 29300) && (iResult < 29600)) dwValue = 9; // 360/29348 = 1.2%
						else if ((iResult >= 29600) && (iResult < 29800)) dwValue = 10; // 237/29348 = 0.8%
						else if ((iResult >= 29800) && (iResult < 29900)) dwValue = 11; // 156/29348 = 0.5%
						else if ((iResult >= 29900) && (iResult < 29970)) dwValue = 12; // 103/29348 = 0.3%
						else if ((iResult >= 29970) && (iResult <= 30000)) dwValue = 13; // 68/29348 = 0.1%
						else dwValue = 1; // v2.03 906
						switch (dwType) {
							case 1:
							case 3:
							case 7:
							case 8:
							case 9:
								if (dwValue <= 3) dwValue = 3;
								break;
						}
						if ((iGenLevel <= 2) && (dwValue > 7)) dwValue = 7;
						dwType = dwType << 12;
						dwValue = dwValue << 8;
						pItem->m_dwAttribute = pItem->m_dwAttribute | dwType | dwValue;
					}
				}
				_AdjustRareItemValue(pItem);
			}
		}
		pItem->m_sTouchEffectType = DEF_ITET_ID;
		pItem->m_sTouchEffectValue1 = iDice(1, 100000);
		pItem->m_sTouchEffectValue2 = iDice(1, 100000);
		//pItem->m_sTouchEffectValue3 = timeGetTime();
		SYSTEMTIME SysTime;
		char cTemp[256];
		GetLocalTime(&SysTime);
		std::memset(cTemp, 0, sizeof(cTemp));
		wsprintf(cTemp, "%d%2d", (short) SysTime.wMonth, (short) SysTime.wDay);
		pItem->m_sTouchEffectValue3 = atoi(cTemp);
		m_pMapList[ m_pNpcList[iNpcH]->m_cMapIndex ]->bSetItem(m_pNpcList[iNpcH]->m_sX,
				  m_pNpcList[iNpcH]->m_sY,
				  pItem);
		SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pNpcList[iNpcH]->m_cMapIndex,
				  m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY,
				  pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor); //v1.4 color
		_bItemLog(DEF_ITEMLOG_NEWGENDROP, 0, 0, pItem);
	}
}

bool CGame::bReadAdminSetConfigFile(const char * cFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadMode;
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	cReadMode = 0;
	hFile = CreateFile(cFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFn, "rt");
	if (pFile == 0) {
		return false;
	} else {
		PutLogList("(!) Reading settings file...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		//token = strtok( cp, seps );
		while (token != 0) {
			if (cReadMode != 0) {
				switch (cReadMode) {
					case 1:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelGMKill = atoi(token);
						} else {
							m_iAdminLevelGMKill = 3;
						}
						cReadMode = 0;
						break;
					case 2:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelGMRevive = atoi(token);
						} else {
							m_iAdminLevelGMRevive = 3;
						}
						cReadMode = 0;
						break;
					case 3:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelGMCloseconn = atoi(token);
						} else {
							m_iAdminLevelGMCloseconn = 3;
						}
						cReadMode = 0;
						break;
					case 4:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelGMCheckRep = atoi(token);
						} else {
							m_iAdminLevelGMCheckRep = 1;
						}
						cReadMode = 0;
						break;
					case 5:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelWho = atoi(token);
						} else {
							m_iAdminLevelWho = 1;
						}
						cReadMode = 0;
						break;
					case 6:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelEnergySphere = atoi(token);
						} else {
							m_iAdminLevelEnergySphere = 2;
						}
						cReadMode = 0;
						break;
					case 7:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelShutdown = atoi(token);
						} else {
							m_iAdminLevelShutdown = 3;
						}
						cReadMode = 0;
						break;
					case 8:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelObserver = atoi(token);
						} else {
							m_iAdminLevelObserver = 3;
						}
						cReadMode = 0;
						break;
					case 9:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelShutup = atoi(token);
						} else {
							m_iAdminLevelShutup = 2;
						}
						cReadMode = 0;
						break;
					case 10:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelCallGaurd = atoi(token);
						} else {
							m_iAdminLevelCallGaurd = 2;
						}
						cReadMode = 0;
						break;
					case 11:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSummonDemon = atoi(token);
						} else {
							m_iAdminLevelSummonDemon = 3;
						}
						cReadMode = 0;
						break;
					case 12:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSummonDeath = atoi(token);
						} else {
							m_iAdminLevelSummonDeath = 3;
						}
						cReadMode = 0;
						break;
					case 13:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelReserveFightzone = atoi(token);
						} else {
							m_iAdminLevelReserveFightzone = 2;
						}
						cReadMode = 0;
						break;
					case 14:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelCreateFish = atoi(token);
						} else {
							m_iAdminLevelCreateFish = 2;
						}
						cReadMode = 0;
						break;
					case 15:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelTeleport = atoi(token);
						} else {
							m_iAdminLevelTeleport = 2;
						}
						cReadMode = 0;
						break;
					case 16:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelCheckIP = atoi(token);
						} else {
							m_iAdminLevelCheckIP = 2;
						}
						cReadMode = 0;
						break;
					case 17:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelPolymorph = atoi(token);
						} else {
							m_iAdminLevelPolymorph = 2;
						}
						cReadMode = 0;
						break;
					case 18:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSetInvis = atoi(token);
						} else {
							m_iAdminLevelSetInvis = 2;
						}
						cReadMode = 0;
						break;
					case 19:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSetZerk = atoi(token);
						} else {
							m_iAdminLevelSetZerk = 2;
						}
						cReadMode = 0;
						break;
					case 20:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSetIce = atoi(token);
						} else {
							m_iAdminLevelSetIce = 2;
						}
						cReadMode = 0;
						break;
					case 21:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelGetNpcStatus = atoi(token);
						} else {
							m_iAdminLevelGetNpcStatus = 2;
						}
						cReadMode = 0;
						break;
					case 22:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSetAttackMode = atoi(token);
						} else {
							m_iAdminLevelSetAttackMode = 2;
						}
						cReadMode = 0;
						break;
					case 23:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelUnsummonAll = atoi(token);
						} else {
							m_iAdminLevelUnsummonAll = 3;
						}
						cReadMode = 0;
						break;
					case 24:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelUnsummonDemon = atoi(token);
						} else {
							m_iAdminLevelUnsummonDemon = 3;
						}
						cReadMode = 0;
						break;
					case 25:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSummon = atoi(token);
						} else {
							m_iAdminLevelSummon = 3;
						}
						cReadMode = 0;
						break;
					case 26:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSummonAll = atoi(token);
						} else {
							m_iAdminLevelSummonAll = 4;
						}
						cReadMode = 0;
						break;
					case 27:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSummonPlayer = atoi(token);
						} else {
							m_iAdminLevelSummonPlayer = 1;
						}
						cReadMode = 0;
						break;
					case 28:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelDisconnectAll = atoi(token);
						} else {
							m_iAdminLevelDisconnectAll = 2;
						}
						cReadMode = 0;
						break;
					case 29:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelEnableCreateItem = atoi(token);
						} else {
							m_iAdminLevelEnableCreateItem = 3;
						}
						cReadMode = 0;
						break;
					case 30:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelCreateItem = atoi(token);
						} else {
							m_iAdminLevelCreateItem = 4;
						}
						cReadMode = 0;
						break;
					case 31:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelStorm = atoi(token);
						} else {
							m_iAdminLevelStorm = 3;
						}
						cReadMode = 0;
						break;
					case 32:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelWeather = atoi(token);
						} else {
							m_iAdminLevelWeather = 2;
						}
						cReadMode = 0;
						break;
					case 33:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSetStatus = atoi(token);
						} else {
							m_iAdminLevelSetStatus = 2;
						}
						cReadMode = 0;
						break;
					case 34:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelGoto = atoi(token);
						} else {
							m_iAdminLevelGoto = 1;
						}
						cReadMode = 0;
						break;
					case 35:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelMonsterCount = atoi(token);
						} else {
							m_iAdminLevelMonsterCount = 1;
						}
						cReadMode = 0;
						break;
					case 36:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSetRecallTime = atoi(token);
						} else {
							m_iAdminLevelSetRecallTime = 3;
						}
						cReadMode = 0;
						break;
					case 37:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelUnsummonBoss = atoi(token);
						} else {
							m_iAdminLevelUnsummonBoss = 3;
						}
						cReadMode = 0;
						break;
					case 38:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelClearNpc = atoi(token);
						} else {
							m_iAdminLevelClearNpc = 3;
						}
						cReadMode = 0;
						break;
					case 39:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelTime = atoi(token);
						} else {
							m_iAdminLevelTime = 2;
						}
						cReadMode = 0;
						break;
					case 40:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelPushPlayer = atoi(token);
						} else {
							m_iAdminLevelPushPlayer = 2;
						}
						cReadMode = 0;
						break;
					case 41:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelSummonGuild = atoi(token);
						} else {
							m_iAdminLevelSummonGuild = 3;
						}
						cReadMode = 0;
						break;
					case 42:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelCheckStatus = atoi(token);
						} else {
							m_iAdminLevelCheckStatus = 1;
						}
						cReadMode = 0;
						break;
					case 43:
						if ((strlen(token) > 0) && (strlen(token) < 9)) {
							m_iAdminLevelCleanMap = atoi(token);
						} else {
							m_iAdminLevelCleanMap = 1;
						}
						cReadMode = 0;
						break;
				}
			} else {
				if (memcmp(token, "Admin-Level-/kill", 17) == 0) cReadMode = 1;
				if (memcmp(token, "Admin-Level-/revive", 19) == 0) cReadMode = 2;
				if (memcmp(token, "Admin-Level-/closecon", 21) == 0) cReadMode = 3;
				if (memcmp(token, "Admin-Level-/checkrep", 21) == 0) cReadMode = 4;
				if (memcmp(token, "Admin-Level-/who", 16) == 0) cReadMode = 5;
				if (memcmp(token, "Admin-Level-/energysphere", 25) == 0) cReadMode = 6;
				if (memcmp(token, "Admin-Level-/shutdownthisserverrightnow", 39) == 0) cReadMode = 7;
				if (memcmp(token, "Admin-Level-/setobservermode", 28) == 0) cReadMode = 8;
				if (memcmp(token, "Admin-Level-/shutup", 19) == 0) cReadMode = 9;
				if (memcmp(token, "Admin-Level-/attack", 19) == 0) cReadMode = 10;
				if (memcmp(token, "Admin-Level-/summondemon", 24) == 0) cReadMode = 11;
				if (memcmp(token, "Admin-Level-/summondeath", 24) == 0) cReadMode = 12;
				if (memcmp(token, "Admin-Level-/reservefightzone", 28) == 0) cReadMode = 13;
				if (memcmp(token, "Admin-Level-/createfish", 23) == 0) cReadMode = 14;
				if (memcmp(token, "Admin-Level-/teleport", 21) == 0) cReadMode = 15;
				if (memcmp(token, "Admin-Level-/checkip", 20) == 0) cReadMode = 16;
				if (memcmp(token, "Admin-Level-/polymorph", 22) == 0) cReadMode = 17;
				if (memcmp(token, "Admin-Level-/setinvi", 20) == 0) cReadMode = 18;
				if (memcmp(token, "Admin-Level-/setzerk", 20) == 0) cReadMode = 19;
				if (memcmp(token, "Admin-Level-/setfreeze", 22) == 0) cReadMode = 20;
				if (memcmp(token, "Admin-Level-/gns", 16) == 0) cReadMode = 21;
				if (memcmp(token, "Admin-Level-/setattackmode", 26) == 0) cReadMode = 22;
				if (memcmp(token, "Admin-Level-/unsummonall", 24) == 0) cReadMode = 23;
				if (memcmp(token, "Admin-Level-/unsummondemon", 26) == 0) cReadMode = 24;
				if (memcmp(token, "Admin-Level-/summonnpc", 22) == 0) cReadMode = 25;
				if (memcmp(token, "Admin-Level-/summonall", 22) == 0) cReadMode = 26;
				if (memcmp(token, "Admin-Level-/summonplayer", 25) == 0) cReadMode = 27;
				if (memcmp(token, "Admin-Level-/disconnectall", 26) == 0) cReadMode = 28;
				if (memcmp(token, "Admin-Level-/enableadmincreateitem", 34) == 0) cReadMode = 29;
				if (memcmp(token, "Admin-Level-/createitem", 23) == 0) cReadMode = 30;
				if (memcmp(token, "Admin-Level-/storm", 18) == 0) cReadMode = 31;
				if (memcmp(token, "Admin-Level-/weather", 20) == 0) cReadMode = 32;
				if (memcmp(token, "Admin-Level-/setstatus", 22) == 0) cReadMode = 33;
				if (memcmp(token, "Admin-Level-/goto", 17) == 0) cReadMode = 34;
				if (memcmp(token, "Admin-Level-/monstercount", 17) == 0) cReadMode = 35;
				if (memcmp(token, "Admin-Level-/setforcerecalltime", 23) == 0) cReadMode = 36;
				if (memcmp(token, "Admin-Level-/unsummonboss", 25) == 0) cReadMode = 37;
				if (memcmp(token, "Admin-Level-/clearnpc", 21) == 0) cReadMode = 38;
				if (memcmp(token, "Admin-Level-/time", 17) == 0) cReadMode = 39;
				if (memcmp(token, "Admin-Level-/send", 17) == 0) cReadMode = 40;
				if (memcmp(token, "Admin-Level-/summonguild", 24) == 0) cReadMode = 41;
				if (memcmp(token, "Admin-Level-/checkstatus", 24) == 0) cReadMode = 42;
				if (memcmp(token, "Admin-Level-/clearmap", 21) == 0) cReadMode = 43;
			}
			token = pStrTok->pGet();
			//token = strtok( 0, seps );
		}
		delete pStrTok;
		delete cp;
	}
	if (pFile != 0) fclose(pFile);
	return true;
}

void CGame::AdminOrder_Time(int iClientH, char * pData, uint32_t dwMsgSize) {
	//Time command By ACiDx Last edit on Sept,06,04
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	int i;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelTime) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (token[0] == '2') {
			m_cDayOrNight = 2;
			wsprintf(G_cTxt, "(%s) Admin(%s) Order: Forces night mode", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
			bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, G_cTxt);
		} else if (token[0] == '1') {
			m_cDayOrNight = 1;
			wsprintf(G_cTxt, "(%s) Admin(%s) Order: Forces day mode", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
			bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, G_cTxt);
		} else if (token[0] == '0') {
			wsprintf(G_cTxt, "(%s) Admin(%s) Order: Disables force time", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
			bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, G_cTxt);
		}
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
				if ((m_pClientList[i]->m_cMapIndex >= 0) &&
						  (m_pMapList[m_pClientList[i]->m_cMapIndex] != 0) &&
						  (m_pMapList[m_pClientList[i]->m_cMapIndex]->m_bIsFixedDayMode == false))
					SendNotifyMsg(0, i, DEF_NOTIFY_TIMECHANGE, m_cDayOrNight, 0, 0, 0);
			}
	}
	delete pStrTok;
}

void CGame::AdminOrder_CheckRep(int iClientH, char *pData, uint32_t dwMsgSize) {
	CStrTok * pStrTok;
	char * token, cName[11], cTargetName[11], cRepMessage[256], cTemp[256], seps[] = "= \t\n", cBuff[256];
	int i;
	if (m_pClientList[iClientH] == 0) return;
	std::memset(cTemp, 0, sizeof(cTemp));
	std::memset(cRepMessage, 0, sizeof(cRepMessage));
	if (m_pClientList[iClientH]->m_iAdminUserLevel < 6) {
		wsprintf(cRepMessage, "You have %d reputation points.", m_pClientList[iClientH]->m_iRating);
		//ShowClientMsg(iClientH, cRepMessage);
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cRepMessage);
	} else {
		if ((dwMsgSize) <= 0) return;
		std::memset(cTargetName, 0, sizeof(cTargetName));
		std::memset(cBuff, 0, sizeof(cBuff));
		memcpy(cBuff, pData, dwMsgSize);
		pStrTok = new CStrTok(cBuff, seps);
		token = pStrTok->pGet();
		token = pStrTok->pGet();
		if (token != 0) {
			std::memset(cName, 0, sizeof(cName));
			strcpy(cName, token);
		} else {
			std::memset(cName, 0, sizeof(cName));
			strcpy(cName, "null");
		}
		token = pStrTok->pGet();
		if (token != 0) {
			atoi(token);
		}
		if (cName != 0) {
			token = cName;
			if (strlen(token) > 10)
				memcpy(cTargetName, token, 10);
			else memcpy(cTargetName, token, strlen(token));
			for (i = 1; i < DEF_MAXCLIENTS; i++)
				if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0)) {
					wsprintf(cRepMessage, " %s has %d reputation points.", m_pClientList[i]->m_cCharName, m_pClientList[i]->m_iRating);
					ShowClientMsg(iClientH, cRepMessage);
				}
		}
	}
}

void CGame::AdminOrder_Pushplayer(int iClientH, char * pData, uint32_t dwMsgSize) {
	//Push Player- By:ACiDx  Monday , September 2004
	//Teleports a Defined Player to Defined Destination
	// /push playername mapname sX dX
	char seps[] = "= \t\n";
	char * token, cBuff[256], cMapName[256], cName[11], cTargetName[11];
	CStrTok * pStrTok;
	int dX;
	int dY;
	int i;
	bool bFlag;
	std::memset(cTargetName, 0, sizeof(cTargetName));
	std::memset(cName, 0, sizeof(cName));
	std::memset(cBuff, 0, sizeof(cBuff));
	dX = dY = -1;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelPushPlayer) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cName, 0, sizeof(cName));
		strcpy(cName, token);
	} else {
		std::memset(cName, 0, sizeof(cName));
		strcpy(cName, "null");
	}
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cMapName, 0, sizeof(cMapName));
		strcpy(cMapName, token);
	}
	token = pStrTok->pGet();
	if (token != 0) {
		dX = atoi(token);
	}
	token = pStrTok->pGet();
	if (token != 0) {
		dY = atoi(token);
	}
	if (cName != 0) {
		token = cName;
		if (strlen(token) > 10)
			memcpy(cTargetName, token, 10);
		else memcpy(cTargetName, token, strlen(token));
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0)) {
				bFlag = false;
				//Asks For Flag on maps
				if (strcmp("2ndmiddle", cMapName) == 0) bFlag = true;
				if (strcmp("abaddon", cMapName) == 0) bFlag = true;
				if (strcmp("arebrk11", cMapName) == 0) bFlag = true;
				if (strcmp("arebrk12", cMapName) == 0) bFlag = true;
				if (strcmp("arebrk21", cMapName) == 0) bFlag = true;
				if (strcmp("arebrk22", cMapName) == 0) bFlag = true;
				if (strcmp("arefarm", cMapName) == 0) bFlag = true;
				if (strcmp("arejail", cMapName) == 0) bFlag = true;
				if (strcmp("aremidl", cMapName) == 0) bFlag = true;
				if (strcmp("aremidr", cMapName) == 0) bFlag = true;
				if (strcmp("aresden", cMapName) == 0) bFlag = true;
				if (strcmp("aresdend1", cMapName) == 0) bFlag = true;
				if (strcmp("areuni", cMapName) == 0) bFlag = true;
				if (strcmp("arewrhus", cMapName) == 0) bFlag = true;
				if (strcmp("bisle", cMapName) == 0) bFlag = true;
				if (strcmp("bsmith_1", cMapName) == 0) bFlag = true;
				if (strcmp("bsmith_1f", cMapName) == 0) bFlag = true;
				if (strcmp("bsmith_2", cMapName) == 0) bFlag = true;
				if (strcmp("bsmith_2f", cMapName) == 0) bFlag = true;
				if (strcmp("BtField", cMapName) == 0) bFlag = true;
				if (strcmp("cath_1", cMapName) == 0) bFlag = true;
				if (strcmp("cath_2", cMapName) == 0) bFlag = true;
				if (strcmp("cityhall_1", cMapName) == 0) bFlag = true;
				if (strcmp("cityhall_2", cMapName) == 0) bFlag = true;
				if (strcmp("CmdHall_1", cMapName) == 0) bFlag = true;
				if (strcmp("CmdHall_2", cMapName) == 0) bFlag = true;
				if (strcmp("default", cMapName) == 0) bFlag = true;
				if (strcmp("dglv2", cMapName) == 0) bFlag = true;
				if (strcmp("dglv3", cMapName) == 0) bFlag = true;
				if (strcmp("dglv4", cMapName) == 0) bFlag = true;
				if (strcmp("druncncity", cMapName) == 0) bFlag = true;
				if (strcmp("elvbrk11", cMapName) == 0) bFlag = true;
				if (strcmp("elvbrk12", cMapName) == 0) bFlag = true;
				if (strcmp("elvbrk21", cMapName) == 0) bFlag = true;
				if (strcmp("elvbrk22", cMapName) == 0) bFlag = true;
				if (strcmp("elvfarm", cMapName) == 0) bFlag = true;
				if (strcmp("elvine", cMapName) == 0) bFlag = true;
				if (strcmp("elvined1", cMapName) == 0) bFlag = true;
				if (strcmp("elvjail", cMapName) == 0) bFlag = true;
				if (strcmp("elvmidl", cMapName) == 0) bFlag = true;
				if (strcmp("elvmidr", cMapName) == 0) bFlag = true;
				if (strcmp("elvuni", cMapName) == 0) bFlag = true;
				if (strcmp("elvwrhus", cMapName) == 0) bFlag = true;
				if (strcmp("fightzone1", cMapName) == 0) bFlag = true;
				if (strcmp("fightzone2", cMapName) == 0) bFlag = true;
				if (strcmp("fightzone3", cMapName) == 0) bFlag = true;
				if (strcmp("fightzone4", cMapName) == 0) bFlag = true;
				if (strcmp("fightzone5", cMapName) == 0) bFlag = true;
				if (strcmp("fightzone6", cMapName) == 0) bFlag = true;
				if (strcmp("fightzone7", cMapName) == 0) bFlag = true;
				if (strcmp("fightzone8", cMapName) == 0) bFlag = true;
				if (strcmp("fightzone9", cMapName) == 0) bFlag = true;
				if (strcmp("fightzone10", cMapName) == 0) bFlag = true;
				if (strcmp("gldhall_1", cMapName) == 0) bFlag = true;
				if (strcmp("gldhall_2", cMapName) == 0) bFlag = true;
				if (strcmp("GodH", cMapName) == 0) bFlag = true;
				if (strcmp("gshop_1", cMapName) == 0) bFlag = true;
				if (strcmp("gshop_1f", cMapName) == 0) bFlag = true;
				if (strcmp("gshop_2", cMapName) == 0) bFlag = true;
				if (strcmp("gshop_2f", cMapName) == 0) bFlag = true;
				if (strcmp("HRampart", cMapName) == 0) bFlag = true;
				if (strcmp("huntzone1", cMapName) == 0) bFlag = true;
				if (strcmp("huntzone2", cMapName) == 0) bFlag = true;
				if (strcmp("huntzone3", cMapName) == 0) bFlag = true;
				if (strcmp("huntzone4", cMapName) == 0) bFlag = true;
				if (strcmp("icebound", cMapName) == 0) bFlag = true;
				if (strcmp("inferniaA", cMapName) == 0) bFlag = true;
				if (strcmp("inferniaB", cMapName) == 0) bFlag = true;
				if (strcmp("maze", cMapName) == 0) bFlag = true;
				if (strcmp("middled1n", cMapName) == 0) bFlag = true;
				if (strcmp("middled1x", cMapName) == 0) bFlag = true;
				if (strcmp("middleland", cMapName) == 0) bFlag = true;
				if (strcmp("penalty", cMapName) == 0) bFlag = true;
				if (strcmp("procella", cMapName) == 0) bFlag = true;
				if (strcmp("resurr1", cMapName) == 0) bFlag = true;
				if (strcmp("resurr2", cMapName) == 0) bFlag = true;
				if (strcmp("toh1", cMapName) == 0) bFlag = true;
				if (strcmp("toh2", cMapName) == 0) bFlag = true;
				if (strcmp("toh3", cMapName) == 0) bFlag = true;
				if (strcmp("wrhus_1", cMapName) == 0) bFlag = true;
				if (strcmp("wrhus_1f", cMapName) == 0) bFlag = true;
				if (strcmp("wrhus_2", cMapName) == 0) bFlag = true;
				if (strcmp("wrhus_2f", cMapName) == 0) bFlag = true;
				if (strcmp("wzdtwr_1", cMapName) == 0) bFlag = true;
				if (strcmp("wzdtwr_2", cMapName) == 0) bFlag = true;
				if (strcmp("Test", cMapName) == 0) bFlag = true;
				if (strcmp("GMMap", cMapName) == 0) bFlag = true;
				//Defines I as Max clients
				if (bFlag == true)
					//Reqeust the Push/Teleport
					RequestTeleportHandler(i, "2   ", cMapName, dX, dY);
				wsprintf(G_cTxt, "(%s) GM(%s) sends (%s) Player(%s) to [%s](%d,%d)", m_pClientList[iClientH]->m_cIPaddress,
						  m_pClientList[iClientH]->m_cCharName, m_pClientList[i]->m_cIPaddress, m_pClientList[i]->m_cCharName, cMapName, dX, dY);
				bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, G_cTxt);
				delete pStrTok;
				return;
			}
	}
}

/*void CGame::AdminOrder_SummonGuild(int iClientH, char *pData, uint32_t dwMsgSize)
{
 char   seps[] = "= \t\n";
 char   * token, * cp, cBuff[256], cMapName[11], char cGuildName[20];
 uint16_t   *wp;
 int pX;
 int pY;
 int i;
	CStrTok * pStrTok;
 uint32_t  dwGoldCount;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelSummonGuild) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	if (m_pClientList[iClientH]->m_iAdminUserLevel == 0) {
		// dwGoldCount = player gold
		dwGoldCount = dwGetItemCount(iClientH, "Gold");
		// if summonguildcost is greater than player gold return
		if (m_iSummonGuildCost > dwGoldCount) {
			return;
		}
		// if summonguildcost is less than player gold
		else {
			// reduce gold by summonguildcost
			SetItemCount(iClientH, "Gold", dwGoldCount - m_iSummonGuildCost);
		}
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new  CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	pX = m_pClientList[iClientH]->m_sX;
	pY = m_pClientList[iClientH]->m_sY;
	//memcpy(cGuildName, m_pClientList[iClientH]->m_cGuildName, 20);
	memcpy(cMapName, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, 11);
	if (strlen(token) > 20)
			memcpy(cGuildName, token, 20);
		else memcpy(cGuildName, token, strlen(token));
	for (i = 0; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (strcmp(m_pClientList[i]->m_cGuildName, token) == 0)) {
			RequestTeleportHandler(i, "2   ", cMapName, pX, pY);
	}//m_pClientList[i]->m_cCharName
	wsprintf(G_cTxt,"GM Order(%s): PC(%s) Summoned to (%s)", m_pClientList[iClientH]->m_cGuildName, cGuildName, cMapName);
	bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, G_cTxt);
	delete pStrTok;
}*/
void CGame::SendCollectedMana() {
	if ((m_iCollectedMana[1] == 0) && (m_iCollectedMana[2] == 0)) return;
	wsprintf(G_cTxt, "Sending Collected Mana: %d %d", m_iCollectedMana[1], m_iCollectedMana[2]);
	PutLogList(G_cTxt);
	CollectedManaHandler(m_iCollectedMana[1], m_iCollectedMana[2]);
	m_iCollectedMana[0] = 0;
	m_iCollectedMana[1] = 0;
	m_iCollectedMana[2] = 0;
}

void CGame::CollectedManaHandler(uint16_t wAresdenMana, uint16_t wElvineMana) {
	if (m_iAresdenMapIndex != -1) {
		m_iAresdenMana += wAresdenMana;
		if (wAresdenMana > 0) {
			wsprintf(G_cTxt, "Aresden Mana: %d Total:%d", wAresdenMana, m_iAresdenMana);
			PutLogList(G_cTxt);
		}
	}
	if (m_iElvineMapIndex != -1) {
		m_iElvineMana += wElvineMana;
		if (wElvineMana > 0) {
			wsprintf(G_cTxt, "Elvine Mana: %d Total:%d", wElvineMana, m_iElvineMana);
			PutLogList(G_cTxt);
		}
	}
}

void CGame::CalcMeteorStrikeEffectHandler(int iMapIndex) {
	int i;
	int iActiveStructure;
	char cTempData[120];
	if (m_bIsCrusadeMode == false) return;
	iActiveStructure = 0;
	for (i = 1; i <= m_pMapList[iMapIndex]->m_iTotalStrikePoints; i++) {
		if (m_pMapList[iMapIndex]->m_stStrikePoint[i].iHP > 0) {
			iActiveStructure++;
		}
	}
	wsprintf(G_cTxt, "ActiveStructure:%d  MapIndex:%d AresdenMap:%d ElvineMap:%d", iActiveStructure, iMapIndex, m_iAresdenMapIndex, m_iElvineMapIndex);
	PutLogList(G_cTxt);
	if (iActiveStructure == 0) {
		if (iMapIndex == m_iAresdenMapIndex) {
			LocalEndCrusadeMode(2);
		} else if (iMapIndex == m_iElvineMapIndex) {
			LocalEndCrusadeMode(1);
		} else {
			LocalEndCrusadeMode(0);
		}
	} else {
		GrandMagicResultHandler(m_pMapList[iMapIndex]->m_cName, m_stMeteorStrikeResult.iCrashedStructureNum, m_stMeteorStrikeResult.iStructureDamageAmount, m_stMeteorStrikeResult.iCasualties, iActiveStructure, m_pMapList[iMapIndex]->m_iTotalStrikePoints, cTempData);
	}
	m_stMeteorStrikeResult.iCasualties = 0;
	m_stMeteorStrikeResult.iCrashedStructureNum = 0;
	m_stMeteorStrikeResult.iStructureDamageAmount = 0;
}

void CGame::_LinkStrikePointMapIndex() {
	int i;
	int z;
	int x;
	for (i = 0; i < DEF_MAXMAPS; i++)
		if ((m_pMapList[i] != 0) && (m_pMapList[i]->m_iTotalStrikePoints != 0)) {
			for (z = 0; z < DEF_MAXSTRIKEPOINTS; z++)
				if (strlen(m_pMapList[i]->m_stStrikePoint[z].cRelatedMapName) != 0) {
					for (x = 0; x < DEF_MAXMAPS; x++)
						if ((m_pMapList[x] != 0) && (strcmp(m_pMapList[x]->m_cName, m_pMapList[i]->m_stStrikePoint[z].cRelatedMapName) == 0)) {
							m_pMapList[i]->m_stStrikePoint[z].iMapIndex = x;
							wsprintf(G_cTxt, "(!) Map(%s) Strike Point(%d) Related Map(%s) Index(%d)", m_pMapList[i]->m_cName, z, m_pMapList[i]->m_stStrikePoint[z].cRelatedMapName, x);
							PutLogList(G_cTxt);
							goto LSPMI_LOOPBREAK;
						}
LSPMI_LOOPBREAK:
					;
				}
		}
}

bool CGame::_bRegisterMap(char * pName) {
	int i;
	char cTmpName[11], cTxt[120];
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, pName);
	for (i = 0; i < DEF_MAXMAPS; i++)
		if ((m_pMapList[i] != 0) && (memcmp(m_pMapList[i]->m_cName, cTmpName, 10) == 0)) {
			wsprintf(cTxt, "(!!!) CRITICAL ERROR! Map (%s) is already installed! cannot add.", cTmpName);
			PutLogList(cTxt);
			return false;
		}
	for (i = 0; i < DEF_MAXMAPS; i++)
		if (m_pMapList[i] == 0) {
			m_pMapList[i] = (CMap *)new CMap(this);
			wsprintf(cTxt, "(*) Add map (%s)   - Loading map info files...", pName);
			PutLogList(cTxt);
			if (m_pMapList[i]->bInit(pName) == false) {
				wsprintf(cTxt, "(!!!) Data file loading fail!", pName);
				PutLogList(cTxt);
				return false;
			};
			PutLogList("(*) Data file loading success.");
			if ((m_iMiddlelandMapIndex == -1) && (strcmp("middleland", pName) == 0)) m_iMiddlelandMapIndex = i;
			if ((m_iAresdenMapIndex == -1) && (strcmp("aresden", pName) == 0)) m_iAresdenMapIndex = i;
			if ((m_iElvineMapIndex == -1) && (strcmp("elvine", pName) == 0)) m_iElvineMapIndex = i;
			if ((m_iBTFieldMapIndex == -1) && (strcmp("BtField", pName) == 0)) m_iBTFieldMapIndex = i; // new
			if ((m_iGodHMapIndex == -1) && (strcmp("GodH", pName) == 0)) m_iGodHMapIndex = i; // new
			m_iTotalMaps++;
			return true;
		}
	wsprintf(cTxt, "(!!!) CRITICAL ERROR! Map (%s) canot be added - no more map space.", pName);
	PutLogList(cTxt);
	return false;
}

void CGame::GrandMagicResultHandler(char *cMapName, int iCrashedStructureNum, int iStructureDamageAmount, int iCasualities, int iActiveStructure, int iTotalStrikePoints, char * cData) {
	int i;
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if (m_pClientList[i] != 0) {
			SendNotifyMsg(0, i, DEF_NOTIFY_GRANDMAGICRESULT, iCrashedStructureNum, iStructureDamageAmount, iCasualities, cMapName, iActiveStructure, 0, 0, 0, 0, iTotalStrikePoints, cData);
		}
}

void CGame::AdminOrder_CheckStats(int iClientH, char *pData, uint32_t dwMsgSize) {
	char cStatMessage[256];
	char seps[] = "= \t\n";
	char cBuff[256];
	CStrTok * pStrTok;
	char * token, cName[11], cTargetName[11];
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < 1) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	if ((dwMsgSize) <= 0) return;
	std::memset(cTargetName, 0, sizeof(cTargetName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cName, 0, sizeof(cName));
		strcpy(cName, token);
	} else {
		std::memset(cName, 0, sizeof(cName));
		strcpy(cName, "null");
	}
	token = pStrTok->pGet();
	if (cName != 0) {
		token = cName;
		if (strlen(token) > 10)
			memcpy(cTargetName, token, 10);
		else memcpy(cTargetName, token, strlen(token));
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0)) {
				// m_iStr, m_iInt, m_iVit, m_iDex, m_iMag, m_iCharisma
				std::memset(cStatMessage, 0, sizeof(cStatMessage));
				wsprintf(cStatMessage, "Str:%d Dex:%d Vit:%d Int:%d Mag:%d Chr:%d", m_pClientList[i]->m_iStr, m_pClientList[i]->m_iDex, m_pClientList[i]->m_iVit, m_pClientList[i]->m_iInt, m_pClientList[i]->m_iMag, m_pClientList[i]->m_iCharisma);
				ShowClientMsg(iClientH, cStatMessage);
			}
	}
}

bool CGame::bCheckIsItemUpgradeSuccess(int iClientH, int iItemIndex, int iSomH, bool bBonus) {
	int iValue;
	int iProb;
	int iResult;
	if (m_pClientList[iClientH]->m_pItemList[iSomH] == 0) return false;
	iValue = (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0xF0000000) >> 28;
	switch (iValue) {
			//	www.mundohelbreath.com | Maneja el % de upgrade de xelimas y merien
			//	www.mundohelbreath.com | Maneja el % de upgrade de xelimas y merien
		case 0: iProb = 90;
			break; // %80 de hacerla +1
		case 1: iProb = 65;
			break; // %65 de hacerla +2
		case 2: iProb = 40;
			break; // %40 de hacerla +3
		case 3: iProb = 0;
			break; // %0 de hacerla +4
		case 4: iProb = 0;
			break; // %0 de hacerla +5
		case 5: iProb = 5;
			break; // %5 de hacerla +6
		case 6: iProb = 0;
			break; // %0 de hacerla +7
		case 7: iProb = 0;
			break; // %0 de hacerla +8
		case 8: iProb = 0;
			break; // %0 de hacerla +9
		case 9: iProb = 0;
			break; // %0 de hacerla +10
		default: iProb = 0;
			break;
	}
	//	www.mundohelbreath.com | Maneja el % de upgrade de xelimas y merien
	//	www.mundohelbreath.com | Maneja el % de upgrade de xelimas y merien
	if (((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00000001) != 0) && (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2 > 100)) {
		if (iProb > 20)
			iProb += (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2 / 10);
		else if (iProb > 7)
			iProb += (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2 / 20);
		else
			iProb += (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2 / 40);
	}
	if (bBonus == true) iProb *= 2;
	iProb *= 100;
	iResult = iDice(1, 10000);
	if (iProb >= iResult) {
		_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
		return true;
	}
	_bItemLog(DEF_ITEMLOG_UPGRADEFAIL, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
	return false;
}

bool CGame::bReadAdminListConfigFile(const char *pFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadModeA;
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	int iIndex;
	char len;
	cReadModeA = 0;
	iIndex = 0;
	hFile = CreateFile(pFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(pFn, "rt");
	if (pFile == 0) {
		PutLogList("(!) Cannot open AdminList.cfg file.");
		return false;
	} else {
		PutLogList("(!) Reading AdminList.cfg...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		while (token != 0) {
			if (cReadModeA != 0) {
				switch (cReadModeA) {
					case 1:
						if (iIndex >= DEF_MAXADMINS) {
							PutLogList("(!) WARNING! Too many GMs on the AdminList.cfg!");
							return true;
						}
						len = strlen(token);
						if (len > 10) len = 10;
						std::memset(m_stAdminList[iIndex].m_cGMName, 0, sizeof(m_stAdminList[iIndex].m_cGMName));
						memcpy(m_stAdminList[iIndex].m_cGMName, token, strlen(token));
						iIndex++;
						cReadModeA = 0;
						break;
				}
			} else {
				if (memcmp(token, "verified-admin", 14) == 0) {
					cReadModeA = 1;
				}
			}
			token = pStrTok->pGet();
		}
		delete pStrTok;
		delete cp;
	}
	if (pFile != 0) fclose(pFile);
	return true;
}

bool CGame::bReadBannedListConfigFile(const char *pFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadModeA;
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	int iIndex;
	char len;
	cReadModeA = 0;
	iIndex = 0;
	hFile = CreateFile(pFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(pFn, "rt");
	if (pFile == 0) {
		PutLogList("(!) Cannot open BannedList.cfg file.");
		return false;
	} else {
		PutLogList("(!) Reading BannedList.cfg...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		while (token != 0) {
			if (cReadModeA != 0) {
				switch (cReadModeA) {
					case 1:
						if (iIndex >= DEF_MAXBANNED) {
							PutLogList("(!) WARNING! Too many banned on the BannedList.cfg!");
							return true;
						}
						len = strlen(token);
						if (len > 20) len = 20;
						std::memset(m_stBannedList[iIndex].m_cBannedIPaddress, 0, sizeof(m_stBannedList[iIndex].m_cBannedIPaddress));
						memcpy(m_stBannedList[iIndex].m_cBannedIPaddress, token, strlen(token));
						iIndex++;
						cReadModeA = 0;
						break;
				}
			} else {
				if (memcmp(token, "banned-ip", 9) == 0) {
					cReadModeA = 1;
				}
			}
			token = pStrTok->pGet();
		}
		delete pStrTok;
		delete cp;
	}
	if (pFile != 0) fclose(pFile);
	return true;
}

void CGame::AdminOrder_CleanMap(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	char * token, cMapName[11], cBuff[256];
	bool bFlag = false; //Used to check if we are on the map we wanna clear
	int i;
	CItem *pItem;
	short sRemainItemSprite;
	short sRemainItemSpriteFrame;
	short dX;
	short dY;
	char cRemainItemColor;
	char len;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < m_iAdminLevelCleanMap) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cMapName, 0, sizeof(cMapName));
		strcpy(cMapName, token);
		for (i = 0; i < DEF_MAXMAPS; i++) //Enum all maps
			if (m_pMapList[i] != 0) { //Is allocated map
				if (memcmp(m_pMapList[i]->m_cName, cMapName, 10) == 0) { //is map same name
					bFlag = true; //Set flag
					//Get X and Y coords
					int m_x = m_pMapList[i]->m_sSizeX;
					int m_y = m_pMapList[i]->m_sSizeY;
					for (int j = 1; j < m_x; j++)
						for (int k = 1; k < m_y; k++) {
							do { //Delete all items on current tile
								pItem = m_pMapList[i]->pGetItem(j, k, &sRemainItemSprite, &sRemainItemSpriteFrame, &cRemainItemColor); // v1.4
								if (pItem != 0) {
									delete pItem; //Delete item;
								}
							} while (pItem != 0);
						}
					break; //Break outo f loop
				}
			}
		if (!bFlag) { //Notify GM he has to be on the map he clears
		} else { //Notify GM that all items have been cleared
			for (int i = 1; i < DEF_MAXCLIENTS; i++) {
				if (m_pClientList[i] != 0) {
					len = strlen(cMapName);
					if (len > 10) len = 10;
					if (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, cMapName, len) != 0) return;
					dX = m_pClientList[i]->m_sX;
					dY = m_pClientList[i]->m_sY;
					std::memset(cMapName, 0, sizeof(cMapName));
					strcpy(cMapName, m_pClientList[i]->m_cMapName);
					RequestTeleportHandler(i, "2   ", cMapName, dX, dY);
				}
			}
		}
	}
	delete pStrTok;
	return;
}

void CGame::ShowClientMsg(int iClientH, const char* pMsg) {
	char * cp, cTemp[256];
	uint32_t * dwp, dwMsgSize;
	uint16_t * wp;
	short * sp;
	std::memset(cTemp, 0, sizeof(cTemp));
	dwp = (uint32_t *) cTemp;
	*dwp = MSGID_COMMAND_CHATMSG;
	wp = (uint16_t *) (cTemp + DEF_INDEX2_MSGTYPE);
	*wp = 0;
	cp = (char *) (cTemp + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *) cp;
	*sp = 0;
	cp += 2;
	sp = (short *) cp;
	*sp = 0;
	cp += 2;
	memcpy(cp, "HGServer", 8); // Player name :P
	cp += 10;
	*cp = 10; // chat type
	cp++;
	dwMsgSize = strlen(pMsg);
	if (dwMsgSize > 50) dwMsgSize = 50;
	memcpy(cp, pMsg, dwMsgSize);
	cp += dwMsgSize;
	m_pClientList[iClientH]->m_pXSock->iSendMsg(cTemp, dwMsgSize + 22);
}

void CGame::Command_YellowBall(int iClientH, char* pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256], cPlayerName[11], cMapName[32];
	CStrTok * pStrTok;
	int iSoxH;
	int iSoX;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	iSoX = 0;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
			switch (m_pClientList[iClientH]->m_pItemList[i]->m_sIDnum) {
				case ItemId::yellow_ball: iSoX++;
					iSoxH = i;
					break;
				default: break;
			}
		}
	if (iSoX > 0) {
		std::memset(cPlayerName, 0, sizeof(cPlayerName));
		std::memset(cBuff, 0, sizeof(cBuff));
		memcpy(cBuff, pData, dwMsgSize);
		pStrTok = new CStrTok(cBuff, seps);
		token = pStrTok->pGet();
		token = pStrTok->pGet();
		if (token == 0) {
			delete pStrTok;
			return;
		}
		if (strlen(token) > 10) {
			memcpy(cPlayerName, token, 10);
		} else {
			memcpy(cPlayerName, token, strlen(token));
		}
		for (int i = 1; i < DEF_MAXCLIENTS; i++) {
			if (m_pClientList[i] != 0) {
				if (memcmp(cPlayerName, m_pClientList[i]->m_cCharName, 10) == 0) {
					if ((m_pClientList[iClientH]->m_cLocation) != (m_pClientList[i]->m_cLocation)) return;
					std::memset(cMapName, 0, sizeof(cMapName));
					strcpy(cMapName, m_pClientList[i]->m_cMapName);
					wsprintf(G_cTxt, "(%s) Player: (%s) - YellowBall MapName(%s)(%d %d)", m_pClientList[i]->m_cIPaddress, m_pClientList[i]->m_cCharName, m_pClientList[i]->m_cMapName, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
					PutItemLogFileList(G_cTxt);
					ItemDepleteHandler(iClientH, iSoxH, true, true);
					RequestTeleportHandler(iClientH, "2   ", cMapName, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
					delete pStrTok;
					return;
				}
			}
		}
		m_pClientList[iClientH]->m_bIsAdminOrderGoto = true;
		delete pStrTok;
	}
}

void CGame::Command_RedBall(int iClientH, char */*pData*/, uint32_t /*dwMsgSize*/) {
	char cName[21], cNpcName[21], cNpcWaypoint[11];
	int iNamingValue;
	int tX;
	int tY;
	int i;
	int x;
	int iNpcID;
	int iSoxH;
	int iSoX;
	if (m_pClientList[iClientH] == 0) return;
	if ((memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "huntzone1", 9) != 0) &&
			  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "huntzone2", 9) != 0) &&
			  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "huntzone3", 9) != 0) &&
			  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "huntzone4", 9) != 0)) return;
	iSoX = 0;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
			switch (m_pClientList[iClientH]->m_pItemList[i]->m_sIDnum) {
				case ItemId::red_ball: iSoX++;
					iSoxH = i;
					break;
				default: break;
			}
		}
	if (iSoX > 0) {
		iNamingValue = m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->iGetEmptyNamingValue();
		if (iNamingValue == -1) {
		} else {
			std::memset(cNpcName, 0, sizeof(cNpcName));
			switch (iDice(1, 5)) {
				case 1: strcpy(cNpcName, "Wyvern");
					iNpcID = 66;
					break;
				case 2: strcpy(cNpcName, "Hellclaw");
					iNpcID = 49;
					break;
				case 3: strcpy(cNpcName, "Demon");
					iNpcID = 31;
					break;
				case 4: strcpy(cNpcName, "Tigerworm");
					iNpcID = 50;
					break;
				case 5: strcpy(cNpcName, "Gagoyle");
					iNpcID = 52;
					break;
			}
			std::memset(cName, 0, sizeof(cName));
			wsprintf(cName, "XX%d", iNamingValue);
			cName[0] = '_';
			cName[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
			std::memset(cNpcWaypoint, 0, sizeof(cNpcWaypoint));
			tX = (int) m_pClientList[iClientH]->m_sX;
			tY = (int) m_pClientList[iClientH]->m_sY;
			if (bCreateNewNpc(cNpcName, cName, m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_cName, 0, (rand() % 9),
					  NpcMoveType::random, &tX, &tY, cNpcWaypoint, 0, 0, -1, false, false) == false) {
				m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->SetNamingValueEmpty(iNamingValue);
			} else {
				wsprintf(G_cTxt, "(%s) Player: (%s) - RedBall used %s [%s(%d, %d)] ", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, cNpcName, m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->m_cName, tX, tY);
				PutItemLogFileList(G_cTxt);
			}
		}
		const auto mapIndex = m_pClientList[iClientH]->m_cMapIndex;
		for (x = 1; x < DEF_MAXCLIENTS; x++)
			if ((m_pClientList[x] != 0) && (m_pClientList[x]->m_bIsInitComplete == true) &&
					  m_pClientList[x]->m_cMapIndex == mapIndex) {
				SendNotifyMsg(0, x, DEF_NOTIFY_SPAWNEVENT, tX, tY, iNpcID, 0, 0, 0);
			}
		ItemDepleteHandler(iClientH, iSoxH, true, true);
	}
}

void CGame::Command_BlueBall(int iClientH, char */*pData*/, uint32_t /*dwMsgSize*/) {
	char cName_Master[10], cName_Slave[10], cNpcName[256], cWaypoint[11], cSA;
	int pX;
	int pY;
	int j;
	int iNum;
	int iNamingValue;
	int iNpcID;
	int i;
	int x;
	bool bMaster;
	int iSoxH;
	int iSoX;
	if (m_pClientList[iClientH] == 0) return;
	if ((memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "huntzone1", 9) != 0) &&
			  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "huntzone2", 9) != 0) &&
			  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "huntzone3", 9) != 0) &&
			  (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "huntzone4", 9) != 0)) return;
	iSoX = 0;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
			switch (m_pClientList[iClientH]->m_pItemList[i]->m_sIDnum) {
				case ItemId::blue_ball: iSoX++;
					iSoxH = i;
					break;
				default: break;
			}
		}
	if (iSoX > 0) {
		iNamingValue = m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->iGetEmptyNamingValue();
		if (iNamingValue == -1) {
		} else {
			std::memset(cNpcName, 0, sizeof(cNpcName));
			switch (iDice(1, 38)) {
				case 1: strcpy(cNpcName, "Slime");
					iNpcID = 10;
					break;
				case 2: strcpy(cNpcName, "Giant-Ant");
					iNpcID = 15;
					break;
				case 3: strcpy(cNpcName, "Zombie");
					iNpcID = 17;
					break;
				case 4: strcpy(cNpcName, "Scorpion");
					iNpcID = 16;
					break;
				case 5: strcpy(cNpcName, "Skeleton");
					iNpcID = 11;
					break;
				case 6: strcpy(cNpcName, "Orc-Mage");
					iNpcID = 14;
					break;
				case 7: strcpy(cNpcName, "Clay-Golem");
					iNpcID = 23;
					break;
				case 8: strcpy(cNpcName, "Stone-Golem");
					iNpcID = 12;
					break;
				case 9: strcpy(cNpcName, "Hellbound");
					iNpcID = 27;
					break;
				case 10: strcpy(cNpcName, "Giant-Frog");
					iNpcID = 57;
					break;
				case 11: strcpy(cNpcName, "Troll");
					iNpcID = 28;
					break;
				case 12: strcpy(cNpcName, "Cyclops");
					iNpcID = 13;
					break;
				case 13: strcpy(cNpcName, "Ice-Golem");
					iNpcID = 65;
					break;
				case 14: strcpy(cNpcName, "Beholder");
					iNpcID = 53;
					break;
				case 15: strcpy(cNpcName, "Cannibal-Plant");
					iNpcID = 60;
					break;
				case 16: strcpy(cNpcName, "Orge");
					iNpcID = 29;
					break;
				case 17: strcpy(cNpcName, "Mountain-Giant");
					iNpcID = 58;
					break;
				case 18: strcpy(cNpcName, "DireBoar");
					iNpcID = 62;
					break;
				case 19: strcpy(cNpcName, "Liche");
					iNpcID = 30;
					break;
				case 20: strcpy(cNpcName, "Stalker");
					iNpcID = 48;
					break;
				case 21: strcpy(cNpcName, "WereWolf");
					iNpcID = 33;
					break;
				case 22: strcpy(cNpcName, "Dark-Elf");
					iNpcID = 54;
					break;
				case 23: strcpy(cNpcName, "Frost");
					iNpcID = 63;
					break;
				case 24: strcpy(cNpcName, "Orc");
					iNpcID = 14;
					break;
				case 25: strcpy(cNpcName, "Ettin");
					iNpcID = 59;
					break;
				case 26: strcpy(cNpcName, "Tentocle");
					iNpcID = -1;
					break;
				case 27: strcpy(cNpcName, "Giant-Crayfish");
					iNpcID = -1;
					break;
				case 28: strcpy(cNpcName, "Giant-Plant");
					iNpcID = -1;
					break;
				case 29: strcpy(cNpcName, "Rudolph");
					iNpcID = -1;
					break;
				case 30: strcpy(cNpcName, "Claw-Turtle");
					iNpcID = -1;
					break;
				case 31: strcpy(cNpcName, "Centaurus");
					iNpcID = -1;
					break;
				case 32: strcpy(cNpcName, "Barlog");
					iNpcID = -1;
					break;
				case 33: strcpy(cNpcName, "Giant-Lizard");
					iNpcID = -1;
					break;
				case 34: strcpy(cNpcName, "MasterMage-Orc");
					iNpcID = -1;
					break;
				case 35: strcpy(cNpcName, "Minotaurs");
					iNpcID = -1;
					break;
				case 36: strcpy(cNpcName, "Unicorn");
					iNpcID = -1;
					break;
				case 37: strcpy(cNpcName, "Nizie");
					iNpcID = -1;
					break;
			}
			iNum = 10;
			cSA = 0;
			pX = m_pClientList[iClientH]->m_sX;
			pY = m_pClientList[iClientH]->m_sY;
			/*std::memset(cBallMessage, 0, sizeof(cBallMessage));
			wsprintf(cBallMessage, "BlueBall event-%s %s(%d,%d)", cNpcName, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, pX, pY);
			for (i = 1; i < DEF_MAXCLIENTS; i++)
				if ((m_pClientList[iClientH]->m_cLocation) == (m_pClientList[i]->m_cLocation))
					ShowClientMsg(i, cBallMessage);*/
			wsprintf(G_cTxt, "(!) BlueBallEvent: SummonMob (%s)-(%d)", cNpcName, iNum);
			PutLogList(G_cTxt);
			iNamingValue = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->iGetEmptyNamingValue();
			if (iNamingValue != -1) {
				std::memset(cName_Master, 0, sizeof(cName_Master));
				wsprintf(cName_Master, "XX%d", iNamingValue);
				cName_Master[0] = '_';
				cName_Master[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
				if ((bMaster = bCreateNewNpc(cNpcName, cName_Master, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, (rand() % 3), cSA, NpcMoveType::random, &pX, &pY, cWaypoint, 0, 0, -1, false, false, false, true)) == false) {
					m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetNamingValueEmpty(iNamingValue);
				}
			}
			for (j = 0; j < (iNum - 1); j++) {
				iNamingValue = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->iGetEmptyNamingValue();
				if (iNamingValue != -1) {
					// Slave Mob
					std::memset(cName_Slave, 0, sizeof(cName_Slave));
					wsprintf(cName_Slave, "XX%d", iNamingValue);
					cName_Slave[0] = '_';
					cName_Slave[1] = m_pClientList[iClientH]->m_cMapIndex + 65;
					if (bCreateNewNpc(cNpcName, cName_Slave, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, (rand() % 3), cSA, NpcMoveType::random, &pX, &pY, cWaypoint, 0, 0, -1, false, false, false) == false) {
						m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->SetNamingValueEmpty(iNamingValue);
					} else {
						// Slave
						bSetNpcFollowMode(cName_Slave, cName_Master, DEF_OWNERTYPE_NPC);
					}
				}
			}
			//delete pStrTok;
		}
	}
	const auto mapIndex = m_pClientList[iClientH]->m_cMapIndex;
	for (x = 1; x < DEF_MAXCLIENTS; x++)
		if ((m_pClientList[x] != 0) && (m_pClientList[x]->m_bIsInitComplete == true) &&
				  m_pClientList[x]->m_cMapIndex == mapIndex) {
			SendNotifyMsg(0, x, DEF_NOTIFY_SPAWNEVENT, pX, pY, iNpcID, 0, 0, 0);
		}
	ItemDepleteHandler(iClientH, iSoxH, true, true);
}
/*
at the end of client connection have a true switch
at the start of client move handler check if the switch is true
if it is not true add 1 warning, if the warning reaches 3
delete client and log him, if the true switch
 */
//and when a client walks into a map with dynamic portal
//[KLKS] - [Pretty Good Coders] says:
//u gotta inform it
//[KLKS] - [Pretty Good Coders] says:
//or else they wont see it

void CGame::GlobalEndApocalypseMode() {
	LocalEndApocalypseMode();
}

void CGame::GlobalUpdateConfigs(char cConfigType) {
	LocalUpdateConfigs(cConfigType);
}

void CGame::LocalUpdateConfigs(char cConfigType) {
	if (cConfigType == 1) {
		bReadSettingsConfigFile("..\\GameConfigs\\Settings.cfg");
		PutLogList("(!!!) Settings.cfg updated successfully!");
	}
	if (cConfigType == 2) {
		bReadAdminListConfigFile("..\\GameConfigs\\AdminList.cfg");
		PutLogList("(!!!) AdminList.cfg updated successfully!");
	}
	if (cConfigType == 3) {
		bReadBannedListConfigFile("..\\GameConfigs\\BannedList.cfg");
		PutLogList("(!!!) BannedList.cfg updated successfully!");
	}
	if (cConfigType == 4) {
		bReadAdminSetConfigFile("..\\GameConfigs\\AdminSettings.cfg");
		PutLogList("(!!!) AdminSettings.cfg updated successfully!");
	}
}

void CGame::LocalStartApocalypseMode(uint32_t dwApocalypseGUID) {
	int i;
	if (m_bIsApocalypseMode == true) return;
	m_bIsApocalypseMode = true;
	if (dwApocalypseGUID != 0) {
		_CreateApocalypseGUID(dwApocalypseGUID);
		m_dwApocalypseGUID = dwApocalypseGUID;
	}
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
			SendNotifyMsg(0, i, DEF_NOTIFY_APOCGATESTARTMSG, 0, 0, 0, 0);
		}
	}
	PutLogList("(!) Apocalypse Mode ON.");
}

void CGame::LocalEndApocalypseMode() {
	int i;
	if (m_bIsApocalypseMode == false) return;
	m_bIsApocalypseMode = false;
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
			SendNotifyMsg(0, i, DEF_NOTIFY_APOCGATEENDMSG, 0, 0, 0, 0);
		}
	}
	PutLogList("(!) Apocalypse Mode OFF.");
	_CreateApocalypseGUID(m_dwApocalypseGUID);
}

bool CGame::bReadApocalypseGUIDFile(const char * cFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadMode;
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	cReadMode = 0;
	hFile = CreateFile(cFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFn, "rt");
	if (pFile == 0) {
		PutLogList("(!) Cannot open ApocalypseGUID file.");
		return false;
	} else {
		PutLogList("(!) Reading ApocalypseGUID file...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		while (token != 0) {
			if (cReadMode != 0) {
				switch (cReadMode) {
					case 1:
						m_dwApocalypseGUID = atoi(token);
						wsprintf(G_cTxt, "ApocalypseGUID = %d", m_dwApocalypseGUID);
						PutLogList(G_cTxt);
						cReadMode = 0;
						break;
				}
			} else {
				if (memcmp(token, "ApocalypseGUID", 11) == 0) cReadMode = 1;
			}
			token = pStrTok->pGet();
		}
		delete pStrTok;
		delete cp;
	}
	if (pFile != 0) fclose(pFile);
	return true;
}

bool CGame::bReadHeldenianGUIDFile(const char * cFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadMode;
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	cReadMode = 0;
	hFile = CreateFile(cFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFn, "rt");
	if (pFile == 0) {
		PutLogList("(!) Cannot open HeldenianGUID file.");
		return false;
	} else {
		PutLogList("(!) Reading HeldenianGUID file...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		while (token != 0) {
			if (cReadMode != 0) {
				switch (cReadMode) {
					case 1:
						m_dwHeldenianGUID = atoi(token);
						wsprintf(G_cTxt, "HeldenianGUID = %d", m_dwHeldenianGUID);
						PutLogList(G_cTxt);
						cReadMode = 0;
						break;
					case 2:
						m_sLastHeldenianWinner = atoi(token);
						wsprintf(G_cTxt, "HeldenianWinnerSide = %d", m_sLastHeldenianWinner);
						PutLogList(G_cTxt);
						cReadMode = 0;
						break;
				}
			} else {
				if (memcmp(token, "HeldenianGUID", 13) == 0) cReadMode = 1;
				if (memcmp(token, "winner-side", 11) == 0) cReadMode = 2;
			}
			token = pStrTok->pGet();
		}
		delete pStrTok;
		delete cp;
	}
	if (pFile != 0) fclose(pFile);
	return true;
}

void CGame::_CreateApocalypseGUID(uint32_t dwApocalypseGUID) {
	char *cp, cTxt[256], cFn[256], cTemp[1024];
	FILE *pFile;
	_mkdir("GameData");
	std::memset(cFn, 0, sizeof(cFn));
	strcat(cFn, "GameData");
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "ApocalypseGUID.txt");
	pFile = fopen(cFn, "wt");
	if (pFile == 0) {
		wsprintf(cTxt, "(!) Cannot create ApocalypseGUID(%d) file", dwApocalypseGUID);
		PutLogList(cTxt);
	} else {
		std::memset(cTemp, 0, sizeof(cTemp));
		std::memset(cTxt, 0, sizeof(cTxt));
		wsprintf(cTxt, "ApocalypseGUID = %d\n", dwApocalypseGUID);
		strcat(cTemp, cTxt);
		cp = (char *) cTemp;
		fwrite(cp, strlen(cp), 1, pFile);
		wsprintf(cTxt, "(O) ApocalypseGUID(%d) file created", dwApocalypseGUID);
		PutLogList(cTxt);
	}
	if (pFile != 0) fclose(pFile);
}
// New 06/05/2004
// Party Code

void CGame::RequestCreatePartyHandler(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel > 0 && m_pClientList[iClientH]->m_iAdminUserLevel < 3) return; // v2.23 22/04/06 15:24 AdminSecurity
	if (m_pClientList[iClientH]->m_iPartyStatus != DEF_PARTYSTATUS_NULL) {
		return;
	}
	m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_PROCESSING;
}

void CGame::PartyOperationResultHandler(char *pData) {
	char * cp, cResult, cName[12];
	uint16_t * wp;
	int i;
	int iClientH;
	int iPartyID;
	int iTotal;
	cp = (char *) (pData + 4);
	wp = (uint16_t *) cp;
	cp += 2;
	switch (*wp) {
		case 1:
			cResult = *cp;
			cp++;
			wp = (uint16_t *) cp;
			iClientH = (int) *wp;
			cp += 2;
			std::memset(cName, 0, sizeof(cName));
			memcpy(cName, cp, 10);
			cp += 10;
			wp = (uint16_t *) cp;
			iPartyID = (int) *wp;
			cp += 2;
			PartyOperationResult_Create(iClientH, cName, cResult, iPartyID);
			break;
		case 2:
			wp = (uint16_t *) cp;
			iPartyID = *wp;
			cp += 2;
			PartyOperationResult_Delete(iPartyID);
			break;
		case 3:
			wp = (uint16_t *) cp;
			iClientH = *wp;
			cp += 2;
			std::memset(cName, 0, sizeof(cName));
			memcpy(cName, cp, 10);
			cp += 10;
			if ((iClientH < 0) && (iClientH > DEF_MAXCLIENTS)) return;
			if (m_pClientList[iClientH] == 0) return;
			if (strcmp(m_pClientList[iClientH]->m_cCharName, cName) != 0) return;
			for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
				if (m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] == iClientH) {
					m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] = 0;
					m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers--;
					goto PORH_LOOPBREAK1;
				}
PORH_LOOPBREAK1:
			;
			for (i = 0; i < DEF_MAXPARTYMEMBERS - 1; i++)
				if ((m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] == 0) && (m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i + 1] != 0)) {
					m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] = m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i + 1];
					m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i + 1] = 0;
				}
			m_pClientList[iClientH]->m_iPartyID = 0;
			m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_NULL;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTY, 8, 0, 0, 0);
			break;
		case 4:
			cResult = *cp;
			cp++;
			wp = (uint16_t *) cp;
			iClientH = (int) *wp;
			cp += 2;
			std::memset(cName, 0, sizeof(cName));
			memcpy(cName, cp, 10);
			cp += 10;
			wp = (uint16_t *) cp;
			iPartyID = (int) *wp;
			cp += 2;
			PartyOperationResult_Join(iClientH, cName, cResult, iPartyID);
			break;
		case 5:
			wp = (uint16_t *) cp;
			iClientH = (int) *wp;
			cp += 2;
			std::memset(cName, 0, sizeof(cName));
			memcpy(cName, cp, 10);
			cp += 10;
			wp = (uint16_t *) cp;
			iTotal = (int) *wp;
			cp += 2;
			PartyOperationResult_Info(iClientH, cName, iTotal, cp);
			break;
		case 6:
			cResult = *cp;
			cp++;
			wp = (uint16_t *) cp;
			iClientH = (int) *wp;
			cp += 2;
			std::memset(cName, 0, sizeof(cName));
			memcpy(cName, cp, 10);
			cp += 10;
			wp = (uint16_t *) cp;
			iPartyID = (int) *wp;
			cp += 2;
			PartyOperationResult_Dismiss(iClientH, cName, cResult, iPartyID);
			break;
	}
}

void CGame::PartyOperationResult_Create(int iClientH, char *pName, int iResult, int iPartyID) {
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (strcmp(m_pClientList[iClientH]->m_cCharName, pName) != 0) return;
	switch (iResult) {
		case 0:
			if (m_pClientList[iClientH]->m_iPartyStatus != DEF_PARTYSTATUS_PROCESSING) return;
			if (strcmp(m_pClientList[iClientH]->m_cCharName, pName) != 0) return;
			m_pClientList[iClientH]->m_iPartyID = 0;
			m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_NULL;
			m_pClientList[iClientH]->m_iReqJoinPartyClientH = 0;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTY, 1, 0, 0, 0);
			break;
		case 1:
			if (m_pClientList[iClientH]->m_iPartyStatus != DEF_PARTYSTATUS_PROCESSING) return;
			if (strcmp(m_pClientList[iClientH]->m_cCharName, pName) != 0) return;
			m_pClientList[iClientH]->m_iPartyID = iPartyID;
			m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_CONFIRM;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTY, 1, 1, 0, 0);
			for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
				if (m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] == 0) {
					m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] = iClientH;
					m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers++;
					goto PORC_LOOPBREAK1;
				}
PORC_LOOPBREAK1:
			;
			if ((m_pClientList[iClientH]->m_iReqJoinPartyClientH != 0) && (strlen(m_pClientList[iClientH]->m_cReqJoinPartyName) != 0)) {
				m_pClientList[iClientH]->m_iReqJoinPartyClientH = 0;
				std::memset(m_pClientList[iClientH]->m_cReqJoinPartyName, 0, sizeof(m_pClientList[iClientH]->m_cReqJoinPartyName));
			}
			break;
	}
}

void CGame::PartyOperationResult_Join(int iClientH, char *pName, int iResult, int iPartyID) {
	int i;
	if (m_pClientList[iClientH] == 0) return;
	switch (iResult) {
		case 0:
			if (m_pClientList[iClientH]->m_iPartyStatus != DEF_PARTYSTATUS_PROCESSING) return;
			if (strcmp(m_pClientList[iClientH]->m_cCharName, pName) != 0) return;
			m_pClientList[iClientH]->m_iPartyID = 0;
			m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_NULL;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTY, 4, 0, 0, pName);
			m_pClientList[iClientH]->m_iReqJoinPartyClientH = 0;
			std::memset(m_pClientList[iClientH]->m_cReqJoinPartyName, 0, sizeof(m_pClientList[iClientH]->m_cReqJoinPartyName));
			break;
		case 1:
			if (m_pClientList[iClientH]->m_iPartyStatus != DEF_PARTYSTATUS_PROCESSING) return;
			if (strcmp(m_pClientList[iClientH]->m_cCharName, pName) != 0) return;
			m_pClientList[iClientH]->m_iPartyID = iPartyID;
			m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_CONFIRM;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTY, 4, 1, 0, pName);
			m_pClientList[iClientH]->m_iReqJoinPartyClientH = 0;
			std::memset(m_pClientList[iClientH]->m_cReqJoinPartyName, 0, sizeof(m_pClientList[iClientH]->m_cReqJoinPartyName));
			for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
				if (m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] == 0) {
					m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iIndex[i] = iClientH;
					m_stPartyInfo[m_pClientList[iClientH]->m_iPartyID].iTotalMembers++;
					goto PORC_LOOPBREAK1;
				}
PORC_LOOPBREAK1:
			;
			for (i = 1; i < DEF_MAXCLIENTS; i++)
				if ((i != iClientH) && (m_pClientList[i] != 0) && (m_pClientList[i]->m_iPartyID != 0) && (m_pClientList[i]->m_iPartyID == iPartyID)) {
					SendNotifyMsg(0, i, DEF_NOTIFY_PARTY, 4, 1, 0, pName);
				}
			break;
	}
}

void CGame::PartyOperationResult_Dismiss(int iClientH, char *pName, int iResult, int iPartyID) {
	int i;
	switch (iResult) {
		case 0:
			break;
		case 1:
			if (iClientH == 0) {
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if ((m_pClientList[i] != 0) && (strcmp(m_pClientList[i]->m_cCharName, pName) == 0)) {
						iClientH = i;
						goto PORD_LOOPBREAK;
					}
PORD_LOOPBREAK:
				;
				for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
					if (m_stPartyInfo[iPartyID].iIndex[i] == iClientH) {
						m_stPartyInfo[iPartyID].iIndex[i] = 0;
						m_stPartyInfo[iPartyID].iTotalMembers--;
						//testcode
						wsprintf(G_cTxt, "PartyID:%d member:%d Out Total:%d", iPartyID, iClientH, m_stPartyInfo[iPartyID].iTotalMembers);
						PutLogList(G_cTxt);
						goto PORC_LOOPBREAK1;
					}
PORC_LOOPBREAK1:
				;
				for (i = 0; i < DEF_MAXPARTYMEMBERS - 1; i++)
					if ((m_stPartyInfo[iPartyID].iIndex[i] == 0) && (m_stPartyInfo[iPartyID].iIndex[i + 1] != 0)) {
						m_stPartyInfo[iPartyID].iIndex[i] = m_stPartyInfo[iPartyID].iIndex[i + 1];
						m_stPartyInfo[iPartyID].iIndex[i + 1] = 0;
					}
				if (m_pClientList[iClientH] != 0) {
					m_pClientList[iClientH]->m_iPartyID = 0;
					m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_NULL;
					m_pClientList[iClientH]->m_iReqJoinPartyClientH = 0;
				}
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_iPartyID != 0) && (m_pClientList[i]->m_iPartyID == iPartyID)) {
						SendNotifyMsg(0, i, DEF_NOTIFY_PARTY, 6, 1, 0, pName);
					}
				return;
			}
			if ((m_pClientList[iClientH] != 0) && (m_pClientList[iClientH]->m_iPartyStatus != DEF_PARTYSTATUS_PROCESSING)) return;
			if ((m_pClientList[iClientH] != 0) && (strcmp(m_pClientList[iClientH]->m_cCharName, pName) != 0)) return;
			for (i = 1; i < DEF_MAXCLIENTS; i++)
				if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_iPartyID != 0) && (m_pClientList[i]->m_iPartyID == iPartyID)) {
					SendNotifyMsg(0, i, DEF_NOTIFY_PARTY, 6, 1, 0, pName);
				}
			for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
				if (m_stPartyInfo[iPartyID].iIndex[i] == iClientH) {
					m_stPartyInfo[iPartyID].iIndex[i] = 0;
					m_stPartyInfo[iPartyID].iTotalMembers--;
					//testcode
					wsprintf(G_cTxt, "PartyID:%d member:%d Out Total:%d", iPartyID, iClientH, m_stPartyInfo[iPartyID].iTotalMembers);
					PutLogList(G_cTxt);
					goto PORC_LOOPBREAK2;
				}
PORC_LOOPBREAK2:
			;
			for (i = 0; i < DEF_MAXPARTYMEMBERS - 1; i++)
				if ((m_stPartyInfo[iPartyID].iIndex[i] == 0) && (m_stPartyInfo[iPartyID].iIndex[i + 1] != 0)) {
					m_stPartyInfo[iPartyID].iIndex[i] = m_stPartyInfo[iPartyID].iIndex[i + 1];
					m_stPartyInfo[iPartyID].iIndex[i + 1] = 0;
				}
			if (m_pClientList[iClientH] != 0) {
				m_pClientList[iClientH]->m_iPartyID = 0;
				m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_NULL;
				m_pClientList[iClientH]->m_iReqJoinPartyClientH = 0;
			}
			break;
	}
}

void CGame::PartyOperationResult_Delete(int iPartyID) {
	int i;
	for (i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
		m_stPartyInfo[iPartyID].iIndex[i] = 0;
		m_stPartyInfo[iPartyID].iTotalMembers = 0;
	}
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_iPartyID == iPartyID)) {
			SendNotifyMsg(0, i, DEF_NOTIFY_PARTY, 2, 0, 0, 0);
			m_pClientList[i]->m_iPartyID = 0;
			m_pClientList[i]->m_iPartyStatus = DEF_PARTYSTATUS_NULL;
			m_pClientList[i]->m_iReqJoinPartyClientH = 0;
			//testcode
			wsprintf(G_cTxt, "Notify delete party: %d", i);
			PutLogList(G_cTxt);
		}
}

void CGame::RequestJoinPartyHandler(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256], cName[12];
	CStrTok * pStrTok;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iPartyStatus != DEF_PARTYSTATUS_NULL) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel > 0 && m_pClientList[iClientH]->m_iAdminUserLevel < 3) return; // v2.23 22/04/06 15:24 AdminSecurity
	if ((dwMsgSize) <= 0) return;
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cName, 0, sizeof(cName));
		strcpy(cName, token);
	} else {
		delete pStrTok;
		return;
	}
	for (i = 1; i < DEF_MAXCLIENTS; i++)
		if ((m_pClientList[i] != 0) && (strcmp(m_pClientList[i]->m_cCharName, cName) == 0)) {
			if ((m_pClientList[i]->m_iPartyID == 0) || (m_pClientList[i]->m_iPartyStatus != DEF_PARTYSTATUS_CONFIRM)) {
				delete pStrTok;
				return;
			}
			delete pStrTok;
			return;
		}
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERNOTONGAME, 0, 0, 0, cName);
	delete pStrTok;
}

void CGame::RequestDismissPartyHandler(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iPartyStatus != DEF_PARTYSTATUS_CONFIRM) return;
	m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_PROCESSING;
}

void CGame::GetPartyInfoHandler(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iPartyStatus != DEF_PARTYSTATUS_CONFIRM) return;
}

void CGame::PartyOperationResult_Info(int iClientH, char * pName, int iTotal, char *pNameList) {
	if (m_pClientList[iClientH] == 0) return;
	if (strcmp(m_pClientList[iClientH]->m_cCharName, pName) != 0) return;
	if (m_pClientList[iClientH]->m_iPartyStatus != DEF_PARTYSTATUS_CONFIRM) return;
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_PARTY, 5, 1, iTotal, pNameList);
}

void CGame::RequestDeletePartyHandler(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iPartyID != 0) {
		m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_PROCESSING;
	}
}

void CGame::RequestAcceptJoinPartyHandler(int iClientH, int iResult) {
	int iH;
	if (m_pClientList[iClientH] == 0) return;
	switch (iResult) {
		case 0:
			iH = m_pClientList[iClientH]->m_iReqJoinPartyClientH;
			if (m_pClientList[iH] == 0) {
				return;
			}
			if (strcmp(m_pClientList[iH]->m_cCharName, m_pClientList[iClientH]->m_cReqJoinPartyName) != 0) {
				return;
			}
			if (m_pClientList[iH]->m_iPartyStatus != DEF_PARTYSTATUS_PROCESSING) {
				return;
			}
			if ((m_pClientList[iH]->m_iReqJoinPartyClientH != iClientH) || (strcmp(m_pClientList[iH]->m_cReqJoinPartyName, m_pClientList[iClientH]->m_cCharName) != 0)) {
				return;
			}
			SendNotifyMsg(0, iH, DEF_NOTIFY_PARTY, 7, 0, 0, 0);
			m_pClientList[iH]->m_iPartyID = 0;
			m_pClientList[iH]->m_iPartyStatus = DEF_PARTYSTATUS_NULL;
			m_pClientList[iH]->m_iReqJoinPartyClientH = 0;
			std::memset(m_pClientList[iH]->m_cReqJoinPartyName, 0, sizeof(m_pClientList[iH]->m_cReqJoinPartyName));
			m_pClientList[iClientH]->m_iReqJoinPartyClientH = 0;
			std::memset(m_pClientList[iClientH]->m_cReqJoinPartyName, 0, sizeof(m_pClientList[iClientH]->m_cReqJoinPartyName));
			break;
		case 1:
			if ((m_pClientList[iClientH]->m_iPartyStatus == DEF_PARTYSTATUS_CONFIRM) && (m_pClientList[iClientH]->m_iPartyID != 0)) {
				iH = m_pClientList[iClientH]->m_iReqJoinPartyClientH;
				if (m_pClientList[iH] == 0) {
					return;
				}
				if (strcmp(m_pClientList[iH]->m_cCharName, m_pClientList[iClientH]->m_cReqJoinPartyName) != 0) {
					return;
				}
				if (m_pClientList[iH]->m_iPartyStatus != DEF_PARTYSTATUS_PROCESSING) {
					return;
				}
				if ((m_pClientList[iH]->m_iReqJoinPartyClientH != iClientH) || (strcmp(m_pClientList[iH]->m_cReqJoinPartyName, m_pClientList[iClientH]->m_cCharName) != 0)) {
					return;
				}
			} else {
				iH = m_pClientList[iClientH]->m_iReqJoinPartyClientH;
				if (m_pClientList[iH] == 0) {
					return;
				}
				if (strcmp(m_pClientList[iH]->m_cCharName, m_pClientList[iClientH]->m_cReqJoinPartyName) != 0) {
					return;
				}
				if (m_pClientList[iH]->m_iPartyStatus != DEF_PARTYSTATUS_PROCESSING) {
					return;
				}
				if ((m_pClientList[iH]->m_iReqJoinPartyClientH != iClientH) || (strcmp(m_pClientList[iH]->m_cReqJoinPartyName, m_pClientList[iClientH]->m_cCharName) != 0)) {
					return;
				}
				if (m_pClientList[iClientH]->m_iPartyStatus == DEF_PARTYSTATUS_NULL) {
					RequestCreatePartyHandler(iClientH);
				} else {
				}
			}
			break;
		case 2:
			if ((m_pClientList[iClientH]->m_iPartyID != 0) && (m_pClientList[iClientH]->m_iPartyStatus == DEF_PARTYSTATUS_CONFIRM)) {
				RequestDismissPartyHandler(iClientH);
			} else {
				iH = m_pClientList[iClientH]->m_iReqJoinPartyClientH;
				if ((m_pClientList[iH] != 0) && (m_pClientList[iH]->m_iReqJoinPartyClientH == iClientH) &&
						  (strcmp(m_pClientList[iH]->m_cReqJoinPartyName, m_pClientList[iClientH]->m_cCharName) == 0)) {
					m_pClientList[iH]->m_iReqJoinPartyClientH = 0;
					std::memset(m_pClientList[iH]->m_cReqJoinPartyName, 0, sizeof(m_pClientList[iH]->m_cReqJoinPartyName));
				}
				m_pClientList[iClientH]->m_iPartyID = 0;
				m_pClientList[iClientH]->m_iPartyStatus = DEF_PARTYSTATUS_NULL;
				m_pClientList[iClientH]->m_iReqJoinPartyClientH = 0;
				std::memset(m_pClientList[iClientH]->m_cReqJoinPartyName, 0, sizeof(m_pClientList[iClientH]->m_cReqJoinPartyName));
			}
			break;
	}
}

void CGame::RequestItemUpgradeHandler(int iClientH, int iItemIndex) {
	int i;
	int iItemX;
	int iItemY;
	int iSoM;
	int iSoX;
	int iSomH;
	int iSoxH;
	int iCheckHeroCape; // v2.172
	uint32_t dwTemp;
	uint32_t dwSWEType;
	uint32_t iValue;
	double dV1;
	double dV2;
	double dV3;
	short sItemUpgrade = 2;
	if (m_pClientList[iClientH] == 0) return;
	if ((iItemIndex < 0) || (iItemIndex >= DEF_MAXITEMS)) return;
	if (m_pClientList[iClientH]->m_pItemList[iItemIndex] == 0) return;
	if (HeroItemChecker(m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum, 0, 0, 0) != ItemId::none) {
		if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 != m_pClientList[iClientH]->m_sCharIDnum1) ||
				  (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 != m_pClientList[iClientH]->m_sCharIDnum2) ||
				  (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 != m_pClientList[iClientH]->m_sCharIDnum3)) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
			return;
		}
		iCheckHeroCape = iUpgradeHeroCapeRequirements(iClientH, iItemIndex);
		if (iCheckHeroCape > 0) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_UPGRADEHEROCAPE, iItemIndex,
					  (int) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2,
					  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
			_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, -1, m_pClientList[iClientH]->m_pItemList[iItemIndex], false);
		} else {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
			_bItemLog(DEF_ITEMLOG_UPGRADEFAIL, iClientH, -1, m_pClientList[iClientH]->m_pItemList[iItemIndex], false);
		}
		return;
	}
	iValue = (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0xF0000000) >> 28;
	if (iValue >= 15) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 1, 0, 0, 0);
		return;
	}
	if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::dark_knight_rapier) && (iValue >= 7)) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 1, 0, 0, 0);
		return;
	}
	switch (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cCategory) {
		case 46: // Pendants are category 46
			if (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType != ItemType::equip) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
				return; // Pendants are type 1
			}
			if (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cEquipPos < ItemEquipPos::lfinger) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
				return; // Pendants are left finger or more
			}
			if (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemEffectType != ItemEffectType::addeffect) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
				return; // Pendants are EffectType 14
			}
			switch (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemEffectValue1) {
				default: // Other items are not upgradable
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
					return; // Pendants are EffectType 14
				case 16: // AngelicPandent(STR)
				case 17: // AngelicPandent(DEX)
				case 18: // AngelicPandent(INT)
				case 19: // AngelicPandent(MAG)
					if (m_pClientList[iClientH]->m_iGizonItemUpgradeLeft <= 0) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 3, 0, 0, 0);
						return;
					}
					if (iValue >= 10) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 3, 0, 0, 0);
						return;
					}
					switch (iValue) {
						case 0: sItemUpgrade = 10;
							break;
						case 1: sItemUpgrade = 11;
							break;
						case 2: sItemUpgrade = 13;
							break;
						case 3: sItemUpgrade = 16;
							break;
						case 4: sItemUpgrade = 20;
							break;
						case 5: sItemUpgrade = 25;
							break;
						case 6: sItemUpgrade = 31;
							break;
						case 7: sItemUpgrade = 38;
							break;
						case 8: sItemUpgrade = 46;
							break;
						case 9: sItemUpgrade = 55;
							break;
						default:
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 3, 0, 0, 0);
							return;
							break;
					}
					/*if (   (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 != m_pClientList[iClientH]->m_sCharIDnum1)
					 || (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 != m_pClientList[iClientH]->m_sCharIDnum2)
					 || (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 != m_pClientList[iClientH]->m_sCharIDnum3))
					{ SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
					 return;
					}*/
					if ((m_pClientList[iClientH]->m_iGizonItemUpgradeLeft - sItemUpgrade) < 0) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 3, 0, 0, 0);
						return;
					}
					int iDicePTA = iDice(1, 100);
					if (iDicePTA <= 70) {
						m_pClientList[iClientH]->m_iGizonItemUpgradeLeft -= sItemUpgrade;
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMUPGRADELEFT, m_pClientList[iClientH]->m_iGizonItemUpgradeLeft, 0, 0, 0);
						iValue++;
						if (iValue > 10) iValue = 10;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
					} else {
						m_pClientList[iClientH]->m_iGizonItemUpgradeLeft--;
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMUPGRADELEFT, m_pClientList[iClientH]->m_iGizonItemUpgradeLeft, 0, 0, 0);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 3, 0, 0, 0);
					}
					return;
					break;
			}
			break;
		case 1:
			switch (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum) {
				case ItemId::sang_ah_flameberge: // SangAhFlameberge
				case ItemId::dark_knight_flameberge: // DarkKnightFlameberge
				case ItemId::dark_knight_great_sword: // DarkKnightGreatSword
				case ItemId::dark_knight_flameberg_w: // DarkKnightFlamebergW
				case ItemId::sang_ah_giant_sword: // SangAhGiantSword
				case ItemId::dark_knight_giant_sword: // DarkKnightGiantSword
				case ItemId::black_knight_temple: // BlackKnightTemple
				case ItemId::black_knight_hammer://BlackKnightHammer
				case ItemId::black_knight_b_hammer://BlackKnightBHammer
				case ItemId::black_knight_bar_hammer://BlackKnightBarHammer
					if (m_pClientList[iClientH]->m_iGizonItemUpgradeLeft <= 0) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 3, 0, 0, 0);
						return;
					}
					sItemUpgrade = (iValue * (iValue + 6) / 8) + 2;
					/*	if (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectType != 0) {
							if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 != m_pClientList[iClientH]->m_sCharIDnum1) ||
								(m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 != m_pClientList[iClientH]->m_sCharIDnum2) ||
								(m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 != m_pClientList[iClientH]->m_sCharIDnum3)) {
								SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
								return;
							}
						}*/
					if ((m_pClientList[iClientH]->m_iGizonItemUpgradeLeft - sItemUpgrade) < 0) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 3, 0, 0, 0);
						return;
					}
					m_pClientList[iClientH]->m_iGizonItemUpgradeLeft -= sItemUpgrade;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMUPGRADELEFT, m_pClientList[iClientH]->m_iGizonItemUpgradeLeft, 0, 0, 0);
					if ((iValue == 0) && (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::sang_ah_flameberge)) { // SangAhFlameberge
						iItemX = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x;
						iItemY = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y;
						delete m_pClientList[iClientH]->m_pItemList[iItemIndex];
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = 0;
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = new CItem;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x = iItemX;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y = iItemY;
						if (_bInitItemAttr(m_pClientList[iClientH]->m_pItemList[iItemIndex], ItemId::sang_ah_giant_sword) == false) { // SangAhGiantSword
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
							return;
						}
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
						iValue += 2;
						if (iValue > 15) iValue = 15;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMCANGE, iItemIndex, 
								  (int) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
						break;
					} else if ((iValue == 0) && ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::dark_knight_flameberge) || (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::dark_knight_flameberg_w))) { // DarkKnightFlameberge DarkKnightFlamebergW
						iItemX = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x;
						iItemY = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y;
						delete m_pClientList[iClientH]->m_pItemList[iItemIndex];
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = 0;
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = new CItem;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x = iItemX;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y = iItemY;
						if (_bInitItemAttr(m_pClientList[iClientH]->m_pItemList[iItemIndex], ItemId::dark_knight_giant_sword) == false) { // DarkKnightGiantSword
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
							return;
						}
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
						iValue += 2;
						if (iValue > 15) iValue = 15;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMCANGE, iItemIndex,
								  (int) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
						break;
					} else if ((iValue >= 6) && (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::dark_knight_giant_sword)) { // DarkKnightGiantSword
						iItemX = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x;
						iItemY = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y;
						delete m_pClientList[iClientH]->m_pItemList[iItemIndex];
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = 0;
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = new CItem;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x = iItemX;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y = iItemY;
						if (_bInitItemAttr(m_pClientList[iClientH]->m_pItemList[iItemIndex], ItemId::black_knight_temple) == false) { // BlackKnightTemple
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
							return;
						}
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
						iValue += 2;
						if (iValue > 15) iValue = 15;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMCANGE, iItemIndex,
								  (int) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
					} else if ((iValue >= 12) && (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::black_knight_temple)) { // BlackKnightTemple
						iValue += 2;
						if (iValue > 15) iValue = 15;
						if (iValue == 15) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor = 9;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMCANGE, iItemIndex,
								  (int) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
					}//50Cent - New DKHammer Upgrade
					else if ((iValue == 0) && ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::black_knight_hammer))) { // BlackKnightHammer
						iItemX = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x;
						iItemY = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y;
						delete m_pClientList[iClientH]->m_pItemList[iItemIndex];
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = 0;
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = new CItem;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x = iItemX;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y = iItemY;
						if (_bInitItemAttr(m_pClientList[iClientH]->m_pItemList[iItemIndex], ItemId::black_knight_b_hammer) == false) { // BlackKnightBHammer
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
							return;
						}
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
						iValue += 2;
						if (iValue > 15) iValue = 15;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMCANGE, iItemIndex,
								  (int) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
						break;
					} else if ((iValue >= 6) && (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::black_knight_b_hammer)) { // BlackKnightBHammer
						iItemX = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x;
						iItemY = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y;
						delete m_pClientList[iClientH]->m_pItemList[iItemIndex];
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = 0;
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = new CItem;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x = iItemX;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y = iItemY;
						if (_bInitItemAttr(m_pClientList[iClientH]->m_pItemList[iItemIndex], ItemId::black_knight_bar_hammer) == false) { // BlackKnightBarHammer
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
							return;
						}
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
						iValue += 2;
						if (iValue > 15) iValue = 15;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMCANGE, iItemIndex,
								  (int) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
					} else if ((iValue >= 12) && (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::black_knight_bar_hammer)) { // BlackKnightBarHammer
						iValue += 2;
						if (iValue > 15) iValue = 15;
						if (iValue == 15) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor = 9;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMCANGE, iItemIndex,
								  (int) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
					} else {
						iValue += 2;
						if (iValue > 15) iValue = 15;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
					}
					break;
				case ItemId::dark_knight_rapier: // DarkKnightRapier
					if (m_pClientList[iClientH]->m_iGizonItemUpgradeLeft <= 0) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 3, 0, 0, 0);
						return;
					}
					sItemUpgrade = (iValue * (iValue + 6) / 8) + 2;
					if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 != m_pClientList[iClientH]->m_sCharIDnum1) ||
							  (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 != m_pClientList[iClientH]->m_sCharIDnum2) ||
							  (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 != m_pClientList[iClientH]->m_sCharIDnum3)) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
						return;
					}
					if ((m_pClientList[iClientH]->m_iGizonItemUpgradeLeft - sItemUpgrade) < 0) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 3, 0, 0, 0);
						return;
					}
					m_pClientList[iClientH]->m_iGizonItemUpgradeLeft -= sItemUpgrade;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMUPGRADELEFT, m_pClientList[iClientH]->m_iGizonItemUpgradeLeft, 0, 0, 0);
					iValue++;
					if (iValue > 7) iValue = 7;
					dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
					dwTemp = dwTemp & 0x0FFFFFFF;
					m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
					_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
					break;
				default:
					if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00F00000) != 0) {
						dwSWEType = (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00F00000) >> 20;
						if (dwSWEType == 9) {
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
							return;
						}
					}
					iSoX = iSoM = 0;
					for (i = 0; i < DEF_MAXITEMS; i++)
						if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
							switch (m_pClientList[iClientH]->m_pItemList[i]->m_sIDnum) {
								case ItemId::stone_of_xelima: iSoX++;
									iSoxH = i;
									break;
								case ItemId::stone_of_merien: iSoM++;
									iSomH = i;
									break;
								default: break;
							}
						}
					if (iSoX > 0) {
						if (bCheckIsItemUpgradeSuccess(iClientH, iItemIndex, iSoxH) == false) {
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
							iValue = (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0xF0000000) >> 28;
							if (iValue >= 1) ItemDepleteHandler(iClientH, iItemIndex, false, true);
							ItemDepleteHandler(iClientH, iSoxH, false, true);
							return;
						}
						if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00000001) != 0) {
							iValue++;
							if (iValue > 10) {
								iValue = 10;
							} else {
								dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
								dwTemp = dwTemp & 0x0FFFFFFF;
								m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
								ItemDepleteHandler(iClientH, iSoxH, false, true);
							}
						} else {
							iValue++;
							if (iValue > 7) {
								iValue = 7;
							} else {
								dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
								dwTemp = dwTemp & 0x0FFFFFFF;
								m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
								ItemDepleteHandler(iClientH, iSoxH, false, true);
							}
						}
					}
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
					break;
			}
			return;
		case 3:
			if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00F00000) != 0) {
				dwSWEType = (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00F00000) >> 20;
				if (dwSWEType == 9) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
					return;
				}
			}
			iSoX = iSoM = 0;
			for (i = 0; i < DEF_MAXITEMS; i++)
				if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
					switch (m_pClientList[iClientH]->m_pItemList[i]->m_sIDnum) {
						case ItemId::stone_of_xelima: iSoX++;
							iSoxH = i;
							break;
						case ItemId::stone_of_merien: iSoM++;
							iSomH = i;
							break;
						default: break;
					}
				}
			if (iSoX > 0) {
				if (bCheckIsItemUpgradeSuccess(iClientH, iItemIndex, iSoxH) == false) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
					iValue = (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0xF0000000) >> 28;
					if (iValue >= 1) ItemDepleteHandler(iClientH, iItemIndex, false, true);
					ItemDepleteHandler(iClientH, iSoxH, false, true);
					return;
				}
				if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00000001) != 0) {
					iValue++;
					if (iValue > 10) {
						iValue = 10;
					} else {
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						ItemDepleteHandler(iClientH, iSoxH, false, true);
					}
				} else {
					iValue++;
					if (iValue > 7) {
						iValue = 7;
					} else {
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						ItemDepleteHandler(iClientH, iSoxH, false, true);
					}
				}
			}
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
			return;
		case 5:
			if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00F00000) != 0) {
				dwSWEType = (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00F00000) >> 20;
				if (dwSWEType == 8) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
					return;
				}
			}
			switch (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum) {
				case ItemId::gm_shield:
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
					return;
				default:
					break;
			}
			iSoX = iSoM = 0;
			for (i = 0; i < DEF_MAXITEMS; i++)
				if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
					switch (m_pClientList[iClientH]->m_pItemList[i]->m_sIDnum) {
						case ItemId::stone_of_xelima: iSoX++;
							iSoxH = i;
							break;
						case ItemId::stone_of_merien: iSoM++;
							iSomH = i;
							break;
						default:break;
					}
				}
			if (iSoM > 0) {
				if (bCheckIsItemUpgradeSuccess(iClientH, iItemIndex, iSomH, true) == false) {
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
					iValue = (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0xF0000000) >> 28;
					if (iValue >= 1) ItemDepleteHandler(iClientH, iItemIndex, false, true);
					ItemDepleteHandler(iClientH, iSomH, false, true);
					return;
				}
				iValue++;
				if (iValue > 10) {
					iValue = 10;
				} else {
					dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
					dwTemp = dwTemp & 0x0FFFFFFF;
					m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
					if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00000001) != 0) {
						dV1 = (double) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan;
						dV2 = 0.2f * dV1;
						dV3 = dV1 + dV2;
					} else {
						dV1 = (double) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan;
						dV2 = 0.15f * dV1;
						dV3 = dV1 + dV2;
					}
					m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1 = (short) dV3;
					if (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1 < 0) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1 = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan;
					m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1;
					m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan += dV2;
					ItemDepleteHandler(iClientH, iSomH, false, true);
				}
			}
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1, 0, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2);
			return;
		case 6:
		case 15:
			switch (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum) {
				case ItemId::merien_plate_mail_m: // MerienPlateMailM
				case ItemId::merien_plate_mail_w: // MerienPlateMailW
				case ItemId::sang_ah_hauberk: // SangAhHauberk
				case ItemId::sang_ah_full_hel: // SangAhFullHel
				case ItemId::sang_ah_leggings: // SangAhLeggings
				case ItemId::sang_ah_plate_mail: // SangAhPlateMail
				case ItemId::dark_knight_hauberk: // DarkKnightHauberk
				case ItemId::dark_knight_full_helm: // DarkKnightFullHelm
				case ItemId::dark_knight_leggings: // DarkKnightLeggings
				case ItemId::dark_knight_plate_mail: // DarkKnightPlateMail
				case ItemId::dark_mage_hauberk: // DarkMageHauberk
				case ItemId::dark_mage_chain_mail: // DarkMageChainMail
				case ItemId::dark_mage_leggings: // DarkMageLeggings
				case ItemId::dark_mage_ledder_armor: // DarkMageLedderArmor
				case ItemId::dark_mage_scale_mail: // DarkMageScaleMail
				case ItemId::dark_knight_hauberk_w: // DarkKnightHauberkW
				case ItemId::dark_knight_full_helm_w: // DarkKnightFullHelmW
				case ItemId::dark_knight_leggings_w: // DarkKnightLeggingsW
				case ItemId::dark_knight_plate_mail_w: // DarkKnightPlateMailW
				case ItemId::dark_mage_hauberk_w: // DarkMageHauberkW
				case ItemId::dark_mage_chain_mail_w: // DarkMageChainMailW
				case ItemId::dark_mage_leggings_w: // DarkMageLeggingsW
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
					return;
				default:
					if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00F00000) != 0) {
						dwSWEType = (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00F00000) >> 20;
						if (dwSWEType == 8) {
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
							return;
						}
					}
					iSoX = iSoM = 0;
					for (i = 0; i < DEF_MAXITEMS; i++)
						if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
							switch (m_pClientList[iClientH]->m_pItemList[i]->m_sIDnum) {
								case ItemId::stone_of_xelima: iSoX++;
									iSoxH = i;
									break;
								case ItemId::stone_of_merien: iSoM++;
									iSomH = i;
									break;
								default: break;
							}
						}
					if (iSoM > 0) {
						if (bCheckIsItemUpgradeSuccess(iClientH, iItemIndex, iSomH, true) == false) {
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
							iValue = (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0xF0000000) >> 28;
							if (iValue >= 1) ItemDepleteHandler(iClientH, iItemIndex, false, true);
							ItemDepleteHandler(iClientH, iSomH, false, true);
							return;
						}
						iValue++;
						if (iValue > 10) {
							iValue = 10;
						} else {
							dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
							dwTemp = dwTemp & 0x0FFFFFFF;
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
							if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0x00000001) != 0) {
								dV1 = (double) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan;
								dV2 = 0.2f * dV1;
								dV3 = dV1 + dV2;
							} else {
								dV1 = (double) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan;
								dV2 = 0.15f * dV1;
								dV3 = dV1 + dV2;
							}
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1 = (short) dV3;
							if (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1 < 0) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1 = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan;
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wMaxLifeSpan = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1;
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan += dV2;
							ItemDepleteHandler(iClientH, iSomH, false, true);
						}
					}
			}
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue1, 0, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2);
			return;
		case 8:
			switch (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum) {
				case ItemId::magic_wand_m_s30_llf: // MagicWand(MS30-LLF)
				case ItemId::dark_mage_magic_staff: // DarkMageMagicStaff
				case ItemId::dark_mage_magic_staff_w: // DarkMageMagicStaffW
				case ItemId::dark_mage_magic_wand: // DarkMageMagicWand
				case ItemId::black_mage_temple: // BlackMageTemple
					/*if ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 != m_pClientList[iClientH]->m_sCharIDnum1) ||
						(m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 != m_pClientList[iClientH]->m_sCharIDnum2) ||
						(m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 != m_pClientList[iClientH]->m_sCharIDnum3)) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 2, 0, 0, 0);
						return;
					}*/
					if (m_pClientList[iClientH]->m_iGizonItemUpgradeLeft <= 0) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 3, 0, 0, 0);
						return;
					}
					sItemUpgrade = (iValue * (iValue + 6) / 8) + 2;
					if ((m_pClientList[iClientH]->m_iGizonItemUpgradeLeft - sItemUpgrade) < 0) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMUPGRADEFAIL, 3, 0, 0, 0);
						return;
					}
					m_pClientList[iClientH]->m_iGizonItemUpgradeLeft -= sItemUpgrade;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMUPGRADELEFT, m_pClientList[iClientH]->m_iGizonItemUpgradeLeft, 0, 0, 0);
					if (iValue == 0) {
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
					}
					if ((iValue >= 4) && ((m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::dark_mage_magic_staff) || (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::dark_mage_magic_staff_w))) {
						iItemX = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x;
						iItemY = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y;
						delete m_pClientList[iClientH]->m_pItemList[iItemIndex];
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = 0;
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = new CItem;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x = iItemX;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y = iItemY;
						if (_bInitItemAttr(m_pClientList[iClientH]->m_pItemList[iItemIndex], ItemId::dark_mage_magic_wand) == false) { // DarkMageMagicWand
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
							return;
						}
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
						iValue += 2;
						if (iValue > 15) iValue = 15;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMCANGE, iItemIndex, 
								  (int) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan, 
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
						break;
					}
					if ((iValue >= 6) && (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::dark_mage_magic_wand)) {
						iItemX = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x;
						iItemY = m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y;
						delete m_pClientList[iClientH]->m_pItemList[iItemIndex];
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = 0;
						m_pClientList[iClientH]->m_pItemList[iItemIndex] = new CItem;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].x = iItemX;
						m_pClientList[iClientH]->m_ItemPosList[iItemIndex].y = iItemY;
						if (_bInitItemAttr(m_pClientList[iClientH]->m_pItemList[iItemIndex], ItemId::black_mage_temple) == false) { // BlackMageTemple
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
							return;
						}
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
						iValue += 2;
						if (iValue > 15) iValue = 15;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMCANGE, iItemIndex, 
								  (int) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan, 
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
						break;
					}
					if ((iValue >= 12) && (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum == ItemId::black_mage_temple)) {
						iValue += 2;
						if (iValue > 15) iValue = 15;
						if (iValue == 15) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor = 9;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMCANGE, iItemIndex,
								  (int) m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemType,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_wCurLifeSpan,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cName,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSprite,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sSpriteFrame,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_cItemColor,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sItemSpecEffectValue2,
								  m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
						break;
					} else {
						iValue += 2;
						if (iValue > 15) iValue = 15;
						dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
						dwTemp = dwTemp & 0x0FFFFFFF;
						m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
						_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) - 1, m_pClientList[iClientH]->m_pItemList[iItemIndex]);
						break;
					}
				default:
					iSoX = iSoM = 0;
					for (i = 0; i < DEF_MAXITEMS; i++)
						if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
							switch (m_pClientList[iClientH]->m_pItemList[i]->m_sIDnum) {
								case ItemId::stone_of_xelima: iSoX++;
									iSoxH = i;
									break;
								case ItemId::stone_of_merien: iSoM++;
									iSomH = i;
									break;
								default: break;
							}
						}
					if (iSoX > 0) {
						if (bCheckIsItemUpgradeSuccess(iClientH, iItemIndex, iSoxH) == false) {
							SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
							iValue = (m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute & 0xF0000000) >> 28; // v2.172
							if (iValue >= 1) ItemDepleteHandler(iClientH, iItemIndex, false, true);
							ItemDepleteHandler(iClientH, iSoxH, false, true);
							return;
						}
						iValue++;
						if (iValue > 7)
							iValue = 7;
						else {
							dwTemp = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute;
							dwTemp = dwTemp & 0x0FFFFFFF;
							m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute = dwTemp | (iValue << 28);
							ItemDepleteHandler(iClientH, iSoxH, false, true);
						}
					}
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
					break;
			}
			break;
		default:
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_ITEMATTRIBUTECHANGE, iItemIndex, m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_dwAttribute, 0, 0);
			break;
	}
}

ItemId CGame::HeroItemChecker(ItemId iItemID, short sEnemyKill, char cContribution, char cSide) {
	switch (iItemID) {
		case ItemId::aresden_hero_cape: // AresdenHeroCape
			if (sEnemyKill != 0) sEnemyKill = 300;
			if (cContribution != 0) cContribution = 0;
			if (cSide != 0) cSide = 1;
			break;
		case ItemId::elvine_hero_cape: // ElvineHeroCape
			if (sEnemyKill != 0) sEnemyKill = 300;
			if (cContribution != 0) cContribution = 0;
			if (cSide != 0) cSide = 2;
			break;
			// eHeroHelm
		case ItemId::a_hero_helm_m: // aHeroHelm(M)
		case ItemId::a_hero_helm_w: // aHeroHelm(W)
			if (sEnemyKill != 0) sEnemyKill = 150;
			if (cContribution != 0) cContribution = 0;
			if (cSide != 0) cSide = 1;
			break;
		case ItemId::e_hero_helm_m: // aHeroHelm(M)
		case ItemId::e_hero_helm_w: // aHeroHelm(W)
			if (sEnemyKill != 0) sEnemyKill = 150;
			if (cContribution != 0) cContribution = 20;
			if (cSide != 0) cSide = 2;
			break;
			// eHeroCap
		case ItemId::a_hero_cap_m: // aHeroCap(M)
		case ItemId::a_hero_cap_w: // aHeroCap(W)
			if (sEnemyKill != 0) sEnemyKill = 100;
			if (cContribution != 0) cContribution = 20;
			if (cSide != 0) cSide = 1;
			break;
		case ItemId::e_hero_cap_m: // aHeroCap(M)
		case ItemId::e_hero_cap_w: // aHeroCap(W)
			if (sEnemyKill != 0) sEnemyKill = 100;
			if (cContribution != 0) cContribution = 20;
			if (cSide != 0) cSide = 2;
			break;
			// eHeroArmor
		case ItemId::a_hero_armor_m: // eHeroArmor(M)
		case ItemId::a_hero_armor_w: // eHeroArmor(W)
			if (sEnemyKill != 0) sEnemyKill = 300;
			if (cContribution != 0) cContribution = 30;
			if (cSide != 0) cSide = 1;
			break;
		case ItemId::e_hero_armor_m: // eHeroArmor(M)
		case ItemId::e_hero_armor_w: // eHeroArmor(W)
			if (sEnemyKill != 0) sEnemyKill = 300;
			if (cContribution != 0) cContribution = 30;
			if (cSide != 0) cSide = 2;
			break;
			// aHeroRobe
		case ItemId::a_hero_robe_m: // aHeroRobe(M)
		case ItemId::a_hero_robe_w: // aHeroRobe(W)
			if (sEnemyKill != 0) sEnemyKill = 200;
			if (cContribution != 0) cContribution = 20;
			if (cSide != 0) cSide = 1;
			break;
		case ItemId::e_hero_robe_m: // aHeroRobe(M)
		case ItemId::e_hero_robe_w: // aHeroRobe(W)
			if (sEnemyKill != 0) sEnemyKill = 200;
			if (cContribution != 0) cContribution = 20;
			if (cSide != 0) cSide = 2;
			break;
			// aHeroHauberk
		case ItemId::a_hero_hauberk_m: // aHeroHauberk(M)
		case ItemId::a_hero_hauberk_w: // aHeroHauberk(W)
			if (sEnemyKill != 0) sEnemyKill = 100;
			if (cContribution != 0) cContribution = 10;
			if (cSide != 0) cSide = 1;
			break;
		case ItemId::e_hero_hauberk_m: // eHeroHauberk(M)
		case ItemId::e_hero_hauberk_w: // eHeroHauberk(W)
			if (sEnemyKill != 0) sEnemyKill = 100;
			if (cContribution != 0) cContribution = 10;
			if (cSide != 0) cSide = 2;
			break;
			// aHeroLeggings
		case ItemId::a_hero_leggings_m: // aHeroLeggings(M)
		case ItemId::a_hero_leggings_w: // aHeroLeggings(W)
			if (sEnemyKill != 0) sEnemyKill = 150;
			if (cContribution != 0) cContribution = 15;
			if (cSide != 0) cSide = 1;
			break;
		case ItemId::e_hero_leggings_m: // eHeroLeggings(M)
		case ItemId::e_hero_leggings_w: // eHeroLeggings(W)
			if (sEnemyKill != 0) sEnemyKill = 150;
			if (cContribution != 0) cContribution = 15;
			if (cSide != 0) cSide = 2;
			break;
		case ItemId::aresden_hero_cape_plus_1: // AresdenHeroCape+1
			if (cSide != 0) cSide = 1;
			break;
		case ItemId::elvine_hero_cape_plus_1: // ElvineHeroCape+1
			if (cSide != 0) cSide = 2;
			break;
		default:
			return ItemId::none;
	}
	return iItemID;
}

int CGame::iUpgradeHeroCapeRequirements(int iClientH, int iItemIndex) {
	int iRequiredEnemyKills;
	int iRequiredContribution;
	int i;
	ItemId iAfterItemID = ItemId::none;
	iRequiredEnemyKills = 10000;
	iRequiredContribution = 10000;
	ItemId iStoneNumber = ItemId::none;
	i = 0;
	ItemId iBeforeItemID = m_pClientList[iClientH]->m_pItemList[iItemIndex]->m_sIDnum;
	if (iBeforeItemID == ItemId::aresden_hero_cape) {
		_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) m_pClientList[iClientH]->m_pItemList[iItemIndex], nullptr);
		iAfterItemID = ItemId::aresden_hero_cape_plus_1;
		iRequiredEnemyKills = 30;
		iRequiredContribution = 50;
		iStoneNumber = ItemId::stone_of_merien;
	} else if (iBeforeItemID == ItemId::elvine_hero_cape) {
		_bItemLog(DEF_ITEMLOG_UPGRADESUCCESS, iClientH, (int) m_pClientList[iClientH]->m_pItemList[iItemIndex], nullptr);
		iAfterItemID = ItemId::elvine_hero_cape_plus_1;
		iRequiredEnemyKills = 30;
		iRequiredContribution = 50;
		iStoneNumber = ItemId::stone_of_merien;
	} else {
		return -1;
	}
	if ((iRequiredEnemyKills > m_pClientList[iClientH]->m_iEnemyKillCount) || (iRequiredEnemyKills == 10000)) return 0;
	if ((iRequiredContribution > m_pClientList[iClientH]->m_iContribution) || (iRequiredContribution == 10000)) return 0;
	for (i = 0; i < DEF_MAXITEMS; i++) {
		if ((m_pClientList[iClientH]->m_pItemList[i] != 0) && (m_pClientList[iClientH]->m_pItemList[i]->m_sIDnum == iStoneNumber)) break;
	}
	if ((i == DEF_MAXITEMS) || (iStoneNumber == ItemId::none)) return 0;
	if (_bInitItemAttr(m_pClientList[iClientH]->m_pItemList[iItemIndex], iAfterItemID) == false) return -1;
	m_pClientList[iClientH]->m_iEnemyKillCount -= iRequiredEnemyKills;
	m_pClientList[iClientH]->m_iContribution -= iRequiredContribution;
	if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
		ItemDepleteHandler(iClientH, i, false, true);
		return 1;
	}
	return -1;
}

/*void CGame::Command_GreenBall(int iClientH, char * pData, uint32_t dwMsgSize)
{
char   seps[] = "= \t\n";
char   * token, cBuff[256];
  CStrTok * pStrTok;
char cPrevMode;
int i;
int j;
int sType;
int sTime;
uint32_t dwTime;
short itemeq;
	 iSoX = 0;
	for (i = 0; i < DEF_MAXITEMS; i++)
	if (m_pClientList[iClientH]->m_pItemList[i] != 0) {
		switch (m_pClientList[iClientH]->m_pItemList[i]->m_sIDnum) {
		case 652: iSoX++; iSoxH = i; break;
		}
	}
  dwTime = timeGetTime();
  if (m_pClientList[iClientH] == 0) return;
  if ((dwMsgSize)   <= 0) return;
  std::memset(cBuff, 0, sizeof(cBuff));
  memcpy(cBuff, pData, dwMsgSize);
  pStrTok = new  CStrTok(cBuff, seps);
  token = pStrTok->pGet();
  token = pStrTok->pGet();
  if (token == 0) {
	  delete pStrTok;
	  return;
  }
  sTime = 600;
  for (i = 0; i < DEF_MAXMAPS; i++) {
	  if ((m_pMapList[i] != 0) && (m_pMapList[i]->m_bIsFixedDayMode == false)) {
		  cPrevMode = m_pMapList[i]->m_cWhetherStatus;
		  if (m_pMapList[i]->m_cWhetherStatus != 0) {
			  if ((dwTime - m_pMapList[i]->m_dwWhetherStartTime) > m_pMapList[i]->m_dwWhetherLastTime)
				  m_pMapList[i]->m_cWhetherStatus = 0;
		  }
		  else {
			  sTime *= 1000;
			  m_pMapList[i]->m_cWhetherStatus = sType;
			  m_pMapList[i]->m_dwWhetherStartTime = dwTime;
			  m_pMapList[i]->m_dwWhetherLastTime  = sTime;
		  }
		  if (cPrevMode != m_pMapList[i]->m_cWhetherStatus) {
			  for (j = 1; j < DEF_MAXCLIENTS; j++)
			  if ((m_pClientList[j] != 0) && (m_pClientList[j]->m_bIsInitComplete == true) && (m_pClientList[j]->m_cMapIndex == i))
				  SendNotifyMsg(0, j, DEF_NOTIFY_WHETHERCHANGE, m_pMapList[i]->m_cWhetherStatus, 0, 0, 0);
		  }
	  }
  }
	ItemDepleteHandler(iClientH, itemeq, false, false);
}*/
void CGame::TimeHitPointsUp(int iClientH) {
	int iMaxHP;
	int iTemp;
	int iTotal;
	double dV1;
	double dV2;
	double dV3;
	/*
	.text:0043A679                 mov     [ebp+m_pClientList], ecx
	.text:0043A67C                 mov     eax, [ebp+iClientH]
	.text:0043A67F                 mov     ecx, [ebp+m_pClientList]
	.text:0043A682                 cmp     dword ptr [ecx+eax*4+16Ch], 0 ; m_pClientList[iClientH] == 0
	.text:0043A68A                 jnz     short loc_43A691;
	.text:0043A68C                 jmp     loc_43A8F4;
	 */
	if (m_pClientList[iClientH] == 0) return;
	/*
	.text:0043A691                 mov     edx, [ebp+iClientH]
	.text:0043A694                 mov     eax, [ebp+m_pClientList]
	.text:0043A697                 mov     ecx, [eax+edx*4+16Ch] ; m_pClientList[iClientH]->
	.text:0043A69E                 cmp     dword ptr [ecx+2Ch], 0 ; m_bIsInitComplete == 0
	.text:0043A6A2                 jnz     short loc_43A6A9;
	.text:0043A6A4                 jmp     break loc_43A8F4;
	 */
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	/*
	.text:0043A6A9                 mov     edx, [ebp+iClientH]
	.text:0043A6AC                 mov     eax, [ebp+m_pClientList]
	.text:0043A6AF                 mov     ecx, [eax+edx*4+16Ch] ; m_pClientList[iClientH]->
	.text:0043A6B6                 cmp     dword ptr [ecx+0B6Ch], 0 ; m_iHungerStatus <= 0
	.text:0043A6BD                 jg      short loc_43A6C4
	.text:0043A6BF                 jmp     loc_43A8F4
	 */
	if (m_pClientList[iClientH]->m_iHungerStatus <= 0) return;
	/*
	.text:0043A6C4                 mov     edx, [ebp+iClientH]
	.text:0043A6C7                 mov     eax, [ebp+m_pClientList]
	.text:0043A6CA                 mov     ecx, [eax+edx*4+16Ch] ; m_pClientList[iClientH]->
	.text:0043A6D1                 cmp     dword ptr [ecx+0C8h], 1 ; m_bIsKilled == true
	.text:0043A6D8                 jnz     short loc_43A6DF
	.text:0043A6DA                 jmp     loc_43A8F4
	 */
	if (m_pClientList[iClientH]->m_bIsKilled == true) return;
	/*
	.text:0043A6DF                 mov     edx, [ebp+iClientH]
	.text:0043A6E2                 mov     eax, [ebp+m_pClientList]
	.text:0043A6E5                 mov     ecx, [eax+edx*4+16Ch] ; m_pClientList[iClientH]->
	.text:0043A6EC                 cmp     dword ptr [ecx+864h], 1 ; m_pClientList[i]->m_bSkillUsingStatus[19]
	.text:0043A6F3                 jnz     short loc_43A6FA
	.text:0043A6F5                 jmp     loc_43A8F4
	 */
	if (m_pClientList[iClientH]->m_bSkillUsingStatus[19] == true) return;
	/*
	.text:0043A6FA                 mov     edx, [ebp+iClientH]
	.text:0043A6FD                 push    edx
	.text:0043A6FE                 mov     ecx, [ebp+m_pClientList]
	.text:0043A701                 call    CGame__iGetMaxHP
	.text:0043A706                 mov     [ebp+iMaxHP], eax
	 */
	iMaxHP = iGetMaxHP(iClientH);
	/*
	.text:0043A709                 mov     eax, [ebp+iClientH]
	.text:0043A70C                 mov     ecx, [ebp+m_pClientList]
	.text:0043A70F                 mov     edx, [ecx+eax*4+16Ch]
	.text:0043A716                 mov     eax, [edx+0ACh] ; m_iHP < iMaxHP
	.text:0043A71C                 cmp     eax, [ebp+iMaxHP]
	.text:0043A71F                 jge     loc_43A8DD
	 */
	if (m_pClientList[iClientH]->m_iHP < iMaxHP) {
		/*
		.text:0043A725                 mov     ecx, [ebp+iClientH]
		.text:0043A728                 mov     edx, [ebp+m_pClientList]
		.text:0043A72B                 mov     eax, [edx+ecx*4+16Ch] ; m_pClientList[iClientH]->
		.text:0043A732                 mov     ecx, [eax+120h] ; m_iVit
		.text:0043A738                 push    ecx
		.text:0043A739                 push    1
		.text:0043A73B                 mov     ecx, [ebp+m_pClientList]
		.text:0043A73E                 call    CGame__iDice
		.text:0043A743                 mov     [ebp+iTemp], eax
		 */
		iTemp = iDice(1, (m_pClientList[iClientH]->m_iVit));
		/*
		.text:0043A746                 mov     edx, [ebp+iClientH]
		.text:0043A749                 mov     eax, [ebp+m_pClientList]
		.text:0043A74C                 mov     ecx, [eax+edx*4+16Ch] ; m_pClientList[iClientH]->
		.text:0043A753                 mov     eax, [ecx+120h] ; m_iVit
		.text:0043A759                 cdq
		.text:0043A75A                 sub     eax, edx
		.text:0043A75C                 sar     eax, 1
		.text:0043A75E                 cmp     [ebp+iTemp], eax
		.text:0043A761                 jge     short loc_43A77E
		.text:0043A763                 mov     edx, [ebp+iClientH]
		.text:0043A766                 mov     eax, [ebp+m_pClientList]
		.text:0043A769                 mov     ecx, [eax+edx*4+16Ch] ; m_pClientList[iClientH]->
		.text:0043A770                 mov     eax, [ecx+120h] ; m_iVit
		.text:0043A776                 cdq
		.text:0043A777                 sub     eax, edx
		.text:0043A779                 sar     eax, 1
		.text:0043A77B                 mov     [ebp+iTemp], eax
		 */
		if (iTemp < (m_pClientList[iClientH]->m_iVit / 2)) iTemp = (m_pClientList[iClientH]->m_iVit / 2);
		/*
		.text:0043A77E                 mov     edx, [ebp+iClientH]
		.text:0043A781                 mov     eax, [ebp+m_pClientList]
		.text:0043A784                 mov     ecx, [eax+edx*4+16Ch] ; m_pClientList[iClientH]->
		.text:0043A78B                 cmp     dword ptr [ecx+0C1Ch], 0 ; m_iSideEffect_MaxHPdown != 0
		.text:0043A792                 jz      short loc_43A7B3
		 */
		if (m_pClientList[iClientH]->m_iSideEffect_MaxHPdown != 0)
			/*
			.text:0043A7A5                 idiv    dword ptr [ecx+0C1Ch] ; m_iSideEffect_MaxHPdown
			.text:0043A7AB                 mov     edx, [ebp+iTemp] ; (iTemp / m_iSideEffect_MaxHPdown)
			.text:0043A7AE                 sub     edx, eax
			.text:0043A7B0                 mov     [ebp+iTemp], edx ; iTemp =
			 */
			iTemp -= (iTemp / m_pClientList[iClientH]->m_iSideEffect_MaxHPdown);
		/*
		.text:0043A7B3                 mov     eax, [ebp+iClientH]
		.text:0043A7B6                 mov     ecx, [ebp+m_pClientList]
		.text:0043A7B9                 mov     edx, [ecx+eax*4+16Ch]
		.text:0043A7C0                 mov     eax, [ebp+iTemp]
		.text:0043A7C3                 add     eax, [edx+0B0h]
		.text:0043A7C9                 mov     [ebp+iTotal], eax
		 */
		iTotal = iTemp + m_pClientList[iClientH]->m_iHPstock;
		/*
		.text:0043A7CC                 mov     ecx, [ebp+iClientH]
		.text:0043A7CF                 mov     edx, [ebp+m_pClientList]
		.text:0043A7D2                 mov     eax, [edx+ecx*4+16Ch] ; m_pClientList[iClientH]->
		.text:0043A7D9                 mov     ecx, [ebp+iTotal]
		.text:0043A7DC                 add     ecx, [eax+0B4h]
		.text:0043A7E2                 mov     [ebp+iTotal], ecx ; iTotal =
		.text:0043A7E5                 mov     edx, [ebp+iClientH]
		.text:0043A7E8                 mov     eax, [ebp+m_pClientList]
		.text:0043A7EB                 mov     ecx, [eax+edx*4+16Ch]
		.text:0043A7F2                 cmp     dword ptr [ecx+0E60h], 0 ; m_iAddHP == 0
		.text:0043A7F9                 jz      short loc_43A830
		.text:0043A7FB                 fild    [ebp+iTotal]
		.text:0043A7FE                 fstp    [ebp+var_20]
		.text:0043A801                 mov     edx, [ebp+iClientH]
		.text:0043A804                 mov     eax, [ebp+m_pClientList]
		.text:0043A807                 mov     ecx, [eax+edx*4+16Ch]
		.text:0043A80E                 fild    dword ptr [ecx+0E60h] ; m_iAddHP
		.text:0043A814                 fst     [ebp+var_28]
		.text:0043A817                 fdiv    ds:dbl_4ECBB8
		.text:0043A81D                 fmul    [ebp+var_20]
		.text:0043A820                 fst     [ebp+var_18]
		.text:0043A823                 call    __ftol
		.text:0043A828                 mov     edx, [ebp+iTotal]
		.text:0043A82B                 add     edx, eax
		.text:0043A82D                 mov     [ebp+iTotal], edx
		 */
		if (m_pClientList[iClientH]->m_iAddHP != 0) {
			dV2 = (double) iTotal;
			dV3 = (double) m_pClientList[iClientH]->m_iAddHP;
			dV1 = (dV3 / 100.0f) * dV2;
			iTotal += (int) dV1;
		}
		/*
		.text:0043A830                 mov     eax, [ebp+iClientH]
		.text:0043A833                 mov     ecx, [ebp+m_pClientList]
		.text:0043A836                 mov     edx, [ecx+eax*4+16Ch] ; m_pClientList[iClientH]->
		.text:0043A83D                 mov     eax, [edx+0ACh] ; m_iHP
		.text:0043A843                 add     eax, [ebp+iTotal]
		.text:0043A846                 mov     ecx, [ebp+iClientH]
		.text:0043A849                 mov     edx, [ebp+m_pClientList]
		.text:0043A84C                 mov     ecx, [edx+ecx*4+16Ch] ; m_pClientList[iClientH]->
		.text:0043A853                 mov     [ecx+0ACh], eax ; m_iHP
		 */
		m_pClientList[iClientH]->m_iHP += iTotal;
		/*
		.text:0043A859                 mov     edx, [ebp+iClientH]
		.text:0043A85C                 mov     eax, [ebp+m_pClientList]
		.text:0043A85F                 mov     ecx, [eax+edx*4+16Ch] ; m_pClientList[iClientH]->
		.text:0043A866                 mov     edx, [ecx+0ACh] ; m_iHP
		.text:0043A86C                 cmp     edx, [ebp+iMaxHP]
		.text:0043A86F                 jle     short loc_43A887
		.text:0043A871                 mov     eax, [ebp+iClientH]
		.text:0043A874                 mov     ecx, [ebp+m_pClientList]
		.text:0043A877                 mov     edx, [ecx+eax*4+16Ch] ; m_pClientList[iClientH]->
		.text:0043A87E                 mov     eax, [ebp+iMaxHP]
		.text:0043A881                 mov     [edx+0ACh], eax ; m_iHP
		 */
		if (m_pClientList[iClientH]->m_iHP > iMaxHP) m_pClientList[iClientH]->m_iHP = iMaxHP;
		/*
		.text:0043A887                 mov     ecx, [ebp+iClientH]
		.text:0043A88A                 mov     edx, [ebp+m_pClientList]
		.text:0043A88D                 mov     eax, [edx+ecx*4+16Ch] ; m_pClientList[iClientH]->
		.text:0043A894                 cmp     dword ptr [eax+m_iHP], 0
		.text:0043A89B                 jg      short loc_43A8B4
		.text:0043A89D                 mov     ecx, [ebp+iClientH]
		.text:0043A8A0                 mov     edx, [ebp+m_pClientList]
		.text:0043A8A3                 mov     eax, [edx+ecx*4+16Ch] ; m_pClientList[iClientH]->
		.text:0043A8AA                 mov     dword ptr [eax+m_iHP], 0
		 */
		if (m_pClientList[iClientH]->m_iHP <= 0) m_pClientList[iClientH]->m_iHP = 0;
		/*
		.text:0043A8B4                 push    0               ; pString2
		.text:0043A8B6                 push    0               ; sV9
		.text:0043A8B8                 push    0               ; sV8
		.text:0043A8BA                 push    0               ; sV7
		.text:0043A8BC                 push    0               ; sV6
		.text:0043A8BE                 push    0               ; sV5
		.text:0043A8C0                 push    0               ; sV4
		.text:0043A8C2                 push    0               ; pString
		.text:0043A8C4                 push    0               ; sV3
		.text:0043A8C6                 push    0               ; sV2
		.text:0043A8C8                 push    0               ; sV1
		.text:0043A8CA                 push    0B07h           ; wMsgType DEF_NOTIFY_HP
		.text:0043A8CF                 mov     ecx, [ebp+iClientH]
		.text:0043A8D2                 push    ecx             ; iToH
		.text:0043A8D3                 push    0               ; iFromH
		.text:0043A8D5                 mov     ecx, [ebp+m_pClientList]
		.text:0043A8D8                 call    CGame__SendNotifyMsg
		 */
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_HP, 0, 0, 0, 0);
	}
	/*
	.text:0043A8DD                 mov     edx, [ebp+iClientH]
	.text:0043A8E0                 mov     eax, [ebp+m_pClientList]
	.text:0043A8E3                 mov     ecx, [eax+edx*4+16Ch]
	.text:0043A8EA                 mov     dword ptr [ecx+0B0h], 0 ; m_iHPstock = 0
	 */
	m_pClientList[iClientH]->m_iHPstock = 0;
}

char CGame::_cCheckHeroItemEquipped(int iClientH) {
	short sHeroLeggings;
	short sHeroHauberk;
	short sHeroArmor;
	short sHeroHelm;
	if (m_pClientList[iClientH] == 0) return 0;
	auto &client = *m_pClientList[iClientH];
	auto &equipStatus = client.m_sItemEquipmentStatus;
	sHeroHelm = equipStatus[ItemEquipPos::head];
	sHeroArmor = equipStatus[ItemEquipPos::body];
	sHeroHauberk = equipStatus[ItemEquipPos::arms];
	sHeroLeggings = equipStatus[ItemEquipPos::pants];
	if ((sHeroHelm < 0) || (sHeroLeggings < 0) || (sHeroArmor < 0) || (sHeroHauberk < 0)) return 0;
	auto &itemList = client.m_pItemList;
	if (itemList[sHeroHelm] == 0) return 0;
	if (itemList[sHeroLeggings] == 0) return 0;
	if (itemList[sHeroArmor] == 0) return 0;
	if (itemList[sHeroHauberk] == 0) return 0;
	const auto helmId = itemList[sHeroHelm]->m_sIDnum;
	const auto armorId = itemList[sHeroArmor]->m_sIDnum;
	const auto hauberkId = itemList[sHeroHauberk]->m_sIDnum;
	const auto leggingsId = itemList[sHeroLeggings]->m_sIDnum;
	if ((helmId == ItemId::a_hero_helm_m) &&
			  (armorId == ItemId::a_hero_armor_m) &&
			  (hauberkId == ItemId::a_hero_hauberk_m) &&
			  (leggingsId == ItemId::a_hero_leggings_m)) return 1;
	if ((helmId == ItemId::a_hero_cap_m) &&
			  (armorId == ItemId::a_hero_robe_m) &&
			  (hauberkId == ItemId::a_hero_hauberk_m) &&
			  (leggingsId == ItemId::a_hero_leggings_m)) return 2;
	if ((helmId == ItemId::a_hero_helm_w) &&
			  (armorId == ItemId::a_hero_armor_w) &&
			  (hauberkId == ItemId::a_hero_hauberk_w) &&
			  (leggingsId == ItemId::a_hero_leggings_w)) return 1;
	if ((helmId == ItemId::a_hero_cap_w) &&
			  (armorId == ItemId::a_hero_robe_w) &&
			  (hauberkId == ItemId::a_hero_hauberk_w) &&
			  (leggingsId == ItemId::a_hero_leggings_w)) return 2;
	if ((helmId == ItemId::e_hero_helm_m) &&
			  (armorId == ItemId::e_hero_armor_m) &&
			  (hauberkId == ItemId::e_hero_hauberk_m) &&
			  (leggingsId == ItemId::e_hero_leggings_m)) return 1;
	if ((helmId == ItemId::e_hero_cap_m) &&
			  (armorId == ItemId::e_hero_robe_m) &&
			  (hauberkId == ItemId::e_hero_hauberk_m) &&
			  (leggingsId == ItemId::e_hero_leggings_m)) return 2;
	if ((helmId == ItemId::e_hero_helm_w) &&
			  (armorId == ItemId::e_hero_armor_w) &&
			  (hauberkId == ItemId::e_hero_hauberk_w) &&
			  (leggingsId == ItemId::e_hero_leggings_w)) return 1;
	if ((helmId == ItemId::e_hero_cap_w) &&
			  (armorId == ItemId::e_hero_robe_w) &&
			  (hauberkId == ItemId::e_hero_hauberk_w) &&
			  (leggingsId == ItemId::e_hero_leggings_w)) return 2;
	return 0;
}

bool CGame::bPlantSeedBag(int iMapIndex, int dX, int dY, int iItemEffectValue1, int iItemEffectValue2, int iClientH) {
	int iNamingValue;
	int tX;
	int tY;
	short sOwnerH;
	char cOwnerType;
	char cNpcName[21], cName[21], cNpcWaypointIndex[11];
	bool bRet;
	if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_iTotalAgriculture >= 200) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOMOREAGRICULTURE, 0, 0, 0, 0);
		return false;
	}
	if (iItemEffectValue2 > m_pClientList[iClientH]->m_cSkillMastery[2]) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_AGRICULTURESKILLLIMIT, 0, 0, 0, 0);
		return false;
	}
	iNamingValue = m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->iGetEmptyNamingValue();
	if (iNamingValue == -1) {
	} else {
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
		if (sOwnerH != 0 && sOwnerH == DEF_OWNERTYPE_NPC && m_pNpcList[sOwnerH]->m_cActionLimit == 5) {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_AGRICULTURENOAREA, 0, 0, 0, 0);
			return false;
		} else {
			if (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->bGetIsFarm(dX, dY) == false) {
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_AGRICULTURENOAREA, 0, 0, 0, 0);
				return false;
			}
			std::memset(cNpcName, 0, sizeof(cNpcName));
			strcpy(cNpcName, "Crops");
			std::memset(cName, 0, sizeof(cName));
			wsprintf(cName, "XX%d", iNamingValue);
			cName[0] = '_';
			cName[1] = iMapIndex + 65;
			std::memset(cNpcWaypointIndex, 0, sizeof(cNpcWaypointIndex));
			tX = dX;
			tY = dY;
			bRet = bCreateNewNpc(cNpcName, cName, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, 0, 0, NpcMoveType::random, &tX, &tY, cNpcWaypointIndex, 0, 0, 0, false, true);
			if (bRet == false) {
				m_pMapList[iMapIndex]->SetNamingValueEmpty(iNamingValue);
			} else {
				m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, tX, tY);
				if (m_pNpcList[sOwnerH] == 0) return 0;
				m_pNpcList[sOwnerH]->m_cCropType = iItemEffectValue1;
				switch (iItemEffectValue1) {
					case 1: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 2: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 3: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 4: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 5: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 6: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 7: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 8: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 9: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 10: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 11: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 12: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					case 13: m_pNpcList[sOwnerH]->m_cCropSkill = iItemEffectValue2;
						break;
					default: m_pNpcList[sOwnerH]->m_cCropSkill = 100;
						break;
				}
				m_pNpcList[sOwnerH]->m_sAppr2 = 1;
				SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_NPC, MSGID_EVENT_LOG, DEF_MSGTYPE_CONFIRM, 0, 0, 0);
				wsprintf(G_cTxt, "(skill:%d type:%d)plant(%s) Agriculture begin(%d,%d) sum(%d)!", m_pNpcList[sOwnerH]->m_cCropSkill, m_pNpcList[sOwnerH]->m_cCropType, cNpcName, tX, tY, m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_iTotalAgriculture);
				PutLogList(G_cTxt);
				return true;
			}
		}
	}
	return false;
}

/*bool CGame::bCheckFarmingSkill(char m_cFarmingSkill, char m_cCropSkill, char m_cHarvestCount)
{
 int iRoll;
	m_cFarmingSkill = ((m_cFarmingSkill - 20)/10)
	m_cCropSkill = ((m_cCropSkill - 20)/10)
	if ((m_cCropSkill < 0) && (m_cCropSkill > 8)) return false;
	if ((m_cFarmingSkill < 0) && (m_cFarmingSkill > 8)) return false;
	iRoll = iDice(1,100)
		if (m_cHarvestCount == 1) {
			if (iRoll >= (m_cCropSkill*m_cFarmingSkill)) {
				2Ah 42
			}
		}
		else if (m_cHarvestCount == 2) {
				28h 40
		}
}*/
void CGame::_CheckFarmingAction(short sAttackerH, short sTargetH, bool bType) {
	char cCropType;
	CItem * pItem;
	ItemId iItemID = ItemId::none;
	cCropType = 0;
	cCropType = m_pNpcList[sTargetH]->m_cCropType;
	switch (cCropType) {
		case 1: GetExp(sAttackerH, iDice(3, 10));
			iItemID = ItemId::water_melon;
			break; // WaterMelon
		case 2: GetExp(sAttackerH, iDice(3, 10));
			iItemID = ItemId::pumpkin;
			break; // Pumpkin
		case 3: GetExp(sAttackerH, iDice(4, 10));
			iItemID = ItemId::garlic;
			break; // Garlic
		case 4: GetExp(sAttackerH, iDice(4, 10));
			iItemID = ItemId::barley;
			break; // Barley
		case 5: GetExp(sAttackerH, iDice(5, 10));
			iItemID = ItemId::carrot;
			break; // Carrot
		case 6: GetExp(sAttackerH, iDice(5, 10));
			iItemID = ItemId::radish;
			break; // Radish
		case 7: GetExp(sAttackerH, iDice(6, 10));
			iItemID = ItemId::corn;
			break; // Corn
		case 8: GetExp(sAttackerH, iDice(6, 10));
			iItemID = ItemId::chinese_bellflower;
			break; // ChineseBellflower
		case 9: GetExp(sAttackerH, iDice(7, 10));
			iItemID = ItemId::melone;
			break; // Melone
		case 10: GetExp(sAttackerH, iDice(7, 10));
			iItemID = ItemId::tommato;
			break; // Tommato
		case 11: GetExp(sAttackerH, iDice(8, 10));
			iItemID = ItemId::grapes;
			break; // Grapes
		case 12: GetExp(sAttackerH, iDice(8, 10));
			iItemID = ItemId::blue_grapes;
			break; // BlueGrapes
		case 13: GetExp(sAttackerH, iDice(9, 10));
			iItemID = ItemId::mushroom;
			break; // Mushroom
		default: GetExp(sAttackerH, iDice(10, 10));
			iItemID = ItemId::ginseng;
			break; // Ginseng
	}
	pItem = new CItem;
	if (_bInitItemAttr(pItem, iItemID) == false) {
		delete pItem;
	}
	if (bType == 0) {
		m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->bSetItem(m_pClientList[sAttackerH]->m_sX, m_pClientList[sAttackerH]->m_sY, pItem);
		SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[sAttackerH]->m_cMapIndex,
				  m_pClientList[sAttackerH]->m_sX, m_pClientList[sAttackerH]->m_sY, pItem->m_sSprite,
				  pItem->m_sSpriteFrame, pItem->m_cItemColor, false);
	} else if (bType == 1) {
		m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->bSetItem(m_pNpcList[sTargetH]->m_sX, m_pNpcList[sTargetH]->m_sY, pItem);
		SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pNpcList[sTargetH]->m_cMapIndex,
				  m_pNpcList[sTargetH]->m_sX, m_pNpcList[sTargetH]->m_sY, pItem->m_sSprite,
				  pItem->m_sSpriteFrame, pItem->m_cItemColor, false);
	}
}

void CGame::CalculateEnduranceDecrement(short sTargetH, short sAttackerH, char cTargetType, char cAttackerType, int iArmorType) {
	short sItemIndex;
	int iDownValue = 1, iHammerChance = 100;
	if (m_pClientList[sTargetH] == 0) return;
	if ((cTargetType == DEF_OWNERTYPE_PLAYER) && (cAttackerType == DEF_OWNERTYPE_PLAYER && m_pClientList[sAttackerH] != 0)) {
		if ((cTargetType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sTargetH]->m_cSide != m_pClientList[sAttackerH]->m_cSide)) {
			switch (m_pClientList[sAttackerH]->m_sUsingWeaponSkill) {
				case 14:
					if ((31 == ((m_pClientList[sAttackerH]->m_sAppr2 & 0x0FF0) >> 4)) || (32 == ((m_pClientList[sAttackerH]->m_sAppr2 & 0x0FF0) >> 4))) {
						sItemIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand];
						if ((sItemIndex != -1) && (m_pClientList[sAttackerH]->m_pItemList[sItemIndex] != 0)) {
							if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::battle_hammer) { // BattleHammer
								iDownValue = 10;
								break;
							}
							if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::giant_battle_hammer) { // GiantBattleHammer
								iDownValue = 10;
								break;
							}
							if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::barbarian_hammer) { // BarbarianHammer
								iDownValue = 10;
								break;
							}
						}
					} else {
						iDownValue = 20;
						break;
					}
				case 10: iDownValue = 3;
					break;
				default: iDownValue = 1;
					break;
			}
			if (m_pClientList[sTargetH]->m_bIsSpecialAbilityEnabled == true) {
				switch (m_pClientList[sTargetH]->m_iSpecialAbilityType)
					case 52: iDownValue = 0;
				iHammerChance = 0;
			}
		}
	}
	if ((m_pClientList[sTargetH]->m_cSide != 0) && (m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wCurLifeSpan > 0)) {
		m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wCurLifeSpan -= iDownValue;
	}
	if ((m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wCurLifeSpan <= 0) || (m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wCurLifeSpan > 64000)) {
		m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wCurLifeSpan = 0;
		SendNotifyMsg(0, sTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_cEquipPos, iArmorType, 0, 0);
		ReleaseItemHandler(sTargetH, iArmorType, true);
		return;
	}
	if (cAttackerType == DEF_OWNERTYPE_PLAYER && m_pClientList[sAttackerH] != 0) {
		if (cTargetType == DEF_OWNERTYPE_PLAYER) {
			sItemIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand];
			if ((sItemIndex != -1) && (m_pClientList[sAttackerH]->m_pItemList[sItemIndex] != 0)) {
				if ((m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::composite_bow) ||
						  (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::dark_elf_bow) ||
						  //(m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::619) ||
						  (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::fire_bow) ||
						  (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::direction_bow) ||
						  (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::short_bow) ||
						  (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::long_bow)) {
					m_pClientList[sAttackerH]->m_sUsingWeaponSkill = 6;
					return;
				}
			}
		}
	}
	if (cAttackerType == DEF_OWNERTYPE_PLAYER && m_pClientList[sAttackerH] != 0) {
		if (cTargetType == DEF_OWNERTYPE_PLAYER) {
			if ((m_pClientList[sAttackerH]->m_sUsingWeaponSkill == 14) && (iHammerChance == 100)) {
				if (m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wMaxLifeSpan < 2000) {
					iHammerChance = iDice(6, (m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wMaxLifeSpan - m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wCurLifeSpan));
				} else {
					iHammerChance = iDice(4, (m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wMaxLifeSpan - m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wCurLifeSpan));
				}
				if ((31 == ((m_pClientList[sAttackerH]->m_sAppr2 & 0x0FF0) >> 4)) || (32 == ((m_pClientList[sAttackerH]->m_sAppr2 & 0x0FF0) >> 4))) {
					sItemIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand];
					if ((sItemIndex != -1) && (m_pClientList[sAttackerH]->m_pItemList[sItemIndex] != 0)) {
						if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::battle_hammer) { // BattleHammer
							iHammerChance = ((iHammerChance * 10) / 5);
						}
						if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::giant_battle_hammer) { // GiantBattleHammer
							iHammerChance = ((iHammerChance * 10) / 4);
						}
						if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::barbarian_hammer) { // GiantBattleHammer
							iHammerChance = ((iHammerChance * 10) / 5);
						}
					}
				}
				if ((m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_sIDnum == ItemId::merien_plate_mail_w) ||
						  (m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_sIDnum == ItemId::merien_plate_mail_m)) {
					iHammerChance = 0;
				}
				if (m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wCurLifeSpan < iHammerChance) {
					wsprintf(G_cTxt, "(iHammerChance (%d), target armor endurance (%d)!", iHammerChance, m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_wCurLifeSpan);
					PutLogList(G_cTxt);
					ReleaseItemHandler(sTargetH, iArmorType, true);
					SendNotifyMsg(0, sTargetH, DEF_NOTIFY_ITEMRELEASED, (int) m_pClientList[sTargetH]->m_pItemList[iArmorType]->m_cEquipPos, iArmorType, 0, 0);
					return;
				}
			}
		}
	}
}

int CGame::iCalculateAttackEffect(short sTargetH, char cTargetType, short sAttackerH, char cAttackerType, int tdX, int tdY, int iAttackMode, bool bNearAttack, bool bIsDash, bool bArrowUse) {
	int iAP_SM;
	int iAP_L;
	int iAttackerHitRatio;
	int iTargetDefenseRatio;
	int iDestHitRatio;
	int iResult;
	int iAP_Abs_Armor;
	int iAP_Abs_Shield;
	char cAttackerName[21], cAttackerDir, cAttackerSide, cTargetDir, cProtect, cCropSkill, cFarmingSkill;
	short sWeaponIndex;
	short sAttackerWeapon;
	short dX;
	short dY;
	short sX;
	short sY;
	short sAtkX;
	short sAtkY;
	short sTgtX;
	short sTgtY;
	uint32_t dwTime;
	char cDamageMod[256];
	uint16_t wWeaponType;
	double dTmp1;
	double dTmp2;
	double dTmp3;
	bool bKilled;
	bool bIsAttackerBerserk;
	int iKilledDice;
	int iDamage;
	int iExp;
	int iWepLifeOff;
	int iSideCondition;
	int iMaxSuperAttack;
	int iWeaponSkill;
	int iComboBonus;
	int iTemp;
	int iMoveDamage;
	int iRepDamage;
	char cAttackerSA;
	int iAttackerSAvalue;
	int iHitPoint;
	char cDamageMoveDir;
	int iPartyID;
	int iWarContribution;
	int tX;
	int tY;
	int iDst1;
	int iDst2;
	short sItemIndex;
	short sSkillUsed;
	dwTime = timeGetTime();
	bKilled = false;
	iExp = 0;
	iPartyID = 0;
	std::memset(cAttackerName, 0, sizeof(cAttackerName));
	cAttackerSA = 0;
	iAttackerSAvalue = 0;
	wWeaponType = 0;
	switch (cAttackerType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sAttackerH] == 0) return 0;
			if ((m_bAdminSecurity == true) && (m_pClientList[sAttackerH]->m_iAdminUserLevel > 0)) return 0;
			if ((m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsAttackEnabled == false) && (m_pClientList[sAttackerH]->m_iAdminUserLevel == 0)) return 0;
			if ((m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex] == 0) && (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsHeldenianMap == true) && (m_bIsHeldenianMode == true)) return 0;
			if ((m_bIsCrusadeMode == false) && (m_pClientList[sAttackerH]->m_bIsPlayerCivil == true) && (cTargetType == DEF_OWNERTYPE_PLAYER)) return 0;
			if ((m_pClientList[sAttackerH]->m_iStatus & 0x10) != 0) {
				SetInvisibilityFlag(sAttackerH, DEF_OWNERTYPE_PLAYER, false);
				bRemoveFromDelayEventList(sAttackerH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_INVISIBILITY);
				m_pClientList[sAttackerH]->m_cMagicEffectStatus[DEF_MAGICTYPE_INVISIBILITY] = 0;
			}
			if ((m_pClientList[sAttackerH]->m_sAppr2 & 0xF000) == 0) return 0;
			iAP_SM = 0;
			iAP_L = 0;
			wWeaponType = ((m_pClientList[sAttackerH]->m_sAppr2 & 0x0FF0) >> 4);
			sSkillUsed = m_pClientList[sAttackerH]->m_sUsingWeaponSkill;
			if ((bIsDash == true) && (m_pClientList[sAttackerH]->m_cSkillMastery[sSkillUsed] != 100) && (wWeaponType != 25) && (wWeaponType != 27)) {
				wsprintf(G_cTxt, "TSearch Fullswing Hack: (%s) Player: (%s) - dashing with only (%d) weapon skill.", m_pClientList[sAttackerH]->m_cIPaddress, m_pClientList[sAttackerH]->m_cCharName, m_pClientList[sAttackerH]->m_cSkillMastery[sSkillUsed]);
				PutHackLogFileList(G_cTxt);
				DeleteClient(sAttackerH, true, true);
				return 0;
			}
			cAttackerSide = m_pClientList[sAttackerH]->m_cSide;
			if (wWeaponType == 0) {
				iAP_SM = iAP_L = iDice(1, ((m_pClientList[sAttackerH]->m_iStr + m_pClientList[sAttackerH]->m_iStr) / 12));
				if (iAP_SM <= 0) iAP_SM = 1;
				if (iAP_L <= 0) iAP_L = 1;
				iAttackerHitRatio = m_pClientList[sAttackerH]->m_iHitRatio + m_pClientList[sAttackerH]->m_cSkillMastery[5];
				m_pClientList[sAttackerH]->m_sUsingWeaponSkill = 5;
			} else if ((wWeaponType >= 1) && (wWeaponType < 40)) {
				iAP_SM = iDice(m_pClientList[sAttackerH]->m_cAttackDiceThrow_SM, m_pClientList[sAttackerH]->m_cAttackDiceRange_SM);
				iAP_L = iDice(m_pClientList[sAttackerH]->m_cAttackDiceThrow_L, m_pClientList[sAttackerH]->m_cAttackDiceRange_L);
				iAP_SM += m_pClientList[sAttackerH]->m_cAttackBonus_SM;
				iAP_L += m_pClientList[sAttackerH]->m_cAttackBonus_L;
				iAttackerHitRatio = m_pClientList[sAttackerH]->m_iHitRatio;
				dTmp1 = (double) iAP_SM;
				if ((m_pClientList[sAttackerH]->m_iStr + m_pClientList[sAttackerH]->m_iAngelicStr) <= 0)
					dTmp2 = 1.0f;
				else dTmp2 = (double) (m_pClientList[sAttackerH]->m_iStr + m_pClientList[sAttackerH]->m_iAngelicStr);
				dTmp2 = dTmp2 / 5.0f;
				dTmp3 = dTmp1 + (dTmp1 * (dTmp2 / 100.0f));
				iAP_SM = (int) (dTmp3 + 0.5f);
				dTmp1 = (double) iAP_L;
				if ((m_pClientList[sAttackerH]->m_iStr + m_pClientList[sAttackerH]->m_iAngelicStr) <= 0)
					dTmp2 = 1.0f;
				else dTmp2 = (double) (m_pClientList[sAttackerH]->m_iStr + m_pClientList[sAttackerH]->m_iAngelicStr);
				dTmp2 = dTmp2 / 5.0f;
				dTmp3 = dTmp1 + (dTmp1 * (dTmp2 / 100.0f));
				iAP_L = (int) (dTmp3 + 0.5f);
			} else if (wWeaponType >= 40) {
				iAP_SM = iDice(m_pClientList[sAttackerH]->m_cAttackDiceThrow_SM, m_pClientList[sAttackerH]->m_cAttackDiceRange_SM);
				iAP_L = iDice(m_pClientList[sAttackerH]->m_cAttackDiceThrow_L, m_pClientList[sAttackerH]->m_cAttackDiceRange_L);
				iAP_SM += m_pClientList[sAttackerH]->m_cAttackBonus_SM;
				iAP_L += m_pClientList[sAttackerH]->m_cAttackBonus_L;
				iAttackerHitRatio = m_pClientList[sAttackerH]->m_iHitRatio;
				iAP_SM += iDice(1, ((m_pClientList[sAttackerH]->m_iStr + m_pClientList[sAttackerH]->m_iAngelicStr) / 20));
				iAP_L += iDice(1, ((m_pClientList[sAttackerH]->m_iStr + m_pClientList[sAttackerH]->m_iAngelicStr) / 20));
			}
			iAttackerHitRatio += 50;
			if (iAP_SM <= 0) iAP_SM = 1;
			if (iAP_L <= 0) iAP_L = 1;
			if (m_pClientList[sAttackerH]->m_iCustomItemValue_Attack != 0) {
				if ((m_pClientList[sAttackerH]->m_iMinAP_SM != 0) && (iAP_SM < m_pClientList[sAttackerH]->m_iMinAP_SM)) {
					iAP_SM = m_pClientList[sAttackerH]->m_iMinAP_SM;
				}
				if ((m_pClientList[sAttackerH]->m_iMinAP_L != 0) && (iAP_L < m_pClientList[sAttackerH]->m_iMinAP_L)) {
					iAP_L = m_pClientList[sAttackerH]->m_iMinAP_L;
				}
				if ((m_pClientList[sAttackerH]->m_iMaxAP_SM != 0) && (iAP_SM > m_pClientList[sAttackerH]->m_iMaxAP_SM)) {
					iAP_SM = m_pClientList[sAttackerH]->m_iMaxAP_SM;
				}
				if ((m_pClientList[sAttackerH]->m_iMaxAP_L != 0) && (iAP_L > m_pClientList[sAttackerH]->m_iMaxAP_L)) {
					iAP_L = m_pClientList[sAttackerH]->m_iMaxAP_L;
				}
			}
			if (m_pClientList[sAttackerH]->m_cHeroArmourBonus == 1) {
				iAttackerHitRatio += 100;
				iAP_SM += 5;
				iAP_L += 5;
			}
			sItemIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::rhand];
			if ((sItemIndex != -1) && (m_pClientList[sAttackerH]->m_pItemList[sItemIndex] != 0)) {
				if ((m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::kloness_esterk) || // KlonessEsterk
						  (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::kloness_wand_ms20) || // KlonessWand(MS.20)
						  (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::kloness_wand_ms10)) { // KlonessWand(MS.10)
					if (m_pClientList[sAttackerH]->m_iRating > 0) {
						iRepDamage = m_pClientList[sAttackerH]->m_iRating / 100;
						if (iRepDamage < 5) iRepDamage = 5;
						iAP_SM += iRepDamage;
						iAP_L += iRepDamage;
					}
					if (cTargetType == DEF_OWNERTYPE_PLAYER) {
						if (m_pClientList[sTargetH] == 0) return 0;
						if (m_pClientList[sTargetH]->m_iRating < 0) {
							iRepDamage = (abs(m_pClientList[sTargetH]->m_iRating) / 10);
							if (iRepDamage > 10) iRepDamage = 10;
							iAP_SM += iRepDamage;
							iAP_L += iRepDamage;
						}
					}
				}
				if ((m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::berserk_wand_ms20) || // BerserkWand(MS.20)
						  (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::berserk_wand_ms10)) { // BerserkWand(MS.10)
					iAP_SM += 1;
					iAP_L += 1;
				}
			}
			sItemIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand];
			if ((sItemIndex != -1) && (m_pClientList[sAttackerH]->m_pItemList[sItemIndex] != 0)) {
				if ((m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::dark_executor) &&
						  (m_cDayOrNight == 2)) {
					iAP_SM += 4;
					iAP_L += 4;
				}
				if ((m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::lighting_blade) &&
						  (m_cDayOrNight == 1)) {
					iAP_SM += 4;
					iAP_L += 4;
				}
				// +++ Damage a demons con demon slayer...
				if ((m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::demon_slayer) && (m_pNpcList[sTargetH]->m_sType == NpcType::demon)) {
					iAP_L += 5;
				}
				if ((m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::kloness_blade) || // KlonessBlade
						  (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::kloness_axe)) { // KlonessAxe
					if (m_pClientList[sAttackerH]->m_iRating > 0) {
						iRepDamage = m_pClientList[sAttackerH]->m_iRating / 100;
						if (iRepDamage < 5) iRepDamage = 5;
						iAP_SM += iRepDamage;
						iAP_L += iRepDamage;
					}
					if (cTargetType == DEF_OWNERTYPE_PLAYER) {
						if (m_pClientList[sTargetH] == 0) return 0;
						if (m_pClientList[sTargetH]->m_iRating < 0) {
							iRepDamage = (abs(m_pClientList[sTargetH]->m_iRating) / 10);
							if (iRepDamage > 10) iRepDamage = 10;
							iAP_SM += iRepDamage;
							iAP_L += iRepDamage;
						}
					}
				}
			}
			sItemIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::neck];
			if ((sItemIndex != -1) && (m_pClientList[sAttackerH]->m_pItemList[sItemIndex] != 0)) {
				if (m_pClientList[sAttackerH]->m_pItemList[sItemIndex]->m_sIDnum == ItemId::necklace_of_kloness) { // NecklaceOfKloness
					if (cTargetType == DEF_OWNERTYPE_PLAYER) {
						if (m_pClientList[sTargetH] == 0) return 0;
						iRepDamage = (abs(m_pClientList[sTargetH]->m_iRating) / 20);
						if (iRepDamage > 5) iRepDamage = 5;
						iAP_SM += iRepDamage;
						iAP_L += iRepDamage;
					}
				}
			}
			cAttackerDir = m_pClientList[sAttackerH]->m_cDir;
			strcpy(cAttackerName, m_pClientList[sAttackerH]->m_cCharName);
			if (m_pClientList[sAttackerH]->m_cMagicEffectStatus[DEF_MAGICTYPE_BERSERK] != 0)
				bIsAttackerBerserk = true;
			else bIsAttackerBerserk = false;
			if ((bArrowUse != true) && (m_pClientList[sAttackerH]->m_iSuperAttackLeft > 0) && (iAttackMode >= 20)) {
				dTmp1 = (double) iAP_SM;
				dTmp2 = (double) m_pClientList[sAttackerH]->m_iLevel;
				dTmp3 = dTmp2 / 100.0f;
				dTmp2 = dTmp1 * dTmp3;
				iTemp = (int) (dTmp2 + 0.5f);
				iAP_SM += iTemp;
				dTmp1 = (double) iAP_L;
				dTmp2 = (double) m_pClientList[sAttackerH]->m_iLevel;
				dTmp3 = dTmp2 / 100.0f;
				dTmp2 = dTmp1 * dTmp3;
				iTemp = (int) (dTmp2 + 0.5f);
				iAP_L += iTemp;
				switch (m_pClientList[sAttackerH]->m_sUsingWeaponSkill) {
					case 6: iAP_SM += (iAP_SM / 10);
						iAP_L += (iAP_L / 10);
						iAttackerHitRatio += 30;
						break;
					case 7: iAP_SM *= 1;
						iAP_L *= 1;
						break;
					case 8: iAP_SM += (iAP_SM / 10);
						iAP_L += (iAP_L / 10);
						iAttackerHitRatio += 30;
						break;
					case 10: iAP_SM += (iAP_SM / 5);
						iAP_L += (iAP_L / 5);
						break;
					case 14: iAP_SM += (iAP_SM / 5);
						iAP_L += (iAP_L / 5);
						iAttackerHitRatio += 20;
						break;
					case 21: iAP_SM += (iAP_SM / 5);
						iAP_L += (iAP_L / 5);
						iAttackerHitRatio += 50;
						break;
					default: break;
				}
				iAttackerHitRatio += 100;
				iAttackerHitRatio += m_pClientList[sAttackerH]->m_iCustomItemValue_Attack;
			}
			if (bIsDash == true) {
				iAttackerHitRatio += 20;
				switch (m_pClientList[sAttackerH]->m_sUsingWeaponSkill) {
					case 8: iAP_SM += (iAP_SM / 10);
						iAP_L += (iAP_L / 10);
						break;
					case 10: iAP_SM += (iAP_SM / 5);
						iAP_L += (iAP_L / 5);
						break;
					case 14: iAP_SM += (iAP_SM / 5);
						iAP_L += (iAP_L / 5);
						break;
					default: break;
				}
			}
			iAttackerHitRatio += m_pClientList[sAttackerH]->m_iAddAR;
			sAtkX = m_pClientList[sAttackerH]->m_sX;
			sAtkY = m_pClientList[sAttackerH]->m_sY;
			iPartyID = m_pClientList[sAttackerH]->m_iPartyID;
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sAttackerH] == 0) return 0;
			if (m_pMapList[m_pNpcList[sAttackerH]->m_cMapIndex]->m_bIsAttackEnabled == false) return 0;
			if ((m_pNpcList[sAttackerH]->m_iStatus & 0x10) != 0) {
				SetInvisibilityFlag(sAttackerH, DEF_OWNERTYPE_NPC, false);
				bRemoveFromDelayEventList(sAttackerH, DEF_OWNERTYPE_NPC, DEF_MAGICTYPE_INVISIBILITY);
				m_pNpcList[sAttackerH]->m_cMagicEffectStatus[DEF_MAGICTYPE_INVISIBILITY] = 0;
			}
			cAttackerSide = m_pNpcList[sAttackerH]->m_cSide;
			iAP_SM = 0;
			iAP_L = 0;
			if (m_pNpcList[sAttackerH]->m_cAttackDiceThrow != 0)
				iAP_L = iAP_SM = iDice(m_pNpcList[sAttackerH]->m_cAttackDiceThrow, m_pNpcList[sAttackerH]->m_cAttackDiceRange);
			iAttackerHitRatio = m_pNpcList[sAttackerH]->m_iHitRatio;
			cAttackerDir = m_pNpcList[sAttackerH]->m_cDir;
			memcpy(cAttackerName, m_pNpcList[sAttackerH]->m_cNpcName, 20);
			if (m_pNpcList[sAttackerH]->m_cMagicEffectStatus[DEF_MAGICTYPE_BERSERK] != 0)
				bIsAttackerBerserk = true;
			else bIsAttackerBerserk = false;
			cAttackerSA = m_pNpcList[sAttackerH]->m_cSpecialAbility;
			sAtkX = m_pNpcList[sAttackerH]->m_sX;
			sAtkY = m_pNpcList[sAttackerH]->m_sY;
			break;
	}
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			if (m_pClientList[sTargetH] == 0) return 0;
			if (m_pClientList[sTargetH]->m_bIsKilled == true) return 0;
			if ((m_pClientList[sTargetH]->m_iStatus & 0x400000) != 0) return 0;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_bIsCrusadeMode == false) &&
					  (m_pClientList[sTargetH]->m_iPKCount == 0) && (m_pClientList[sTargetH]->m_bIsPlayerCivil == true)) return 0;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sTargetH]->m_bIsNeutral == true) &&
					  (m_pClientList[sTargetH]->m_iPKCount == 0) && (m_pClientList[sTargetH]->m_bIsOwnLocation == true)) return 0;
			if ((m_pClientList[sTargetH]->m_sX != tdX) || (m_pClientList[sTargetH]->m_sY != tdY)) return 0;
			if (m_pClientList[sTargetH]->m_iAdminUserLevel > 0) return 0;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH]->m_bIsNeutral == true)
					  && (m_pClientList[sTargetH]->m_iPKCount == 0)) return 0;
			if ((m_pClientList[sTargetH]->m_iPartyID != 0) && (iPartyID == m_pClientList[sTargetH]->m_iPartyID)) return 0;
			cTargetDir = m_pClientList[sTargetH]->m_cDir;
			iTargetDefenseRatio = m_pClientList[sTargetH]->m_iDefenseRatio;
			m_pClientList[sTargetH]->m_dwLogoutHackCheck = dwTime;
			if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH]->m_bIsSafeAttackMode == true)) {
				iSideCondition = iGetPlayerRelationship(sAttackerH, sTargetH);
				if ((iSideCondition == 7) || (iSideCondition == 2) || (iSideCondition == 6)) {
					iAP_SM = iAP_SM / 2;
					iAP_L = iAP_L / 2;
				} else {
					if (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsFightZone == true) {
						if (m_pClientList[sAttackerH]->m_iGuildGUID == m_pClientList[sTargetH]->m_iGuildGUID) return 0;
						else {
							iAP_SM = iAP_SM / 2;
							iAP_L = iAP_L / 2;
						}
					} else return 0;
				}
			}
			iTargetDefenseRatio += m_pClientList[sTargetH]->m_iAddDR;
			sTgtX = m_pClientList[sTargetH]->m_sX;
			sTgtY = m_pClientList[sTargetH]->m_sY;
			break;
		case DEF_OWNERTYPE_NPC:
			if (m_pNpcList[sTargetH] == 0) return 0;
			if (m_pNpcList[sTargetH]->m_iHP <= 0) return 0;
			if ((m_pNpcList[sTargetH]->m_sX != tdX) || (m_pNpcList[sTargetH]->m_sY != tdY)) return 0;
			cTargetDir = m_pNpcList[sTargetH]->m_cDir;
			iTargetDefenseRatio = m_pNpcList[sTargetH]->m_iDefenseRatio;
			if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
				switch (m_pNpcList[sTargetH]->m_sType) {
					case NpcType::esg:
					case NpcType::gmg:
						if ((m_pClientList[sAttackerH]->m_cSide == 0) || (m_pNpcList[sTargetH]->m_cSide == m_pClientList[sAttackerH]->m_cSide)) return 0;
						break;
					default: break;
				}
				if ((wWeaponType == 25) && (m_pNpcList[sTargetH]->m_cActionLimit == 5) && (m_pNpcList[sTargetH]->m_iBuildCount > 0)) {
					if ((m_pClientList[sAttackerH]->m_iCrusadeDuty != 2) && (m_pClientList[sAttackerH]->m_iAdminUserLevel == 0)) break;
					switch (m_pNpcList[sTargetH]->m_sType) {
						case NpcType::agt:
						case NpcType::cgt:
						case NpcType::ms:
						case NpcType::dt:
							// administrators instantly build crusade structures
							if (m_pClientList[sAttackerH]->m_iAdminUserLevel > 0) {
								m_pNpcList[sTargetH]->m_sAppr2 = 0;
								SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
							}
							switch (m_pNpcList[sTargetH]->m_iBuildCount) {
								case 1:
									m_pNpcList[sTargetH]->m_sAppr2 = 0;
									SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
									switch (m_pNpcList[sTargetH]->m_sType) {
										case NpcType::agt:
											iWarContribution = 700;
											break;
										case NpcType::cgt: 
											iWarContribution = 700;
											break;
										case NpcType::ms: 
											iWarContribution = 500;
											break;
										case NpcType::dt: 
											iWarContribution = 500;
											break;
										default: break;
									}
									m_pClientList[sAttackerH]->m_iWarContribution += iWarContribution;
									if (m_pClientList[sAttackerH]->m_iWarContribution > DEF_MAXWARCONTRIBUTION)
										m_pClientList[sAttackerH]->m_iWarContribution = DEF_MAXWARCONTRIBUTION;
									wsprintf(G_cTxt, "Construction Complete! WarContribution: +%d", iWarContribution);
									PutLogList(G_cTxt);
									SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[sAttackerH]->m_iConstructionPoint, m_pClientList[sAttackerH]->m_iWarContribution, 0, 0);
									break;
								case 5:
									m_pNpcList[sTargetH]->m_sAppr2 = 1;
									SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
									break;
								case 10:
									m_pNpcList[sTargetH]->m_sAppr2 = 2;
									SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
									break;
							}
							break;
						default: break;
					}
					m_pNpcList[sTargetH]->m_iBuildCount--;
					if (m_pNpcList[sTargetH]->m_iBuildCount <= 0) {
						m_pNpcList[sTargetH]->m_iBuildCount = 0;
					}
					return 0;
				}
				if ((wWeaponType == 27) && (m_pNpcList[sTargetH]->m_cCropType != 0) && (m_pNpcList[sTargetH]->m_cActionLimit == 5) && (m_pNpcList[sTargetH]->m_iBuildCount > 0)) {
					cFarmingSkill = m_pClientList[sAttackerH]->m_cSkillMastery[2];
					cCropSkill = m_pNpcList[sTargetH]->m_cCropSkill;
					if (cFarmingSkill < 20) return 0;
					if (m_pClientList[sAttackerH]->m_iLevel < 20) return 0;
					switch (m_pNpcList[sTargetH]->m_sType) {
						case NpcType::crops:
							switch (m_pNpcList[sTargetH]->m_iBuildCount) {
								case 1:
									m_pNpcList[sTargetH]->m_sAppr2 = 3;
									SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
									//sub_4B67E0
									CalculateSSN_SkillIndex(sAttackerH, 2, cFarmingSkill <= cCropSkill + 10);
									_CheckFarmingAction(sAttackerH, sTargetH, 1);
									DeleteNpc(sTargetH);
									return 0;
								case 8:
									m_pNpcList[sTargetH]->m_sAppr2 = 3;
									SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
									CalculateSSN_SkillIndex(sAttackerH, 2, cFarmingSkill <= cCropSkill + 10);
									_CheckFarmingAction(sAttackerH, sTargetH, 0);
									break;
								case 18:
									m_pNpcList[sTargetH]->m_sAppr2 = 2;
									SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
									CalculateSSN_SkillIndex(sAttackerH, 2, cFarmingSkill <= cCropSkill + 10);
									_CheckFarmingAction(sAttackerH, sTargetH, 0);
									break;
							}
							break;
						default: break;
					}
					m_pNpcList[sTargetH]->m_iBuildCount--;
					if (m_pNpcList[sTargetH]->m_iBuildCount <= 0) {
						m_pNpcList[sTargetH]->m_iBuildCount = 0;
					}
					return 0;
				}
			}
			sTgtX = m_pNpcList[sTargetH]->m_sX;
			sTgtY = m_pNpcList[sTargetH]->m_sY;
			break;
	}
	if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (cTargetType == DEF_OWNERTYPE_PLAYER)) {
		sX = m_pClientList[sAttackerH]->m_sX;
		sY = m_pClientList[sAttackerH]->m_sY;
		dX = m_pClientList[sTargetH]->m_sX;
		dY = m_pClientList[sTargetH]->m_sY;
		if (m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->iGetAttribute(sX, sY, 0x00000006) != 0) return 0;
		if (m_pMapList[m_pClientList[sTargetH]->m_cMapIndex]->iGetAttribute(dX, dY, 0x00000006) != 0) return 0;
	}
	if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
		if ((m_pClientList[sAttackerH]->m_iDex + m_pClientList[sAttackerH]->m_iAngelicDex) > 50) {
			iAttackerHitRatio += ((m_pClientList[sAttackerH]->m_iDex + m_pClientList[sAttackerH]->m_iAngelicDex) - 50);
		}
	}
	if (wWeaponType >= 40) {
		switch (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cWhetherStatus) {
			case 0: break;
			case 1: iAttackerHitRatio -= (iAttackerHitRatio / 20);
				break;
			case 2: iAttackerHitRatio -= (iAttackerHitRatio / 10);
				break;
			case 3: iAttackerHitRatio -= (iAttackerHitRatio / 4);
				break;
		}
	}
	if (iAttackerHitRatio < 0) iAttackerHitRatio = 0;
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER:
			cProtect = m_pClientList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT];
			break;
		case DEF_OWNERTYPE_NPC:
			cProtect = m_pNpcList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT];
			break;
	}
	if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
		if (m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand] != -1) {
			if (m_pClientList[sAttackerH]->m_pItemList[m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand]] == 0) {
				m_pClientList[sAttackerH]->m_bIsItemEquipped[m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand]] = false;
				DeleteClient(sAttackerH, true, true);
				return 0;
			}
			if (m_pClientList[sAttackerH]->m_pItemList[m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand]]->m_sItemEffectType == ItemEffectType::attack_arrow) {
				if (m_pClientList[sAttackerH]->m_cArrowIndex == -1) {
					return 0;
				} else {
					if (m_pClientList[sAttackerH]->m_pItemList[m_pClientList[sAttackerH]->m_cArrowIndex] == 0)
						return 0;
					if (bArrowUse != true)
						m_pClientList[sAttackerH]->m_pItemList[m_pClientList[sAttackerH]->m_cArrowIndex]->m_dwCount--;
					if (m_pClientList[sAttackerH]->m_pItemList[ m_pClientList[sAttackerH]->m_cArrowIndex ]->m_dwCount <= 0) {
						ItemDepleteHandler(sAttackerH, m_pClientList[sAttackerH]->m_cArrowIndex, false, true);
						m_pClientList[sAttackerH]->m_cArrowIndex = _iGetArrowItemIndex(sAttackerH);
					} else {
						SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_SETITEMCOUNT, m_pClientList[sAttackerH]->m_cArrowIndex, m_pClientList[sAttackerH]->m_pItemList[ m_pClientList[sAttackerH]->m_cArrowIndex ]->m_dwCount, false, 0);
						iCalcTotalWeight(sAttackerH);
					}
				}
				if (cProtect == 1) return 0;
			} else {
				switch (cProtect) {
					case 3: iTargetDefenseRatio += 40;
						break;
					case 4: iTargetDefenseRatio += 100;
						break;
				}
				if (iTargetDefenseRatio < 0) iTargetDefenseRatio = 1;
			}
		}
	} else {
		switch (cProtect) {
			case 1:
				switch (m_pNpcList[sAttackerH]->m_sType) {
					case NpcType::dark_elf:
						if ((abs(sTgtX - m_pNpcList[sAttackerH]->m_sX) >= 1) || (abs(sTgtY - m_pNpcList[sAttackerH]->m_sY) >= 1)) {
							return 0;
						}
					default: break;
				}
				break;
			case 3: iTargetDefenseRatio += 40;
				break;
			case 4: iTargetDefenseRatio += 100;
				break;
		}
		if (iTargetDefenseRatio < 0) iTargetDefenseRatio = 1;
	}
	if (cAttackerDir == cTargetDir) iTargetDefenseRatio = iTargetDefenseRatio / 2;
	if (iTargetDefenseRatio < 1) iTargetDefenseRatio = 1;
	dTmp1 = (double) (iAttackerHitRatio);
	dTmp2 = (double) (iTargetDefenseRatio);
	dTmp3 = (dTmp1 / dTmp2) * 50.0f;
	iDestHitRatio = (int) (dTmp3);
	if (iDestHitRatio < DEF_MINIMUMHITRATIO) iDestHitRatio = DEF_MINIMUMHITRATIO;
	if (iDestHitRatio > DEF_MAXIMUMHITRATIO) iDestHitRatio = DEF_MAXIMUMHITRATIO;
	if ((bIsAttackerBerserk == true) && (iAttackMode < 20)) {
		iAP_SM = iAP_SM * 2;
		iAP_L = iAP_L * 2;
	}
	if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
		iAP_SM += m_pClientList[sAttackerH]->m_iAddPhysicalDamage;
		iAP_L += m_pClientList[sAttackerH]->m_iAddPhysicalDamage;
	}
	if (bNearAttack == true) {
		iAP_SM = iAP_SM / 2;
		iAP_L = iAP_L / 2;
	}
	if (cTargetType == DEF_OWNERTYPE_PLAYER) {
		iAP_SM -= (iDice(1, m_pClientList[sTargetH]->m_iVit / 10) - 1);
		iAP_L -= (iDice(1, m_pClientList[sTargetH]->m_iVit / 10) - 1);
	}
	if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
		if (iAP_SM <= 1) iAP_SM = 1;
		if (iAP_L <= 1) iAP_L = 1;
	} else {
		if (iAP_SM <= 0) iAP_SM = 0;
		if (iAP_L <= 0) iAP_L = 0;
	}
	iResult = iDice(1, 100);
	if (iResult <= iDestHitRatio) {
		if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
			if (((m_pClientList[sAttackerH]->m_iHungerStatus <= 10) || (m_pClientList[sAttackerH]->m_iSP <= 0)) && (iDice(1, 10) == 5)) return false;
			m_pClientList[sAttackerH]->m_iComboAttackCount++;
			if (m_pClientList[sAttackerH]->m_iComboAttackCount < 0) m_pClientList[sAttackerH]->m_iComboAttackCount = 0;
			if (m_pClientList[sAttackerH]->m_iComboAttackCount > 4) m_pClientList[sAttackerH]->m_iComboAttackCount = 1;
			iWeaponSkill = _iGetWeaponSkillType(sAttackerH);
			iComboBonus = iGetComboAttackBonus(iWeaponSkill, m_pClientList[sAttackerH]->m_iComboAttackCount);
			if ((m_pClientList[sAttackerH]->m_iComboAttackCount > 1) && (m_pClientList[sAttackerH]->m_iAddCD != 0))
				iComboBonus += m_pClientList[sAttackerH]->m_iAddCD;
			iAP_SM += iComboBonus;
			iAP_L += iComboBonus;
			switch (m_pClientList[sAttackerH]->m_iSpecialWeaponEffectType) {
				case 0: break;
				case 1:
					if ((m_pClientList[sAttackerH]->m_iSuperAttackLeft > 0) && (iAttackMode >= 20)) {
						iAP_SM += m_pClientList[sAttackerH]->m_iSpecialWeaponEffectValue;
						iAP_L += m_pClientList[sAttackerH]->m_iSpecialWeaponEffectValue;
					}
					break;
				case 2:
					cAttackerSA = 61;
					iAttackerSAvalue = m_pClientList[sAttackerH]->m_iSpecialWeaponEffectValue * 5;
					break;
				case 3:
					cAttackerSA = 62;
					break;
			}
			if (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsFightZone == true) {
				iAP_SM += iAP_SM / 3;
				iAP_L += iAP_L / 3;
			}
			if (bCheckHeldenianMap(sAttackerH, m_iBTFieldMapIndex, DEF_OWNERTYPE_PLAYER) == 1) {
				iAP_SM += iAP_SM / 3;
				iAP_L += iAP_L / 3;
			}
			if ((cTargetType == DEF_OWNERTYPE_PLAYER) && (m_bIsCrusadeMode == true) && (m_pClientList[sAttackerH]->m_iCrusadeDuty == 1)) {
				if (m_pClientList[sAttackerH]->m_iLevel <= 80) {
					iAP_SM += iAP_SM;
					iAP_L += iAP_L;
				} else if (m_pClientList[sAttackerH]->m_iLevel <= 100) {
					iAP_SM += (iAP_SM * 7) / 10;
					iAP_L += (iAP_L * 7) / 10;
				} else {
					iAP_SM += iAP_SM / 3;
					iAP_L += iAP_L / 3;
				}
			}
		}
		switch (cTargetType) {
			case DEF_OWNERTYPE_PLAYER:
				ClearSkillUsingStatus(sTargetH);
				if ((dwTime - m_pClientList[sTargetH]->m_dwTime) > DEF_RAGPROTECTIONTIME) {
					return 0;
				} else {
					switch (cAttackerSA) {
						case 62:
							if (m_pClientList[sTargetH]->m_iRating < 0) {
								iTemp = abs(m_pClientList[sTargetH]->m_iRating) / 10;
								if (iTemp > 10) iTemp = 10;
								iAP_SM += iTemp;
							}
							break;
					}
					iAP_Abs_Armor = 0;
					iAP_Abs_Shield = 0;
					iTemp = iDice(1, 10000);
					if ((iTemp >= 1) && (iTemp < 5000)) iHitPoint = 1;
					else if ((iTemp >= 5000) && (iTemp < 7500)) iHitPoint = 2;
					else if ((iTemp >= 7500) && (iTemp < 9000)) iHitPoint = 3;
					else if ((iTemp >= 9000) && (iTemp <= 10000)) iHitPoint = 4;
					switch (iHitPoint) {
						case 1:
							if (m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::body] > 0) {
								if (m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::body] >= 80)
									dTmp1 = 80.0f;
								else dTmp1 = (double) m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::body];
								dTmp2 = (double) iAP_SM;
								dTmp3 = (dTmp1 / 100.0f) * dTmp2;
								iAP_Abs_Armor = (int) dTmp3;
							}
							break;
						case 2:
							if ((m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::pants] +
									  m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::leggings]) > 0) {
								if ((m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::pants] +
										  m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::leggings]) >= 80)
									dTmp1 = 80.0f;
								else dTmp1 = (double) (m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::pants] + m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::leggings]);
								dTmp2 = (double) iAP_SM;
								dTmp3 = (dTmp1 / 100.0f) * dTmp2;
								iAP_Abs_Armor = (int) dTmp3;
							}
							break;
						case 3:
							if (m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::arms] > 0) {
								if (m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::arms] >= 80)
									dTmp1 = 80.0f;
								else dTmp1 = (double) m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::arms];
								dTmp2 = (double) iAP_SM;
								dTmp3 = (dTmp1 / 100.0f) * dTmp2;
								iAP_Abs_Armor = (int) dTmp3;
							}
							break;
						case 4:
							if (m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::head] > 0) {
								if (m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::head] >= 80)
									dTmp1 = 80.0f;
								else dTmp1 = (double) m_pClientList[sTargetH]->m_iDamageAbsorption_Armor[ItemEquipPos::head];
								dTmp2 = (double) iAP_SM;
								dTmp3 = (dTmp1 / 100.0f) * dTmp2;
								iAP_Abs_Armor = (int) dTmp3;
							}
							break;
					}
					// Physical absortion by KahBur.
					if (m_pClientList[sTargetH]->m_iAddAbsPD != 0) {
						dTmp1 = (double) iAP_SM;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsPD;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iAP_SM = iAP_SM - (int) dTmp3;
						dTmp1 = (double) iAP_L;
						dTmp2 = (double) m_pClientList[sTargetH]->m_iAddAbsPD;
						dTmp3 = (dTmp2 / 100.0f) * dTmp1;
						iAP_L = iAP_L - (int) dTmp3;
					}
					if (m_pClientList[sTargetH]->m_iDamageAbsorption_Shield > 0) {
						if (iDice(1, 100) <= (m_pClientList[sTargetH]->m_cSkillMastery[11])) {
							CalculateSSN_SkillIndex(sTargetH, 11, 1);
							if (m_pClientList[sTargetH]->m_iDamageAbsorption_Shield >= 80)
								dTmp1 = 80.0f;
							else dTmp1 = (double) m_pClientList[sTargetH]->m_iDamageAbsorption_Shield;
							dTmp2 = (double) iAP_SM;
							dTmp3 = (dTmp1 / 100.0f) * dTmp2;
							iAP_Abs_Shield = (int) dTmp3;
							iTemp = m_pClientList[sTargetH]->m_sItemEquipmentStatus[ItemEquipPos::lhand];
							if ((iTemp != -1) && (m_pClientList[sTargetH]->m_pItemList[iTemp] != 0)) {
								if ((m_pClientList[sTargetH]->m_cSide != 0) && (m_pClientList[sTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan > 0))
									m_pClientList[sTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan--;
								if (m_pClientList[sTargetH]->m_pItemList[iTemp]->m_wCurLifeSpan == 0) {
									SendNotifyMsg(0, sTargetH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[sTargetH]->m_pItemList[iTemp]->m_cEquipPos, iTemp, 0, 0);
									ReleaseItemHandler(sTargetH, iTemp, true);
								}
							}
						}
					}
					iAP_SM = iAP_SM - (iAP_Abs_Armor + iAP_Abs_Shield);
					if (iAP_SM <= 0) iAP_SM = 1;
					if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH] != 0) && (m_pClientList[sAttackerH]->m_bIsSpecialAbilityEnabled == true)) {
						switch (m_pClientList[sAttackerH]->m_iSpecialAbilityType) {
							case 0: break;
							case 1:
								iTemp = (m_pClientList[sTargetH]->m_iHP / 2);
								if (iTemp > iAP_SM) iAP_SM = iTemp;
								if (iAP_SM <= 0) iAP_SM = 1;
								break;
							case 2:
								if (m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] == 0) {
									m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_ICE ] = 1;
									SetIceFlag(sTargetH, DEF_OWNERTYPE_PLAYER, true);
									bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_ICE, dwTime + 30000,
											  sTargetH, DEF_OWNERTYPE_PLAYER, 0, 0, 0, 1, 0, 0);
									SendNotifyMsg(0, sTargetH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_ICE, 1, 0, 0);
								}
								break;
							case 3:
								if (m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] == 0) {
									m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 2;
									bRegisterDelayEvent(DEF_DELAYEVENTTYPE_MAGICRELEASE, DEF_MAGICTYPE_HOLDOBJECT, dwTime + 10000,
											  sTargetH, DEF_OWNERTYPE_PLAYER, 0, 0, 0, 10, 0, 0);
									SendNotifyMsg(0, sTargetH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_HOLDOBJECT, 10, 0, 0);
								}
								break;
							case 4:
								iAP_SM = (m_pClientList[sTargetH]->m_iHP);
								break;
							case 5:
								m_pClientList[sAttackerH]->m_iHP += iAP_SM;
								if (iGetMaxHP(sAttackerH) < m_pClientList[sAttackerH]->m_iHP) m_pClientList[sAttackerH]->m_iHP = iGetMaxHP(sAttackerH);
								SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_HP, 0, 0, 0, 0);
								break;
						}
					}
					if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH] != 0) && (m_pClientList[sTargetH]->m_bIsSpecialAbilityEnabled == true)) {
						switch (m_pClientList[sTargetH]->m_iSpecialAbilityType) {
							case 50:
								if (m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand] != -1)
									sWeaponIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand];
								else sWeaponIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::rhand];
								if (sWeaponIndex != -1) m_pClientList[sAttackerH]->m_pItemList[sWeaponIndex]->m_wCurLifeSpan = 0;
								break;
							case 51:
								if (iHitPoint == (int) m_pClientList[sTargetH]->m_iSpecialAbilityEquipPos)
									iAP_SM = 0;
								break;
							case 52:
								iAP_SM = 0;
								break;
						}
					}
					if ((m_pClientList[sTargetH]->m_bIsLuckyEffect == true) &&
							  (iDice(1, 10) == 5) && (m_pClientList[sTargetH]->m_iHP <= iAP_SM)) {
						iAP_SM = m_pClientList[sTargetH]->m_iHP - 1;
					}
					switch (iHitPoint) {
						case 1:
							iTemp = m_pClientList[sTargetH]->m_sItemEquipmentStatus[ItemEquipPos::body];
							if ((iTemp != -1) && (m_pClientList[sTargetH]->m_pItemList[iTemp] != 0)) {
								CalculateEnduranceDecrement(sTargetH, sAttackerH, cTargetType, cAttackerType, iTemp);
							}
							break;
						case 2:
							iTemp = m_pClientList[sTargetH]->m_sItemEquipmentStatus[ItemEquipPos::pants];
							if ((iTemp != -1) && (m_pClientList[sTargetH]->m_pItemList[iTemp] != 0)) {
								CalculateEnduranceDecrement(sTargetH, sAttackerH, cTargetType, cAttackerType, iTemp);
							} else {
								iTemp = m_pClientList[sTargetH]->m_sItemEquipmentStatus[ItemEquipPos::leggings];
								if ((iTemp != -1) && (m_pClientList[sTargetH]->m_pItemList[iTemp] != 0)) {
									CalculateEnduranceDecrement(sTargetH, sAttackerH, cTargetType, cAttackerType, iTemp);
								}
							}
							break;
						case 3:
							iTemp = m_pClientList[sTargetH]->m_sItemEquipmentStatus[ItemEquipPos::arms];
							if ((iTemp != -1) && (m_pClientList[sTargetH]->m_pItemList[iTemp] != 0)) {
								CalculateEnduranceDecrement(sTargetH, sAttackerH, cTargetType, cAttackerType, iTemp);
							}
							break;
						case 4:
							iTemp = m_pClientList[sTargetH]->m_sItemEquipmentStatus[ItemEquipPos::head];
							if ((iTemp != -1) && (m_pClientList[sTargetH]->m_pItemList[iTemp] != 0)) {
								CalculateEnduranceDecrement(sTargetH, sAttackerH, cTargetType, cAttackerType, iTemp);
							}
							break;
					}
					if ((cAttackerSA == 2) && (m_pClientList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] != 0)) {
						SendNotifyMsg(0, sTargetH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_PROTECT, m_pClientList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT ], 0, 0);
						switch (m_pClientList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT]) {
							case 1:
								SetProtectionFromArrowFlag(sTargetH, DEF_OWNERTYPE_PLAYER, false);
								break;
							case 2:
							case 5:
								SetMagicProtectionFlag(sTargetH, DEF_OWNERTYPE_PLAYER, false);
								break;
							case 3:
							case 4:
								SetDefenseShieldFlag(sTargetH, DEF_OWNERTYPE_PLAYER, false);
								break;
						}
						m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT] = 0;
						bRemoveFromDelayEventList(sTargetH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_PROTECT);
					}
					if ((m_pClientList[sTargetH]->m_bIsPoisoned == false) &&
							  ((cAttackerSA == 5) || (cAttackerSA == 6) || (cAttackerSA == 61))) {
						if (bCheckResistingPoisonSuccess(sTargetH, DEF_OWNERTYPE_PLAYER) == false) {
							m_pClientList[sTargetH]->m_bIsPoisoned = true;
							if (cAttackerSA == 5) m_pClientList[sTargetH]->m_iPoisonLevel = 15;
							else if (cAttackerSA == 6) m_pClientList[sTargetH]->m_iPoisonLevel = 40;
							else if (cAttackerSA == 61) m_pClientList[sTargetH]->m_iPoisonLevel = iAttackerSAvalue;
							m_pClientList[sTargetH]->m_dwPoisonTime = dwTime;
							SendNotifyMsg(0, sTargetH, DEF_NOTIFY_MAGICEFFECTON, DEF_MAGICTYPE_POISON, m_pClientList[sTargetH]->m_iPoisonLevel, 0, 0);
							SetPoisonFlag(sTargetH, DEF_OWNERTYPE_PLAYER, true);
						}
					}
					m_pClientList[sTargetH]->m_iHP -= iAP_SM;
					if (m_pClientList[sAttackerH] != 0) {
						//acidx pwns
						if (m_pClientList[sAttackerH]->iDmgShowon == 1) {
							std::memset(cDamageMod, 0, sizeof(cDamageMod));
							wsprintf(cDamageMod, "You did [%d] Damage to Character [%s] Remaining Life [%d]", iAP_SM, m_pClientList[sTargetH]->m_cCharName, m_pClientList[sTargetH]->m_iHP);
							SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cDamageMod);
						}
					}
					if (m_pClientList[sTargetH]->m_iHP <= 0) {
						if (cAttackerType == DEF_OWNERTYPE_PLAYER)
							//		bAnalyzeCriminalAction(sAttackerH, m_pClientList[sTargetH]->m_sX, m_pClientList[sTargetH]->m_sY);
							ClientKilledHandler(sTargetH, sAttackerH, cAttackerType, iAP_SM);
						bKilled = true;
						iKilledDice = m_pClientList[sTargetH]->m_iLevel;
					} else {
						if (iAP_SM > 0) {
							if (m_pClientList[sTargetH]->m_iAddTransMana > 0) {
								dTmp1 = (double) m_pClientList[sTargetH]->m_iAddTransMana;
								dTmp2 = (double) iAP_SM;
								dTmp3 = (dTmp1 / 100.0f) * dTmp2;
								iTemp = (2 * (m_pClientList[sTargetH]->m_iMag + m_pClientList[sTargetH]->m_iAngelicMag)) + (2 * m_pClientList[sTargetH]->m_iLevel) + ((m_pClientList[sTargetH]->m_iInt + m_pClientList[sTargetH]->m_iAngelicInt) / 2);
								m_pClientList[sTargetH]->m_iMP += (int) dTmp3;
								if (m_pClientList[sTargetH]->m_iMP > iTemp) m_pClientList[sTargetH]->m_iMP = iTemp;
							}
							if (m_pClientList[sTargetH]->m_iAddChargeCritical > 0) {
								if (iDice(1, 100) < (m_pClientList[sTargetH]->m_iAddChargeCritical)) {
									iMaxSuperAttack = (m_pClientList[sTargetH]->m_iLevel / 10);
									if (m_pClientList[sTargetH]->m_iSuperAttackLeft < iMaxSuperAttack) m_pClientList[sTargetH]->m_iSuperAttackLeft++;
									SendNotifyMsg(0, sTargetH, DEF_NOTIFY_SUPERATTACKLEFT, 0, 0, 0, 0);
								}
							}
							SendNotifyMsg(0, sTargetH, DEF_NOTIFY_HP, 0, 0, 0, 0);
							if (cAttackerType == DEF_OWNERTYPE_PLAYER)
								sAttackerWeapon = ((m_pClientList[sAttackerH]->m_sAppr2 & 0x0FF0) >> 4);
							else sAttackerWeapon = 1;
							if ((cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_bIsFightZone == true))
								iMoveDamage = 60;
							else iMoveDamage = 40;
							if (iAP_SM >= iMoveDamage) {
								if (sTgtX == sAtkX) {
									if (sTgtY == sAtkY) goto CAE_SKIPDAMAGEMOVE;
									else if (sTgtY > sAtkY) cDamageMoveDir = 5;
									else if (sTgtY < sAtkY) cDamageMoveDir = 1;
								} else if (sTgtX > sAtkX) {
									if (sTgtY == sAtkY) cDamageMoveDir = 3;
									else if (sTgtY > sAtkY) cDamageMoveDir = 4;
									else if (sTgtY < sAtkY) cDamageMoveDir = 2;
								} else if (sTgtX < sAtkX) {
									if (sTgtY == sAtkY) cDamageMoveDir = 7;
									else if (sTgtY > sAtkY) cDamageMoveDir = 6;
									else if (sTgtY < sAtkY) cDamageMoveDir = 8;
								}
								m_pClientList[sTargetH]->m_iLastDamage = iAP_SM;
								SendNotifyMsg(0, sTargetH, DEF_NOTIFY_DAMAGEMOVE, cDamageMoveDir, iAP_SM, sAttackerWeapon, 0);
							} else {
CAE_SKIPDAMAGEMOVE:
								;
								int iProb;
								if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
									switch (m_pClientList[sAttackerH]->m_sUsingWeaponSkill) {
										case 6: iProb = 3500;
											break;
										case 8: iProb = 1000;
											break;
										case 9: iProb = 2900;
											break;
										case 10: iProb = 2500;
											break;
										case 14: iProb = 2000;
											break;
										case 21: iProb = 2000;
											break;
										default: iProb = 1;
											break;
									}
								} else iProb = 1;
								if (iDice(1, 10000) >= iProb)
									SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iAP_SM, sAttackerWeapon, 0);
							}
							if (m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] == 1) {
								SendNotifyMsg(0, sTargetH, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_HOLDOBJECT, m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ], 0, 0);
								m_pClientList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
								bRemoveFromDelayEventList(sTargetH, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_HOLDOBJECT);
							}
							m_pClientList[sTargetH]->m_iSuperAttackCount++;
							if (m_pClientList[sTargetH]->m_iSuperAttackCount > 14) {
								m_pClientList[sTargetH]->m_iSuperAttackCount = 0;
								iMaxSuperAttack = (m_pClientList[sTargetH]->m_iLevel / 10);
								if (m_pClientList[sTargetH]->m_iSuperAttackLeft < iMaxSuperAttack) m_pClientList[sTargetH]->m_iSuperAttackLeft++;
								SendNotifyMsg(0, sTargetH, DEF_NOTIFY_SUPERATTACKLEFT, 0, 0, 0, 0);
							}
						}
					}
				}
				break;
			case DEF_OWNERTYPE_NPC:
				if (m_pNpcList[sTargetH]->m_cBehavior == NpcBehavior::dead) return 0;
				if (m_pNpcList[sTargetH]->m_bIsKilled == true) return 0;
				if (m_bIsCrusadeMode == true) {
					if (cAttackerSide == m_pNpcList[sTargetH]->m_cSide) {
						switch (m_pNpcList[sTargetH]->m_sType) {
							case NpcType::esg:
							case NpcType::gmg:
							case NpcType::lwb:
							case NpcType::ghk:
							case NpcType::ghkabs:
							case NpcType::tk:
							case NpcType::bg:
							case NpcType::cp:
								return 0;
							default: break;
						}
					} else {
						switch (m_pNpcList[sTargetH]->m_sType) {
							case NpcType::gmg:
								if (cAttackerSide != 0) {
									m_pNpcList[sTargetH]->m_iV1 += iAP_L;
									if (m_pNpcList[sTargetH]->m_iV1 > 500) {
										m_pNpcList[sTargetH]->m_iV1 = 0;
										m_pNpcList[sTargetH]->m_iManaStock--;
										if (m_pNpcList[sTargetH]->m_iManaStock <= 0) m_pNpcList[sTargetH]->m_iManaStock = 0;
										wsprintf(G_cTxt, "ManaStock down: %d", m_pNpcList[sTargetH]->m_iManaStock);
										PutLogList(G_cTxt);
									}
								}
								break;
							default: break;
						}
					}
				}
				switch (m_pNpcList[sTargetH]->m_cActionLimit) {
					case 1:
					case 2:
						return 0;
				}
				if (m_pNpcList[sTargetH]->m_cSize == 0)
					iDamage = iAP_SM;
				else iDamage = iAP_L;
				if (m_pNpcList[sTargetH]->m_iAbsDamage < 0) {
					dTmp1 = (double) iDamage;
					dTmp2 = (double) (abs(m_pNpcList[sTargetH]->m_iAbsDamage)) / 100.0f;
					dTmp3 = dTmp1 * dTmp2;
					dTmp2 = dTmp1 - dTmp3;
					iDamage = (int) dTmp2;
					if (iDamage < 0) iDamage = 1;
					else if ((m_pNpcList[sTargetH]->m_sType == NpcType::demon) && (cAttackerType == 1) && (m_pClientList[sAttackerH] != 0) && (m_pClientList[sAttackerH]->m_iSpecialAbilityType == 7))
						iDamage += iDice(3, 2);
				}
				if ((cAttackerSA == 2) && (m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_PROTECT ] != 0)) {
					switch (m_pNpcList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT]) {
						case 1:
							SetProtectionFromArrowFlag(sTargetH, DEF_OWNERTYPE_NPC, false);
							break;
						case 2:
						case 5:
							SetMagicProtectionFlag(sTargetH, DEF_OWNERTYPE_NPC, false);
							break;
						case 3:
						case 4:
							SetDefenseShieldFlag(sTargetH, DEF_OWNERTYPE_NPC, false);
							break;
					}
					m_pNpcList[sTargetH]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] = 0;
					bRemoveFromDelayEventList(sTargetH, DEF_OWNERTYPE_NPC, DEF_MAGICTYPE_PROTECT);
				}
				switch (m_pNpcList[sTargetH]->m_cActionLimit) {
					case 0:
					case 3:
					case 5:
						m_pNpcList[sTargetH]->m_iHP -= iDamage;
						if (m_pClientList[sAttackerH] != 0) {
							if (m_pClientList[sAttackerH]->iDmgShowon == 1) {
								std::memset(cDamageMod, 0, sizeof(cDamageMod));
								wsprintf(cDamageMod, "You did [%d] Damage to Npc [%s] Remaining Life [%d]", iDamage, m_pNpcList[sTargetH]->m_cNpcName, m_pNpcList[sTargetH]->m_iHP);
								SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cDamageMod);
							}
						}
						break;
				}
				if (m_pNpcList[sTargetH]->m_iHP <= 0) {
					NpcKilledHandler(sAttackerH, cAttackerType, sTargetH, iDamage);
					bKilled = true;
					iKilledDice = m_pNpcList[sTargetH]->m_iHitDice;
				} else {
					if ((m_pNpcList[sTargetH]->m_sType != NpcType::guard) && (m_pNpcList[sTargetH]->m_sType != NpcType::rabbit) && (m_pNpcList[sTargetH]->m_sType != NpcType::cat)
							  && (m_pNpcList[sTargetH]->m_cSide == cAttackerSide)) goto CAE_SKIPCOUNTERATTACK;
					if (m_pNpcList[sTargetH]->m_cActionLimit != 0) goto CAE_SKIPCOUNTERATTACK;
					if (m_pNpcList[sTargetH]->m_bIsPermAttackMode == true) goto CAE_SKIPCOUNTERATTACK;
					if ((m_pNpcList[sTargetH]->m_bIsSummoned == true) && (m_pNpcList[sTargetH]->m_iSummonControlMode == 1)) goto CAE_SKIPCOUNTERATTACK;
					if (m_pNpcList[sTargetH]->m_sType == NpcType::cp) goto CAE_SKIPCOUNTERATTACK;
					if (iDice(1, 3) == 2) {
						if (m_pNpcList[sTargetH]->m_cBehavior == NpcBehavior::attack) {
							tX = tY = 0;
							switch (m_pNpcList[sTargetH]->m_cTargetType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[m_pNpcList[sTargetH]->m_iTargetIndex] != 0) {
										tX = m_pClientList[m_pNpcList[sTargetH]->m_iTargetIndex]->m_sX;
										tY = m_pClientList[m_pNpcList[sTargetH]->m_iTargetIndex]->m_sY;
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[m_pNpcList[sTargetH]->m_iTargetIndex] != 0) {
										tX = m_pNpcList[m_pNpcList[sTargetH]->m_iTargetIndex]->m_sX;
										tY = m_pNpcList[m_pNpcList[sTargetH]->m_iTargetIndex]->m_sY;
									}
									break;
							}
							iDst1 = (m_pNpcList[sTargetH]->m_sX - tX)*(m_pNpcList[sTargetH]->m_sX - tX) + (m_pNpcList[sTargetH]->m_sY - tY)*(m_pNpcList[sTargetH]->m_sY - tY);
							tX = tY = 0;
							switch (cAttackerType) {
								case DEF_OWNERTYPE_PLAYER:
									if (m_pClientList[sAttackerH] != 0) {
										tX = m_pClientList[sAttackerH]->m_sX;
										tY = m_pClientList[sAttackerH]->m_sY;
									}
									break;
								case DEF_OWNERTYPE_NPC:
									if (m_pNpcList[sAttackerH] != 0) {
										tX = m_pNpcList[sAttackerH]->m_sX;
										tY = m_pNpcList[sAttackerH]->m_sY;
									}
									break;
							}
							iDst2 = (m_pNpcList[sTargetH]->m_sX - tX)*(m_pNpcList[sTargetH]->m_sX - tX) + (m_pNpcList[sTargetH]->m_sY - tY)*(m_pNpcList[sTargetH]->m_sY - tY);
							if (iDst2 <= iDst1) {
								m_pNpcList[sTargetH]->m_cBehavior = NpcBehavior::attack;
								m_pNpcList[sTargetH]->m_sBehaviorTurnCount = 0;
								m_pNpcList[sTargetH]->m_iTargetIndex = sAttackerH;
								m_pNpcList[sTargetH]->m_cTargetType = cAttackerType;
							}
						} else {
							m_pNpcList[sTargetH]->m_cBehavior = NpcBehavior::attack;
							m_pNpcList[sTargetH]->m_sBehaviorTurnCount = 0;
							m_pNpcList[sTargetH]->m_iTargetIndex = sAttackerH;
							m_pNpcList[sTargetH]->m_cTargetType = cAttackerType;
						}
					}
CAE_SKIPCOUNTERATTACK:
					;
					if ((iDice(1, 3) == 2) && (m_pNpcList[sTargetH]->m_cActionLimit == 0))
						m_pNpcList[sTargetH]->m_dwTime = dwTime;
					if (cAttackerType == DEF_OWNERTYPE_PLAYER)
						sAttackerWeapon = ((m_pClientList[sAttackerH]->m_sAppr2 & 0x0FF0) >> 4);
					else sAttackerWeapon = 1;
					if ((wWeaponType < 40) && (m_pNpcList[sTargetH]->m_cActionLimit == 4)) {
						if (sTgtX == sAtkX) {
							if (sTgtY == sAtkY) goto CAE_SKIPDAMAGEMOVE2;
							else if (sTgtY > sAtkY) cDamageMoveDir = 5;
							else if (sTgtY < sAtkY) cDamageMoveDir = 1;
						} else if (sTgtX > sAtkX) {
							if (sTgtY == sAtkY) cDamageMoveDir = 3;
							else if (sTgtY > sAtkY) cDamageMoveDir = 4;
							else if (sTgtY < sAtkY) cDamageMoveDir = 2;
						} else if (sTgtX < sAtkX) {
							if (sTgtY == sAtkY) cDamageMoveDir = 7;
							else if (sTgtY > sAtkY) cDamageMoveDir = 6;
							else if (sTgtY < sAtkY) cDamageMoveDir = 8;
						}
						dX = m_pNpcList[sTargetH]->m_sX + _tmp_cTmpDirX[cDamageMoveDir];
						dY = m_pNpcList[sTargetH]->m_sY + _tmp_cTmpDirY[cDamageMoveDir];
						if (m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->bGetMoveable(dX, dY, 0) == false) {
							cDamageMoveDir = iDice(1, 8);
							dX = m_pNpcList[sTargetH]->m_sX + _tmp_cTmpDirX[cDamageMoveDir];
							dY = m_pNpcList[sTargetH]->m_sY + _tmp_cTmpDirY[cDamageMoveDir];
							if (m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->bGetMoveable(dX, dY, 0) == false) goto CAE_SKIPDAMAGEMOVE2;
						}
						m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->ClearOwner(5, sTargetH, DEF_OWNERTYPE_NPC, m_pNpcList[sTargetH]->m_sX, m_pNpcList[sTargetH]->m_sY);
						m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->SetOwner(sTargetH, DEF_OWNERTYPE_NPC, dX, dY);
						m_pNpcList[sTargetH]->m_sX = dX;
						m_pNpcList[sTargetH]->m_sY = dY;
						m_pNpcList[sTargetH]->m_cDir = cDamageMoveDir;
						SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTMOVE, 0, 0, 0);
						dX = m_pNpcList[sTargetH]->m_sX + _tmp_cTmpDirX[cDamageMoveDir];
						dY = m_pNpcList[sTargetH]->m_sY + _tmp_cTmpDirY[cDamageMoveDir];
						if (m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->bGetMoveable(dX, dY, 0) == false) {
							cDamageMoveDir = iDice(1, 8);
							dX = m_pNpcList[sTargetH]->m_sX + _tmp_cTmpDirX[cDamageMoveDir];
							dY = m_pNpcList[sTargetH]->m_sY + _tmp_cTmpDirY[cDamageMoveDir];
							if (m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->bGetMoveable(dX, dY, 0) == false) goto CAE_SKIPDAMAGEMOVE2;
						}
						m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->ClearOwner(5, sTargetH, DEF_OWNERTYPE_NPC, m_pNpcList[sTargetH]->m_sX, m_pNpcList[sTargetH]->m_sY);
						m_pMapList[m_pNpcList[sTargetH]->m_cMapIndex]->SetOwner(sTargetH, DEF_OWNERTYPE_NPC, dX, dY);
						m_pNpcList[sTargetH]->m_sX = dX;
						m_pNpcList[sTargetH]->m_sY = dY;
						m_pNpcList[sTargetH]->m_cDir = cDamageMoveDir;
						SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTMOVE, 0, 0, 0);
						if (bCheckEnergySphereDestination(sTargetH, sAttackerH, cAttackerType) == true) {
							if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
								iExp = (m_pNpcList[sTargetH]->m_iExp / 3);
								if (m_pNpcList[sTargetH]->m_iNoDieRemainExp > 0)
									iExp += m_pNpcList[sTargetH]->m_iNoDieRemainExp;
								if (m_pClientList[sAttackerH]->m_iAddExp != 0) {
									dTmp1 = (double) m_pClientList[sAttackerH]->m_iAddExp;
									dTmp2 = (double) iExp;
									dTmp3 = (dTmp1 / 100.0f) * dTmp2;
									iExp += (int) dTmp3;
								}
								if ((m_bIsCrusadeMode == true) && (iExp > 10)) iExp = 10;
								GetExp(sAttackerH, iExp);
								DeleteNpc(sTargetH);
								return false;
							}
						}
CAE_SKIPDAMAGEMOVE2:
						;
					} else {
						SendEventToNearClient_TypeA(sTargetH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, sAttackerWeapon, 0);
					}
					if (m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] == 1) {
						m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
						bRemoveFromDelayEventList(sTargetH, DEF_OWNERTYPE_NPC, DEF_MAGICTYPE_HOLDOBJECT);
					} else if (m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] == 2) {
						if ((m_pNpcList[sTargetH]->m_iHitDice > 50) && (iDice(1, 10) == 5)) {
							m_pNpcList[sTargetH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
							bRemoveFromDelayEventList(sTargetH, DEF_OWNERTYPE_NPC, DEF_MAGICTYPE_HOLDOBJECT);
						}
					}
					if ((m_pNpcList[sTargetH]->m_iNoDieRemainExp > 0) && (m_pNpcList[sTargetH]->m_bIsSummoned != true) &&
							  (cAttackerType == DEF_OWNERTYPE_PLAYER) && (m_pClientList[sAttackerH] != 0)) {
						if (m_pNpcList[sTargetH]->m_iNoDieRemainExp > iDamage) {
							iExp = iDamage;
							m_pNpcList[sTargetH]->m_iNoDieRemainExp -= iDamage;
						} else {
							iExp = m_pNpcList[sTargetH]->m_iNoDieRemainExp;
							m_pNpcList[sTargetH]->m_iNoDieRemainExp = 0;
						}
						if (m_pClientList[sAttackerH]->m_iAddExp != 0) {
							dTmp1 = (double) m_pClientList[sAttackerH]->m_iAddExp;
							dTmp2 = (double) iExp;
							dTmp3 = (dTmp1 / 100.0f) * dTmp2;
							iExp += (int) dTmp3;
						}
						if (m_bIsCrusadeMode == true) iExp = iExp / 3;
						if (m_pClientList[sAttackerH]->m_iLevel > 100) {
							switch (m_pNpcList[sTargetH]->m_sType) {
								case NpcType::rabbit:
								case NpcType::cat:
									iExp = 0;
									break;
								default: break;
							}
						}
					}
				}
				break;
		}
		if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
			if (m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand] != -1)
				sWeaponIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::twohand];
			else sWeaponIndex = m_pClientList[sAttackerH]->m_sItemEquipmentStatus[ItemEquipPos::rhand];
			if ((sWeaponIndex != -1) && (bArrowUse != true)) {
				if ((m_pClientList[sAttackerH]->m_pItemList[sWeaponIndex] != 0) &&
						  (m_pClientList[sAttackerH]->m_pItemList[sWeaponIndex]->m_sIDnum != ItemId::pick_axe)) {
					if (bKilled == false)
						CalculateSSN_ItemIndex(sAttackerH, sWeaponIndex, 1);
					else {
						if (m_pClientList[sAttackerH]->m_iHP <= 3)
							CalculateSSN_ItemIndex(sAttackerH, sWeaponIndex, iDice(1, iKilledDice)*2);
						else CalculateSSN_ItemIndex(sAttackerH, sWeaponIndex, iDice(1, iKilledDice));
					}
				}
				if ((m_pClientList[sAttackerH]->m_pItemList[sWeaponIndex] != 0) &&
						  (m_pClientList[sAttackerH]->m_pItemList[sWeaponIndex]->m_wMaxLifeSpan != 0)) {
					iWepLifeOff = 1;
					if ((wWeaponType >= 1) && (wWeaponType < 40)) {
						switch (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_cWhetherStatus) {
							case 0: break;
							case 1: if (iDice(1, 3) == 1) iWepLifeOff++;
								break;
							case 2: if (iDice(1, 2) == 1) iWepLifeOff += iDice(1, 2);
								break;
							case 3: if (iDice(1, 2) == 1) iWepLifeOff += iDice(1, 3);
								break;
						}
					}
					if (m_pClientList[sAttackerH]->m_cSide != 0) {
						if (m_pClientList[sAttackerH]->m_pItemList[sWeaponIndex]->m_wCurLifeSpan < iWepLifeOff)
							m_pClientList[sAttackerH]->m_pItemList[sWeaponIndex]->m_wCurLifeSpan = 0;
						else m_pClientList[sAttackerH]->m_pItemList[sWeaponIndex]->m_wCurLifeSpan -= iWepLifeOff;
					}
					if (m_pClientList[sAttackerH]->m_pItemList[sWeaponIndex]->m_wCurLifeSpan == 0) {
						SendNotifyMsg(0, sAttackerH, DEF_NOTIFY_ITEMLIFESPANEND, (int) m_pClientList[sAttackerH]->m_pItemList[sWeaponIndex]->m_cEquipPos, sWeaponIndex, 0, 0);
						ReleaseItemHandler(sAttackerH, sWeaponIndex, true);
					}
				}
			} else {
				if (wWeaponType == 0) {
					CalculateSSN_SkillIndex(sAttackerH, 5, 1);
				}
			}
		}
	} else {
		if (cAttackerType == DEF_OWNERTYPE_PLAYER) {
			m_pClientList[sAttackerH]->m_iComboAttackCount = 0;
		}
	}
	return iExp;
}

void CGame::_GrandMagicLaunchMsgSend(int /*iType*/, char /*cAttackerSide*/) {
}

bool CGame::_bNpcBehavior_ManaCollector(int iNpcH) {
	int dX;
	int dY;
	int iMaxMP;
	int iTotal;
	short sOwnerH;
	char cOwnerType;
	double dV1;
	double dV2;
	double dV3;
	bool bRet;
	if (m_pNpcList[iNpcH] == 0) return false;
	if (m_pNpcList[iNpcH]->m_sAppr2 != 0) return false;
	bRet = false;
	for (dX = m_pNpcList[iNpcH]->m_sX - 5; dX <= m_pNpcList[iNpcH]->m_sX + 5; dX++)
		for (dY = m_pNpcList[iNpcH]->m_sY - 5; dY <= m_pNpcList[iNpcH]->m_sY + 5; dY++) {
			m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
			if (sOwnerH != 0) {
				switch (cOwnerType) {
					case DEF_OWNERTYPE_PLAYER:
						if (m_pNpcList[iNpcH]->m_cSide == m_pClientList[sOwnerH]->m_cSide) {
							iMaxMP = (2 * m_pClientList[sOwnerH]->m_iMag) + (2 * m_pClientList[sOwnerH]->m_iLevel) + (m_pClientList[sOwnerH]->m_iInt / 2);
							if (m_pClientList[sOwnerH]->m_iMP < iMaxMP) {
								iTotal = iDice(1, (m_pClientList[sOwnerH]->m_iMag));
								if (m_pClientList[sOwnerH]->m_iAddMP != 0) {
									dV2 = (double) iTotal;
									dV3 = (double) m_pClientList[sOwnerH]->m_iAddMP;
									dV1 = (dV3 / 100.0f) * dV2;
									iTotal += (int) dV1;
								}
								m_pClientList[sOwnerH]->m_iMP += iTotal;
								if (m_pClientList[sOwnerH]->m_iMP > iMaxMP)
									m_pClientList[sOwnerH]->m_iMP = iMaxMP;
								SendNotifyMsg(0, sOwnerH, DEF_NOTIFY_MP, 0, 0, 0, 0);
							}
						}
						break;
					case DEF_OWNERTYPE_NPC:
						if ((m_pNpcList[sOwnerH]->m_sType == NpcType::mana_stone) && (m_pNpcList[sOwnerH]->m_iV1 > 0)) {
							if (m_pNpcList[sOwnerH]->m_iV1 >= 3) {
								m_iCollectedMana[m_pNpcList[iNpcH]->m_cSide] += 3;
								m_pNpcList[sOwnerH]->m_iV1 -= 3;
								bRet = true;
							} else {
								m_iCollectedMana[m_pNpcList[iNpcH]->m_cSide] += m_pNpcList[sOwnerH]->m_iV1;
								m_pNpcList[sOwnerH]->m_iV1 = 0;
								bRet = true;
							}
						}
						break;
				}
			}
		}
	return bRet;
}

void CGame::MeteorStrikeMsgHandler(char cAttackerSide) {
	int i;
	uint32_t dwTime = timeGetTime();
	switch (cAttackerSide) {
		case 1:
			if (m_iElvineMapIndex != -1) {
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
						if (strcmp(m_pMapList[m_pClientList[i]->m_cMapIndex]->m_cLocationName, "elvine") == 0) {
							SendNotifyMsg(0, i, DEF_NOTIFY_METEORSTRIKECOMING, 1, 0, 0, 0);
						} else {
							SendNotifyMsg(0, i, DEF_NOTIFY_METEORSTRIKECOMING, 2, 0, 0, 0);
						}
					}
				bRegisterDelayEvent(DEF_DELAYEVENTTYPE_METEORSTRIKE, 0, dwTime + 5000, 0, 0, m_iElvineMapIndex, 0, 0, 0, 0, 0);
			} else {
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if (m_pClientList[i] != 0) {
						SendNotifyMsg(0, i, DEF_NOTIFY_METEORSTRIKECOMING, 2, 0, 0, 0);
					}
			}
			break;
		case 2:
			if (m_iAresdenMapIndex != -1) {
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
						if (strcmp(m_pMapList[m_pClientList[i]->m_cMapIndex]->m_cLocationName, "aresden") == 0) {
							SendNotifyMsg(0, i, DEF_NOTIFY_METEORSTRIKECOMING, 3, 0, 0, 0);
						} else {
							SendNotifyMsg(0, i, DEF_NOTIFY_METEORSTRIKECOMING, 4, 0, 0, 0);
						}
					}
				bRegisterDelayEvent(DEF_DELAYEVENTTYPE_METEORSTRIKE, 0, dwTime + 1000 * 5, 0, 0, m_iAresdenMapIndex, 0, 0, 0, 0, 0);
			} else {
				for (i = 1; i < DEF_MAXCLIENTS; i++)
					if (m_pClientList[i] != 0) {
						SendNotifyMsg(0, i, DEF_NOTIFY_METEORSTRIKECOMING, 4, 0, 0, 0);
					}
			}
			break;
	}
}

void CGame::_NpcBehavior_GrandMagicGenerator(int iNpcH) {
	switch (m_pNpcList[iNpcH]->m_cSide) {
		case 1:
			if (m_iAresdenMana > DEF_GMGMANACONSUMEUNIT) {
				m_iAresdenMana = 0;
				m_pNpcList[iNpcH]->m_iManaStock++;
				if (m_pNpcList[iNpcH]->m_iManaStock > m_pNpcList[iNpcH]->m_iMaxMana) {
					_GrandMagicLaunchMsgSend(1, 1);
					MeteorStrikeMsgHandler(1);
					m_pNpcList[iNpcH]->m_iManaStock = 0;
					m_iAresdenMana = 0;
				}
				wsprintf(G_cTxt, "(!) Aresden GMG %d/%d", m_pNpcList[iNpcH]->m_iManaStock, m_pNpcList[iNpcH]->m_iMaxMana);
				PutLogList(G_cTxt);
			}
			break;
		case 2:
			if (m_iElvineMana > DEF_GMGMANACONSUMEUNIT) {
				m_iElvineMana = 0;
				m_pNpcList[iNpcH]->m_iManaStock++;
				if (m_pNpcList[iNpcH]->m_iManaStock > m_pNpcList[iNpcH]->m_iMaxMana) {
					_GrandMagicLaunchMsgSend(1, 2);
					MeteorStrikeMsgHandler(2);
					m_pNpcList[iNpcH]->m_iManaStock = 0;
					m_iElvineMana = 0;
				}
				wsprintf(G_cTxt, "(!) Elvine GMG %d/%d", m_pNpcList[iNpcH]->m_iManaStock, m_pNpcList[iNpcH]->m_iMaxMana);
				PutLogList(G_cTxt);
			}
			break;
	}
}

bool CGame::_bNpcBehavior_Detector(int iNpcH) {
	int dX;
	int dY;
	short sOwnerH;
	char cOwnerType;
	char cSide;
	bool bFlag = false;
	if (m_pNpcList[iNpcH] == 0) return false;
	if (m_pNpcList[iNpcH]->m_sAppr2 != 0) return false;
	for (dX = m_pNpcList[iNpcH]->m_sX - 10; dX <= m_pNpcList[iNpcH]->m_sX + 10; dX++)
		for (dY = m_pNpcList[iNpcH]->m_sY - 10; dY <= m_pNpcList[iNpcH]->m_sY + 10; dY++) {
			m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
			cSide = 0;
			if (sOwnerH != 0) {
				switch (cOwnerType) {
					case DEF_OWNERTYPE_PLAYER:
						cSide = m_pClientList[sOwnerH]->m_cSide;
						break;
					case DEF_OWNERTYPE_NPC:
						cSide = m_pNpcList[sOwnerH]->m_cSide;
						break;
				}
			}
			if ((cSide != 0) && (cSide != m_pNpcList[iNpcH]->m_cSide)) {
				switch (cOwnerType) {
					case DEF_OWNERTYPE_PLAYER:
						if (m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] != 0) {
							m_pClientList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = 0;
							SetInvisibilityFlag(sOwnerH, cOwnerType, false);
						}
						break;
					case DEF_OWNERTYPE_NPC:
						if (m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] != 0) {
							m_pNpcList[sOwnerH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_INVISIBILITY ] = 0;
							SetInvisibilityFlag(sOwnerH, cOwnerType, false);
						}
						break;
				}
				bFlag = true;
			}
		}
	return bFlag;
}
// October 19,2004 - 3.51 translated

void CGame::NpcBehavior_Dead(int iNpcH) {
	uint32_t dwTime;
	if (m_pNpcList[iNpcH] == 0) return;
	dwTime = timeGetTime();
	m_pNpcList[iNpcH]->m_sBehaviorTurnCount++;
	if (m_pNpcList[iNpcH]->m_sBehaviorTurnCount > 5) {
		m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
	}
	if ((dwTime - m_pNpcList[iNpcH]->m_dwDeadTime) > m_pNpcList[iNpcH]->m_dwRegenTime)
		DeleteNpc(iNpcH);
}
// v2.15 2002-8-7 // 2002-09-06 #1

/*bool CGame::_bDecodeNpcItemConfigFileContents(char * pData, uint32_t dwMsgSize)
{
 char * pContents, * token, cTxt[120];
 char seps[] = "= \t\n";
 char cReadModeA = 0;
 char cReadModeB = 0;
 int  iNpcConfigListIndex = 0, k = 0;
  CStrTok * pStrTok;
  CNpcItem * pTempNpcItem = 0 ;
	pContents = new char[dwMsgSize+1];
	ZeroMemory(pContents, dwMsgSize+1);
	memcpy(pContents, pData, dwMsgSize);
	pStrTok = new  CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while( token != 0 ) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
			case 1:
				switch (cReadModeB) {
				case 1:
					if (strlen(token) > 20)	{
						PutLogList("(!!!) CRITICAL ERROR! NPCITEM configuration file error - Too long Npc name.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					for (iNpcConfigListIndex = 0; iNpcConfigListIndex < DEF_MAXNPCTYPES; iNpcConfigListIndex++)
						if (m_pNpcConfigList[iNpcConfigListIndex] != 0) {
							if(strcmp(m_pNpcConfigList[iNpcConfigListIndex]->m_cNpcName,token) == 0) {
								PutLogList(token);
								break;
							}
						}
					if (iNpcConfigListIndex == DEF_MAXNPCTYPES ) {
						PutLogList("(!!!) CRITICAL ERROR! NPCITEM configuration file error - No exist Npc Name");
						delete pContents;
						delete pStrTok;
						return false;
					}
					cReadModeB = 2;
					break;
				case 2:
					if( strlen(token) > 2 ) {
						PutLogList("(!!!) CRITICAL ERROR! NPCITEM configuration file error - Type Error.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					m_pNpcConfigList[iNpcConfigListIndex]->m_iNpcItemType = atoi(token);
					cReadModeB = 3;
					break;
				case 3:
					if (strlen(token) > 20)	{
						PutLogList("(!!!) CRITICAL ERROR! NPCITEM configuration file error - Too long Item name.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					if (pTempNpcItem == 0)
						pTempNpcItem = new  CNpcItem();
					if( memcmp(token,"[ENDITEM]",9) == 0 ){
						cReadModeA = 0 ;
						cReadModeB = 0 ;
						if ( pTempNpcItem  != 0) {
							delete pTempNpcItem ;
							pTempNpcItem = 0 ;
						}
						break;
					}
					strcpy(pTempNpcItem->m_cName, token);
					if(!m_bReceivedItemList)
					{
						PutLogList("(!!!) CRITICAL ERROR! NPCITEM configuration error - Before Item List receiving.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					for(k=0; k < DEF_MAXITEMTYPES; k++)
					{
						if ( m_pItemConfigList[k] == 0 )
							continue;
						if (strcmp(token, m_pItemConfigList[k]->m_cName) == 0 ) {
							pTempNpcItem->m_sItemID = m_pItemConfigList[k]->m_sIDnum;
							break;
						}
					}
					if ( k == DEF_MAXITEMTYPES ) {
						PutLogList("(!!!) CRITICAL ERROR! NPCITEM configuration error - Do Not exist in ITEM LIST");
						delete pContents;
						delete pStrTok;
						return false;
					}
					cReadModeB = 4;
					break;
				case 4:
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! NPCITEM configuration file error - Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					pTempNpcItem->m_sFirstProbability = atoi(token);
					if (pTempNpcItem->m_sFirstProbability <= 0 ) {
						PutLogList("(!!!) CRITICAL ERROR! NPCITEM configuration file error - First probability have wrong value");
						delete pContents;
						delete pStrTok;
						return false ;
					}
					if ( pTempNpcItem->m_sFirstProbability > 13)
						pTempNpcItem->m_cFirstTargetValue = 13;
					else if ( pTempNpcItem->m_sFirstProbability > 3)
						pTempNpcItem->m_cFirstTargetValue = 3;
					else
						pTempNpcItem->m_cFirstTargetValue = 1;
					cReadModeB = 5;
					break;
				case 5:
					if (_bGetIsStringIsNumber(token) == false) {
						PutLogList("(!!!) CRITICAL ERROR! NPCITEM configuration file error - Wrong Data format.");
						delete pContents;
						delete pStrTok;
						return false;
					}
					pTempNpcItem->m_sSecondProbability = atoi(token);
					if (pTempNpcItem->m_sSecondProbability <= 0 ) {
						PutLogList("(!!!) CRITICAL ERROR! NPCITEM configuration file error - Second probability have wrong value");
						delete pContents;
						delete pStrTok;
						return false ;
					}
					if ( pTempNpcItem->m_sSecondProbability > 13)
						pTempNpcItem->m_cSecondTargetValue = 13 ;
					else if ( pTempNpcItem->m_sSecondProbability > 3)
						pTempNpcItem->m_cSecondTargetValue = 3 ;
					else
						pTempNpcItem->m_cSecondTargetValue = 1 ;
					cReadModeB = 3;
					m_pNpcConfigList[iNpcConfigListIndex]->m_vNpcItem.push_back(*pTempNpcItem);
					if( m_pNpcConfigList[iNpcConfigListIndex]->m_iNpcItemMax < pTempNpcItem->m_sSecondProbability )
						m_pNpcConfigList[iNpcConfigListIndex]->m_iNpcItemMax = pTempNpcItem->m_sSecondProbability;
					break;
				} // switch #2
			default:
				break;
			} // switch #1
		} // if
		else {
			if (memcmp(token, "NpcItem", 7) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
	}
	delete pStrTok;
	delete pContents;
	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		PutLogList("(!!!) CRITICAL ERROR! NPCITEM configuration file contents error!");
		return false;
	}
	return true;
} // _bDecodeNpcItemConfigFileContents()*/
bool CGame::bGetItemNameWhenDeleteNpc(ItemId & iItemID, NpcType sNpcType) {
	int iResult;
	switch (sNpcType) {
		case NpcType::hellclaw: // Hellclaw
			iResult = iDice(1, 20000);
			if ((iResult >= 1) && (iResult <= 4999)) {
				if (iDice(1, 2) == 1)
					iItemID = ItemId::magic_wand_mshield; // Green Ball 651
				else iItemID = ItemId::excaliber; // Rep Potion 965
			} else if ((iResult > 5000) && (iResult <= 10000)) iItemID = ItemId::green_ball; // MagicWand(M.Shield)
			else if ((iResult > 10000) && (iResult <= 13000)) iItemID = ItemId::rep_potion; // Excaliber
			else if ((iResult > 13000) && (iResult <= 15000)) iItemID = ItemId::emerald_ring; // EmeraldRing
			else if ((iResult > 15000) && (iResult <= 17500)) iItemID = ItemId::magic_necklace_rm10; // MagicNecklace(RM10)
			else if ((iResult > 17500) && (iResult <= 18750)) iItemID = ItemId::magic_necklace_df10; // MagicNecklace(DF+10)
			else if ((iResult > 18750) && (iResult <= 19000)) iItemID = ItemId::magic_necklace_dm1; // MagicNecklace(DM+1)
			else if ((iResult > 19000) && (iResult <= 19700)) iItemID = ItemId::ringof_wizard; // RingofWizard
			else if ((iResult > 19700) && (iResult <= 19844)) iItemID = ItemId::ringof_mage; // RingofMage
			else if ((iResult > 19844) && (iResult <= 19922)) iItemID = ItemId::knecklace_of_ice_ele; // KnecklaceOfIceEle
			else if ((iResult > 19922) && (iResult <= 19961)) iItemID = ItemId::resur_wand_ms10; // ResurWandMS10
			else if ((iResult > 19961) && (iResult <= 19981)) iItemID = ItemId::necklace_of_merien; // NecklaceOfMerien
			else if ((iResult > 19981) && (iResult <= 19991)) iItemID = ItemId::merien_shield; // MerienShield
			else if ((iResult > 19991) && (iResult <= 19996)) iItemID = ItemId::knecklace_of_air_ele; // KnecklaceOfAirEle
			else if ((iResult > 19996) && (iResult <= 19999)) iItemID = ItemId::sword_of_ice_elemental; // SwordofIceElemental
			else if ((iResult > 19999) && (iResult <= 20000)) iItemID = ItemId::ringof_grand_mage; // RingofGrandMage
			return true;
		case NpcType::tigerworm: // Tigerworm
			iResult = iDice(1, 10000);
			if ((iResult >= 1) && (iResult <= 4999)) {
				if (iDice(1, 2) == 1)
					iItemID = ItemId::sword_of_ice_elemental; // Red Ball 652
				else iItemID = ItemId::ice_elemental_rapier; // Rep Potion 965
			} else if ((iResult > 5000) && (iResult <= 7499)) iItemID = ItemId::rep_potion; // IceElementalRapier
			else if ((iResult > 7500) && (iResult <= 8749)) iItemID = ItemId::red_ball; // SwordofIceElemental
			else if ((iResult > 8750) && (iResult <= 9374)) iItemID = ItemId::ringof_demonpower; // RingofDemonpower
			else if ((iResult > 9375) && (iResult <= 9687)) iItemID = ItemId::blood_rapier; // BloodRapier
			else if ((iResult > 9688) && (iResult <= 9843)) iItemID = ItemId::blood_sword; // BloodSword
			else if ((iResult > 9844) && (iResult <= 9921)) iItemID = ItemId::blood_axe; // BloodAxe
			else if ((iResult > 9922) && (iResult <= 9960)) iItemID = ItemId::magic_wand_m_s30_llf; // MagicWand(MS30-LLF)
			else if ((iResult > 9961) && (iResult <= 9980)) iItemID = ItemId::ringofthe_xelima; // RingoftheXelima
			else if ((iResult > 9981) && (iResult <= 9990)) iItemID = ItemId::xelima_rapier; // XelimaRapier
			else if ((iResult > 9991) && (iResult <= 9996)) iItemID = ItemId::xelima_blade; // XelimaBlade
			else if ((iResult > 9996) && (iResult <= 9998)) iItemID = ItemId::xelima_axe; // XelimaAxe
			else if ((iResult > 9999) && (iResult <= 10000)) iItemID = ItemId::ringofthe_abaddon; // RingoftheAbaddon
			else if ((iResult > 9999) && (iResult <= 10000)) iItemID = ItemId::kloness_blade; // "KlonessBlade"		2%
			else if ((iResult > 9999) && (iResult <= 10000)) iItemID = ItemId::kloness_wand_ms10; // "KlonessWandMS20"		2%
			return true;
		default:
			break;
	}
	if (iDice(1, 45) == 13) {
		switch (sNpcType) {
			case NpcType::skeleton: if (iDice(1, 550) != 11) return false;
				break; // Skeleton   2 * 100
			case NpcType::stone_golem: if (iDice(1, 400) != 11) return false;
				break; // Stone-Golem 2 * 100
			case NpcType::cyclops: if (iDice(1, 100) != 11) return false;
				break; // Cyclops  6 * 100
			case NpcType::orc: if (iDice(1, 700) != 11) return false;
				break; // Orc 4 * 100
			case NpcType::scorpion: if (iDice(1, 600) != 11) return false;
				break; // Scorpoin 5 * 100
			case NpcType::zombie: if (iDice(1, 850) != 11) return false;
				break; // Zombie 1 * 100
			case NpcType::amphis: if (iDice(1, 600) != 11) return false;
				break; // Amphis 5 * 100
			case NpcType::clay_golem: if (iDice(1, 400) != 11) return false;
				break; // Clay-Golem 2 * 100
			case NpcType::hellbound: if (iDice(1, 100) != 11) return false;
				break; // Hellhound 7 * 100
			case NpcType::troll: if (iDice(1, 100) != 11) return false;
				break; // Troll 5 * 100
			case NpcType::orge: if (iDice(1, 150) != 11) return false;
				break; // Orge  7 * 100
			case NpcType::liche: if (iDice(1, 120) != 11) return false;
				break; // Liche 1 * 100
			case NpcType::demon: break; // Demon 5 * 100
			case NpcType::unicorn: if (iDice(1, 200) != 11) return false;
				break; // Unicorn 5 * 100
			case NpcType::were_wolf: if (iDice(1, 300) != 11) return false;
				break; // WereWolf 7 * 100
			case NpcType::stalker: if (iDice(1, 100) != 11) return false;
				break; // Stalker
			case NpcType::gagoyle: if (iDice(1, 300) != 11) return false;
				break; // Gagoyle
			case NpcType::beholder: if (iDice(1, 500) != 11) return false;
				break; // Beholder
			case NpcType::dark_elf: if (iDice(1, 200) != 11) return false;
				break; // Dark-Elf
			case NpcType::giant_frog: if (iDice(1, 400) != 11) return false;
				break; // Giant-Frog
			case NpcType::frost: if (iDice(1, 300) != 11) return false;
				break; // Frost
			case NpcType::nizie: if (iDice(1, 200) != 11) return false;
				break; // Nizie
			case NpcType::barlog: if (iDice(1, 200) != 11) return false;
				break; // Barlog
			case NpcType::centaurus: if (iDice(1, 200) != 11) return false;
				break; // Centaurus
			default: return false;
		}
	} else return false;
	//http://www.helbreath.com/down/d_patch_v2.htm
	switch (sNpcType) {
		case NpcType::skeleton: // Skeleton
		case NpcType::scorpion: // Scorpoin
		case NpcType::orc: // Orc
		case NpcType::troll: // Troll
		case NpcType::giant_frog: // Giant-Frog
			switch (iDice(1, 7)) {
				case 1: iItemID = ItemId::lucky_gold_ring;
					break; // LuckyGoldRing
				case 2: iItemID = ItemId::sapphire_ring;
					break; // SapphireRing
				case 3: if (iDice(1, 15) == 3) iItemID = ItemId::emerald_ring;
					break; // EmeraldRing
				case 4: iItemID = ItemId::ruby_ring;
					break; // RubyRing
				case 5: iItemID = ItemId::platinum_ring;
					break; // PlatinumRing
				case 6: if (iDice(1, 15) == 3) iItemID = ItemId::ringof_wizard;
					break; // RingofWizard
				case 7: if (iDice(1, 25) == 3) iItemID = ItemId::ringof_mage;
					break; // RingofMage
			}
			break;
		case NpcType::cyclops: // Cyclops
		case NpcType::hellbound: // Hellhound
		case NpcType::orge: // Orge
			switch (iDice(1, 7)) {
				case 1: iItemID = ItemId::magic_necklace_df10;
					break; // MagicNecklace(DF+10)
				case 2: if (iDice(1, 20) == 13) iItemID = ItemId::magic_necklace_ms10;
					break; // MagicNecklace(MS10)
				case 3: if (iDice(1, 10) == 13) iItemID = ItemId::magic_necklace_dm1;
					break; // MagicNecklace(DM+1)
				case 4: iItemID = ItemId::magic_necklace_rm10;
					break; // MagicNecklace(RM10)
				case 5: if (iDice(1, 30) == 13) iItemID = ItemId::ringof_ogrepower;
					break; // RingofOgrepower
				case 6: if (iDice(1, 30) == 13) iItemID = ItemId::knecklace_of_light_pro;
					break; // KnecklaceOfLightPro
				case 7: if (iDice(1, 30) == 13) iItemID = ItemId::knecklace_of_fire_pro;
					break; // KnecklaceOfFirePro
			}
			break;
		case NpcType::zombie: // Zombie
		case NpcType::amphis: // Amphis
			switch (iDice(1, 4)) {
				case 1: if (iDice(1, 75) == 13) iItemID = ItemId::sword_of_medusa;
					break; // SwordofMedusa
				case 2: if (iDice(1, 20) == 13) iItemID = ItemId::knecklace_of_poison_pro;
					break; // KnecklaceOfPoisonPro
				case 3: if (iDice(1, 40) == 13) iItemID = ItemId::knecklace_of_medusa;
					break; // KnecklaceOfMedusa
				case 4: if (iDice(1, 30) == 13) iItemID = ItemId::knecklace_of_sufferent;
					break; // KnecklaceOfSufferent
			}
			break;
		case NpcType::stone_golem: // Stone-Golem
			switch (iDice(1, 5)) {
				case 1: if (iDice(1, 40) == 13) iItemID = ItemId::merien_shield;
					break; // MerienShield
				case 2: if (iDice(1, 40) == 13) iItemID = ItemId::merien_plate_mail_m;
					break; // MerienPlateMail(M)
				case 3: if (iDice(1, 40) == 13) iItemID = ItemId::merien_plate_mail_w;
					break; // MerienPlateMail(W)
				case 4: if (iDice(1, 20) == 11) iItemID = ItemId::knecklace_of_air_ele;
					break; // KnecklaceOfAirEle
				case 5: if (iDice(1, 20) == 11) iItemID = ItemId::necklace_of_stone_golem;
					break; // KnecklaceOfStoneGolem
			}
			break;
		case NpcType::clay_golem: // Clay-Golem
			switch (iDice(1, 4)) {
				case 1: if (iDice(1, 40) == 13) iItemID = ItemId::merien_shield;
					break; // MerienShield
				case 2: if (iDice(1, 40) == 13) iItemID = ItemId::merien_plate_mail_m;
					break; // MerienPlateMail(M)
				case 3: if (iDice(1, 40) == 13) iItemID = ItemId::merien_plate_mail_w;
					break; // MerienPlateMail(W)
				case 4: if (iDice(1, 20) == 11) iItemID = ItemId::knecklace_of_air_ele;
					break; // KnecklaceOfAirEle
			}
			break;
		case NpcType::unicorn: // Unicorn
			switch (iDice(1, 4)) {
				case 1: if (iDice(1, 40) == 13) iItemID = ItemId::merien_shield;
					break; // MerienShield
				case 2: if (iDice(1, 40) == 13) iItemID = ItemId::merien_plate_mail_m;
					break; // MerienPlateMail(M)
				case 3: if (iDice(1, 40) == 13) iItemID = ItemId::merien_plate_mail_w;
					break; // MerienPlateMail(W)
				case 4: if (iDice(1, 20) == 11) iItemID = ItemId::knecklace_of_air_ele;
					break; // KnecklaceOfAirEle
				case 5: if (iDice(1, 20) == 11) iItemID = ItemId::lighting_blade;
					break; // Lighting Blade
			}
			break;
		case NpcType::were_wolf: // WereWolf
		case NpcType::stalker: // Stalker
			switch (iDice(1, 2)) {
				case 1: if (iDice(1, 30) == 3) iItemID = ItemId::flameberge_plus_3_llf;
					break; // Flameberge+3(LLF)
				case 2: iItemID = ItemId::golden_axe_llf;
					break; // GoldenAxe(LLF)
			}
			break;
		case NpcType::liche: // Liche
			switch (iDice(1, 8)) {
				case 1: if (iDice(1, 10) == 3) iItemID = ItemId::ice_storm_manual;
					break; // IceStormManual
				case 2: if (iDice(1, 10) == 3) iItemID = ItemId::magic_wand_mshield;
					break; // MagicWand(M.Shield)
				case 3: if (iDice(1, 30) == 3) iItemID = ItemId::magic_wand_m_s30_llf;
					break; // MagicWand(MS30-LLF)
				case 4: if (iDice(1, 10) == 3) iItemID = ItemId::sword_of_ice_elemental;
					break; // SwordofIceElemental
				case 5: if (iDice(1, 10) == 3) iItemID = ItemId::knecklace_of_ice_pro;
					break; // KnecklaceOfIcePro
				case 6: if (iDice(1, 15) == 3) iItemID = ItemId::knecklace_of_ice_ele;
					break; // KnecklaceOfIceEle
				case 7: if (iDice(1, 30) == 3) iItemID = ItemId::ringof_grand_mage;
					break; // RingofGrandMage
				case 8: if (iDice(1, 30) == 3) iItemID = ItemId::ring_of_arcmage;
					break; // RingOfArcmage
			}
			break;
		case NpcType::demon: // Demon
			switch (iDice(1, 8)) {
				case 1: if (iDice(1, 30) == 3) iItemID = ItemId::bloody_shock_w_manual;
					break; // BloodyShockW.Manual
				case 2: if (iDice(1, 10) == 3) iItemID = ItemId::blood_axe;
					break; // BloodAxe
				case 3: if (iDice(1, 10) == 3) iItemID = ItemId::blood_sword;
					break; // BloodSword
				case 4: if (iDice(1, 10) == 3) iItemID = ItemId::blood_rapier;
					break; // BloodRapier
				case 5: if (iDice(1, 10) == 3) iItemID = ItemId::mass_fire_strike_manual;
					break; // MassFireStrikeManual
				case 6: if (iDice(1, 30) == 3) iItemID = ItemId::ringof_demonpower;
					break; // RingofDemonpower
				case 7: if (iDice(1, 10) == 3) iItemID = ItemId::knecklace_of_efreet;
					break; // KnecklaceOfEfreet
				case 8: if (iDice(1, 20) == 3) iItemID = ItemId::demon_slayer;
					break; // DemonSlayer
			}
			break;
		case NpcType::gagoyle: // Gagoyle
			switch (iDice(1, 11)) {
				case 1: if (iDice(1, 30) == 3) iItemID = ItemId::bloody_shock_w_manual;
					break; // BloodyShockW.Manual
				case 2: if (iDice(1, 20) == 3) iItemID = ItemId::xelima_blade;
					break; // XelimaBlade
				case 3: if (iDice(1, 20) == 3) iItemID = ItemId::xelima_axe;
					break; // XelimaAxe
				case 4: if (iDice(1, 20) == 3) iItemID = ItemId::xelima_rapier;
					break; // XelimaRapier
				case 5: if (iDice(1, 10) == 3) iItemID = ItemId::mass_fire_strike_manual;
					break; // MassFireStrikeManual
				case 6: if (iDice(1, 30) == 3) iItemID = ItemId::ringof_demonpower;
					break; // RingofDemonpower
				case 7: if (iDice(1, 10) == 3) iItemID = ItemId::knecklace_of_efreet;
					break; // KnecklaceOfEfreet
				case 8: if (iDice(1, 40) == 3) iItemID = ItemId::ringofthe_xelima;
					break; // RingoftheXelima
				case 9: if (iDice(1, 50) == 3) iItemID = ItemId::ringofthe_abaddon;
					break; // RingoftheAbaddon
				case 10: if (iDice(1, 20) == 3) iItemID = ItemId::ring_of_dragonpower;
					break; // RingOfDragonpower
				case 11: if (iDice(1, 40) == 3) iItemID = ItemId::excaliber;
					break; // Excaliber
				case 12: if (iDice(1, 60) == 3) iItemID = ItemId::the_devastator;
					break; // The_Devastator
			}
			break;
		case NpcType::beholder: // Beholder
			if (iDice(1, 20) == 11) iItemID = ItemId::necklace_of_beholder;
			break; // KnecklaceOfBeholder
			break;
		case NpcType::dark_elf: // Dark-Elf
			if (iDice(1, 20) == 11) iItemID = ItemId::dark_elf_bow;
			break; // DarkElfBow
			break;
		case NpcType::frost: // Frost
			if (iDice(1, 40) == 11) iItemID = ItemId::storm_bringer;
			break; // StormBringer
			break;
		case NpcType::nizie: // Nizie
			if (iDice(1, 20) == 11) iItemID = ItemId::storm_bringer;
			break; // StormBringer
			break;
		case NpcType::barlog: // Barlog
			if (iDice(1, 40) == 11) iItemID = ItemId::the_devastator;
			break; // The_Devastator
			break;
		case NpcType::centaurus: // Centaurus
			if (iDice(1, 20) == 11) iItemID = ItemId::lighting_blade;
			break; // Lighting Blade
			break;
		default: break;
	}
	if (iItemID == ItemId::none)
		return false;
	else return true;
}

/*bool CGame::bGetItemNameWhenDeleteNpc(int &iItemID, short sNpcType)
{
	CNpcItem * CTempNpcItem;
 int	iResult;
 int	iNpcIndex;
 int	iNumNpcitem;
 int	iIndex;
 int	iDiceValue;
 bool	bFirstDice = false, bSecondDice = false;
	for (iNpcIndex = 0; iNpcIndex < DEF_MAXNPCTYPES; iNpcIndex++) {
		if (m_pNpcConfigList[iNpcIndex] != 0) {
			if (m_pNpcConfigList[iNpcIndex]->m_sType == sNpcType) break;
		}
	}
	if (iNpcIndex == DEF_MAXNPCTYPES) return false;
	if (m_pNpcConfigList[iNpcIndex]->m_vNpcItem.size() <=  0)  return false; // sub_4BAFD0
	switch (m_pNpcConfigList[iNpcIndex]->m_iNpcItemType) {
	case 1:
		iResult = iDice(1, m_pNpcConfigList[iNpcIndex]->m_vNpcItem.size()) - 1;
		CTempNpcItem = m_pNpcConfigList[iNpcIndex]->m_vNpcItem.at(iResult);
		if (iDice(1,CTempNpcItem.m_sFirstProbability) == CTempNpcItem.m_cFirstTargetValue) bFirstDice  = true;
		if (iDice(1,CTempNpcItem.m_sSecondProbability) == CTempNpcItem.m_cSecondTargetValue) bSecondDice = true;
		if ((bFirstDice == true) && (bSecondDice == true)) {
			iItemID = CTempNpcItem.m_sItemID;
			wsprintf(G_cTxt,"NpcType 1 (%d) size(%d) %s(%d) (%d)", sNpcType, m_pNpcConfigList[iNpcIndex]->m_vNpcItem.size(), CTempNpcItem.m_cName, CTempNpcItem.m_sItemID);
			PutLogList(G_cTxt);
		}
		break;
	case 2:
		iNumNpcitem = m_pNpcConfigList[iNpcIndex]->m_vNpcItem.size(); // sub_4BAFD0
		iDiceValue  = iDice(1, m_pNpcConfigList[iNpcIndex]->m_iNpcItemMax);
		for (iIndex = 0; iIndex < iNumNpcitem; iIndex++) {
			CTempNpcItem = m_pNpcConfigList[iNpcIndex]->m_vNpcItem.at(iIndex); // sub_4BB010
			if(CTempNpcItem.m_sFirstProbability <= iDiceValue && iDiceValue < CTempNpcItem.m_sSecondProbability) {
				iItemID = CTempNpcItem.m_sItemID;
				wsprintf(G_cTxt,"NpcType 2 (%d) size(%d) %s(%d) (%d)", sNpcType, m_pNpcConfigList[iNpcIndex]->m_vNpcItem.size(), CTempNpcItem.m_cName, CTempNpcItem.m_sItemID);
				break;
			}
		}
		break;
	} // switch
	if (iItemID <= 0)
		return false;
	return true;
}*/
void CGame::StormBringer(int iClientH, short dX, short dY) {
	char cOwnerType;
	short sOwner;
	short sAppr2;
	short sAttackerWeapon;
	int iDamage;
	int iTemp;
	int iV1;
	int iV2;
	int iV3;
	//Stormbringer
	if (m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::rhand] != -1) {
		m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->GetOwner(&sOwner, &cOwnerType, dX, dY);
		iTemp = m_pClientList[iClientH]->m_sItemEquipmentStatus[ItemEquipPos::rhand];
		sAppr2 = (short) ((m_pClientList[iClientH]->m_sAppr2 & 0xF000) >> 12);
		if (memcmp(m_pClientList[iClientH]->m_pItemList[iTemp]->m_cName, "StormBringer", 12) == 0) {
			switch (cOwnerType) {
				case DEF_OWNERTYPE_PLAYER:
					if (m_pClientList[sOwner]->m_iAdminUserLevel < 3) {
						if (sAppr2 != 0) {
							iV1 = m_pClientList[iClientH]->m_cAttackDiceThrow_L;
							iV2 = m_pClientList[iClientH]->m_cAttackDiceRange_L;
							iV3 = m_pClientList[iClientH]->m_cAttackBonus_L;
							if (m_pClientList[iClientH]->m_cMagicEffectStatus[ DEF_MAGICTYPE_BERSERK ] != 0) {
								iDamage = iDice(iV1 * 2, iV2 * 2) + iV3;
							} else {
								iDamage = iDice(iV1, iV2) + iV3;
							}
							m_pClientList[sOwner]->m_iHP -= iDamage;
							if (m_pClientList[sOwner]->m_iHP <= 0) {
								sAttackerWeapon = 1;
								m_pClientList[sOwner]->m_iHP = 0;
								m_pClientList[sOwner]->m_bIsKilled = true;
								m_pClientList[sOwner]->m_iLastDamage = iDamage;
								SendNotifyMsg(0, sOwner, DEF_NOTIFY_HP, 0, 0, 0, 0);
								SendEventToNearClient_TypeA(sOwner, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDYING, iDamage, sAttackerWeapon, 0);
								m_pMapList[m_pClientList[sOwner]->m_cMapIndex]->ClearOwner(14, sOwner, DEF_OWNERTYPE_PLAYER, m_pClientList[sOwner]->m_sX, m_pClientList[sOwner]->m_sY);
								m_pMapList[m_pClientList[sOwner]->m_cMapIndex]->SetDeadOwner(sOwner, DEF_OWNERTYPE_PLAYER, m_pClientList[sOwner]->m_sX, m_pClientList[sOwner]->m_sY);
							} else {
								SendNotifyMsg(0, sOwner, DEF_NOTIFY_HP, 0, 0, 0, 0);
								SendEventToNearClient_TypeA(sOwner, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iDamage, 0, 0);
							}
						}
					}
					break;
			}
		}
	}
}

bool CGame::_bCheckCharacterData(int iClientH) {
	int i;
	if ((m_pClientList[iClientH]->m_iStr > m_sCharStatLimit) || (m_pClientList[iClientH]->m_iVit > m_sCharStatLimit) || (m_pClientList[iClientH]->m_iDex > m_sCharStatLimit) ||
			  (m_pClientList[iClientH]->m_iMag > m_sCharStatLimit) || (m_pClientList[iClientH]->m_iInt > m_sCharStatLimit) || (m_pClientList[iClientH]->m_iCharisma > m_sCharStatLimit)) {
		wsprintf(G_cTxt, "Packet Editing: (%s) Player: (%s) stat points are greater then server accepts.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
		PutHackLogFileList(G_cTxt);
		return false;
	}
	if ((m_pClientList[iClientH]->m_iLevel > m_sMaxPlayerLevel) && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) {
		wsprintf(G_cTxt, "Packet Editing: (%s) Player: (%s) level above max server level.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
		PutHackLogFileList(G_cTxt);
		return false;
	}
	if (m_pClientList[iClientH]->m_iExp < 0) {
		m_pClientList[iClientH]->m_iExp = DEF_PLAYER_MAX_EXPERIENCE; // juan249 - Exp negativa Fix.
		wsprintf(G_cTxt, "Packet Editing: (%s) Player: (%s) experience is below 0 - (Exp:%d). - FIXED", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_iExp);
		PutHackLogFileList(G_cTxt);
		return false;
	}
	if ((m_pClientList[iClientH]->m_iHP > iGetMaxHP(iClientH)) && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) {
		wsprintf(G_cTxt, "Packet Editing: (%s) Player: (%s) HP: current/maximum (%d/%d).", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_iHP, iGetMaxHP(iClientH));
		PutHackLogFileList(G_cTxt);
		return false;
	}
	if ((m_pClientList[iClientH]->m_iMP > iGetMaxMP(iClientH)) && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) {
		wsprintf(G_cTxt, "Packet Editing: (%s) Player: (%s) MP: current/maximum (%d/%d).", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_iMP, iGetMaxMP(iClientH));
		PutHackLogFileList(G_cTxt);
		return false;
	}
	if ((m_pClientList[iClientH]->m_iSP > iGetMaxSP(iClientH)) && (m_pClientList[iClientH]->m_iAdminUserLevel == 0)) {
		wsprintf(G_cTxt, "Packet Editing: (%s) Player: (%s) SP: current/maximum (%d/%d).", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_iSP, iGetMaxSP(iClientH));
		PutHackLogFileList(G_cTxt);
		return false;
	}
	/*if (m_pClientList[iClientH]->m_iAdminUserLevel != 0) {
		for (i = 0; i < DEF_MAXADMINS; i++) {
			if(strlen(m_stAdminList[i].m_cGMName) == 0) break; //No more GM's on list
			if ((strlen(m_stAdminList[i].m_cGMName)) == (strlen(m_pClientList[iClientH]->m_cCharName))) {
				if(memcmp(m_stAdminList[i].m_cGMName, m_pClientList[iClientH]->m_cCharName, strlen(m_pClientList[iClientH]->m_cCharName)) != 0){
				}
				else {
					wsprintf(G_cTxt, "Packet Editing: (%s) Player: (%s) is an unaccepted admin.", m_pClientList[iClientH]->m_cIPaddress, m_pClientList[iClientH]->m_cCharName);
					PutHackLogFileList(G_cTxt);
					return false;
				}
			}
		}
	}*/
	for (i = 0; i < DEF_MAXBANNED; i++) {
		if (strlen(m_stBannedList[i].m_cBannedIPaddress) == 0) break; //No more GM's on list
		if ((strlen(m_stBannedList[i].m_cBannedIPaddress)) == (strlen(m_pClientList[iClientH]->m_cIPaddress))) {
			if (memcmp(m_stBannedList[i].m_cBannedIPaddress, m_pClientList[iClientH]->m_cIPaddress, strlen(m_pClientList[iClientH]->m_cIPaddress)) == 0) {
				wsprintf(G_cTxt, "Client Rejected: Banned: (%s)", m_pClientList[iClientH]->m_cIPaddress);
				PutLogList(G_cTxt);
				return false;
			} else {
			}
		}
	}
	return true;
}

void CGame::GlobalEndHeldenianMode() {
	if (m_bIsHeldenianMode == false) return;
	LocalEndHeldenianMode();
}

void CGame::LocalEndHeldenianMode() {
	int i;
	int x;
	if (m_bIsHeldenianMode == false) return;
	m_bIsHeldenianMode = false;
	m_bHeldenianInitiated = true;
	m_dwHeldenianFinishTime = time(0);
	if (m_bIsHeldenianReady == 1) {
		if (m_cHeldenianModeType == 1) {
			if (m_iHeldenianAresdenLeftTower > m_iHeldenianElvineLeftTower) {
				m_cHeldenianVictoryType = 1;
			} else if (m_iHeldenianAresdenLeftTower < m_iHeldenianElvineLeftTower) {
				m_cHeldenianVictoryType = 2;
			} else if (m_iHeldenianAresdenDead < m_iHeldenianElvineDead) {
				m_cHeldenianVictoryType = 1;
			} else if (m_iHeldenianAresdenDead > m_iHeldenianElvineDead) {
				m_cHeldenianVictoryType = 2;
			} else {
				m_sLastHeldenianWinner = m_cHeldenianVictoryType;
			}
		} else if (m_cHeldenianModeType == 2) {
			m_sLastHeldenianWinner = m_cHeldenianVictoryType;
		}
		m_sLastHeldenianWinner = m_cHeldenianVictoryType;
		if (bNotifyHeldenianWinner() == false) {
			wsprintf(G_cTxt, "(!) HELDENIAN End. Result Report Failed");
			PutLogList(G_cTxt);
		} else {
			wsprintf(G_cTxt, "(!) HELDENIAN End. %d", m_sLastHeldenianWinner);
			PutLogList(G_cTxt);
		}
		for (i = 0; i < DEF_MAXMAPS; i++) {
			if ((i < 0) || (i > 100) || (m_pMapList[i] != 0)) {
				for (x = 0; x < DEF_MAXCLIENTS; x++) {
					if ((m_pClientList[x] != 0) && (m_pClientList[x]->m_bIsInitComplete == true)) {
						SendNotifyMsg(0, x, DEF_NOTIFY_HELDENIANEND, 0, 0, 0, 0);
					}
				}
				if (m_pMapList[i]->m_bIsHeldenianMap == true) {
					for (x = 0; x < DEF_MAXNPCS; x++) {
						if (m_pNpcList[x] != 0) {
							if (m_pMapList[m_pNpcList[x]->m_cMapIndex] != 0) {
								m_pNpcList[x]->m_bIsSummoned = true;
								RemoveEventNpc(x);
							}
						}
					}
					RemoveOccupyFlags(i);
				}
			}
		}
	}
	_CreateHeldenianGUID(m_dwHeldenianGUID, m_cHeldenianVictoryType);
}

bool CGame::bNotifyHeldenianWinner() {
	if (m_bIsHeldenianReady == 0) {
		return false;
	} else {
		HeldenianWinner();
		return true;
	}
}

void CGame::RemoveOccupyFlags(int iMapIndex) {
	uint32_t dwTime = timeGetTime();
	int i;
	short dX;
	short dY;
	int iDynamicObjectIndex;
	CTile * pTile;
	int iy;
	int ix;
	if (m_pMapList[iMapIndex] == 0) return;
	for (i = 1; i < DEF_MAXOCCUPYFLAG; i++)
		if (m_pMapList[iMapIndex]->m_pOccupyFlag[i] != false) return;
	if (m_pMapList[iMapIndex]->m_pOccupyFlag[i] != false) {
		dX = m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_sX;
		dY = m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_sY;
		pTile = (CTile *) (m_pMapList[iMapIndex]->m_pTile + dX + dY * m_pMapList[iMapIndex]->m_sSizeY);
		m_pMapList[iMapIndex]->m_iTotalOccupyFlags--;
		iDynamicObjectIndex = m_pMapList[iMapIndex]->m_pOccupyFlag[i]->m_iDynamicObjectIndex;
		if (m_pDynamicObjectList[iDynamicObjectIndex] == 0) return;
		SendEventToNearClient_TypeB(MSGID_DYNAMICOBJECT, DEF_MSGTYPE_REJECT, m_pDynamicObjectList[iDynamicObjectIndex]->m_cMapIndex,
				  m_pDynamicObjectList[iDynamicObjectIndex]->m_sX, m_pDynamicObjectList[iDynamicObjectIndex]->m_sY,
				  m_pDynamicObjectList[iDynamicObjectIndex]->m_sType, iDynamicObjectIndex, 0);
		m_pMapList[m_pDynamicObjectList[iDynamicObjectIndex]->m_cMapIndex]->SetDynamicObject(0, 0, m_pDynamicObjectList[iDynamicObjectIndex]->m_sX, m_pDynamicObjectList[iDynamicObjectIndex]->m_sY, dwTime);
		if (m_pDynamicObjectList[iDynamicObjectIndex] == 0) {
			for (ix = dX - 2; ix <= dX + 2; ix++)
				for (iy = dY - 2; iy <= dY + 2; iy++) {
					pTile = (CTile *) (m_pMapList[iMapIndex]->m_pTile + ix + iy * m_pMapList[iMapIndex]->m_sSizeY);
					pTile->m_sOwner = 0;
				}
		}
	}
}

void CGame::_CreateHeldenianGUID(uint32_t dwHeldenianGUID, int iWinnerSide) {
	char * cp, cTxt[256], cFn[256], cTemp[1024];
	FILE * pFile;
	_mkdir("GameData");
	std::memset(cFn, 0, sizeof(cFn));
	strcat(cFn, "GameData");
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "HeldenianGUID.Txt");
	pFile = fopen(cFn, "wt");
	if (pFile == 0) {
		wsprintf(cTxt, "(!) Cannot create HeldenianGUID(%d) file", dwHeldenianGUID);
		PutLogList(cTxt);
	} else {
		std::memset(cTemp, 0, sizeof(cTemp));
		std::memset(cTxt, 0, sizeof(cTxt));
		wsprintf(cTxt, "HeldenianGUID = %d", dwHeldenianGUID);
		strcat(cTemp, cTxt);
		std::memset(cTxt, 0, sizeof(cTxt));
		wsprintf(cTxt, "winner-side = %d\n", iWinnerSide);
		strcat(cTemp, cTxt);
		cp = (char *) cTemp;
		fwrite(cp, strlen(cp), 1, pFile);
		wsprintf(cTxt, "(O) HeldenianGUID(%d) file created", dwHeldenianGUID);
		PutLogList(cTxt);
	}
	if (pFile != 0) fclose(pFile);
}

/*********************************************************************************************************************
 **  bool CGame::bCheckHeldenianMap(int sAttackerH, int iMapIndex, char cType)										**
 **  description			:: checks if the player is in the specified map												**
 **  last updated		:: November 22, 2004; 6:19 PM; Hypnotoad													**
 **	return value		:: bool																						**
 **  commentary			::	-	translated from scratch using IDA Pro												**
 **						::	-	changed pTile->m_cOwner to m_iOccupyStatus											**
 **						::	-	added check to prevent access violation if pTile == 0							**
 **						::	-	removed 4 return(s) after "iRet = 1;" and placed at end								**
 *********************************************************************************************************************/
bool CGame::bCheckHeldenianMap(int sAttackerH, int iMapIndex, char cType) {
	short tX;
	short tY;
	int iRet;
	CTile * pTile;
	iRet = 0;
	if (m_pClientList[sAttackerH] == 0) return 0;
	if ((m_bIsHeldenianMode == 1) || (m_cHeldenianModeType == 1)) {
		if (cType == DEF_OWNERTYPE_PLAYER) {
			if ((m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex] != 0) && (m_pClientList[sAttackerH]->m_cSide > 0)) {
				tX = m_pClientList[sAttackerH]->m_sX;
				tY = m_pClientList[sAttackerH]->m_sY;
				if ((tX < 0) || (tX >= m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_sSizeX) ||
						  (tY < 0) || (tY >= m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_sSizeY)) return 0;
				pTile = (CTile *) (m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_pTile + tX + tY * m_pMapList[m_pClientList[sAttackerH]->m_cMapIndex]->m_sSizeY);
				if (pTile == 0) return 0;
				if (pTile->m_iOccupyStatus != 0) {
					if (pTile->m_iOccupyStatus < 0) {
						if (m_pClientList[sAttackerH]->m_cSide == 1) {
							iRet = 1;
						}
					} else if (pTile->m_iOccupyStatus > 0) {
						if (m_pClientList[sAttackerH]->m_cSide == 2) {
							iRet = 1;
						}
					}
				}
			}
		} else if (cType == DEF_OWNERTYPE_NPC) {
			if ((m_pMapList[m_pNpcList[sAttackerH]->m_cMapIndex] != 0) && (iMapIndex != -1) && (m_pNpcList[sAttackerH]->m_cSide > 0)) {
				tX = m_pNpcList[sAttackerH]->m_sX;
				tY = m_pNpcList[sAttackerH]->m_sY;
				pTile = (CTile *) (m_pMapList[m_pNpcList[sAttackerH]->m_cMapIndex]->m_pTile + tX + tY * m_pMapList[m_pNpcList[sAttackerH]->m_cMapIndex]->m_sSizeY);
				if (pTile == 0) return 0;
				if (pTile->m_iOccupyStatus != 0) {
					if (pTile->m_iOccupyStatus < 0) {
						if (m_pNpcList[sAttackerH]->m_cSide == 1) {
							iRet = 1;
						}
					} else if (pTile->m_iOccupyStatus > 0) {
						if (m_pNpcList[sAttackerH]->m_cSide == 2) {
							iRet = 1;
						}
					}
				}
			}
		}
	}
	return iRet;
}

void CGame::RequestHeldenianTeleport(int iClientH, char * pData, uint32_t /*dwMsgSize*/) {
	char cTmpName[21], * cp, cData[512], cMapName[11];
	int iRet;
	int iWhyReturn;
	int iProcessed;
	int tX;
	int tY;
	int cLoc, * ip;
	uint32_t *dwp;
	iProcessed = 1;
	if (m_pClientList[iClientH] == 0) return;
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, cp);
	if (strcmp(cTmpName, "Gail") == 0) {
		std::memset(cData, 0, sizeof(cData));
		dwp = (uint32_t *) (cData);
		*dwp = MSGID_REQUEST_GAILTELEPORT;
		uint16_t *wResult = (uint16_t*) (cData+DEF_INDEX2_MSGTYPE);
		*wResult = DEF_MSGTYPE_CONFIRM;
		cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
		if ((m_bIsHeldenianMode == 1) &&
				  (m_pClientList[iClientH]->m_bIsPlayerCivil != true) &&
				  ((m_pClientList[iClientH]->m_cSide == 2 || (m_pClientList[iClientH]->m_cSide == 1)))) {
			if (m_cHeldenianModeType == 1) {
				std::memset(cMapName, 0, sizeof(cMapName));
				memcpy(cMapName, "BtField", 10);
				if (m_pClientList[iClientH]->m_cSide == 1) {
					tX = 68;
					tY = 225;
					cLoc = 1;
				} else if (m_pClientList[iClientH]->m_cSide == 2) {
					tX = 202;
					tY = 70;
					cLoc = 2;
				}
			} else if (m_cHeldenianModeType == 2) {
				std::memset(cMapName, 0, sizeof(cMapName));
				memcpy(cMapName, "HRampart", 10);
				if (m_pClientList[iClientH]->m_cSide == m_sLastHeldenianWinner) {
					tX = 81;
					tY = 42;
					cLoc = 3;
				} else {
					tX = 156;
					tY = 153;
					cLoc = 4;
				}
			}
			*wResult = DEF_MSGTYPE_CONFIRM;
			iProcessed = 1;
			iWhyReturn = 0;
			goto SENDPLAYER;
		}
		*wResult = DEF_MSGTYPE_REJECT;
		iProcessed = 0;
		iWhyReturn = 0;
	}
SENDPLAYER:
	;
	ip = (int *) cp;
	*ip = iProcessed;
	cp += 4;
	ip = (int *) cp;
	*ip = cLoc;
	cp += 4;
	memcpy((char *) cp, cMapName, 10);
	cp += 10;
	ip = (int *) cp;
	*ip = tX;
	cp += 4;
	ip = (int *) cp;
	*ip = tY;
	cp += 4;
	ip = (int *) cp;
	*ip = iWhyReturn;
	cp += 4;
	iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 36);
	switch (iRet) {
		case DEF_XSOCKEVENT_QUENEFULL:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_CRITICALERROR:
		case DEF_XSOCKEVENT_SOCKETCLOSED:
			DeleteClient(iClientH, true, true);
			break;
	}
}

void CGame::RequestNpcSpeakTeleport(int iClientH, char * pData, uint32_t /*dwMsgSize*/) {
	char cMapName[11], *cp;
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	//char cV1 = (char) *cp;
	cp += 4;
	std::memset(cMapName, 0, sizeof(cMapName));
	switch (iDice(1, 2)) {
		case 1:
			switch (m_pClientList[iClientH]->m_cSide) {
				case 0: RequestTeleportHandler(iClientH, "2   ", "BtField", 68, 225);
					break;
				case 1: RequestTeleportHandler(iClientH, "2   ", "BtField", 68, 225);
					break;
				case 2: RequestTeleportHandler(iClientH, "2   ", "BtField", 202, 70);
					break;
			}
			break;
	}
}

void CGame::HeldenianWarStarter() {
	SYSTEMTIME SysTime;
	int i;
	GetLocalTime(&SysTime);
	for (i = 0; i < DEF_MAXSCHEDULE; i++)
		if ((m_bIsHeldenianScheduleLoaded == false) &&
				  (m_bIsHeldenianSchedule == false) &&
				  (m_stHeldenianSchedule[i].iDay == SysTime.wDayOfWeek) &&
				  (m_stHeldenianSchedule[i].EndiHour == SysTime.wHour) &&
				  (m_stHeldenianSchedule[i].EndiMinute == SysTime.wMinute) &&
				  (m_bIsApocalypseMode != true) &&
				  (m_bIsCrusadeMode != true)) {
			m_bIsHeldenianSchedule = true;
			wsprintf(G_cTxt, "Heldenian Start : time(%d %d:%d), index(%d)", m_stHeldenianSchedule[i].iDay, m_stHeldenianSchedule[i].EndiHour, m_stHeldenianSchedule[i].EndiMinute, i);
			PutLogFileList(G_cTxt);
			GlobalStartHeldenianMode();
		}
}

void CGame::HeldenianWarEnder() {
	SYSTEMTIME SysTime;
	int i;
	GetLocalTime(&SysTime);
	for (i = 0; i < DEF_MAXSCHEDULE; i++)
		if ((m_bIsHeldenianScheduleLoaded == true) &&
				  (m_bIsHeldenianSchedule == true) &&
				  (m_stHeldenianSchedule[i].iDay != SysTime.wDayOfWeek) &&
				  (m_stHeldenianSchedule[i].EndiHour != SysTime.wHour) &&
				  (m_stHeldenianSchedule[i].EndiMinute != SysTime.wMinute)) {
			m_bIsHeldenianSchedule = false;
			wsprintf(G_cTxt, "Heldenian End : time(%d %d:%d), index(%d)", SysTime.wDayOfWeek, SysTime.wHour, SysTime.wMinute, i);
			PutLogFileList(G_cTxt);
			if (m_cHeldenianModeType == 2) {
				m_cHeldenianVictoryType = m_sLastHeldenianWinner;
			}
			GlobalEndHeldenianMode();
		}
}

void CGame::GlobalStartHeldenianMode() {
	uint32_t dwTime = timeGetTime();
	LocalStartHeldenianMode(m_cHeldenianModeType, m_sLastHeldenianWinner, dwTime);
}

/*********************************************************************************************************************
 **  void CGame::LocalStartHeldenianMode(short sV1, short sV2, uint32_t dwHeldenianGUID)								**
 **  description			:: localy performs all required tasks upon recieving heldenian initiate message				**
 **  last updated		:: December 10, 2004; 12:02 PM; Hypnotoad													**
 **	return value		:: void																						**
 **  commentary			::	-	translated from scratch using official 3.51 chinese hgserver						**
 *********************************************************************************************************************/
void CGame::LocalStartHeldenianMode(short sV1, short sV2, uint32_t dwHeldenianGUID) {
	int i;
	int x;
	int z;
	int iNamingValue;
	char cName[11], cTmp[21], cNpcWaypointIndex[10], cSide, cOwnerType;
	short sOwnerH;
	bool bRet;
	int dX;
	int dY;
	if (m_bIsHeldenianMode == true) return;
	if ((m_cHeldenianModeType == -1) || (m_cHeldenianModeType != sV1)) m_cHeldenianModeType = sV1;
	if ((m_sLastHeldenianWinner != -1) && (m_sLastHeldenianWinner == sV2)) {
		wsprintf(G_cTxt, "Heldenian Mode : %d , Heldenian Last Winner : %d", m_cHeldenianModeType, m_sLastHeldenianWinner);
		PutLogFileList(G_cTxt);
	}
	if (dwHeldenianGUID != 0) {
		_CreateHeldenianGUID(dwHeldenianGUID, 0);
		m_dwHeldenianGUID = dwHeldenianGUID;
	}
	m_iHeldenianAresdenLeftTower = 0;
	m_iHeldenianElvineLeftTower = 0;
	m_iHeldenianAresdenDead = 0;
	m_iHeldenianElvineDead = 0;
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if (m_pClientList[i] != 0) {
			if (m_pClientList[i]->m_bIsInitComplete != true) break;
			m_pClientList[i]->m_cWarType = 2;
			SendNotifyMsg(0, i, DEF_NOTIFY_HELDENIANTELEPORT, 0, 0, 0, 0);
			m_pClientList[i]->m_iWarContribution = 0;
			m_pClientList[i]->m_iConstructionPoint = (m_pClientList[i]->m_iCharisma * 300);
			if (m_pClientList[i]->m_iConstructionPoint > 12000) m_pClientList[i]->m_iConstructionPoint = 12000;
			SendNotifyMsg(0, i, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[i]->m_iConstructionPoint, m_pClientList[i]->m_iWarContribution, 1, 0);
		}
	}
	for (x = 0; x < DEF_MAXMAPS; x++) {
		if (m_pMapList[x] != 0) {
			if (m_pMapList[x]->m_bIsHeldenianMap == true) {
				for (i = 0; i < DEF_MAXCLIENTS; i++) {
					if ((m_pClientList[i] != 0) &&
							  (m_pClientList[i]->m_bIsInitComplete == true) &&
							  (m_pClientList[i]->m_iAdminUserLevel < 1) &&
							  (x == m_pClientList[i]->m_cMapIndex)) {
						SendNotifyMsg(0, i, DEF_NOTIFY_0BE8, 0, 0, 0, 0);
						RequestTeleportHandler(i, "1   ", 0, -1, -1);
					}
				}
				for (i = 0; i < DEF_MAXNPCS; i++) {
					if ((m_pNpcList[i] != 0) &&
							  (m_pNpcList[i]->m_bIsKilled == false) &&
							  (x == m_pNpcList[i]->m_cMapIndex)) {
						m_pNpcList[i]->m_bIsSummoned = true;
						RemoveEventNpc(i);
					}
				}
				if (m_cHeldenianModeType == 1) {
					if (strcmp(m_pMapList[x]->m_cName, "BtField") == 0) {
						for (i = 0; i < MAX_HELDENIANTOWER; i++) {
							iNamingValue = m_pMapList[x]->iGetEmptyNamingValue();
							if ((m_pMapList[x]->m_stHeldenianTower[i].sTypeID < NpcType::xb) || (int(m_pMapList[x]->m_stHeldenianTower[i].sTypeID) > DEF_MAXNPCTYPES)) break;
							if (iNamingValue != -1) {
								dX = m_pMapList[x]->m_stHeldenianTower[i].dX;
								dY = m_pMapList[x]->m_stHeldenianTower[i].dY;
								cSide = m_pMapList[x]->m_stHeldenianTower[i].cSide;
								for (z = 0; z < DEF_MAXNPCTYPES; z++) {
									if (m_pNpcConfigList[z] == 0) break;
									if (m_pNpcConfigList[z]->m_sType == m_pMapList[x]->m_stHeldenianTower[i].sTypeID) {
										std::memset(cTmp, 0, sizeof(cTmp));
										strcpy(cTmp, m_pNpcConfigList[z]->m_cNpcName);
									}
								}
								std::memset(cName, 0, sizeof(cName));
								wsprintf(cName, "XX%d", iNamingValue);
								cName[0] = 95;
								cName[1] = i + 65;
								bRet = bCreateNewNpc(cTmp, cName, m_pMapList[x]->m_cName, (rand() % 3), 0, NpcMoveType::random, &dX, &dY, cNpcWaypointIndex, 0, 0, cSide, false, false, false, true, false);
								if (bRet == false) {
									m_pMapList[x]->SetNamingValueEmpty(iNamingValue);
								} else {
									m_pMapList[x]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
									if ((m_pNpcList[sOwnerH] != 0) && (sOwnerH > 0) && (sOwnerH < DEF_MAXNPCS)) {
										m_pNpcList[sOwnerH]->m_iBuildCount = 0;
									}
									if (cSide == 1) m_iHeldenianAresdenLeftTower += 1;
									if (cSide == 2) m_iHeldenianElvineLeftTower += 1;
								}
							}
						}
						wsprintf(G_cTxt, "HeldenianAresdenLeftTower : %d , HeldenianElvineLeftTower : %d", m_iHeldenianAresdenLeftTower, m_iHeldenianElvineLeftTower);
						PutLogFileList(G_cTxt);
						UpdateHeldenianStatus();
					}
				} else if (m_cHeldenianModeType == 2) {
					if (strcmp(m_pMapList[x]->m_cName, "HRampart") == 0) {
						for (i = 0; i < DEF_MAXHELDENIANDOOR; i++) {
							iNamingValue = m_pMapList[x]->iGetEmptyNamingValue();
							if (iNamingValue != -1) {
								dX = m_pMapList[x]->m_stHeldenianGateDoor[i].dX;
								dY = m_pMapList[x]->m_stHeldenianGateDoor[i].dY;
								cSide = m_sLastHeldenianWinner;
								for (z = 0; z < DEF_MAXNPCTYPES; z++) {
									if (m_pNpcConfigList[z] == 0) break;
									if (m_pNpcConfigList[z]->m_sType == NpcType::gate) {
										std::memset(cTmp, 0, sizeof(cTmp));
										strcpy(cTmp, m_pNpcConfigList[z]->m_cNpcName);
									}
								}
								std::memset(cName, 0, sizeof(cName));
								wsprintf(cName, "XX%d", iNamingValue);
								cName[0] = 95;
								cName[1] = i + 65;
								bRet = bCreateNewNpc(cTmp, cName, m_pMapList[x]->m_cName, (rand() % 3), 0, NpcMoveType::random, &dX, &dY, cNpcWaypointIndex, 0, 0, cSide, false, false, false, true, false);
								if (bRet == false) {
									m_pMapList[x]->SetNamingValueEmpty(iNamingValue);
								} else {
									//m_pMapList[x]->GetOwner(&sOwnerH, &cOwnerType, dX, dY);
									if ((m_pNpcList[bRet] != 0) && (bRet > 0) && (bRet < DEF_MAXNPCS)) {
										m_pNpcList[bRet]->m_iBuildCount = 0;
										m_pNpcList[bRet]->m_cDir = m_pMapList[x]->m_stHeldenianGateDoor[i].cDir;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	m_bHeldenianInitiated = true;
	m_bIsHeldenianMode = true;
	wsprintf(G_cTxt, "(!) HELDENIAN Start.");
	PutLogFileList(G_cTxt);
	m_dwHeldenianStartTime = time(0);
}

void CGame::ManualStartHeldenianMode(int iClientH, char *pData, uint32_t dwMsgSize) {
	char cHeldenianType;
	char cBuff[256], * token, seps[] = "= \t\n";
	SYSTEMTIME SysTime;
	CStrTok * pStrTok;
	int iV1;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < 3)
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
	if (m_bIsHeldenianMode == true) return;
	if (m_bIsApocalypseMode == true) return;
	if (m_bIsCrusadeMode == true) return;
	if ((dwMsgSize != 0) && (pData != 0)) {
		m_bHeldenianRunning = true;
		GetLocalTime(&SysTime);
		std::memset(cBuff, 0, sizeof(cBuff));
		memcpy(cBuff, pData, dwMsgSize);
		pStrTok = new CStrTok(cBuff, seps);
		token = pStrTok->pGet();
		token = pStrTok->pGet();
		if (token != 0) {
			iV1 = atoi(token);
			iV1 += (SysTime.wHour * 24 + SysTime.wMinute * 60);
			m_dwHeldenianStartHour = (iV1 / 24);
			m_dwHeldenianStartMinute = (iV1 / 60);
		}
		token = pStrTok->pGet();
		if (token != 0) {
			cHeldenianType = atoi(token);
			if ((cHeldenianType == 1) || (cHeldenianType == 2)) {
				m_cHeldenianModeType = cHeldenianType;
			}
		}
		delete pStrTok;
	}
	GlobalStartHeldenianMode();
	wsprintf(G_cTxt, "GM Order(%s): begin Heldenian", m_pClientList[iClientH]->m_cCharName);
	PutLogFileList(G_cTxt);
	bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, G_cTxt);
}

void CGame::ManualEndHeldenianMode(int iClientH, char */*pData*/, uint32_t /*dwMsgSize*/) {
	if (m_pClientList[iClientH]->m_iAdminUserLevel < 3) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
	}
	if (m_bIsHeldenianMode == true) {
		GlobalEndHeldenianMode();
		m_bHeldenianRunning = false;
		wsprintf(G_cTxt, "GM Order(%s): end Heldenian", m_pClientList[iClientH]->m_cCharName);
		bSendMsgToLS(MSGID_GAMEMASTERLOG, iClientH, false, G_cTxt);
	}
}

void CGame::GlobalStartApocalypseMode() {
	uint32_t dwApocalypseGUID = timeGetTime();
	LocalStartApocalypseMode(dwApocalypseGUID);
}

void CGame::AutomatedHeldenianTimer() {
	uint32_t dwTime;
	int x;
	int i;
	dwTime = time(0);
	if ((dwTime == uint32_t(m_dwHeldenianStartTime - 300)) && (m_bHeldenianInitiated != true) && (m_bIsHeldenianMode != true)) {
		wsprintf(G_cTxt, "Heldenian Fight Start");
		PutLogFileList(G_cTxt);
		m_bIsHeldenianMode = false;
		for (x = 0; x < DEF_MAXMAPS; x++) {
			if (m_pMapList[x] == 0) return;
			if (m_pMapList[x]->m_bIsHeldenianMap == true) return;
			for (i = 0; i < DEF_MAXCLIENTS; i++) {
				if (m_pClientList[i] != 0) {
					if (m_pClientList[i]->m_bIsInitComplete != true) return;
					if (m_pClientList[i]->m_cMapIndex == x) {
						SendNotifyMsg(0, i, DEF_NOTIFY_HELDENIANSTART, 0, 0, 0, 0);
					}
				}
			}
		}
	}
	if ((dwTime > uint32_t(m_dwHeldenianFinishTime - 180)) && (m_bHeldenianInitiated == true) && (m_bIsHeldenianMode != false)) {
		wsprintf(G_cTxt, "Heldenian Fight End");
		PutLogFileList(G_cTxt);
		m_bHeldenianInitiated = false;
		for (x = 0; x < DEF_MAXMAPS; x++) {
			if (m_pMapList[x] == 0) return;
			if (m_pMapList[x]->m_bIsHeldenianMap == true) return;
			for (i = 0; i < DEF_MAXCLIENTS; i++) {
				if (m_pClientList[i] != 0) {
					if (m_pClientList[i]->m_bIsInitComplete != true) return;
					if (m_pClientList[i]->m_cMapIndex == x) {
						SendNotifyMsg(0, i, DEF_NOTIFY_0BE8, 0, 0, 0, 0);
						RequestTeleportHandler(i, "1   ", 0, -1, -1);
					}
				}
			}
		}
	}
}

void CGame::AdminOrder_GetFightzoneTicket(int iClientH) {
	int iReserveTime;
	int iFightzoneTN;
	int iFightzoneN;
	char cTemp[21];
	SYSTEMTIME SysTime;
	if (m_pClientList[iClientH] == 0) return;
	if (memcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "fightzone", 9) == 0) {
		iReserveTime = m_pClientList[iClientH]->m_iReserveTime;
		GetLocalTime(&SysTime);
		m_pClientList[iClientH]->m_iReserveTime = SysTime.wMonth * 10000 + SysTime.wDay * 100 + (SysTime.wHour + 3);
		std::memset(cTemp, 0, sizeof(cTemp));
		strcpy(cTemp, (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName + 9));
		iFightzoneN = m_pClientList[iClientH]->m_iFightzoneNumber;
		iFightzoneTN = m_pClientList[iClientH]->m_iFightZoneTicketNumber;
		m_pClientList[iClientH]->m_iFightZoneTicketNumber = 10;
		m_pClientList[iClientH]->m_iFightzoneNumber = atoi(cTemp);
		GetFightzoneTicketHandler(iClientH);
		GetFightzoneTicketHandler(iClientH);
		GetFightzoneTicketHandler(iClientH);
		m_pClientList[iClientH]->m_iFightzoneNumber = iFightzoneN;
		m_pClientList[iClientH]->m_iFightZoneTicketNumber = iFightzoneTN;
		m_pClientList[iClientH]->m_iReserveTime = iReserveTime;
	} else {
		iReserveTime = m_pClientList[iClientH]->m_iReserveTime;
		GetLocalTime(&SysTime);
		m_pClientList[iClientH]->m_iReserveTime = SysTime.wMonth * 10000 + SysTime.wDay * 100 + (SysTime.wHour + 2);
		std::memset(cTemp, 0, sizeof(cTemp));
		strcpy(cTemp, (m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName + 9));
		iFightzoneN = m_pClientList[iClientH]->m_iFightzoneNumber;
		iFightzoneTN = m_pClientList[iClientH]->m_iFightZoneTicketNumber;
		m_pClientList[iClientH]->m_iFightZoneTicketNumber = 10;
		m_pClientList[iClientH]->m_iFightzoneNumber = 1;
		GetFightzoneTicketHandler(iClientH);
		GetFightzoneTicketHandler(iClientH);
		GetFightzoneTicketHandler(iClientH);
		m_pClientList[iClientH]->m_iFightzoneNumber = iFightzoneN;
		m_pClientList[iClientH]->m_iFightZoneTicketNumber = iFightzoneTN;
		m_pClientList[iClientH]->m_iReserveTime = iReserveTime;
	}
}

void CGame::CheckCrusadeResultCalculation(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_cVar == 1) return;
	if ((m_bIsCrusadeMode == false) && (m_pClientList[iClientH]->m_dwCrusadeGUID != 0)) {
		if (m_pClientList[iClientH]->m_iWarContribution > DEF_MAXWARCONTRIBUTION) m_pClientList[iClientH]->m_iWarContribution = DEF_MAXWARCONTRIBUTION;
		if (m_pClientList[iClientH]->m_dwCrusadeGUID == m_dwCrusadeGUID) {
			if (m_iCrusadeWinnerSide == 0) {
				m_pClientList[iClientH]->m_iExpStock += (m_pClientList[iClientH]->m_iWarContribution / 6);
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, 0, m_pClientList[iClientH]->m_iWarContribution, 0);
				_bCrusadeLog(DEF_CRUSADELOG_GETEXP, iClientH, (m_pClientList[iClientH]->m_iWarContribution / 6), 0);
			} else {
				if (m_iCrusadeWinnerSide == m_pClientList[iClientH]->m_cSide) {
					if (m_pClientList[iClientH]->m_iLevel <= 80) {
						m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel * 100;
					} else if (m_pClientList[iClientH]->m_iLevel <= 100) {
						m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel * 40;
					} else m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel;
					m_pClientList[iClientH]->m_iExpStock += m_pClientList[iClientH]->m_iWarContribution;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, 0, m_pClientList[iClientH]->m_iWarContribution, 0);
					_bCrusadeLog(DEF_CRUSADELOG_GETEXP, iClientH, m_pClientList[iClientH]->m_iWarContribution, 0);
				} else if (m_iCrusadeWinnerSide != m_pClientList[iClientH]->m_cSide) {
					if (m_pClientList[iClientH]->m_iLevel <= 80) {
						m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel * 100;
					} else if (m_pClientList[iClientH]->m_iLevel <= 100) {
						m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel * 40;
					} else m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel;
					m_pClientList[iClientH]->m_iExpStock += m_pClientList[iClientH]->m_iWarContribution / 10;
					SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, 0, -1 * m_pClientList[iClientH]->m_iWarContribution, 0);
					_bCrusadeLog(DEF_CRUSADELOG_GETEXP, iClientH, (m_pClientList[iClientH]->m_iWarContribution / 10), 0);
				}
			}
		} else {
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRUSADE, (uint32_t) m_bIsCrusadeMode, 0, 0, 0, -1);
		}
		m_pClientList[iClientH]->m_iCrusadeDuty = 0;
		m_pClientList[iClientH]->m_iWarContribution = 0;
		m_pClientList[iClientH]->m_dwCrusadeGUID = 0;
		m_pClientList[iClientH]->m_dwSpeedHackCheckTime = timeGetTime();
		m_pClientList[iClientH]->m_iSpeedHackCheckExp = m_pClientList[iClientH]->m_iExp;
	}
}

void CGame::CheckHeldenianResultCalculation(int iClientH) {
	double dV1;
	double dV2;
	double dV3;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_cWarType != 2) return;
	if ((m_cHeldenianModeType == 0) || (m_pClientList[iClientH]->m_dwCrusadeGUID == 0)) return;
	if (m_pClientList[iClientH]->m_iWarContribution > DEF_MAXWARCONTRIBUTION) m_pClientList[iClientH]->m_iWarContribution = DEF_MAXWARCONTRIBUTION;
	if (m_pClientList[iClientH]->m_dwCrusadeGUID == m_dwHeldenianGUID) {
		if (m_sLastHeldenianWinner == 0) {
			m_pClientList[iClientH]->m_iExpStock += m_pClientList[iClientH]->m_iWarContribution / 6;
		} else if (m_pClientList[iClientH]->m_cSide == m_sLastHeldenianWinner) {
			if (m_pClientList[iClientH]->m_iLevel <= 80) {
				m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel * 200;
			} else if (m_pClientList[iClientH]->m_iLevel > 100) {
				m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel * 100;
			} else {
				m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel * 30;
			}
			dV2 = (double) m_pClientList[iClientH]->m_iExpStock;
			dV3 = (double) m_pClientList[iClientH]->m_iWarContribution * 1.2;
			dV1 = dV2 + dV3;
			m_pClientList[iClientH]->m_iExpStock += dV1;
		} else if (m_pClientList[iClientH]->m_cSide != m_sLastHeldenianWinner) {
			if (m_pClientList[iClientH]->m_iLevel <= 80) {
				m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel * 200;
			} else if (m_pClientList[iClientH]->m_iLevel > 100) {
				m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel * 100;
			} else {
				m_pClientList[iClientH]->m_iWarContribution += m_pClientList[iClientH]->m_iLevel * 30;
			}
			m_pClientList[iClientH]->m_iExpStock += m_pClientList[iClientH]->m_iWarContribution / 5;
		}
		m_pClientList[iClientH]->m_iWarContribution = 0;
		m_pClientList[iClientH]->m_dwCrusadeGUID = 0;
		m_pClientList[iClientH]->m_dwSpeedHackCheckTime = timeGetTime();
		m_pClientList[iClientH]->m_iSpeedHackCheckExp = m_pClientList[iClientH]->m_iExp;
	}
}

void CGame::NotifyStartHeldenianFightMode() {
	int i;
	int x;
	if ((m_bIsHeldenianMode != true) && (m_bHeldenianInitiated != true) && (m_bIsHeldenianReady != true)) return;
	PutLogList("Heldenian Fight Start");
	m_bHeldenianInitiated = false;
	for (i = 0; i < DEF_MAXMAPS; i++) {
		if (m_pMapList[i] != 0) {
			if (m_pMapList[i]->m_bIsHeldenianMap == true) {
				for (x = 0; x < DEF_MAXCLIENTS; x++) {
					if (m_pClientList[x] != 0) {
						if (m_pClientList[x]->m_bIsInitComplete == true) {
							if (m_pClientList[x]->m_cMapIndex == i) {
								SendNotifyMsg(0, x, DEF_NOTIFY_HELDENIANSTART, 0, 0, 0, 0);
							}
						}
					}
				}
			}
		}
	}
}

bool CGame::UpdateHeldenianStatus() {
	int i;
	bool bFlag;
	int iShortCutIndex;
	int iClientH;
	if (m_bIsHeldenianMode != true) return false;
	for (i = 0; i < DEF_MAXMAPS; i++)
		if (m_pMapList[i] != 0) {
			if (m_pMapList[i]->m_bIsHeldenianMap == true) {
				bFlag = true;
				iShortCutIndex = 0;
			}
			while (bFlag == true) {
				iClientH = m_iClientShortCut[iShortCutIndex];
				iShortCutIndex++;
				if (iClientH == 0) {
					bFlag = 0;
				} else {
					if ((m_pClientList[iClientH] != 0) && (m_pClientList[iClientH]->m_bIsInitComplete == true) && (strcmp(m_pMapList[m_pClientList[iClientH]->m_cMapIndex]->m_cName, "BtField") == 0)) {
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_HELDENIANCOUNT, m_iHeldenianAresdenLeftTower, m_iHeldenianElvineLeftTower, m_iHeldenianAresdenDead, 0, m_iHeldenianElvineDead, 0);
					}
				}
			}
		}
	return true;
}

void CGame::AutomaticHeldenianEnd() {
	SYSTEMTIME SysTime;
	GetLocalTime(&SysTime);
	if ((m_dwHeldenianStartHour == SysTime.wHour) &&
			  (m_dwHeldenianStartMinute == SysTime.wMinute)) {
		GlobalEndHeldenianMode();
		m_bHeldenianRunning = false;
	}
}

void CGame::HeldenianWinner() {
	int x;
	int i;
	for (x = 0; x < DEF_MAXMAPS; x++) {
		if (m_pMapList[x] != 0) {
			for (i = 0; i < DEF_MAXCLIENTS; i++) {
				if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == 1) && (m_pClientList[i]->m_cMapIndex = x)) {
					SendNotifyMsg(0, i, DEF_NOTIFY_0BEB, m_sLastHeldenianWinner, 0, 0, 0);
				}
			}
		}
	}
}

void CGame::RemoveEventNpc(int iNpcH) {
	if (m_pNpcList[iNpcH] == 0) return;
	if (m_pNpcList[iNpcH]->m_bIsKilled == true) return;
	m_pNpcList[iNpcH]->m_bIsKilled = true;
	m_pNpcList[iNpcH]->m_iHP = 0;
	m_pNpcList[iNpcH]->m_iLastDamage = 0;
	m_pNpcList[iNpcH]->m_dwRegenTime = 0;
	m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->m_iTotalAliveObject--;
	ReleaseFollowMode(iNpcH, DEF_OWNERTYPE_NPC);
	m_pNpcList[iNpcH]->m_iTargetIndex = 0;
	m_pNpcList[iNpcH]->m_cTargetType = 0;
	SendEventToNearClient_TypeA(iNpcH, DEF_OWNERTYPE_NPC, MSGID_EVENT_MOTION, DEF_OBJECTDYING, 0, 1, 0);
	if (m_pNpcList[iNpcH]->m_sAreaSize == 0) {
		m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->ClearOwner(10, iNpcH, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY);
	} else {
		m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->ClearBigOwner(iNpcH, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY, m_pNpcList[iNpcH]->m_sAreaSize);
	}
	m_pMapList[m_pNpcList[iNpcH]->m_cMapIndex]->SetDeadOwner(iNpcH, DEF_OWNERTYPE_NPC, m_pNpcList[iNpcH]->m_sX, m_pNpcList[iNpcH]->m_sY);
	m_pNpcList[iNpcH]->m_cBehavior = NpcBehavior::dead;
	m_pNpcList[iNpcH]->m_sBehaviorTurnCount = 0;
	m_pNpcList[iNpcH]->m_dwDeadTime = timeGetTime();
}

void CGame::SendThunder(int iClient, short sX, short sY, short sV3, short sV4) {
	char * cp, cData[100];
	uint32_t * dwp;
	uint16_t * wp;
	short * sp;
	std::memset(cData, 0, sizeof(cData));
	dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
	*dwp = MSGID_EVENT_COMMON;
	wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
	*wp = DEF_COMMONTYPE_MAGIC;
	cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *) cp;
	*sp = sX;
	cp += 2;
	sp = (short *) cp;
	*sp = sY;
	cp += 2;
	sp = (short *) cp;
	*sp = sX;
	cp += 2;
	sp = (short *) cp;
	*sp = sY;
	cp += 2;
	sp = (short *) cp;
	*sp = sV3;
	cp += 2;
	sp = (short *) cp;
	*sp = sV4;
	cp += 2;
	m_pClientList[iClient]->m_pXSock->iSendMsg(cData, 18);
}

void CGame::DoAbaddonThunderDamageHandler(char cMapIndex) {
	int iResult;
	int i;
	//if (m_bIsApocalypseMode != true) return;
	if (iDice(1, 15) != 13) return;
	uint32_t dwTime = timeGetTime();
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if (m_pClientList[i] != 0) { //if (m_pClientList[i]->m_iAdminUserLevel > 0) return;
			if ((memcmp(m_pClientList[i]->m_cMapName, "abaddon", 7) == 0)
					  || (m_pClientList[i]->m_cMapIndex == cMapIndex)) {
				switch (iDice(1, 4)) {
					case 1:
						SendThunder(i, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY, 203, m_pClientList[i]->m_sType);
						SendThunder(i, m_pClientList[i]->m_sX - iDice(1, 7), m_pClientList[i]->m_sY + iDice(1, 5), 161, m_pClientList[i]->m_sType);
						break;
					case 2:
						SendThunder(i, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY, 202, m_pClientList[i]->m_sType);
						SendThunder(i, m_pClientList[i]->m_sX + iDice(1, 7), m_pClientList[i]->m_sY - iDice(1, 5), 161, m_pClientList[i]->m_sType);
						break;
					case 3:
						SendThunder(i, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY, 201, m_pClientList[i]->m_sType);
						SendThunder(i, m_pClientList[i]->m_sX + iDice(1, 7), m_pClientList[i]->m_sY + 5 - iDice(1, 9), 161, m_pClientList[i]->m_sType);
						break;
					case 4:
						SendThunder(i, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY, 200, m_pClientList[i]->m_sType);
						SendThunder(i, m_pClientList[i]->m_sX + 5 - iDice(1, 9), m_pClientList[i]->m_sY + 7 - iDice(1, 4), 161, m_pClientList[i]->m_sType);
						break;
				}
				if (m_pClientList[i]->m_iAdminUserLevel > 0) continue;
				iResult = iDice(1, 20) + 100;
				if ((m_pClientList[i]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] == 2)
						  || (m_pClientList[i]->m_cMagicEffectStatus[DEF_MAGICTYPE_PROTECT] == 5)) {
					iResult /= 2;
				}
				// Not for v3.51: SendNotifyMsg(0, i, DEF_NOTIFY_0BE5, 0, 0, 0, 0);
				m_pClientList[i]->m_iHP -= iResult;
				if (m_pClientList[i]->m_iHP <= 0) {
					ClientKilledHandler(i, 0, 0, iResult);
				} else if (iResult > 0) {
					m_pClientList[i]->m_dwLastDamageTime = dwTime;
					SendNotifyMsg(0, i, DEF_NOTIFY_HP, 0, 0, 0, 0);
					SendEventToNearClient_TypeA(i, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTDAMAGE, iResult, 0, 0);
					if (m_pClientList[i]->m_bSkillUsingStatus[19] != true) {
						m_pMapList[m_pClientList[i]->m_cMapIndex]->ClearOwner(0, i, DEF_OWNERTYPE_PLAYER, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
						m_pMapList[m_pClientList[i]->m_cMapIndex]->SetOwner(i, DEF_OWNERTYPE_PLAYER, m_pClientList[i]->m_sX, m_pClientList[i]->m_sY);
					}
					if (m_pClientList[i]->m_cMagicEffectStatus[DEF_MAGICTYPE_HOLDOBJECT] != 0) {
						SendNotifyMsg(0, i, DEF_NOTIFY_MAGICEFFECTOFF, DEF_MAGICTYPE_HOLDOBJECT, 2, 0, 0);
						bRemoveFromDelayEventList(i, DEF_OWNERTYPE_PLAYER, DEF_MAGICTYPE_HOLDOBJECT);
						m_pClientList[i]->m_cMagicEffectStatus[ DEF_MAGICTYPE_HOLDOBJECT ] = 0;
					}
				}
			}
		}
	}
}

/*********************************************************************************************************************
 **  bool CGame::SetAngelFlag(short sOwnerH, char cOwnerType, int iStatus, iTemp)		Snoopy			**
 ** description	  :: Sets the staus to send or not Angels to every client							**
 *********************************************************************************************************************/
void CGame::SetAngelFlag(short sOwnerH, char cOwnerType, int iStatus, int iTemp) {
	if (cOwnerType != DEF_OWNERTYPE_PLAYER) return;
	if (m_pClientList[sOwnerH] == 0) return;
	switch (iStatus) {
		case 1: // STR Angel
			m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x00001000;
			break;
		case 2: // DEX Angel
			m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x00002000;
			break;
		case 3: // INT Angel
			m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x00004000;
			break;
		case 4: // MAG Angel
			m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | 0x00008000;
			break;
		default:
		case 0: // Remove all Angels
			m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus & 0xFFFF00FF;
			break;
	}
	if (iTemp > 4) {
		int iAngelicStars = (iTemp / 3)*(iTemp / 5);
		m_pClientList[sOwnerH]->m_iStatus = m_pClientList[sOwnerH]->m_iStatus | (iAngelicStars << 8);
	}
	SendEventToNearClient_TypeA(sOwnerH, DEF_OWNERTYPE_PLAYER, MSGID_EVENT_MOTION, DEF_OBJECTNULLACTION, 0, 0, 0);
}

/*********************************************************************************************************************
 **  bool CGame::GetAngelHandler(int iClientH, char * pData, uint32_t dwMsgSize)										**
 ** description	  :: Reversed and coded by Snoopy																	**
 *********************************************************************************************************************/
void CGame::GetAngelHandler(int iClientH, char * pData, uint32_t /*dwMsgSize*/) {
	char *cp, cData[256], cTmpName[21];
	int iAngel;
	CItem * pItem;
	int iRet;
	int iEraseReq;
	int iRequiredMagesty;
	char cItemName[21];
	short * sp;
	uint16_t * wp;
	int * ip;
	uint32_t * dwp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (_iGetItemSpaceLeft(iClientH) == 0) {
		SendItemNotifyMsg(iClientH, DEF_NOTIFY_CANNOTCARRYMOREITEM, 0, 0);
		return;
	}
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, cp);
	cp += 20;
	ip = (int *) cp;
	iAngel = (int) *ip;
	cp += 2;
	wsprintf(G_cTxt, "PC(%s) obtained an Angel (%d).   %s(%d %d)", m_pClientList[iClientH]->m_cCharName, iAngel, m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
	PutLogList(G_cTxt);
	switch (iAngel) {
		case 1:
			wsprintf(cItemName, "AngelicPandent(STR)");
			iRequiredMagesty = 5;
			break;
		case 2:
			wsprintf(cItemName, "AngelicPandent(DEX)");
			iRequiredMagesty = 5;
			break;
		case 3:
			wsprintf(cItemName, "AngelicPandent(INT)");
			iRequiredMagesty = 5;
			break;
		case 4:
			wsprintf(cItemName, "AngelicPandent(MAG)");
			iRequiredMagesty = 5;
			break;
		default:
			PutLogList("Gail asked to create a wrong item!");
			break;
	}
	pItem = 0;
	pItem = new CItem;
	if (pItem == 0) return;
	if ((_bInitItemAttr(pItem, cItemName) == true)) {
		pItem->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
		pItem->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
		pItem->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
		pItem->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
		if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
			std::memset(cData, 0, sizeof(cData));
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_ITEMOBTAINED;
			cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
			*cp = 1;
			cp++;
			memcpy(cp, pItem->m_cName, 20);
			cp += 20;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwCount;
			cp += 4;
			*cp = (char) pItem->m_cItemType;
			cp++;
			*cp = (char) pItem->m_cEquipPos;
			cp++;
			*cp = (char) 0;
			cp++;
			sp = (short *) cp;
			*sp = pItem->m_sLevelLimit;
			cp += 2;
			*cp = pItem->m_cGenderLimit;
			cp++;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wCurLifeSpan;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wWeight;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSprite;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSpriteFrame;
			cp += 2;
			*cp = pItem->m_cItemColor;
			cp++;
			*cp = (char) pItem->m_sItemSpecEffectValue2;
			cp++;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwAttribute;
			cp += 4;
			if (iEraseReq == 1) delete pItem;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					break;
			}
			m_pClientList[iClientH]->m_iGizonItemUpgradeLeft -= iRequiredMagesty;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_GIZONITEMUPGRADELEFT, m_pClientList[iClientH]->m_iGizonItemUpgradeLeft, 0, 0, 0);
		} else {
			m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, pItem);
			SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor);
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					break;
			}
		}
	} else {
		delete pItem;
		pItem = 0;
	}
}

/*********************************************************************************************************************
 **  bool CGame::RequestHeldenianScroll(int iClientH, char * pData, uint32_t dwMsgSize)									**
 ** description	  :: Reversed and coded by Snoopy																	**
 *********************************************************************************************************************/
void CGame::RequestHeldenianScroll(int iClientH, char * pData, uint32_t /*dwMsgSize*/) {
	char *cp, cData[256], cTmpName[21];
	int iScroll;
	CItem * pItem;
	int iRet;
	int iEraseReq;
	int iRequiredConstruction;
	char cItemName[21];
	short * sp;
	uint16_t * wp;
	int * ip;
	uint32_t * dwp;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_bIsInitComplete == false) return;
	if (_iGetItemSpaceLeft(iClientH) == 0) {
		SendItemNotifyMsg(iClientH, DEF_NOTIFY_CANNOTCARRYMOREITEM, 0, 0);
		return;
	}
	cp = (char *) (pData + DEF_INDEX2_MSGTYPE + 2);
	std::memset(cTmpName, 0, sizeof(cTmpName));
	strcpy(cTmpName, cp);
	cp += 20;
	ip = (int *) cp;
	iScroll = (int) *ip;
	cp += 2;
	wsprintf(G_cTxt, "PC(%s) obtained a Scroll (%d).   %s(%d %d)", m_pClientList[iClientH]->m_cCharName, iScroll, m_pClientList[iClientH]->m_cMapName, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY);
	PutLogList(G_cTxt);
	switch (iScroll) {
		case 1:
			wsprintf(cItemName, "SummonScroll(SOR)");
			iRequiredConstruction = 2000;
			break;
		case 2:
			wsprintf(cItemName, "SummonScroll(ATK)");
			iRequiredConstruction = 3000;
			break;
		case 3:
			wsprintf(cItemName, "SummonScroll(ELF)");
			iRequiredConstruction = 1500;
			break;
		case 4:
			wsprintf(cItemName, "SummonScroll(DSK)");
			iRequiredConstruction = 3000;
			break;
		case 5:
			wsprintf(cItemName, "SummonScroll(HBT)");
			iRequiredConstruction = 4000;
			break;
		case 6:
			wsprintf(cItemName, "SummonScroll(BAR)");
			iRequiredConstruction = 3000;
			break;
		default:
			PutLogList("Gail asked to create a wrong item!");
			break;
	}
	pItem = 0;
	pItem = new CItem;
	if (pItem == 0) return;
	if ((_bInitItemAttr(pItem, cItemName) == true)) {
		pItem->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
		pItem->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
		pItem->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
		pItem->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
		if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
			std::memset(cData, 0, sizeof(cData));
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_ITEMOBTAINED;
			cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
			*cp = 1;
			cp++;
			memcpy(cp, pItem->m_cName, 20);
			cp += 20;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwCount;
			cp += 4;
			*cp = (char) pItem->m_cItemType;
			cp++;
			*cp = (char) pItem->m_cEquipPos;
			cp++;
			*cp = (char) 0;
			cp++;
			sp = (short *) cp;
			*sp = pItem->m_sLevelLimit;
			cp += 2;
			*cp = pItem->m_cGenderLimit;
			cp++;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wCurLifeSpan;
			cp += 2;
			wp = (uint16_t *) cp;
			*wp = pItem->m_wWeight;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSprite;
			cp += 2;
			sp = (short *) cp;
			*sp = pItem->m_sSpriteFrame;
			cp += 2;
			*cp = pItem->m_cItemColor;
			cp++;
			*cp = (char) pItem->m_sItemSpecEffectValue2;
			cp++;
			dwp = (uint32_t *) cp;
			*dwp = pItem->m_dwAttribute;
			cp += 4;
			if (iEraseReq == 1) delete pItem;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					break;
			}
			m_pClientList[iClientH]->m_iConstructionPoint -= iRequiredConstruction;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_CONSTRUCTIONPOINT, m_pClientList[iClientH]->m_iConstructionPoint, m_pClientList[iClientH]->m_iWarContribution, 0, 0);
		} else {
			m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, pItem);
			SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex, m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY, pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor);
			dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
			*dwp = MSGID_NOTIFY;
			wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
			*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
			iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
			switch (iRet) {
				case DEF_XSOCKEVENT_QUENEFULL:
				case DEF_XSOCKEVENT_SOCKETERROR:
				case DEF_XSOCKEVENT_CRITICALERROR:
				case DEF_XSOCKEVENT_SOCKETCLOSED:
					DeleteClient(iClientH, true, true);
					break;
			}
		}
	} else {
		delete pItem;
		pItem = 0;
	}
}
// Majestic Code by Diuuude

void CGame::ReadMajesticSettings() {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadMode;
	char cFn[120];
	char seps[] = "= \t\n";
	CStrTok * pStrTok;
	cReadMode = 0;
	strcpy(cFn, "..\\GameConfigs\\MajesticSettings.cfg");
	hFile = CreateFile(cFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFn, "rt");
	if (pFile == 0) {
		return;
	} else {
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		//token = strtok( cp, seps );
		while (token != 0) {
			if (cReadMode != 0) {
				switch (cReadMode) {
					case 1:
						if ((strlen(token) != 0) && (strlen(token) <= 10000) && (strlen(token) >= 1)) {
							m_iMajesticPointsPerLevel = atoi(token);
						}
						cReadMode = 0;
						break;
					case 2:
						if ((strlen(token) != 0) && (strlen(token) <= 10000) && (strlen(token) >= 1)) {
							m_iMajesticMinLevel = atoi(token);
						}
						cReadMode = 0;
						break;
					case 3:
						if ((strlen(token) != 0) && (strlen(token) <= 10000) && (strlen(token) >= 1)) {
							m_iMajesticPointsMax = atoi(token);
						}
						cReadMode = 0;
						break;
				}
			} else {
				if (memcmp(token, "majestic-points-per-level", 25) == 0) cReadMode = 1;
				if (memcmp(token, "majestic-min-level", 18) == 0) cReadMode = 2;
				if (memcmp(token, "majestic-points-max", 19) == 0) cReadMode = 3;
			}
			token = pStrTok->pGet();
			//token = strtok( 0, seps );
		}
		delete pStrTok;
		delete cp;
	}
	if (pFile != 0) fclose(pFile);
	PutLogList("(*) Loaded Majestic Config");
	return;
}
///		Crafting functions copyed on Alchemy functions...

void CGame::ReqCreateCraftingHandler(int iClientH, char *pData) {
	uint32_t * dwp;
	uint16_t * wp;
	char * cp, cI[6], cCraftingName[21], cData[120];
	int iRet;
	int i;
	int j;
	int iEraseReq;
	int iRiskLevel;
	int iDifficulty;
	int iNeededContrib = 0;
	short * sp, sTemp;
	short sItemIndex[6], sItemPurity[6];
	uint32_t sItemNumber[6];
	CPortion::E sItemArray[6];
	bool bDup;
	bool bFlag;
	bool bNeedLog;
	CItem * pItem;
	if (m_pClientList[iClientH] == 0) return;
	m_pClientList[iClientH]->m_iSkillMsgRecvCount++;
	for (i = 0; i < 6; i++) {
		cI[i] = -1;
		sItemIndex[i] = -1;
		sItemNumber[i] = 0;
		sItemPurity[i] = -1;
	}
	cp = (char *) (pData + 11);
	cp += 20;
	cI[0] = *cp;
	cp++;
	cI[1] = *cp;
	cp++;
	cI[2] = *cp;
	cp++;
	cI[3] = *cp;
	cp++;
	cI[4] = *cp;
	cp++;
	cI[5] = *cp;
	cp++;
	for (i = 0; i < 6; i++) {
		if (cI[i] >= DEF_MAXITEMS) return;
		if ((cI[i] >= 0) && (m_pClientList[iClientH]->m_pItemList[cI[i]] == 0)) return;
	}
	for (i = 0; i < 6; i++)
		if (cI[i] >= 0) {
			bDup = false;
			for (j = 0; j < 6; j++)
				if (sItemIndex[j] == cI[i]) {
					sItemNumber[j]++;
					bDup = true;
				}
			if (bDup == false) {
				for (j = 0; j < 6; j++)
					if (sItemIndex[j] == -1) {
						sItemIndex[j] = cI[i];
						sItemNumber[j]++;
						goto RCPH_LOOPBREAK;
					}
RCPH_LOOPBREAK:
				;
			}
		}
	for (i = 0; i < 6; i++)
		if (sItemIndex[i] != -1) {
			if (sItemIndex[i] < 0) return;
			if ((sItemIndex[i] >= 0) && (sItemIndex[i] >= DEF_MAXITEMS)) return;
			if (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]] == 0) return;
			if (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_dwCount < sItemNumber[i]) return;
			sItemPurity[i] = m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_sItemSpecEffectValue2;
			if ((m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_cItemType == ItemType::none)
					  && (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_sSprite == 6)
					  && (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_sSpriteFrame == 129)) {
				sItemPurity[i] = 100; // Merien stones considered 100% purity.
			}
			if (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_cItemType == ItemType::consume) {
				sItemPurity[i] = -1; // Diamonds / Emeralds.etc.. never have purity
			}
			if (sItemNumber[i] > 1) // No purity for stacked items
			{
				sItemPurity[i] = -1;
			}
			/*wsprintf(G_cTxt, "Crafting: %d x %s (%d)"
				, sItemNumber[i]
				, m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_cName
				, m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_sIDnum);
			PutLogList(G_cTxt);*/
			if ((m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_cItemType == ItemType::equip)
					  && (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_cEquipPos == ItemEquipPos::neck)) {
				iNeededContrib = 10; // Necks Crafting requires 10 contrib
			}
		}
	// Bubble Sort
	bFlag = true;
	while (bFlag == true) {
		bFlag = false;
		for (i = 0; i < 5; i++)
			if ((sItemIndex[i] != -1) && (sItemIndex[i + 1] != -1)) {
				if ((m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_sIDnum) < (m_pClientList[iClientH]->m_pItemList[sItemIndex[i + 1]]->m_sIDnum)) {
					sTemp = sItemIndex[i + 1];
					sItemIndex[i + 1] = sItemIndex[i];
					sItemIndex[i] = sTemp;
					sTemp = sItemPurity[i + 1];
					sItemPurity[i + 1] = sItemPurity[i];
					sItemPurity[i] = sTemp;
					sTemp = sItemNumber[i + 1];
					sItemNumber[i + 1] = sItemNumber[i];
					sItemNumber[i] = sTemp;
					bFlag = true;
				}
			}
	}
	j = 0;
	for (i = 0; i < 6; i++) {
		if (sItemIndex[i] != -1)
			sItemArray[j].id_ = m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_sIDnum;
		else sItemArray[j].id_ = ItemId::none;
		sItemArray[j].num_ = sItemNumber[i];
		++j;
	}
	// Search Crafting you wanna build
	std::memset(cCraftingName, 0, sizeof(cCraftingName));
	for (i = 0; i < DEF_MAXPORTIONTYPES; i++)
		if (m_pCraftingConfigList[i] != 0) {
			bFlag = false;
			for (j = 0; j < 6; j++) {
				if (m_pCraftingConfigList[i]->m_sArray[j] != sItemArray[j]) bFlag = true; // one item mismatch
			}
			if (bFlag == false) // good Crafting receipe
			{
				std::memset(cCraftingName, 0, sizeof(cCraftingName));
				memcpy(cCraftingName, m_pCraftingConfigList[i]->m_cName, 20);
				iRiskLevel = m_pCraftingConfigList[i]->m_iSkillLimit; // % to loose item if crafting fails
				iDifficulty = m_pCraftingConfigList[i]->m_iDifficulty;
			}
		}
	// Check if recipe is OK
	if (strlen(cCraftingName) == 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRAFTING_FAIL, 1, 0, 0, 0); // "There is not enough material"
		return;
	}
	// Check for Contribution
	if (m_pClientList[iClientH]->m_iContribution < iNeededContrib) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRAFTING_FAIL, 2, 0, 0, 0); // "There is not enough Contribution Point"
		return;
	}
	// Check possible Failure
	if (iDice(1, 100) > iDifficulty) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRAFTING_FAIL, 3, 0, 0, 0); // "Crafting failed"
		// Remove parts...
		pItem = 0;
		pItem = new CItem;
		if (pItem == 0) return;
		for (i = 0; i < 6; i++)
			if (sItemIndex[i] != -1) { // Deplete any Merien Stone
				if ((m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_cItemType == ItemType::none)
						  && (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_sSprite == 6)
						  && (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_sSpriteFrame == 129)) {
					ItemDepleteHandler(iClientH, sItemIndex[i], false, false);
				} else
					// Risk to deplete any other items (not stackable ones) // ItemType::consume
					if ((m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_cItemType == ItemType::equip)
						  || (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_cItemType == ItemType::material)) {
					if (iDice(1, 100) < iRiskLevel) {
						ItemDepleteHandler(iClientH, sItemIndex[i], false, false);
					}
				}
			}
		return;
	}
	// Purity
	int iPurity;
	int iTot = 0, iCount = 0;
	for (i = 0; i < 6; i++) {
		if (sItemIndex[i] != -1) {
			if (sItemPurity[i] != -1) {
				iTot += sItemPurity[i];
				iCount++;
			}
		}
	}
	if (iCount == 0) {
		iPurity = 20 + iDice(1, 80); // Wares have random purity (20%..100%)
		bNeedLog = false;
	} else {
		iPurity = iTot / iCount;
		iTot = (iPurity * 4) / 5;
		iCount = iPurity - iTot;
		iPurity = iTot + iDice(1, iCount); // Jewel completion depends off Wares purity
		bNeedLog = true;
	}
	if (iNeededContrib != 0) {
		iPurity = 0; // Necks require contribution but no purity/completion
		bNeedLog = true;
	}
	//CalculateSSN_SkillIndex(iClientH, 12, 1);
	if (strlen(cCraftingName) != 0) {
		pItem = 0;
		pItem = new CItem;
		if (pItem == 0) return;
		for (i = 0; i < 6; i++) {
			if (sItemIndex[i] != -1) {
				if (m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_cItemType == ItemType::consume) {
					SetItemCount(iClientH, sItemIndex[i],
							  m_pClientList[iClientH]->m_pItemList[sItemIndex[i]]->m_dwCount - sItemNumber[i]);
				} else // So if item is not Type 5 (stackable items), you deplete item
				{
					ItemDepleteHandler(iClientH, sItemIndex[i], false, false);
				}
			}
		}
		if (iNeededContrib != 0) {
			m_pClientList[iClientH]->m_iContribution -= iNeededContrib;
			// No known msg to send info to client, so client will compute shown Contrib himself.
		}
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_CRAFTING_SUCCESS, 0, 0, 0, 0);
		m_pClientList[iClientH]->m_iExpStock += iDice(2, 100);
		if ((_bInitItemAttr(pItem, cCraftingName) == true)) { // // Snoopy: Added Purity to Oils/Elixirs
			if (iPurity != 0) {
				pItem->m_sItemSpecEffectValue2 = iPurity;
				pItem->m_dwAttribute = 1;
			}
			pItem->m_sTouchEffectType = DEF_ITET_ID;
			pItem->m_sTouchEffectValue1 = iDice(1, 100000);
			pItem->m_sTouchEffectValue2 = iDice(1, 100000);
			// pItem->m_sTouchEffectValue3 = timeGetTime();
			SYSTEMTIME SysTime;
			char cTemp[256];
			GetLocalTime(&SysTime);
			std::memset(cTemp, 0, sizeof(cTemp));
			wsprintf(cTemp, "%d%2d", (short) SysTime.wMonth, (short) SysTime.wDay);
			pItem->m_sTouchEffectValue3 = atoi(cTemp);
			// SNOOPY log anything above WAREs
			if (bNeedLog) {
				wsprintf(G_cTxt, "PC(%s) Crafting (%s) Purity(%d)"
						  , m_pClientList[iClientH]->m_cCharName
						  , pItem->m_cName
						  , pItem->m_sItemSpecEffectValue2);
				//	PutSkillLogFileList(G_cTxt);
			}
			if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
				std::memset(cData, 0, sizeof(cData));
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_ITEMOBTAINED;
				cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
				*cp = 1;
				cp++;
				memcpy(cp, pItem->m_cName, 20);
				cp += 20;
				dwp = (uint32_t *) cp;
				*dwp = pItem->m_dwCount;
				cp += 4;
				*cp = (char) pItem->m_cItemType;
				cp++;
				*cp = (char) pItem->m_cEquipPos;
				cp++;
				*cp = (char) 0;
				cp++;
				sp = (short *) cp;
				*sp = pItem->m_sLevelLimit;
				cp += 2;
				*cp = pItem->m_cGenderLimit;
				cp++;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wCurLifeSpan;
				cp += 2;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wWeight;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSprite;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSpriteFrame;
				cp += 2;
				*cp = pItem->m_cItemColor;
				cp++;
				*cp = (char) pItem->m_sItemSpecEffectValue2; // v1.41
				cp++;
				dwp = (uint32_t *) cp;
				*dwp = pItem->m_dwAttribute;
				cp += 4;
				/*	*cp = (char)(pItem->m_dwAttribute & 0x00000001); // Custom-Item
				cp++;	*/
				if (iEraseReq == 1) delete pItem;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						break;
				}
				//if ((pItem->m_wPrice * pItem->m_dwCount) > 1000)
				//	SendMsgToLS(MSGID_REQUEST_SAVEPLAYERDATA, iClientH);
			} else {
				m_pMapList[ m_pClientList[iClientH]->m_cMapIndex ]->bSetItem(m_pClientList[iClientH]->m_sX,
						  m_pClientList[iClientH]->m_sY, pItem);
				SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_ITEMDROP, m_pClientList[iClientH]->m_cMapIndex,
						  m_pClientList[iClientH]->m_sX, m_pClientList[iClientH]->m_sY,
						  pItem->m_sSprite, pItem->m_sSpriteFrame, pItem->m_cItemColor);
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						break;
				}
			}
		} else {
			delete pItem;
			pItem = 0;
		}
	}
}

void CGame::GetDkSet(int iClientH) {
	CItem * pItem;
	ItemId dkM[] = {ItemId::dark_knight_hauberk, ItemId::dark_knight_full_helm, ItemId::dark_knight_leggings, ItemId::dark_knight_flameberge, ItemId::dark_knight_plate_mail, ItemId::dark_mage_magic_staff, ItemId::dark_knight_shield, ItemId::none};
	ItemId dkW[] = {ItemId::dark_knight_hauberk_w, ItemId::dark_knight_full_helm_w, ItemId::dark_knight_leggings_w, ItemId::dark_knight_plate_mail_w, ItemId::dark_mage_magic_staff, ItemId::dark_knight_flameberge, ItemId::dark_knight_shield, ItemId::none};
	ItemId dmM[] = {ItemId::dark_mage_hauberk, ItemId::dark_mage_chain_mail, ItemId::dark_mage_leggings, ItemId::esw_manual, ItemId::dark_knight_rapier, ItemId::dark_mage_hat, ItemId::dark_knight_shield, ItemId::none};
	ItemId dmW[] = {ItemId::dark_mage_hauberk_w, ItemId::dark_mage_chain_mail_w, ItemId::dark_mage_leggings_w, ItemId::esw_manual, ItemId::dark_knight_rapier, ItemId::dark_mage_hat_w, ItemId::dark_knight_shield, ItemId::none};
	ItemId weapon = ItemId::none;
	int i;
	int iEraseReq;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iLevel < 200) return;
	ItemId iItemID;
	for (i = 0; i <= 7; i++) {
		pItem = new CItem;
		iItemID = ItemId::none;
		if (m_pClientList[iClientH]->m_cSex == 1) {
			if (m_pClientList[iClientH]->m_iStr > 100) {
				iItemID = dkM[i];
			} else {
				iItemID = dmM[i];
			}
		} else {
			if (m_pClientList[iClientH]->m_iStr > 100) {
				iItemID = dkW[i];
			} else {
				iItemID = dmW[i];
			}
		}
		if (i == 7) {
			if (m_pClientList[iClientH]->m_iStr > m_pClientList[iClientH]->m_iInt) {
				if (m_pClientList[iClientH]->m_cSex == 1) {
					weapon = ItemId::dark_knight_flameberge;
					weapon = ItemId::black_knight_hammer;
				} else if (m_pClientList[iClientH]->m_cSex == 2) {
					weapon = ItemId::dark_knight_flameberge;
					weapon = ItemId::black_knight_hammer;
				}
			} else {
				if (m_pClientList[iClientH]->m_cSex == 1) {
					weapon = ItemId::dark_mage_magic_staff;
				} else if (m_pClientList[iClientH]->m_cSex == 2) {
					weapon = ItemId::dark_mage_magic_staff;
				}
			}
			iItemID = weapon;
		}
		if (iItemID != ItemId::none) //if any error occures, dont crash character
		{
			_bInitItemAttr(pItem, iItemID);
			pItem->m_sTouchEffectType = DEF_ITET_UNIQUE_OWNER;
			pItem->m_sTouchEffectValue1 = m_pClientList[iClientH]->m_sCharIDnum1;
			pItem->m_sTouchEffectValue2 = m_pClientList[iClientH]->m_sCharIDnum2;
			pItem->m_sTouchEffectValue3 = m_pClientList[iClientH]->m_sCharIDnum3;
			_bAddClientItemList(iClientH, pItem, &iEraseReq);
			SendItemNotifyMsg(iClientH, DEF_NOTIFY_ITEMOBTAINED, pItem, 0);
		}
	}
}

void CGame::AdminOrder_BanIP(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	char cMsg[100], cNick[20], cIPtoBan[15];
	int i;
	FILE * pFile;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel <= 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	if (m_pClientList[iClientH]->m_bIsAdminCommandEnabled == false) return;
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	strcpy(cNick, token);
	pStrTok->pGet();
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cNick, strlen(cNick)) == 0)) {
			strcpy(cIPtoBan, m_pClientList[i]->m_cIPaddress);
			//opens cfg file
			pFile = fopen("..\\GameConfigs\\BannedList.cfg", "a");
			//notifys to player banned
			wsprintf(cMsg, "You will be banned from the server right now!");
			ShowClientMsg(i, cMsg);
			//notifys to game master the ban is success
			wsprintf(cMsg, "%s was banned ip.", m_pClientList[iClientH]->m_cCharName);
			ShowClientMsg(iClientH, cMsg);
			//shows log
			wsprintf(G_cTxt, "<%d> Client IP Banned: (%s)", i, cIPtoBan);
			PutLogList(G_cTxt);
			//modifys cfg file
			fprintf(pFile, "\nbanned-ip = %s", cIPtoBan);
			fclose(pFile);
			//updates BannedList.cfg on the server
			LocalUpdateConfigs(3);
			//disconnects player, and he can't connect again.. :)
			DeleteClient(i, true, true);
			return;
		}
	}
	delete pStrTok;
}

void CGame::AFKChecker() {
	int i;
	int sX;
	int sY;
	uint32_t dwTimeNow = timeGetTime();
	for (i = 1; i < DEF_MAXCLIENTS; i++) {
		if (m_pClientList[i] != 0) {
			if ((m_pClientList[i]->m_bIsInitComplete == true)
					  && ((dwTimeNow - m_pClientList[i]->m_dwAFKCheckTime) > DEF_AFKTIME)
					  && (m_pClientList[i]->m_iHP > 0)
					  && ((m_pClientList[i]->m_iStatus & 0x00000010) == 0)
					  && (iDice(1, 5) == 3)) {
				sX = m_pClientList[i]->m_sX;
				if (m_pClientList[i]->m_bSkillUsingStatus[19] == true)
					sY = m_pClientList[i]->m_sY + 1;
				else sY = m_pClientList[i]->m_sY;
				SendEventToNearClient_TypeB(MSGID_EVENT_COMMON, DEF_COMMONTYPE_MAGIC, m_pClientList[i]->m_cMapIndex
						  , sX, sY, sX, sY, 247, m_pClientList[i]->m_sType);
			}
		}
	}
}

void CGame::PlayerOrder_ShowDamage(int iClientH) {/*ShowDamage - Coded by EvilHit*/
	char cDamageMod[256];
	if (m_pClientList[iClientH]->iDmgShowon == 1) {
		m_pClientList[iClientH]->iDmgShowon = 0;
		std::memset(cDamageMod, 0, sizeof(cDamageMod));
		wsprintf(cDamageMod, "Show Damage is now disabled");
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cDamageMod);
	} else {
		m_pClientList[iClientH]->iDmgShowon = 1;
		std::memset(cDamageMod, 0, sizeof(cDamageMod));
		wsprintf(cDamageMod, "Show Damage is now enabled");
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, cDamageMod);
	}
}

void CGame::PlayerOrder_GetCrits(int iClientH) {
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_iSuperAttackLeft >= 300) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "You can't buy more Criticals!.");
		return;
	}
	if (m_pClientList[iClientH]->m_iAdminUserLevel > 0) {
		m_pClientList[iClientH]->m_iSuperAttackLeft += 300;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "You bought Criticals");
		return;
	}
	uint32_t dwGoldCount;
	if (m_pClientList[iClientH]->m_iLevel < 202) {
		dwGoldCount = dwGetItemCount(iClientH, "Gold");
		if (dwGoldCount >= 5000) {
			SetItemCount(iClientH, "Gold", dwGoldCount - 5000);
			m_pClientList[iClientH]->m_iSuperAttackLeft += 300;
			SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "You bought Criticals!.");
			return;
		}
	}
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "You haven't got the needed requirement to use this command!.");
}
//Fin Criticals By MIHD
// MORLA2.2 - Para determinar el Rango devuelve los EKs y PKs del user

void CGame::RequestRango(int iClientH, int iObjectID) {
	if (m_pClientList[iClientH] == 0) return;
	if ((iObjectID <= 0) || (iObjectID >= DEF_MAXCLIENTS)) return;
	if (m_pClientList[iObjectID] == 0) {
	} else {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_REQRANGO, m_pClientList[iObjectID]->m_iEnemyKillCount, m_pClientList[iObjectID]->m_iRating, 0, 0);
	}
}

void CGame::GetTradeEKMantleHandler(int iClientH, int iItemID, char * /*pString*/) // TRADE EK - Luqah
{
	int i;
	int iNum;
	int iRet;
	int iEraseReq;
	char * cp, cData[256], cItemName[21];
	CItem * pItem;
	uint32_t * dwp;
	short * sp;
	uint16_t * wp;
	if (m_pClientList[iClientH] == 0) return;
	if (_iGetItemSpaceLeft(iClientH) == 0) {
		SendItemNotifyMsg(iClientH, DEF_NOTIFY_CANNOTCARRYMOREITEM, 0, 0);
		return;
	}
	if (m_pItemConfigList[iItemID] == 0) return;
	switch (iItemID) {
		case 848://Lighning Blade
			if (m_pClientList[iClientH]->m_iEnemyKillCount <= 7799) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 7800;
			break;
		case 616:// Demon Slayer
			if (m_pClientList[iClientH]->m_iEnemyKillCount <= 6999) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 7000;
			break;
		case 861://Berzerk Wand MS 20
			if (m_pClientList[iClientH]->m_iEnemyKillCount <= 6199) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 6200;
			break;
		case 863://Kloness Wand MS 20
			if (m_pClientList[iClientH]->m_iEnemyKillCount <= 6999) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 6000;
			break;
		case 3043://Strike of the Ghost
			if (m_pClientList[iClientH]->m_iEnemyKillCount <= 5999) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 6000;
			break;
		case 850://Kloness Axe
			if (m_pClientList[iClientH]->m_iEnemyKillCount <= 8999) return;
			m_pClientList[iClientH]->m_iEnemyKillCount -= 9000;
			break;
	}
	std::memset(cItemName, 0, sizeof(cItemName));
	memcpy(cItemName, m_pItemConfigList[iItemID]->m_cName, 20);
	iNum = 1;
	for (i = 1; i <= iNum; i++) {
		pItem = new CItem;
		if (_bInitItemAttr(pItem, cItemName) == false) {
			delete pItem;
		} else {
			if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
				if (m_pClientList[iClientH]->m_iCurWeightLoad < 0) m_pClientList[iClientH]->m_iCurWeightLoad = 0;
				wsprintf(G_cTxt, "(*) Get Trade EK Item : Char(%s) Player-EK(%d) Item Obtained(%s)", m_pClientList[iClientH]->m_cCharName, m_pClientList[iClientH]->m_iEnemyKillCount, cItemName);
				PutItemLogFileList(G_cTxt);
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_ITEMOBTAINED;
				cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
				*cp = 1;
				cp++;
				memcpy(cp, pItem->m_cName, 20);
				cp += 20;
				dwp = (uint32_t *) cp;
				*dwp = pItem->m_dwCount;
				cp += 4;
				*cp = (char) pItem->m_cItemType;
				cp++;
				*cp = (char) pItem->m_cEquipPos;
				cp++;
				*cp = (char) 0;
				cp++;
				sp = (short *) cp;
				*sp = pItem->m_sLevelLimit;
				cp += 2;
				*cp = pItem->m_cGenderLimit;
				cp++;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wCurLifeSpan;
				cp += 2;
				wp = (uint16_t *) cp;
				*wp = pItem->m_wWeight;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSprite;
				cp += 2;
				sp = (short *) cp;
				*sp = pItem->m_sSpriteFrame;
				cp += 2;
				*cp = pItem->m_cItemColor;
				cp++;
				*cp = (char) pItem->m_sItemSpecEffectValue2;
				cp++;
				dwp = (uint32_t *) cp;
				*dwp = pItem->m_dwAttribute;
				cp += 4;
				if (iEraseReq == 1) delete pItem;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
				iCalcTotalWeight(iClientH);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						return;
				}
				SendNotifyMsg(0, iClientH, DEF_NOTIFY_ENEMYKILLS, m_pClientList[iClientH]->m_iEnemyKillCount, 0, 0, 0);
			} else {
				delete pItem;
				iCalcTotalWeight(iClientH);
				dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
				*dwp = MSGID_NOTIFY;
				wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
				*wp = DEF_NOTIFY_CANNOTCARRYMOREITEM;
				iRet = m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 6);
				switch (iRet) {
					case DEF_XSOCKEVENT_QUENEFULL:
					case DEF_XSOCKEVENT_SOCKETERROR:
					case DEF_XSOCKEVENT_CRITICALERROR:
					case DEF_XSOCKEVENT_SOCKETCLOSED:
						DeleteClient(iClientH, true, true);
						return;
				}
			}
		}
	}
}

void CGame::PlayerCommandAddMaster(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cName[11], cTargetName[11], cBuff[256], cNpcName[21], cNpcWaypoint[11];
	CStrTok * pStrTok;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iGuildRank != 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOGUILDMASTERLEVEL, 0, 0, 0, 0);
		return;
	}
	std::memset(cName, 0, sizeof(cName));
	std::memset(cNpcWaypoint, 0, sizeof(cNpcWaypoint));
	std::memset(cTargetName, 0, sizeof(cTargetName));
	std::memset(cNpcName, 0, sizeof(cNpcName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (strlen(token) > 10)
			memcpy(cTargetName, token, 10);
		else memcpy(cTargetName, token, strlen(token));
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0)) {
				if (memcmp(m_pClientList[iClientH]->m_cGuildName, m_pClientList[i]->m_cGuildName, 20) != 0) {
					SendNotifyMsg(iClientH, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "Error: Cannot Add Master...");
					delete pStrTok;
					return;
				}
				m_pClientList[i]->m_iGuildRank = 0;
				SendNotifyMsg(iClientH, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "New Guild Master Added");
				SendNotifyMsg(iClientH, i, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "You are Now a GuildMaster");
			}
		delete pStrTok;
		return;
	}
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERNOTONGAME, 0, 0, 0, cTargetName);
	delete pStrTok;
	return;
}

void CGame::PlayerOrder_DeleteGuildMaster(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cName[11], cTargetName[11], cBuff[256], cNpcName[21], cNpcWaypoint[11];
	CStrTok * pStrTok;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iGuildRank != 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_NOGUILDMASTERLEVEL, 0, 0, 0, 0);
		return;
	}
	std::memset(cName, 0, sizeof(cName));
	std::memset(cNpcWaypoint, 0, sizeof(cNpcWaypoint));
	std::memset(cTargetName, 0, sizeof(cTargetName));
	std::memset(cNpcName, 0, sizeof(cNpcName));
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		if (strlen(token) > 10)
			memcpy(cTargetName, token, 10);
		else memcpy(cTargetName, token, strlen(token));
		for (i = 1; i < DEF_MAXCLIENTS; i++)
			if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cTargetName, 10) == 0)) {
				if (memcmp(m_pClientList[iClientH]->m_cGuildName, m_pClientList[i]->m_cGuildName, 20) != 0) {
					SendNotifyMsg(iClientH, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "Error: No se puede borrar el GuildMaster.");
					delete pStrTok;
					return;
				}
				m_pClientList[i]->m_iGuildRank = 12;
				SendNotifyMsg(iClientH, iClientH, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "El GuildMaster fue borrado.");
				SendNotifyMsg(iClientH, i, DEF_NOTIFY_NOTICEMSG, 0, 0, 0, "Ya no eres GuildMaster.");
			}
		delete pStrTok;
		return;
	}
	SendNotifyMsg(0, iClientH, DEF_NOTIFY_PLAYERNOTONGAME, 0, 0, 0, cTargetName);
	delete pStrTok;
	return;
}

void CGame::AdminOrder_SetCrit(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char *token, cBuff[256];
	CStrTok *pStrTok;
	char *pk;
	char cNick[20];
	char cPK[5];
	char notice[100];
	int oldpk;
	int i;
	if (m_pClientList[iClientH] == 0)
		return;
	if ((dwMsgSize) <= 0)
		return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel == 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0,
				  0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	strcpy(cNick, token);
	pk = pStrTok->pGet();
	if (pk == 0) {
		delete pStrTok;
		return;
	}
	strcpy(cPK, pk);
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0)
				  && (memcmp(m_pClientList[i]->m_cCharName, cNick, strlen(cNick)) == 0)) {
			oldpk = m_pClientList[i]->m_iSuperAttackLeft;
			m_pClientList[i]->m_iSuperAttackLeft = atoi(cPK);
			SendNotifyMsg(0, i, DEF_NOTIFY_SUPERATTACKLEFT, m_pClientList[i]->m_iSuperAttackLeft, 0, 0, 0);
			wsprintf(notice, "Crit Count has been changed for player %s from %d to %d.", m_pClientList[iClientH]->m_cCharName, oldpk, atoi(cPK));
		}
	}
	delete pStrTok;
}

void CGame::AdminOrder_SetEK(int iClientH, char * pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	char * ek;
	char cNick[20];
	char cEK[5];
	char notice[100];
	int oldek;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel <= 3) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	strcpy(cNick, token);
	ek = pStrTok->pGet();
	if (ek == 0) {
		delete pStrTok;
		return;
	}
	strcpy(cEK, ek);
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cNick, strlen(cNick)) == 0)) {
			oldek = m_pClientList[i]->m_iEnemyKillCount;
			m_pClientList[i]->m_iEnemyKillCount = atoi(cEK);
			SendNotifyMsg(0, i, DEF_NOTIFY_ENEMYKILLS, m_pClientList[i]->m_iEnemyKillCount, 0, 0, 0);
			std::memset(notice, 0, sizeof(notice));
			wsprintf(notice, "Your EK Counts has been changed %d to %d.", oldek, atoi(cEK));
			ShowClientMsg(iClientH, notice);
		}
	}
	delete pStrTok;
}

void CGame::AdminOrder_SetMAJ(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char *token, cBuff[256];
	CStrTok *pStrTok;
	char *pk;
	char cNick[20];
	char cPK[5];
	char notice[100];
	int oldpk;
	int i;
	if (m_pClientList[iClientH] == 0)
		return;
	if ((dwMsgSize) <= 0)
		return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel == 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0,
				  0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	strcpy(cNick, token);
	pk = pStrTok->pGet();
	if (pk == 0) {
		delete pStrTok;
		return;
	}
	strcpy(cPK, pk);
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cNick, strlen(cNick)) == 0)) {
			oldpk = m_pClientList[i]->m_iGizonItemUpgradeLeft;
			m_pClientList[i]->m_iGizonItemUpgradeLeft = atoi(cPK);
			SendNotifyMsg(0, i, DEF_NOTIFY_GIZONITEMUPGRADELEFT, m_pClientList[i]->m_iGizonItemUpgradeLeft, 0, 0, 0);
			wsprintf(notice, "Majestic Count has been changed for player %s from %d to %d.", m_pClientList[iClientH]->m_cCharName, oldpk, atoi(cPK));
		}
	}
	delete pStrTok;
}

void CGame::AdminOrder_SetPK(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char *token, cBuff[256];
	CStrTok *pStrTok;
	char *pk;
	char cNick[20];
	char cPK[5];
	char notice[100];
	int oldpk;
	int i;
	if (m_pClientList[iClientH] == 0)
		return;
	if ((dwMsgSize) <= 0)
		return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel == 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0,
				  0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	strcpy(cNick, token);
	pk = pStrTok->pGet();
	if (pk == 0) {
		delete pStrTok;
		return;
	}
	strcpy(cPK, pk);
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cNick, strlen(cNick)) == 0)) {
			oldpk = m_pClientList[i]->m_iPKCount;
			m_pClientList[i]->m_iPKCount = atoi(cPK);
			SendNotifyMsg(0, i, DEF_NOTIFY_PKPENALTY, m_pClientList[i]->m_iPKCount, 0, 0, 0);
			wsprintf(notice, "EK Count has been changed for player %s from %d to %d.", m_pClientList[iClientH]->m_cCharName, oldpk, atoi(cPK));
		}
	}
	delete pStrTok;
}

void CGame::AdminOrder_SetRep(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * token, cBuff[256];
	CStrTok * pStrTok;
	char * rep;
	char cNick[20];
	char cRep[5];
	char notice[100];
	int oldrep;
	int i;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel == 0) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token == 0) {
		delete pStrTok;
		return;
	}
	strcpy(cNick, token);
	rep = pStrTok->pGet();
	if (rep == 0) {
		delete pStrTok;
		return;
	}
	strcpy(cRep, rep);
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0) && (memcmp(m_pClientList[i]->m_cCharName, cNick, strlen(cNick)) == 0)) {
			oldrep = m_pClientList[i]->m_iRating;
			m_pClientList[i]->m_iRating = atoi(cRep);
			wsprintf(notice, "Your Reputation Points change %d to %d.", oldrep, atoi(cRep));
			wsprintf(notice, "REP Count has been changed for player %s from %d to %d.", m_pClientList[iClientH]->m_cCharName, oldrep, atoi(cRep));
		}
	}
	delete pStrTok;
}

bool CGame::bReadBallSystemConfigFile(const char * cFn) {
	FILE * pFile;
	HANDLE hFile;
	uint32_t dwFileSize;
	char * cp, * token, cReadModeA, cReadModeB;
	char seps[] = "= \t\n";
	int iIndex;
	CStrTok * pStrTok;
	char cTxt[41];
	cReadModeA = 0;
	cReadModeB = 0;
	hFile = CreateFile(cFn, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
	dwFileSize = GetFileSize(hFile, 0);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFn, "rt");
	if (pFile == 0) {
		PutLogList("(!) Cannot open Ball System configuration file.");
		return false;
	} else {
		PutLogList("(!) Reading Ball System configuration file...");
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);
		iIndex = 0;
		pStrTok = new CStrTok(cp, seps);
		token = pStrTok->pGet();
		while (token != 0) {
			if (cReadModeA != 0) {
				switch (cReadModeA) {
					case 1:
						switch (cReadModeB) {
							case 1:
								if (_bGetIsStringIsNumber(token) == false) {
									PutLogList("(!!!) CRITICAL ERROR! Ball System configuration file error - Wrong Data format(1).");
									delete cp;
									delete pStrTok;
									return false;
								}
								iIndex = atoi(token);
								if (m_pBallItemConfigList[iIndex] != 0) {
									wsprintf(cTxt, "(!!!) CRITICAL ERROR! Duplicate Ball Item ID (%d)", iIndex);
									PutLogList(cTxt);
									delete pStrTok;
									return false;
								}
								m_pBallItemConfigList[iIndex] = new CBallSystem;
								m_pBallItemConfigList[iIndex]->m_sBS_ID = iIndex;
								cReadModeB = 2;
								break;
							case 2:
								std::memset(m_pBallItemConfigList[iIndex]->m_cName, 0, sizeof(m_pBallItemConfigList[iIndex]->m_cName));
								memcpy(m_pBallItemConfigList[iIndex]->m_cName, token, strlen(token));
								cReadModeB = 3;
								break;
							case 3:
								m_pBallItemConfigList[iIndex]->m_iReqPoints = atoi(token);
								cReadModeA = 0;
								cReadModeB = 0;
						}
						break;
					default:
						break;
				}
			} else {
				if (memcmp(token, "Ball-Item", 9) == 0) {
					cReadModeA = 1;
					cReadModeB = 1;
				}
			}
			token = pStrTok->pGet();
		}
		delete pStrTok;
		delete cp;
		if ((cReadModeA != 0) || (cReadModeB != 0)) {
			PutLogList("(!!!) CRITICAL ERROR! Ball System configuration file contents error!");
			return false;
		}
	}
	if (pFile != 0) fclose(pFile);
	return true;
}

void CGame::RequestBallItem(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * cp, * token, cBuff[256], cWantedItemName[256], cData[256], cInfoString[56];
	CStrTok * pStrTok;
	CItem * pItem;
	short * sp, sCounter;
	int i;
	int iEraseReq;
	uint32_t * dwp;
	uint16_t * wp;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cWantedItemName, 0, sizeof(cWantedItemName));
		strcpy(cWantedItemName, token);
	}
	sCounter = 1;
	for (i = 0; i < DEF_MAXBALLITEMS; i++) {
		if (sCounter == 1) {
			if (m_pBallItemConfigList[i] != 0) {
				if (strcmp(cWantedItemName, m_pBallItemConfigList[i]->m_cName) == 0) {
					if (m_pClientList[iClientH]->m_iBallPoints < m_pBallItemConfigList[i]->m_iReqPoints) {
						wsprintf(cInfoString, "Item (%s) cannot be traded, not enough points. ", cWantedItemName);
						SendNotifyMsg(0, iClientH, DEF_NOTIFY_IPACCOUNTINFO, 0, 0, 0, cInfoString);
						return;
					}
					m_pClientList[iClientH]->m_iBallPoints -= m_pBallItemConfigList[i]->m_iReqPoints;
					pItem = new CItem;
					if (_bInitItemAttr(pItem, cWantedItemName) == false) {
						delete pItem;
						return;
					}
					std::memset(cData, 0, sizeof(cData));
					if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) {
						dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
						*dwp = MSGID_NOTIFY;
						wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
						*wp = DEF_NOTIFY_ITEMOBTAINED;
						cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
						*cp = 1;
						cp++;
						memcpy(cp, pItem->m_cName, 20);
						cp += 20;
						dwp = (uint32_t *) cp;
						*dwp = pItem->m_dwCount;
						cp += 4;
						*cp = (char) pItem->m_cItemType;
						cp++;
						*cp = (char) pItem->m_cEquipPos;
						cp++;
						*cp = (char) 0;
						cp++;
						sp = (short *) cp;
						*sp = pItem->m_sLevelLimit;
						cp += 2;
						*cp = pItem->m_cGenderLimit;
						cp++;
						wp = (uint16_t *) cp;
						*wp = pItem->m_wCurLifeSpan;
						cp += 2;
						wp = (uint16_t *) cp;
						*wp = pItem->m_wWeight;
						cp += 2;
						sp = (short *) cp;
						*sp = pItem->m_sSprite;
						cp += 2;
						sp = (short *) cp;
						*sp = pItem->m_sSpriteFrame;
						cp += 2;
						*cp = pItem->m_cItemColor;
						cp++;
						*cp = (char) pItem->m_sItemSpecEffectValue2;
						cp++;
						dwp = (uint32_t *) cp;
						*dwp = pItem->m_dwAttribute;
						cp += 4;
						if (iEraseReq == 1) {
							delete pItem;
							pItem = 0;
						}
						m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
						sCounter = 0;
						return;
					} else {
						sCounter = 0;
						delete pItem;
						return;
					}
				}
			}
		}
	}
}

/********************************************************************************
 *****    void CGame::_TradeItem(int iClientH, char *pData, uint32_t dwMsgSize)    *****
 *****    ----------------------------------------------------------------      *****
 *****    Creditos        :: By Centuu.- Modificado por Gigia para Ball Trade   *****
 *****    Descripcion :: Tradear balls por command                              *****
 *****    ----------------------------------------------------------------      *****
 *****    Llamada por el comando "/balltrade [ItemName]"                        *****
 ********************************************************************************/
void CGame::_TradeItem(int iClientH, char *pData, uint32_t dwMsgSize) {
	char seps[] = "= \t\n";
	char * cp, * token, cBuff[256], cItemName[256], cData[256];
	CStrTok * pStrTok;
	CItem * pItem;
	short * sp;
	int iEraseReq;
	uint32_t * dwp;
	uint16_t * wp;
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) { //Centuu : Comprueba el nombre del item se?alado con el ID correspondiente.
		std::memset(cItemName, 0, sizeof(cItemName));
		strcpy(cItemName, token);
	}
	if (_iGetItemSpaceLeft(iClientH) == 0) { //Centuu : Dice, que si no tiene espacio en el bag, no le d? el item.
		SendItemNotifyMsg(iClientH, DEF_NOTIFY_CANNOTCARRYMOREITEM, 0, 0);
		return;
	}
	pItem = new CItem;
	if (_bInitItemAttr(pItem, cItemName) == false) { //Centuu : No acepta cualquier item.
		delete pItem;
		return;
	}
	switch (pItem->m_sIDnum) { //Centuu : Comprueba el ID correspondiente con el nombre del item se?alado.
		case ItemId::armor_dye_indigo: //Armor Dyes.
		case ItemId::armor_dye_crimson_red: //Armor Dyes.
		case ItemId::armor_dye_gold: //Armor Dyes.
		case ItemId::armor_dye_aqua: //Armor Dyes.
		case ItemId::armor_dye_pink: //Armor Dyes.
		case ItemId::armor_dye_violet: //Armor Dyes.
		case ItemId::armor_dye_blue: //Armor Dyes.
		case ItemId::armor_dye_khaki: //Armor Dyes
		case ItemId::armor_dye_yellow: //Armor Dyes.
		case ItemId::armor_dye_red: //Armor Dyes.
		case ItemId::armor_dye_black: //Armor Dyes.
		case ItemId::armor_dye_green: //Armor Dyes.
			if (m_pClientList[iClientH]->m_iBallPoints < 20) return;
			m_pClientList[iClientH]->m_iBallPoints -= 20;
			break;
		case ItemId::merien_plate_mail_m: //Merien Plates
		case ItemId::merien_plate_mail_w:
			if (m_pClientList[iClientH]->m_iBallPoints < 850) return;
			m_pClientList[iClientH]->m_iBallPoints -= 850;
			break;
			//		case ItemId::977: //Merien Chains
			//		case ItemId::978:
			//			if (m_pClientList[iClientH]->m_iBallPoints < 820) return;
			//			m_pClientList[iClientH]->m_iBallPoints -= 820;
			//			break;
		case ItemId::zemstoneof_sacrifice: //Zem
			if (m_pClientList[iClientH]->m_iBallPoints < 10) return;
			m_pClientList[iClientH]->m_iBallPoints -= 10;
			break;
		case ItemId::dark_executor: //Dark Executor.
			if (m_pClientList[iClientH]->m_iBallPoints < 1100) return;
			m_pClientList[iClientH]->m_iBallPoints -= 1100;
			break;
		case ItemId::necklace_of_merien: //Neck Of Merien
		case ItemId::necklace_of_kloness: //Neck Of Kloness
		case ItemId::necklace_of_xelima: //Neck Of Xelima
			if (m_pClientList[iClientH]->m_iBallPoints < 700) return;
			m_pClientList[iClientH]->m_iBallPoints -= 700;
			break;
		case ItemId::ringofthe_xelima: //Ring of xelima
		case ItemId::ringofthe_abaddon: //Ring of Abaddon
			if (m_pClientList[iClientH]->m_iBallPoints < 560) return;
			m_pClientList[iClientH]->m_iBallPoints -= 560;
		case ItemId::dark_elf_bow: //Dark Elf Bow
			if (m_pClientList[iClientH]->m_iBallPoints < 750) return;
			m_pClientList[iClientH]->m_iBallPoints -= 750;
			break;
		case ItemId::merien_shield: //Merien Shield
			if (m_pClientList[iClientH]->m_iBallPoints < 850) return;
			m_pClientList[iClientH]->m_iBallPoints -= 850;
			break;
		case ItemId::the_change_potion: //Sex Change Potion
			if (m_pClientList[iClientH]->m_iBallPoints < 35) return;
			m_pClientList[iClientH]->m_iBallPoints -= 35;
			break;
			//		case ItemId::970: //Xelima Esterk
			//		case ItemId::973: //Xelima B Hammer
			//		case ItemId::976: //Xelima Bow
			//			if (m_pClientList[iClientH]->m_iBallPoints < 500) return;
			//			m_pClientList[iClientH]->m_iBallPoints -= 500;
			//			break;
		default:
			return;
			break;
	}
	std::memset(cData, 0, sizeof(cData));
	if (_bAddClientItemList(iClientH, pItem, &iEraseReq) == true) { //Centuu : Dice que obtuvo el item.
		dwp = (uint32_t *) (cData + DEF_INDEX4_MSGID);
		*dwp = MSGID_NOTIFY;
		wp = (uint16_t *) (cData + DEF_INDEX2_MSGTYPE);
		*wp = DEF_NOTIFY_ITEMOBTAINED;
		cp = (char *) (cData + DEF_INDEX2_MSGTYPE + 2);
		*cp = 1;
		cp++;
		memcpy(cp, pItem->m_cName, 20);
		cp += 20;
		dwp = (uint32_t *) cp;
		*dwp = pItem->m_dwCount;
		cp += 4;
		*cp = (char) pItem->m_cItemType;
		cp++;
		*cp = (char) pItem->m_cEquipPos;
		cp++;
		*cp = (char) 0;
		cp++;
		sp = (short *) cp;
		*sp = pItem->m_sLevelLimit;
		cp += 2;
		*cp = pItem->m_cGenderLimit;
		cp++;
		wp = (uint16_t *) cp;
		*wp = pItem->m_wCurLifeSpan;
		cp += 2;
		wp = (uint16_t *) cp;
		*wp = pItem->m_wWeight;
		cp += 2;
		sp = (short *) cp;
		*sp = pItem->m_sSprite;
		cp += 2;
		sp = (short *) cp;
		*sp = pItem->m_sSpriteFrame;
		cp += 2;
		*cp = pItem->m_cItemColor;
		cp++;
		*cp = (char) pItem->m_sItemSpecEffectValue2;
		cp++;
		dwp = (uint32_t *) cp;
		*dwp = pItem->m_dwAttribute;
		cp += 4;
		if (iEraseReq == 1) {
			delete pItem;
			pItem = 0;
		}
		//Centuu : Dice que le quit? los EK's
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_BALLPOINTS, m_pClientList[iClientH]->m_iBallPoints, 0, 0, 0);
		m_pClientList[iClientH]->m_pXSock->iSendMsg(cData, 53);
		return;
	} else {
		delete pItem;
		return;
	}
}

void CGame::PURITYLIFE(short sAttackerH, char cAttackerType, short sTargetH, char cTargetType, short sV1, short sV2, short sV3) {
	int iHP;
	int iMaxHP;
	int iSP;
	int iMaxSP;
	if (cAttackerType == DEF_OWNERTYPE_PLAYER)
		if (m_pClientList[sAttackerH] == 0) return;
	iHP = iDice(sV1 * 2, sV2 * 2) * sV3;
	iSP = iDice(sV1 * 2, sV2 * 2) * sV3;
	switch (cTargetType) {
		case DEF_OWNERTYPE_PLAYER://Sube vida y Stamina del pj target
			if (m_pClientList[sTargetH] == 0) return;
			if (m_pClientList[sTargetH]->m_bIsKilled == true) return;
			iMaxSP = iGetMaxSP(sTargetH);
			iMaxHP = iGetMaxHP(sTargetH);
			if (m_pClientList[sTargetH]->m_iSP > iMaxSP)
				m_pClientList[sTargetH]->m_iSP = iMaxSP;
			else if (m_pClientList[sTargetH]->m_iSP < iMaxSP)
				m_pClientList[sTargetH]->m_iSP += iSP;
			if (m_pClientList[sTargetH]->m_iSP <= 0)
				m_pClientList[sTargetH]->m_iSP = 1;
			if (m_pClientList[sTargetH]->m_iHP > iMaxHP)
				m_pClientList[sTargetH]->m_iHP = iMaxHP;
			else if (m_pClientList[sTargetH]->m_iHP < iMaxHP)
				m_pClientList[sTargetH]->m_iHP += iHP;
			if (m_pClientList[sTargetH]->m_iHP <= 0)
				m_pClientList[sTargetH]->m_iHP = 1;
			SendNotifyMsg(0, sTargetH, DEF_NOTIFY_HP, 0, 0, 0, 0);
			SendNotifyMsg(0, sTargetH, DEF_NOTIFY_SP, 0, 0, 0, 0);
			break;
		case DEF_OWNERTYPE_NPC://sube vida del npc target
			if (m_pNpcList[sTargetH] == 0) return;
			if (m_pNpcList[sTargetH]->m_iHP <= 0) return;
			if (m_pNpcList[sTargetH]->m_bIsKilled == true) return;
			iMaxHP = m_pNpcList[sTargetH]->m_iHitDice * 4;
			if (m_pNpcList[sTargetH]->m_iHP < iMaxHP)
				m_pNpcList[sTargetH]->m_iHP += iHP;
			if (m_pNpcList[sTargetH]->m_iHP > iMaxHP) m_pNpcList[sTargetH]->m_iHP = iMaxHP;
			if (m_pNpcList[sTargetH]->m_iHP <= 0) m_pNpcList[sTargetH]->m_iHP = 1;
			break;
	}
}

void CGame::DesbugCharacter(int iClientH, char * pData, uint32_t dwMsgSize) {
	CStrTok * pStrTok;
	char cBuff[256], cName[11], cTargetName[11], cFileNamex[255], cFileName[255], cDir[63];
	char * token;
	char seps[] = "= \t\n";
	std::memset(cTargetName, 0, sizeof(cTargetName));
	if (m_pClientList[iClientH] == 0) return;
	if ((dwMsgSize) <= 0) return;
	if (m_pClientList[iClientH]->m_iAdminUserLevel < 2) {
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ADMINUSERLEVELLOW, 0, 0, 0, 0);
		return;
	}
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		std::memset(cName, 0, sizeof(cName));
		strcpy(cName, token);
	} else {
		std::memset(cName, 0, sizeof(cName));
		strcpy(cName, "null");
	}
	if (cName != 0) {
		token = cName;
		if (strlen(token) > 10)
			memcpy(cTargetName, token, 10);
		else memcpy(cTargetName, token, strlen(token));
		std::memset(cFileName, 0, sizeof(cFileName));
		std::memset(cDir, 0, sizeof(cDir));
		wsprintf(cDir, "..\\..\\Character\\AscII%d\\%s.bak", *cTargetName, cTargetName);
		strcat(cFileName, cDir);
		std::memset(cFileNamex, 0, sizeof(cFileNamex));
		std::memset(cDir, 0, sizeof(cDir));
		wsprintf(cDir, "..\\..\\Character\\AscII%d\\%s.txt", *cTargetName, cTargetName);
		strcat(cFileNamex, cDir);
		DeleteFile(cFileNamex);
		CopyFile(cFileName, cFileNamex, false);
		delete pStrTok;
		return;
	}
}
//Happy para vos xD

void CGame::HappyHuor() {
	SYSTEMTIME SysTime;
	GetLocalTime(&SysTime);
	uint32_t dwTime = timeGetTime();
	switch (SysTime.wDayOfWeek) {
		case 1:
			dwHappyHourTime = dwTime;
			m_bHappyHour = true;
			break;
		case 2:
			dwHappyHourTime = dwTime;
			m_bHappyHour = true;
			break;
		case 3:
			dwHappyHourTime = dwTime;
			m_bHappyHour = true;
			break;
		case 4:
			dwHappyHourTime = dwTime;
			m_bHappyHour = true;
			// Happy Hour by MrKrhiz para MundoHelbreath & Helbreath&Mas
			break;
		case 5:
			dwHappyHourTime = dwTime;
			m_bHappyHour = true;
			break;
		case 6:
			dwHappyHourTime = dwTime;
			m_bHappyHour = true;
			break;
		case 0:
			dwHappyHourTime = dwTime;
			m_bHappyHour = true;
			break;
	}
	StarHappyHour();
}

void CGame::StarHappyHour() {
	int i;
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
			SendNotifyMsg(0, i, DEF_NOTIFY_HAPPYHOURSTAR, 0, 0, 0, 0);
		}
	}
}

void CGame::EndHappyHour() {
	int i;
	for (i = 0; i < DEF_MAXCLIENTS; i++) {
		if ((m_pClientList[i] != 0) && (m_pClientList[i]->m_bIsInitComplete == true)) {
			SendNotifyMsg(0, i, DEF_NOTIFY_HAPPYHOUREND, 0, 0, 0, 0);
		}
	}
	m_bHappyHour = false;
}
// MORLA 2.3 - Inicio Manual Happy Hour

void CGame::ManualStartHappyHour(int iClientH, char *pData, uint32_t dwMsgSize) {
	char cBuff[256], * token, seps[] = "= \t\n";
	CStrTok * pStrTok;
	int i;
	std::memset(cBuff, 0, sizeof(cBuff));
	memcpy(cBuff, pData, dwMsgSize);
	pStrTok = new CStrTok(cBuff, seps);
	token = pStrTok->pGet();
	token = pStrTok->pGet();
	if (token != 0) {
		for (i = 1; i < DEF_MAXCLIENTS; i++) // Check all clients
		{
			if ((m_pClientList[i] != 0)) {
				if (token[0] == '1') {
					SendNotifyMsg(0, i, DEF_NOTIFY_HAPPYHOURSTAR, 0, 0, 0, 0);
					m_bHappyHour = true;
				} else if (token[0] == '0') {
					SendNotifyMsg(0, i, DEF_NOTIFY_HAPPYHOUREND, 0, 0, 0, 0);
					m_bHappyHour = false;
				}
			}
		}
	}
	delete pStrTok;
	wsprintf(G_cTxt, "Admin Order(%s): begin Happy-Hour", m_pClientList[iClientH]->m_cCharName);
	PutAdminLogFileList(G_cTxt);
	PutLogList(G_cTxt);
	PutLogEventFileList(G_cTxt);
}
//50Cent - Capture The Flag

void CGame::StartCaptureTheFlag() {
	if (m_bIsCTFMode) return;
	m_sFlagCountWin = 5;
	wsprintf(G_cTxt, "Capture The Flag: Win Flag Count(%d)", m_sFlagCountWin);
	PutLogList(G_cTxt);
	m_bIsCTFMode = true;
	for (int i = 0; i < DEF_MAXCLIENTS; i++) {
		if (m_pClientList[i] != 0) {
			SendNotifyMsg(0, i, DEF_NOTIFY_CAPTURETHEFLAGSTART, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		}
	}
	PutLogList("(*) Capture The Flag Started!");
}

void CGame::RequestCheckFlag(int iClientH) {
	if (!m_bIsCTFMode) return;
	if (m_pClientList[iClientH] == 0) return;
	if (m_pClientList[iClientH]->m_cSide == 0) RequestTeleportHandler(iClientH, "2   ", "default", -1, -1);
	if ((m_pClientList[iClientH]->m_sX == 151) && (m_pClientList[iClientH]->m_sY == 132))//Elvine Flag Cords
	{
		if (m_pClientList[iClientH]->m_iLevel >= 120) {
			if (m_pClientList[iClientH]->m_cSide == 1) //Aresden Side
			{
				if ((!m_bIsAresdenFlagCaptured) && (!m_bIsElvineFlagCaptured)) //Aresden Capture Elvine Flag
				{
					PutLogList("Capture The Flag: Aresden Captured Elvine Flag!");
					SetFlagCarrierFlag(iClientH, true);
				}
			} else //Elvine Side
			{
				if ((m_bIsAresdenFlagCaptured) && (!m_bIsElvineFlagCaptured)) {
					PutLogList("Capture The Flag: Elvine wins this round!");
					m_sElvineFlagCount++;
					m_bIsAresdenFlagCaptured = false;
					for (int i = 0; i < DEF_MAXCLIENTS; i++) if (m_pClientList[i] != 0) SendNotifyMsg(0, i, DEF_NOTIFY_ELVINEWINSROUND, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					if (m_sElvineFlagCount == 5) {
						EndCaptureTheFlag(2);
					}
				}
			}
		} else RequestTeleportHandler(iClientH, "2   ", "elvine", -1, -1);
	} else if ((m_pClientList[iClientH]->m_sX == 151) && (m_pClientList[iClientH]->m_sY == 128))//Aresden Flag Cords
	{
		if (m_pClientList[iClientH]->m_iLevel >= 120) {
			if (m_pClientList[iClientH]->m_cSide == 2) //Elvine Side
			{
				if ((!m_bIsElvineFlagCaptured) && (!m_bIsAresdenFlagCaptured)) //Elvine Capture Aresden Flag
				{
					PutLogList("Capture The Flag: Elvine Captured Aresden Flag!");
					SetFlagCarrierFlag(iClientH, true);
				}
			} else //Aresden Side
			{
				if ((m_bIsElvineFlagCaptured) && (!m_bIsAresdenFlagCaptured)) {
					PutLogList("Capture The Flag: Aresden wins this round!");
					m_sAresdenFlagCount++;
					m_bIsElvineFlagCaptured = false;
					for (int i = 0; i < DEF_MAXCLIENTS; i++) if (m_pClientList[i] != 0) SendNotifyMsg(0, i, DEF_NOTIFY_ARESDENWINSROUND, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
					if (m_sAresdenFlagCount == 5) {
						EndCaptureTheFlag(1);
					}
				}
			}
		} else RequestTeleportHandler(iClientH, "2   ", "aresden", -1, -1);
	}
}

bool CGame::bCheckIfIsFlagCarrier(int iClientH) {
	if (!m_bIsCTFMode) return false;
	if (m_iFlagCarrierIndex == -1) return false;
	if (m_pClientList[iClientH] == 0) return false;
	if (iClientH == m_iFlagCarrierIndex) return true;
	else return false;
}

void CGame::SetFlagCarrierFlag(int iClientH, bool bFlagMode) {
	if (!m_bIsCTFMode) return;
	if (m_pClientList[iClientH] == 0) return;
	if (bFlagMode) {
		PutLogList("Capture The Flag: New Flag Carrier!");
		m_iFlagCarrierIndex = iClientH;
		if (m_pClientList[iClientH]->m_cSide == 1) {
			m_bIsElvineFlagCaptured = true;
			for (int i = 0; i < DEF_MAXCLIENTS; i++) if (m_pClientList[i] != 0) SendNotifyMsg(0, i, DEF_NOTIFY_ARESDENCAPTUREDELVINEFLAG, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		} else {
			m_bIsAresdenFlagCaptured = true;
			for (int i = 0; i < DEF_MAXCLIENTS; i++) if (m_pClientList[i] != 0) SendNotifyMsg(0, i, DEF_NOTIFY_ELVINEFLAGBACKTOCH, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		}
		m_pClientList[iClientH]->m_iEnemyKillCount += 20;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_ENEMYKILLREWARD, iClientH, 0, 0, 0);
		if (m_pClientList[iClientH]->m_cSide == 1) m_pClientList[iClientH]->m_iStatus = m_pClientList[iClientH]->m_iStatus | 0x80000; //Aresden Flag
		else if (m_pClientList[iClientH]->m_cSide == 2) m_pClientList[iClientH]->m_iStatus = m_pClientList[iClientH]->m_iStatus | 0x40000; //Elvine Flag
	} else {
		PutLogList("Capture The Flag: Flag Carrier Reset.");
		m_iFlagCarrierIndex = -1;
		if (m_pClientList[iClientH]->m_cSide == 1) {
			m_bIsElvineFlagCaptured = false;
			for (int i = 0; i < DEF_MAXCLIENTS; i++) if (m_pClientList[i] != 0) SendNotifyMsg(0, i, DEF_NOTIFY_ELVINECAPTUREDARESDENFLAG, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		} else {
			m_bIsAresdenFlagCaptured = false;
			for (int i = 0; i < DEF_MAXCLIENTS; i++) if (m_pClientList[i] != 0) SendNotifyMsg(0, i, DEF_NOTIFY_ARESDENFLAGBACKTOCH, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		}
		m_pClientList[iClientH]->m_iStatus = m_pClientList[iClientH]->m_iStatus | 0x00001000;
	}
}

void CGame::EndCaptureTheFlag(int iOption) {
	if (!m_bIsCTFMode) return;
	int i;
	switch (iOption) {
		case 0://Finished by GM
			for (i = 0; i < DEF_MAXCLIENTS; i++) if (m_pClientList[i] != 0) SendNotifyMsg(0, i, DEF_NOTIFY_TIECTF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			_CreateCTFGUID(0);
			break;
		case 1://Aresden Win
			for (i = 0; i < DEF_MAXCLIENTS; i++) if (m_pClientList[i] != 0) SendNotifyMsg(0, i, DEF_NOTIFY_ARESDENWINCTF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			_CreateCTFGUID(1);
			break;
		case 2://Elvine Win
			for (i = 0; i < DEF_MAXCLIENTS; i++) if (m_pClientList[i] != 0) SendNotifyMsg(0, i, DEF_NOTIFY_ELVINEWINCTF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			_CreateCTFGUID(2);
			break;
	}
}

void CGame::_CreateCTFGUID(int iWinnerSide) {
	char * cp, cTxt[256], cFn[256], cTemp[1024];
	FILE * pFile;
	_mkdir("GameData");
	std::memset(cFn, 0, sizeof(cFn));
	strcat(cFn, "GameData");
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "CTFGUID.Txt");
	pFile = fopen(cFn, "wt");
	if (pFile == 0) {
		PutLogList("(!) Cannot create CTFGUID(%d) file");
	} else {
		std::memset(cTemp, 0, sizeof(cTemp));
		std::memset(cTxt, 0, sizeof(cTxt));
		wsprintf(cTxt, "winner-side = %d\n", iWinnerSide);
		strcat(cTemp, cTxt);
		cp = (char *) cTemp;
		fwrite(cp, strlen(cp), 1, pFile);
		PutLogList("(O) CTFGUID(%d) file created");
	}
	if (pFile != 0) fclose(pFile);
}

void CGame::CheckDenialServiceAttack(int iClientH, uint32_t dwClientTime) {
	uint32_t dwTime = timeGetTime();
	if (m_pClientList[iClientH] == 0) return;
	// Find a Denial of service attack by packet sent time
	if (m_pClientList[iClientH]->m_dwDSLAT == 0)
		// Start with 1st msg
	{
		m_pClientList[iClientH]->m_dwDSLAT = dwClientTime;
		m_pClientList[iClientH]->m_dwDSLATOld = dwClientTime;
		m_pClientList[iClientH]->m_dwDSLATS = dwTime;
		m_pClientList[iClientH]->m_iDSCount = 0;
	} else {
		if (dwClientTime >= m_pClientList[iClientH]->m_dwDSLAT)
			// current message was sent later than previous (normal case)
		{
			m_pClientList[iClientH]->m_dwDSLAT = dwClientTime;
		} else
			// current message was sent before previous
		{
			if (m_pClientList[iClientH]->m_dwDSLATOld == dwClientTime)
				// If we receive more late msg with same time
			{
				m_pClientList[iClientH]->m_iDSCount++;
				if (((dwTime - m_pClientList[iClientH]->m_dwDSLATS) > 10 * 1000)
						  && (m_pClientList[iClientH]->m_iDSCount > 5))
					// Receiving a "late" msg more than 10 sec after !
					// This is an attack!
				{
					wsprintf(G_cTxt, "DS check: PC(%s) - Denial of service attack! (Disc.) \tIP(%s)"
							  , m_pClientList[iClientH]->m_cCharName
							  , m_pClientList[iClientH]->m_cIPaddress);
					PutHackLogFileList(G_cTxt);
					PutLogList(G_cTxt);
					return;
				}
			} else
				// else this message become late msg
			{
				m_pClientList[iClientH]->m_dwDSLATOld = dwClientTime;
				m_pClientList[iClientH]->m_iDSCount = 1;
				m_pClientList[iClientH]->m_dwDSLATS = dwTime;
			}
		}
	}
}
/*50Cent - 100% Skill
void CGame::PlayerOrder_GetSkills(int iClientH) {
	int i;
	for (i = 0; i < 23; i++) {
		m_pClientList[iClientH]->m_cSkillMastery[i] = 100;
		SendNotifyMsg(0, iClientH, DEF_NOTIFY_SKILL, i, m_pClientList[iClientH]->m_cSkillMastery[i], 0, 0);
	}
	ShowClientMsg(iClientH, "Enjoy your new skills!");
}*/